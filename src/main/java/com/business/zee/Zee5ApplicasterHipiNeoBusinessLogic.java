package com.business.zee;

import java.awt.RenderingHints.Key;
import java.awt.Robot;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.math3.geometry.spherical.oned.S1Point;
import org.apache.http.impl.conn.tsccm.WaitingThread;
import org.apache.logging.log4j.core.config.AwaitUnconditionallyReliabilityStrategy;
import org.json.JSONObject;
import org.json.XML;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Point;
import org.openqa.selenium.ScreenOrientation;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Keyboard;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.asserts.SoftAssert;


import com.deviceDetails.DeviceDetails;
import com.driverInstance.DriverInstance;
import com.emailReport.GmailInbox;

import com.excel.Time_ExcelUpdate;
import com.excel.WriteDataCSV;
import com.extent.ExtentReporter;
import com.hipi.AndroidMPWAPages.MPWADiscoverPage;
import com.hipi.AndroidMPWAPages.MPWAHomePage;
import com.propertyfilereader.PropertyFileReader;
import com.utility.LoggingUtils;
import com.utility.Utilities;
import com.zee5.AndroidHipiPages.HipiAddMusicPage;
import com.zee5.AndroidHipiPages.HipiAppUpgrade;
import com.zee5.AndroidHipiPages.HipiCreateVideoPage;
import com.zee5.AndroidHipiPages.HipiDiscoverPage;
import com.zee5.AndroidHipiPages.HipiEffectPage;
import com.zee5.AndroidHipiPages.HipiFeedPage;
import com.zee5.AndroidHipiPages.HipiHashtagDetailPage;
import com.zee5.AndroidHipiPages.HipiLoginPage;
import com.zee5.AndroidHipiPages.HipiNotificationPage;
import com.zee5.AndroidHipiPages.HipiProfilePage;
import com.zee5.AndroidHipiPages.HipiRewardsV2Page;
import com.zee5.AndroidHipiPages.HipiSettingsPage;
import com.zee5.AndroidHipiPages.HipiShareScreen;
import com.zee5.AndroidHipiPages.HipiShopPage;
import com.zee5.AndroidHipiPages.HipiSoundDetailPage;
import com.zee5.Applicaster.HIPI.AMDHipi;
import com.zee5.Applicaster.HIPI.AMDHomePage;
import com.zee5.Applicaster.HIPI.AMDLoginScreen;
import com.zee5.Applicaster.HIPI.AMDMoreMenu;
import com.zee5.Applicaster.HIPI.AMDOnboardingScreen;
import com.zee5.Applicaster.HIPI.AMDShopPage;
import com.zee5.Applicaster.HIPI.HipiHomePage;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.android.AndroidTouchAction;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.touch.LongPressOptions;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.ElementOption;
import io.appium.java_client.touch.offset.PointOption;
import io.restassured.path.json.JsonPath;

public class Zee5ApplicasterHipiNeoBusinessLogic  extends Utilities{

	public Zee5ApplicasterHipiNeoBusinessLogic(String Application) {
		new DriverInstance(Application);
		init();
	}
	WriteDataCSV read = new WriteDataCSV();
	public SoftAssert softAssert = new SoftAssert();

	private int timeout;

	/** Retry Count */
	private int retryCount;
	static ExtentReporter extent = new ExtentReporter();

	/** The Constant logger. */
	// final static Logger logger = Logger.getLogger("rootLogger");
	static LoggingUtils logger = new LoggingUtils();

	/** The Android driver. */
	public AndroidDriver<AndroidElement> androidDriver;

	/** The Android driver. */
	public IOSDriver<WebElement> iOSDriver;

	@Override
	public int getTimeout() {
		return timeout;
	}

	String pUserType = getParameterFromXML("userType");

	/** Array of App */
	static ArrayList<String> AppMyProfile = new ArrayList<String>();
	static HashSet<String> contentsInWatchList = new HashSet<String>();
	static HashSet<String> contentsInReminders = new HashSet<String>();
	static ArrayList<String> AppSubscription = new ArrayList<String>();
	static ArrayList<String> AppTransaction = new ArrayList<String>();

	@Override
	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

	@Override
	public int getRetryCount() {
		return retryCount;
	}

	@Override
	public void setRetryCount(int retryCount) {
		this.retryCount = retryCount;
	}

	GmailInbox gmail = new GmailInbox();

	String SVODEpisode = getParameterFromXML("SVODEpisode");

	public void init() {

		PropertyFileReader handler = new PropertyFileReader("properties/Execution.properties");
		setTimeout(Integer.parseInt(handler.getproperty("TIMEOUT")));
		setRetryCount(Integer.parseInt(handler.getproperty("RETRY_COUNT")));
		// logger.info("Loaded the following properties" + " TimeOut :" +
		// getTimeout() + " RetryCount :" + getRetryCount());
	}

	/**
	 * Function to Relaunch the driver
	 */
	public void relaunch(boolean clearData) throws Exception {
		HeaderChildNode("Relaunch the app");
		logger.info("Relaunching the application");
		extent.extentLogger("Relaunch", "Relaunching the application");
		waitTime(5000);
		getDriver().quit();
		relaunch = clearData;
		new com.business.zee.Zee5ApplicasterHipiNeoBusinessLogic("zee");
//		waitUntilElementDisplayed(HipiLoginPage.objMaybeLater, 1);
		if(verifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))
		{
			TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");
			System.out.println("Update Popup is displayed");
		}else{
			System.out.println("Update Popup is not displayed");
		}
	}

	/**
	 * Function to quit the driver
	 */
	public void tearDown() {
		getDriver().quit();

		String pUserType = getParameterFromXML("userType");
		String RegisteredEmail = getParameterFromXML("RegisteredEmail");
		String RegisteredEmailPassword = getParameterFromXML("RegisteredEmailPassword");
		String UnRegisteredMobile = getParameterFromXML("UnRegisteredMobile");
		String RegisteredMobile = getParameterFromXML("RegisteredMobile");
		String RegisteredMobilePassword = getParameterFromXML("RegisteredMobilePassword");
		String PromoCode = getParameterFromXML("PromoCode");
		String NonsubscribedUserName = getParameterFromXML("NonsubscribedUserName");
		String NonsubscribedPassword = getParameterFromXML("NonsubscribedPassword");
		String SubscribedUserName = getParameterFromXML("SubscribedUserName");
		String SubscribedPassword = getParameterFromXML("SubscribedPassword");
		String FirstName = getParameterFromXML("FirstName");
		String LastName = getParameterFromXML("LastName");

	}

	// Retrieve the Mobile Device Name
	String getOEMName = DeviceDetails.OEM;

	public void accessDeviceLocationPopUp(String permission, String userType) throws Exception {
		extent.HeaderChildNode("Access Device Location PopUp");

		extent.extentLogger("User Type", "UserType : " + userType);
		logger.info("UserType : " + userType);
		System.out.println("Access Device Location PopUp");
		Thread.sleep(10000);

		//TEMP
		if(verifyElementExist(AMDOnboardingScreen.objUpdateZee5PopUpNOTHANKSButton, "NO THANKS Button"))
		{
			click(AMDOnboardingScreen.objUpdateZee5PopUpNOTHANKSButton, "NO THANKS Button");
		}else{
			System.out.println("UpdateZee5 Not displayed");
		}
		
		Thread.sleep(3000);
		
		
		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {
			Wait(5000);

			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);
			System.out.println(str1);
			System.out.println(str2);

			if (str1.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			} else if (str1.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			} else if (str2.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.ele1Allow(str2), str2);
			} else if (str2.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.ele1Allow(str2), str2);
			} else if (str1.contains("WHILE USING THE APP")) {
				System.out.println("WHILE USING THE APP is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			}

			Thread.sleep(10000);
		} else {
			System.out.println("Access Device Location PopUp not displayed");
		}

		// if
		// (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup,"AllowPopup"))
		// {
		// Wait(5000);
		// verifyElementPresent(AMDOnboardingScreen.objLocationAccessAllowOption,
		// "Allow button");
		// verifyElementPresent(AMDOnboardingScreen.objLocationAccessDenyOption,
		// "Deny button");
		//
		// if (permission.equalsIgnoreCase("Allow")) {
		// click(AMDOnboardingScreen.objLocationAccessAllowOption, "Allow
		// button");
		//
		// } else {
		// click(AMDOnboardingScreen.objLocationAccessDenyOption, "Deny
		// button");
		// }
		//
		// }else{
		// System.out.println("Access Device Location PopUp not displayed");
		// }

	}
	
	

	
	public void AllowPermission() throws Exception {
		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {
			Wait(5000);

			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);
			//System.out.println(str1);
			//System.out.println(str2);

			if (str1.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			} else if (str1.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			} else if (str2.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.ele1Allow(str2), str2);
			} else if (str2.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.ele1Allow(str2), str2);
			}

			Thread.sleep(10000);
		} else {
			System.out.println("Access permission PopUp not displayed");
		}
	}

	public void VerifyLoginWithEmailId(String userType) throws Exception {
		extent.HeaderChildNode("Login With Email-ID");
		System.out.println("HiPi_Reg_007");
		extent.extentLogger("", "HiPi_Reg_007");
		// String pUserType = getParameterFromXML("userType");
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			verifyElementPresentAndClick(AMDLoginScreen.objGoogleBtn, "Gmail icon");
			verifyElementPresentAndClick(AMDLoginScreen.objgoogleaccount, "google account");

			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("User logged in successfully");
				extent.extentLoggerPass("Login", "User logged in successfully");

				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				Swipe("UP", 2);

				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");

			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLoggerWarning("Gmail", "Pre conditions not met, Account is not logged In");
				Back(1);
			}

			extent.extentLogger("", "Twitter");
			verifyElementPresentAndClick(AMDLoginScreen.objtwitterBtn, "Twitter icon");
			waitTime(5000);
			// if (checkElementExist(AMDOnboardingScreen.objTellUsMore, "More
			// info Screen")) {
			if (checkElementExist(AMDLoginScreen.objEmailIdField, "Email Id field")) {
				type(AMDLoginScreen.objEmailIdField, "zee5latest@gmail.com", "Email Id field");
				verifyElementPresentAndClick(AMDLoginScreen.objpassworldField, "Twitter page");
				type(AMDLoginScreen.objpassworldField, "User@123", "Password Id field");
				verifyElementPresentAndClick(AMDLoginScreen.objTwitterloginButton, "loginbutton");
				click(AMDLoginScreen.objTwitterAuthorizeAllow, "Authorize app");
				Thread.sleep(8000);
				// if
				// (checkElementExist(AMDLoginScreen.objTwitterAuthorizeAllow,
				// "Authorize
				// app")) {
				// click(AMDLoginScreen.objTwitterAuthorizeAllow, "Authorize
				// app");
			} else {
				click(AMDLoginScreen.objTwitterAuthorizeAllow, "Authorize app");
				Thread.sleep(10000);
			}

			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("User logged in successfully");
				extent.extentLogger("Login", "User logged in successfully");
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				Swipe("UP", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLoggerWarning("Twitter", "Pre conditions not met, Account is not logged In");
				Back(1);
			}

			extent.extentLogger("", "Facebook");
			verifyElementPresentAndClick(AMDLoginScreen.objfbBtn, "Facebook icon");
			waitTime(5000);
			
			if (checkElementExist(AMDLoginScreen.objFBEmail, "Email Id field")) {
			type(AMDLoginScreen.objFBEmail, "krisarorec1047@gmail.com", "Email Id field");
			verifyElementPresentAndClick(AMDLoginScreen.objFBPassword, "facebook page");
			type(AMDLoginScreen.objFBPassword, "Krishna19@", "Password Id field");
			verifyElementPresentAndClick(AMDLoginScreen.objFBLoginBtn, "loginbutton");
			}else {
				
			}

			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("User logged in successfully");
				extent.extentLoggerPass("Login", "User logged in successfully");
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				Swipe("UP", 1);

				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				// verifyElementPresentAndClick(AMDMoreMenu.objProfile,
				// "Login/Register");

			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLoggerWarning("Facebook", "Pre conditions not met, Account is not logged In");
				Back(1);
				Back(1);
			}
		}
	}

	public void LoginAndNivigateToHipi(String loginMethod) throws Exception {

        extent.HeaderChildNode("Login Functionality");

        String pUserType = getParameterFromXML("userType");

 

        extent.extentLogger("Login Type", "Login Type : " + pUserType);

 

        switch (loginMethod) {

        case "Guest":

            extent.HeaderChildNode("Guest User");

            extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");

            waitTime(5000);

            if(verifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))

            {

                TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");

                System.out.println("Update Popup is displayed");

            }else{

                System.out.println("Update Popup is not displayed");

            }

            waitUntilElementDisplayed(HipiHomePage.objForYou, 10);

            break;

 

        case "NonSubscribedUser":

            // navigateToIntroScreen_DisplaylangScreen();

            Time_ExcelUpdate.TestCaseIDNode("TC002");

//            Time_ExcelUpdate.SlNoNode("2");

            Time_ExcelUpdate.ModuleNode("Login Module");

            Time_ExcelUpdate.TestCaseSummaryNode1("Login Time");

            

            extent.HeaderChildNode("Launching hipi app");

            waitTime(10000);

            if(verifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))

            {

                TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");

                System.out.println("Update Popup is displayed");

            }else{

                System.out.println("Update Popup is not displayed");

            }

//            extent.HeaderChildNode("NonSubscribed User");

            

            

//            waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);

//            //click on Profile icon

//            verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");

//            waitTime(4000);

//            verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");

//            

//            String Username = getParameterFromXML("NonsubscribedUserName");

//            String Password = getParameterFromXML("NonsubscribedPassword");

//            

//            waitTime(5000);

////            hideKeyboard();

//            verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");

//            

//            type(AMDLoginScreen.objEmailIdField, Username, "Email Field");

//            hideKeyboard();

//            

//            verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");

////            hideKeyboard();

//

//            type(AMDLoginScreen.objPasswordField, Password, "Password field");

////            

//            hideKeyboard();

//            verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");

//            Instant start=Instant.now();

//            logger.info("Start Time : " + start);

//            extent.extentLogger("", "<b>Start Time : " + start+"<b>");

//        if (waitUntilElementDisplayed(HipiHomePage.objForYou, 2000)) {

//                logger.info("User is able to see Home screen");

//                extent.extentLogger("", "User is able to see Home screen");

//                Instant end=Instant.now();

//                logger.info("End Time : " + end);

//                extent.extentLogger("", "<b>End Time : " + end+"<b>");

//                Duration processingTime = Duration.between(start, end);

//                logger.info("Processing time: " + processingTime);

//                extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");

//                String Processingtimesec=Long.toString(processingTime.getSeconds());

//                String Processingtimemilli=Long.toString(processingTime.toMillis());    

//                Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds, "+"----"+Processingtimemilli+"  milliSeconds");

//

////                extent.HeaderChildNode("<b>Processing time: " + processingTime+"<b>");

//            }

//            else {

//                logger.error("Processing time calculation failed");

//                extent.extentLoggerFail("", "Processing time calculation failed");

//            }

//        

//    

//            waitUntilElementDisplayed(HipiHomePage.objForYou, 10);

//            //click on feed button

//            verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");

//            

            waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);

            //click on Profile icon

            verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");

            for(;;) {

                

                     if (verifyElementExist(HipiHomePage.objHomeIcon, "Home Button")) {

                         waitTime(3000);

                         break ;

                         }else {

                             waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);

                             verifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");

 

                             waitUntilElementDisplayed(HipiLoginPage.objGoogleAccount, 20);

                                     

                              verifyElementPresentAndClick(HipiLoginPage.objGoogleAccount, "Google Account");

                                

                                

//                              if(waitUntilElementDisplayed(HipiLoginPage.objDoneCTASelectGenderPage, 1)) {

//                                  verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");

//                                   waitTime(4000);

//                                   verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");

//                                  click(HipiLoginPage.objDoneCTASelectGenderPage, "Done CTC");

//                                  

//                              }else {

//                                  logger.info("User is unable to see select gender screen");

//                              }

//                             verifyElementPresentAndClick(HipiLoginPage.objGoogleAccount,"Google Account");

//                             waitUntilElementDisplayed(HipiHomePage.objHomeIcon, 5);

//                             verifyElementPresent(HipiHomePage.objHomeIcon, "Home ICON");

                         }

            

            

            }

            

            

            

            

            //New Login With Gmail

            

//            waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);

//            //click on Profile icon

//            verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");

//            

//            

//            

//            

//            waitUntilElementDisplayed(HipiLoginPage.objSignUpScreenTittle, 2);

//            verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");

//            String Username = getParameterFromXML("NonsubscribedUserName");

//            String Password = getParameterFromXML("NonsubscribedPassword");

//            type(HipiLoginPage.objEmailIDOrMobileNumberFileld , Username ,"value");

//            verifyElementPresentAndClick(HipiLoginPage.objProceedButton, "Proceed CTA");

//            waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPHeader, 2);

//             verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword,"Login with Password button");

//            waitUntilElementDisplayed(AMDLoginScreen.objPasswordField, 2);

////            hideKeyboard();

//            

//            verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");

////            hideKeyboard();

//

//            type(AMDLoginScreen.objPasswordField, Password, "Password field");

////            

//            hideKeyboard();

//            verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");

//                     

//            Instant start=Instant.now();

//            logger.info("Start Time : " + start);

//            extent.extentLogger("", "<b>Start Time : " + start+"<b>");

//        if (waitUntilElementDisplayed(HipiHomePage.objForYou, 2000)) {

//                logger.info("User is able to see Home screen");

//                extent.extentLogger("", "User is able to see Home screen");

//                Instant end=Instant.now();

//                logger.info("End Time : " + end);

//                extent.extentLogger("", "<b>End Time : " + end+"<b>");

//                Duration processingTime = Duration.between(start, end);

//                logger.info("Processing time: " + processingTime);

//                extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");

//                String Processingtimesec=Long.toString(processingTime.getSeconds());

//                String Processingtimemilli=Long.toString(processingTime.toMillis());    

//                Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds, "+"----"+Processingtimemilli+"  milliSeconds");

//

////                extent.HeaderChildNode("<b>Processing time: " + processingTime+"<b>");

//            }else {

//                logger.error("Processing time calculation failed");

//                extent.extentLoggerFail("", "Processing time calculation failed");

//            }

//        waitUntilElementDisplayed(HipiHomePage.objForYou, 5);

//

//        verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");

            

 

            break;

 

        case "SubscribedUser":

            // navigateToIntroScreen_DisplaylangScreen();

            extent.HeaderChildNode("Login as Subscribed User");

            verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for free");

            String SubscribedUsername = getParameterFromXML("SubscribedUserName");

            String SubscribedPassword = getParameterFromXML("SubscribedPassword");

 

            Thread.sleep(5000);

 

            hideKeyboard();

            Thread.sleep(5000);

            click(AMDLoginScreen.objEmailIdField, "Email field");

            // getDriver().getKeyboard().sendKeys(Username);

            hideKeyboard();

            type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");

            verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");

            verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");

            type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");

            hideKeyboard();

            verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");

            waitTime(9000);

 

            if (verifyElementExist(AMDOnboardingScreen.objHipiButton, "HiPi")) {

                click(AMDOnboardingScreen.objHipiButton, "HiPi");

                Thread.sleep(6000);

 

            } else {

 

            }

 

            break;

        }

    }    
	public String getDateDetails(Date date) throws Exception {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateString = dateFormat.format(date).toString();
		return dateString;
	}	
	
	public String getDateDifference(Date startDate, Date endDate) throws Exception {
		long duration = endDate.getTime() - startDate.getTime();
		long diffInMilliSeconds = TimeUnit.MILLISECONDS.toMillis(duration);
		int milliSeconds = (int) Math.floorMod(diffInMilliSeconds, 1000);
		int seconds = (int) (diffInMilliSeconds / 1000);
		int mins = 0;
		if (seconds >= 60) {
			mins = seconds / 60;
			seconds = Math.floorMod(seconds, 60);
		}
		return mins + "m, " + seconds + "s, " + milliSeconds + "ms";
	}
	public void loginloop(String userType) throws Exception {
		
		extent.HeaderChildNode("NonSubscribed User");
		
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 2000);
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		String Username = getParameterFromXML("NonsubscribedUserName");
		String Password = getParameterFromXML("NonsubscribedPassword");
		
//		Thread.sleep(5000);
//		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		
		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		hideKeyboard();
		
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//		hideKeyboard();

		type(AMDLoginScreen.objPasswordField, Password, "Password field");
//		
		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		
		waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
		//click on feed button
		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
			
		logOut();
		
	
	}

	
//---------------------------------------------Kartheek-----------------------------------------------------------------------	

//======================================Shop Button====================================================================
	
	

	
	public void shopValidation__T184__T220(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T184 - Guest User- Verify the SHOP button on the feed and its clickble");
			System.out.println("T184");
			extent.extentLogger("SHOP button", "T184");
			}else {
				extent.HeaderChildNode("T220 - Logged In User- Verify the SHOP button on the feed and its clickble");
				System.out.println("T220");
				extent.extentLogger("Shop >In app Browser", "T220");
			}
	
		SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");

		waitTime(3000);
			
			if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
				logger.info("User is able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerPass("Shop", "User is able to see SHOP button on the video below the screen beside discovery icon");
			}else {
				logger.info("User is not able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerFail("Shop", "User is not able to see SHOP button on the video below the screen beside discovery icon");
			}
			navigateToHomePage();
	}
	
	
	public void userWatchingShoppableVideos__T186__T222(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T186 - (Guest User-Verify for shop button should display only while user watching shoppable videos.)");
			System.out.println("T186");
			extent.extentLogger("SHOP button", "T186");	
			}else {
				extent.HeaderChildNode("T222 - (Logged In User-Verify for shop button should display only while user watching shoppable videos.)");
				System.out.println("T222");
				extent.extentLogger("Shop >In app Browser", "T222");
			}
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
			verifyElementPresent(HipiHomePage.objForYou, "For You");
			
			if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
				logger.info("User is able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerPass("Shop", "User is able to see SHOP button on the video below the screen beside discovery icon");
			}else {
				logger.info("User is not able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerFail("Shop", "User is not able to see SHOP button on the video below the screen beside discovery icon");
			}
			navigateToHomePage();
		}
	
	
	public void clickableFunctionalityOnShopButton__T185__T221(String userType) throws Exception{
			
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T185 - (Guest User- Verify for the clickable functionality on Shop button.)");
			System.out.println("T185");
			extent.extentLogger("SHOP button", "T185");	
			}else {
				extent.HeaderChildNode("T221 - (Logged In -Verify for the clickable functionality on Shop button.)");
				System.out.println("T221");
				extent.extentLogger("Shop >In app Browser", "T221");
			}
		
//		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
		navigateHomeandClickonShop();
		click(HipiHomePage.objShopButton, "shop Button");
		if (verifyElementExist(AMDShopPage.objInThisVideo,"In This Video option")) {
			logger.info("The SHOP button is cliackble");	
			extent.extentLoggerPass("SHOP button", "The SHOP button is cliackble");
		}else {
			logger.info("The SHOP button is not cliackble");	
			extent.extentLoggerFail("SHOP button", "The SHOP button is not cliackble");
		}
		navigateToHomePage();
		}	
	
	public void shopButtonDisplayedComingFromAnyOtherTabs__T188__T224(String userType) throws Exception {
		

		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T188 - (Guest User-Verify for user should be able to see Shop button when they coming from any other tabs (Discover/Me) and watching shoppable video.)");
			System.out.println("T188");
			extent.extentLogger("SHOP button", "T188");	
			}else {
				extent.HeaderChildNode("T224 - (Logged In User- Verify for user should be able to see \"Shop\" button when they coming from any other tabs (Discover/Me) and watching shoppable video.)");
				System.out.println("T224");
				extent.extentLogger("Shop >In app Browser", "T224");
			}
//		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
		navigateHomeandClickonShop();
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		
		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
		
		SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
		waitTime(2000);
		if(verifyElementExist(HipiHomePage.objShopButton, "Shop Button")) {
			logger.info("user is able to see Shop button when they coming from any other tabs (Discover/Me) and watching shoppable video.");	
			extent.extentLoggerPass("Shop", "user is able to see Shop button when they coming from any other tabs (Discover/Me) and watching shoppable video.");
		}else {
			logger.info("user is not able to see Shop button when they coming from any other tabs (Discover/Me) and watching shoppable video.");	
			extent.extentLoggerFail("Shop", "user is not able to see Shop button when they coming from any other tabs (Discover/Me) and watching shoppable video.");
		}
		navigateToHomePage();
		}
	
	
		public void shopButtonShouldNotVisibleWhenUserInotherTab__T189__T225(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T189 - (Guest User-Verify for Shop button should not Visible when user in other tab like Discover/Creator/Me Pages)");
				System.out.println("T189");
				extent.extentLogger("SHOP button", "T189");	
				}else {
					extent.HeaderChildNode("T225 - (Logged In user-Verify for Shop button should not Visible when user in other tab like Discover/Creator/Me)");
					System.out.println("T225");
					extent.extentLogger("Shop >In app Browser", "T225");
				}
			
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		if(verifyElementExist(HipiHomePage.objShopButton, "Shop Button")) {
			logger.info(" Shop button is Visible when user in other tab like Discover/Creator/Me");	
			extent.extentLoggerFail("Shop", " Shop button is Visible when user in other tab like Discover/Creator/Me");
		}else {
			logger.info(" Shop button is not Visible when user in other tab like Discover/Creator/Me");	
			extent.extentLoggerPass("Shop", " Shop button is not Visible when user in other tab like Discover/Creator/Me");	
		}
		navigateToHomePage();
			}
	 

	public void  userRedirectToShopPage__T190__T226(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T190 - (Guest User -Verify for SHOP button click and redirection)");
			System.out.println("T190");
			extent.extentLogger("SHOP button", "T190");	
			}else {
				extent.HeaderChildNode("T226  - (Logged In user- Verify for SHOP button click and redirection)");
				System.out.println("T226");
				extent.extentLogger("SHOP button", "T226");	
			}

//		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
		navigateHomeandClickonShop();
		click(HipiHomePage.objShopButton, "Shop Button");
		if (verifyElementExist(AMDShopPage.objInThisVideo,"In This Video")) {
			logger.info("User is able to redirect to Shop Page ");	
			extent.extentLoggerPass("SHOP button", "User is able to redirect to Shop Page ");
		}else {
			logger.info("User is not able to redirect to Shop Page ");	
			extent.extentLoggerFail("SHOP button", "User is not able to redirect to Shop Page ");
		}
		navigateToHomePage();
		}
	

	public void nonShopableVideoValidation__T187__T223(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("Nonsubscribeduser")) {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User -Verify for shop button should NOT display while watching Non-shoppable videos.");
			System.out.println("T187");
			extent.extentLogger("SHOP button", "T187");
			}else {
				extent.HeaderChildNode("Logged In User -Verify for shop button should NOT display while watching Non-shoppable videos.");
				System.out.println("T223");
				extent.extentLogger("SHOP button", "T223");	
			}
		
		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
		waitTime(4000);
		// for(int i=1; i<=15; i++) {
//			 
//		 		if (verifyElementExist(HipiHomePage.objShopButton, "Shop Button")) {
//		 			waitTime(3000);
//		 			for(int i=1; i<=15; i++) {
//		 			Swipe("UP", 1);
//		 			break ;
//		 			}
//		 			logger.info("Non shopable video  is not appear");	
//					extent.extentLoggerWarning("SHOP button", "Non shopable video  is not appear");		
//					}else {
//						logger.info("The SHOP button is not appear for non shopable video");	
//						extent.extentLoggerWarning("SHOP button", "The SHOP button is not appear for non shopable video");			
//						waitTime(3000);
//						
//					}
		for (int i = 1; i <=15; i++) {
			if (((verifyIsElementDisplayed(HipiHomePage.objShopButton)))) {
				Swipe("UP", 1);
			} else {
				logger.info("The SHOP button is not appear for non shopable video");	
				extent.extentLoggerWarning("SHOP button", "The SHOP button is not appear for non shopable video");			
				waitTime(3000);
				break;
		}
		 	
	}
		navigateToHomePage();
}
	}
	
	
	public void  saveLooksButtonForNonShoppableVideos__T213__T249(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User- Verify for save looks button for Non-shoppable videos");
			System.out.println("T213");
			extent.extentLogger("SHOP button", "T213");
			}else {
				extent.HeaderChildNode("Logged In user- Verify for save looks button for Non-shoppable videos");
				System.out.println("T249");
				extent.extentLogger("SHOP button", "T249");	
			}
		
		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
		waitTime(4000);
		for (int i = 1; i <=15; i++) {
			if (((verifyIsElementDisplayed(HipiHomePage.objShopButton)))) {
				Swipe("UP", 1);
			} else {
				logger.info("The SHOP button is not appear for non shopable video");	
				extent.extentLoggerWarning("SHOP button", "The SHOP button is not appear for non shopable video");			
//			if (verifyElementExist(HipiHomePage.objSaveLook, "Save Look CTA")) {
//				logger.info("Save looks icon is present for Non-shoppable videos.");	
//				extent.extentLoggerFail("SHOP", "Save looks icon is present for Non-shoppable videos.");	
//			}else {
//				logger.info("Save looks icon is not present for Non-shoppable videos.");	
//				extent.extentLoggerPass("SHOP button", "Save looks icon is not present for Non-shoppable videos.");
//			}
				break;
		}
		
		}
	}
	
		public void scrollsTheVideoForFewMins__T191__T227(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T191 - Guest User -Verify for shop button is present if user scrolls the video for few mins and play the shoppable video.");
				System.out.println("T191");
				extent.extentLogger("SHOP button", "T191");
				}else {
					extent.HeaderChildNode("T227 - Logged In User- Verify for shop button is present if user scrolls the video for few mins and play the shoppable video.");
					System.out.println("T227");
					extent.extentLogger("SHOP button", "T227");
				}
//	
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
			waitTime(3000);
			String description = getText(HipiHomePage.objDescription);
			waitTime(5000);
			Swipe("UP", 5);
			waitTime(5000);
			Swipe("DOWN", 5);
			waitTime(5000);
			String description1 = getText(HipiHomePage.objDescription);
			if (description.equals(description1)) {
				logger.info("User return back to same shopable video");	
				extent.extentLoggerPass("SHOP button", "User return back to same shopable video");
			}else {
				logger.info("User is not  return back to same shopable video");	
				extent.extentLoggerFail("SHOP button", "User is not  return back to same shopable video");
			}
			if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
				logger.info("User is able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerPass("Shop", "User is able to see SHOP button on the video below the screen beside discovery icon");
			}else {
				logger.info("User is not able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerFail("Shop", "User is not able to see SHOP button on the video below the screen beside discovery icon");
			}
			navigateToHomePage();
			}
		
		
		public void redIndicatorShouldBeDisplayed__T202__T238(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T202 - Guest User- Verify for red indicator should be displayed on Shop button.");
				System.out.println("T202");
				extent.extentLogger("SHOP button", "T202");
				}else {
					extent.HeaderChildNode("T238 - Logged In User - Verify for red indicator should be displayed on Shop button");
					System.out.println("T238");
					extent.extentLogger("SHOP button", "T238");
				}
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//		
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Lock");
//			waitTime(3000);
			
			if (verifyElementPresent(HipiHomePage.objPINAnimationCircle, "Red Indicator")) {
				logger.info("User is get red indicator on the SHOP button ");	
				extent.extentLoggerPass("SHOP button", "User is get red indicator on the SHOP button ");
			}else {
				logger.info("User is not get red indicator on the SHOP button ");	
				extent.extentLoggerFail("SHOP button", "User is not get red indicator on the SHOP button ");
			}

			navigateToHomePage();
			}
		
		
//---------------------------------Shop page > Mini player------------------------------------------
		
		
//		private String description = null;
		public void shopPageMiniPlayer(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("Nonsubscribeduser")) {
			
//				verifyforMiniPlayer(userType);
//				navigateToHomePage(userType);
			}
		}
		
		public void verifyforMiniPlayer__T326__T337(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T326 - (Guest User -Verify for Mini Player by clcking SHOP button)");
				System.out.println("T326");
				extent.extentLogger("Shop page > Mini player", "T326");
				}else {
					extent.HeaderChildNode("T337 - (Logged In User -Verify for Mini Player by clcking SHOP button)");
					System.out.println("T337");
					extent.extentLogger("Shop page > Mini player", "T337");
				}
			
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
			
			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(3000);
			if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
				logger.info(" Mini player is appears on bottom right side of the shop page.");	
				extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
			}else {
				logger.info(" Mini player is not appears on bottom right side of the shop page.");	
				extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
			}
			navigateToHomePage();		

		}	
//		public void  miniPlayerByClckingCorouselSheet_T327__T338(String userType) throws Exception {
//		
//			if(userType.equalsIgnoreCase("Guest")) {
//				extent.HeaderChildNode("Guest User -Verify the Mini Player by clcking corousel sheet");
//				System.out.println("T327");
//				extent.extentLogger("Shop page > Mini player", "T327");
//				}else {
//					extent.HeaderChildNode("Logged In user-Verify the Mini Player by clcking corousel sheet");
//					System.out.println("T338");
//					extent.extentLogger("Shop page > Mini player", "T338");
//				}
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			click(HipiHomePage.objSaveLook, "Save Look");
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image");
//			if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
//				logger.info(" Mini player is appears on bottom right side of the shop page.");	
//				extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
//			}else {
//				logger.info(" Mini player is not appears on bottom right side of the shop page.");	
//				extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
//			}
//			navigateToHomePage();		
//		}	
			
			
			public void miniPlayerBehaviour__T329__T340(String userType) throws Exception {
		
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("Guest User-Verify the Mini Player behaviour");
					System.out.println("T329");
					extent.extentLogger("Shop page > Mini player", "T329");
					}else {
						extent.HeaderChildNode("Logged In usert- User-Verify the Mini Player behaviour");
						System.out.println("T340");
						extent.extentLogger("Shop page > Mini player", "T340");
					}
				
				SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				click(HipiHomePage.objShopButton, "Shop Button");
				waitTime(3000);
				
				
				verifyElementPresentAndClick(HipiShopPage.objMiniPlayer, "Mini player");
				waitTime(3000);
				if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
					logger.info("User is able to  make the video maximize  tapping Mini player screen");	
					extent.extentLoggerPass("Shop page > Mini player", "User is able to  make the video maximize  tapping Mini player screen");
				}else {
					logger.info("User is not able to  make the video maximize  tapping Mini player screen");	
					extent.extentLoggerFail("Shop page > Mini player", "User is not able to  make the video maximize  tapping Mini player screen");
				}
				navigateToHomePage();
			}
			
				public void closingMiniPlayerBehaviour__T330__T341(String userType) throws Exception {

					if(userType.equalsIgnoreCase("Guest")) {
						extent.HeaderChildNode("T330 , Guest User- Verify the closing Mini Player behaviour");
						System.out.println("T330");
						extent.extentLogger("Shop page > Mini player", "T330");
						}else {
							extent.HeaderChildNode("T341 , Logged In User-Verify the closing Mini Player behaviour");
							System.out.println("T341");
							extent.extentLogger("Shop page > Mini player", "T341");
						}
//					SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
					navigateHomeandClickonShop();
					click(HipiHomePage.objShopButton, "Shop Button");
					waitTime(3000);
					verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
					waitTime(4000);
					if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
						logger.info("Mini player is appeared from the shop page");	
						extent.extentLoggerFail("Shop page > Mini player", "Mini player is get disappeared from the shop page");
					}else {
						logger.info("Mini player is disappeared from the shop page");	
						extent.extentLoggerPass("", "Mini player is disappeared from the shop page");	
					}
					navigateToHomePage();
				}
		
			
		
		public void clickOnMiniPlayer__T332__T343(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T332 - Guest User-Verify the click on Mini player");
				System.out.println("T332");
				extent.extentLogger("Shop page > Mini player", "T332");
				}else {
					extent.HeaderChildNode("T343 - Logged In user-Verify the click on Mini player");
					System.out.println("T343");
					extent.extentLogger("Shop page > Mini player", "T343");
				}
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
				String description = getText(HipiHomePage.objDescription);
			
			 	click(HipiHomePage.objShopButton, "Shop Button");
				waitTime(3000);
			 
				verifyElementPresentAndClick(HipiShopPage.objMiniPlayer, "Mini player");
				waitTime(3000);
			 
			 
				if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
					logger.info("User is navigate to Feed screen by tapping on Submit CTA in Create username page");	
					extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Submit CTA in Create username page");
				}else {
					logger.info("User is not navigate to Feed screen by tapping on Submit CTA in Create username page");	
					extent.extentLoggerFail("", "User is not navigate to Feed screen by tapping on Submit CTA in Create username page");
				}
			
			navigateToHomePage();
			
		}

			
			public void miniPlayerOnSaveMomentTab__T335__T346(String userType) throws Exception {
			
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T335 - (Guest User-Verify for Mini player on Save Moment tab)");
					System.out.println("T335");
					extent.extentLogger("Shop page > Mini player", "T335");
					}else {
						extent.HeaderChildNode("T346 - (Logged In user-Verify for Mini player on Save Moment tab)");
						System.out.println("T346");
						extent.extentLogger("Shop page > Mini player", "T346");
					}
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
				navigateHomeandClickonShop();
				waitTime(4000);
				click(HipiHomePage.objShopButton, "Shop Button");
				waitTime(3000);
				click(HipiShopPage.objSavedMomentTab, "WISHLIST");
				waitTime(3000);
				if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
					logger.info(" Mini player is appears on bottom right side of the shop page.");	
					extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
				}else {
					logger.info(" Mini player is not appears on bottom right side of the shop page.");	
					extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
				}
			navigateToHomePage();
			}
		
			
		public void behaviorOfMiniPlayerWhenUserCloses__T334__T345(String userType) throws Exception {
			
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
				System.out.println("T334");
				extent.extentLogger("Shop page > Mini player", "T334");
				}else {
					extent.HeaderChildNode("Logged In User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
					System.out.println("T345");
					extent.extentLogger("Shop page > Mini player", "T345");
				}
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(3000);
			
//			Swipe("DOWN", 1);
			Back(1);
			if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
				logger.info("Mini player is dismissed and user is navigated back to last screen with full video player.");	
				extent.extentLoggerPass("Shop page > Mini player", "Mini player is dismissed and user is navigated back to last screen with full video player.");
			}else {
				logger.info("Mini player is dismissed and user is navigated back to last screen with full video player.");	
				extent.extentLoggerFail("Shop page > Mini player", "Mini player is dismissed and user is navigated back to last screen with full video player.");
			}
			
			navigateToHomePage();
		}
	
		
			
		public void afterClosingTheProductThirdPartySite__T336__T347(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T336 - (Guest User -Verify for after closing the product third party site will Mini player still playing on shop page)");
				System.out.println("T336");
				extent.extentLogger("Shop page > Mini player", "T336");
				}else {
					extent.HeaderChildNode("T347 - (Logged In User -Verify for after closing the product third party site will Mini player still playing on shop page)");
					System.out.println("T347");
					extent.extentLogger("Shop page > Mini player", "T347");
				}
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			waitTime(4000);
//			Back(1);
			verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
			
			if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
				logger.info(" Mini player is appears on bottom right side of the shop page.");	
				extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
			}else {
				logger.info(" Mini player is not appears on bottom right side of the shop page.");	
				extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
			}
			
			navigateToHomePage();
		}
			
			
			
	
			
			
		
		
//============================================Shoppable===============================================================
		
		public void  seeShoppableTabInProfile__T1244(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("T1244 - Logged in user - Check user is  able to see shoppable tab in profile");
			System.out.println("T1244");
			extent.extentLogger("Shoppable", "T1244");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objShoppableTab, "shoppable Tab")){
				logger.info("User is able to see shoppable tab in profile screen");	
				extent.extentLoggerPass("Shoppable", "User is able to see shoppable tab in profile screen");
			}else {
				logger.info("User is not able to see shoppable tab in profile screen");	
				extent.extentLoggerFail("Shoppable", "User is not able to see shoppable tab in profile screen");
			}
			navigateToHomePage();
		  }
		}
			public void shoppableTabInProfile__T1245(String userType) throws Exception {
				if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("T1245 - Logged in user - Check user is  able to tap on shoppable tab in profile");
				System.out.println("T1245");
				extent.extentLogger("Shoppable", "T1245");
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitTime(4000);
				
				click(HipiProfilePage.objShoppableTab, "shoppable Tab");
				if(verifyElementExist(HipiProfilePage.objNoShoppableVideos, "No shoppable Videos")) {
					logger.info("User is able to tap on shoppable tab and User is able to see disclaimer when there is no video under shoppable");	
					extent.extentLoggerPass("Shoppable", "User is able to tap on shoppable tab and User is able to see disclaimer when there is no video under shoppable");
				}else if (verifyElementExist(HipiProfilePage.objShoppableVideosIcon, "shoppable Videos")) {
					logger.info("User is able to tap on shoppable tab and User is  able to see video under shoppable");	
					extent.extentLoggerPass("Shoppable", "User is able to tap on shoppable tab and User is  able to see video under shoppable");
				}
				else
				{
					logger.info("User is not able to tap on shoppable tab , User is not able to see disclaimer when there is no video under shoppable ,  ");	
					extent.extentLoggerFail("Shoppable", "User is not able to tap on shoppable tab and User is not able to see disclaimer when there is no video under shoppable");
			
				}
				navigateToHomePage();
			} 
			}
			public void checkWhetherDisclaimer__T1246(String userType) throws Exception {
				if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("T1246 - Logged in user - Check whether disclaimer are displayed under shoppable tab when there is no video.");
				System.out.println("T1246");
				extent.extentLogger("Shoppable", "T1246");
				
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitTime(4000);
				
				click(HipiProfilePage.objShoppableTab, "shoppable Tab");
				if(verifyElementExist(HipiProfilePage.objNoShoppableVideos, "No shoppable Videos")) {
					logger.info("User is able to tap on shoppable tab and User is able to see disclaimer when there is no video under shoppable");	
					extent.extentLoggerPass("Shoppable", "User is able to tap on shoppable tab and User is able to see disclaimer when there is no video under shoppable");
				}else if (verifyElementExist(HipiProfilePage.objShoppableVideosIcon, "shoppable Videos")) {
					logger.info("User is able to tap on shoppable tab and User is  able to see video under shoppable");	
					extent.extentLoggerPass("Shoppable", "User is able to tap on shoppable tab and User is  able to see video under shoppable");
				}
				else
				{
					logger.info("User is not able to tap on shoppable tab , User is not able to see disclaimer when there is no video under shoppable ,  ");	
					extent.extentLoggerFail("Shoppable", "User is not able to tap on shoppable tab and User is not able to see disclaimer when there is no video under shoppable");
			
				}
			navigateToHomePage();	
			}
			}		
//=========================================Shop >In app Browser========================================
		
		public void navigateToThirdPartySiteClickingOnProductImage() throws Exception {
			
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");

			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(3000);
			PartialSwipe("UP", 1);
			 thirdPartySiteName = getText(HipiShopPage.objThirdPartySiteName);
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			waitTime(5000);
			String productWebsite = getText(HipiShopPage.objProductWebsitePage);
			System.out.println(productWebsite);
			
			if (productWebsite.contains(".com")) {
				
				String[] name = productWebsite.split(".com");
				logger.info("User account name " + name[0]);
				System.out.println(name[0]);
				if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
					logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
					
				}else {
					logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
				}
			}else {
				String[] name = productWebsite.split(".in");	
				logger.info("User account name " + name[0]);
				System.out.println(name[0]);
				if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
					logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
				}else {
					logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
				}
			}
			
			
			
			
			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
			}else {
				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
			}
//			if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
//				logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
//				extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
//				
//			}else {
//				logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
//				extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
//			}
		}
		
		
		
		
		public void verifyInAppBrowserT397_T399_T402_T404(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T397,T399 - (Guest User- Verify In app browser(Third party site) clicking upon product image)");
			System.out.println("T397,T399");
			extent.extentLogger("Shop >In app Browser", "T397,T399");
			}else {
				extent.HeaderChildNode("T402,T404 - (Logged In User- Verify In app browser(Third party site) clicking upon product image)");
				System.out.println("T402,T404");
				extent.extentLogger("Shop >In app Browser", "T402,T404");
			}
			navigateToShopPage();
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			waitTime(5000);if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
			}else {
				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
			}
//			navigateToThirdPartySiteClickingOnProductImage();

			navigateToHomePage();
		}
		
		public void clickingUponArowMarkT398_T400_T403_T405(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T398,T400 - (Guest User -Verify In app browser(third party site) clicking  upon arow mark (Get Button) below the product)");
				System.out.println("T398,T400");
				extent.extentLogger("Shop >In app Browser", "T398,T400");
				}else {
					extent.HeaderChildNode("T403,T405 - (Logged In User -Verify In app browser(third party site) clicking  upon arow mark (Get Button) below the product)");
					System.out.println("T403,T405");
					extent.extentLogger("Shop >In app Browser", "T403,T405");
				}
			
			navigateToShopPage();
			waitTime(3000);
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			waitTime(5000);if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
			}else {
				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
			}
			navigateToHomePage();
		}	
		
		public void  navigateTothirdPartySiteWithinTheHipiInappBrowser() throws Exception {
			
			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
			PartialSwipe("UP", 1);
			 thirdPartySiteName = getText(HipiShopPage.objThirdPartySiteName);
			verifyElementPresentAndClick(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
			waitTime(5000);
			String productWebsite = getText(HipiShopPage.objProductWebsitePage);
			System.out.println(productWebsite);
			if (productWebsite.contains(".com")) {
				
				String[] name = productWebsite.split(".com");
				logger.info("User account name " + name[0]);
				System.out.println(name[0]);
				if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
					logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
					
				}else {
					logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
				}
			}else {
				String[] name = productWebsite.split(".in");	
				logger.info("User account name " + name[0]);
				System.out.println(name[0]);
				if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
					logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
					
				}else {
					logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
				}
			}
		
			
			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
			}else {
				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
			}
			
			if (productWebsite.contains(".com")) {
				
				String[] name = productWebsite.split(".com");
				logger.info("User account name " + name[0]);
				System.out.println(name[0]);
				if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
					logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
					
				}else {
					logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
				}
			}else {
				String[] name = productWebsite.split(".in");	
				logger.info("User account name " + name[0]);
				System.out.println(name[0]);
				if (thirdPartySiteName.equalsIgnoreCase(name[0])) {
					logger.info("User is navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerPass("Shop", "User is navigated to respective third party site when they clicked Arrow button to buy a product.");
					
				}else {
					logger.info("User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not navigated to respective third party site when they clicked Arrow button to buy a product.");	
				}
			}
		
		}
		public void  closingInAppBrowser_T401_T406(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User-Verify closing in app  browser");
				System.out.println("T401");
				extent.extentLogger("Shop >In app Browser", "");
				}else {
					extent.HeaderChildNode("Logged In User-Verify closing in app browser");
					System.out.println("T406");
					extent.extentLogger("Shop >In app Browser", "T406");
				}
			navigateToThirdPartySiteClickingOnProductImage();
			verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
			waitTime(3000);
			if (verifyElementExist(AMDShopPage.objInThisVideo,"In This Video option")) {
				logger.info("User close  the app browser then he is get back to shop page");	
				extent.extentLoggerPass("Shop >In app Browser", "User close  the app browser then he is get back to shop page");
			}else {
				logger.info("User close  the  app browser then he is not get back to shop page");	
				extent.extentLoggerFail("Shop >In app Browser", "User close  the app browser then he is not get back to shop page");
			}
			navigateToHomePage();
		}
		public void verifyThatShoppableVideoInsideDiscoverPage_T407_T408(String userType,String userName) throws Exception {
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("T407,T408 - Logged In User-Verify that shoppable video inside discover page");
				System.out.println("T407,T408");
				extent.extentLogger("", "T407,T408");
	
				click(HipiHomePage.objDiscoverButton, "Discover Button");	
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
				waitTime(4000);
				type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
				waitTime(4000);
				String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
				System.out.println(searchBoXText);
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab, "Video Tab");
				waitTime(4000);
				if(verifyElementPresent(HipiDiscoverPage.objBucketIcon, "Bucket Icon")){
					logger.info("shoppable video is display on videos tab");	
					extent.extentLoggerPass("Shop >In app Browser", "shoppable video is display on videos tab");
				}else {
					logger.info("shoppable video is not display on videos tab");	
					extent.extentLoggerFail("Shop >In app Browser", "shoppable video is not display on videos tab");
				}
				String sameSearchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
				System.out.println(sameSearchBoXText);
			if (searchBoXText.equals(sameSearchBoXText)) {
				logger.info("video is displays on searched result page for respective searched keyword");	
				extent.extentLoggerPass("Shop >In app Browser", "video is displays on searched result page for respective searched keyword");
			}else {
				logger.info("video is displays on searched result page for respective searched keyword");	
				extent.extentLoggerFail("Shop >In app Browser", "video is displays on searched result page for respective searched keyword");
			}
				navigateToHomePage();
		}		
	}

		public void navigateToHomePage() throws Exception {
			boolean flag;
			for (int i = 1; i < 10; i++) {
				flag = verifyElementDisplayed(HipiHomePage.objForYou);
				
				//For You is display its store in T
				////For You is NOT display its store in F
//				Back(1);
				System.out.println(flag);
				if (flag) {
					if (verifyElementDisplayed(HipiShopPage.objSavedMomentTab)) {
						Back(1);
					}
					break;
				} else {
					Back(1);
					waitTime(2000);
				}
			}
//			click(HipiHomePage.objHomeIcon, "Home Icon");
			waitTime(4000);
		}
//==========================================Shop Page> Saved Moment======================================================
		
		 String productDetails = null;
		 String productDetails1 = null;
		 String productDetails2 = null;
		 String productDetails3 = null;
		
		
//		public void savedMomentTab__T349__T356(String userType) throws Exception {
//			
//			if(userType.equalsIgnoreCase("Guest")) {
//				extent.HeaderChildNode("Guest User - Validate the \"Saved Moment\" tab on shop details page");
//				System.out.println("T349");
//				extent.extentLogger("Shop Page> Saved Moment", "T349");
//				}else {
//					extent.HeaderChildNode("Login User - Validate the \"Saved Moment\" tab on shop details page");
//					System.out.println("T356");
//					extent.extentLogger("Shop Page> Saved Moment", "T356");
//				}
//			
//			navigateToSavedMomentsAllTabs();
//			
////			click(HipiShopPage.objSavedMomentTab, "WISHLIST");
////			verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
//			waitTime(3000);
//			verifyElementPresent(HipiShopPage.objThumbnailOfTheVideo, "Thumbnail of the video");
//			verifyElementPresent(HipiShopPage.objArtistTitle, "Artist Title");
//			verifyElementPresent(HipiShopPage.objLessButton, "Less Button");
//			verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
//			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
//			verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
//			navigateToHomePage();
//		} 
		
		
//		public void  savedMomenttabUI__T350__T357(String userType) throws Exception {
//		
//			if(userType.equalsIgnoreCase("Guest")) {
//				extent.HeaderChildNode("Guest User-Verify for WISHLIST UI");
//				System.out.println("T350");
//				extent.extentLogger("Shop Page> Saved Moment", "T350");
//				}else {
//					extent.HeaderChildNode("Logged In user-Verify for WISHLIST UI");
//					System.out.println("T357");
//					extent.extentLogger("Shop Page> Saved Moment", "T357");
//				}
//			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
//			click(HipiHomePage.objShopButton, "Shop Button");
//			click(HipiShopPage.objSavedMomentTab, "WISHLIST");
//			shopPageUIValidation();
//			navigateToHomePage();
//			
//		}
//	
		
		
		public void shopPageUIValidation() throws Exception {
			
			verifyElementPresent(HipiShopPage.objThumbnailImageOfTheVideo, "Thumbnail image of the video");
			
			verifyElementPresent(HipiShopPage.objArtistTitle, "Artist Title");
			verifyElementPresent(HipiShopPage.objImagesOfProductSingleRow, "Images of product available single row");
			
		}
//		public void eXPANDButtonOnTheProductPanel__T351__T358(String userType) throws Exception {	
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User- Verify for EXPAND button on the product panel of Shop Page");
//					System.out.println("T351");
//					extent.extentLogger("Shop Page> Saved Moment", "T351");
//					}else {
//						extent.HeaderChildNode("Logged In User-Verify for EXPAND button on the product panel of Shop Page");
//						System.out.println("T358");
//						extent.extentLogger("Shop Page> Saved Moment", "T358");	
//					}
//			navigateToSavedMoments();
//			
//			if (verifyElementPresentAndClick(HipiShopPage.objProductDetailsPage, "Product Details")) {
//				logger.info("User is able to expand the product details page from the product panel on Shop");	
//				extent.extentLoggerPass("Shop >In app Browser", "User is able to expand the product details page from the product panel on Shop");
//			}else {
//				logger.info("User is not able to expand the product details page from the product panel on Shop");	
//				extent.extentLoggerFail("Shop >In app Browser", "User is not able to expand the product details page from the product panel on Shop");
//			}
//				navigateToHomePage();
//		} 
//	
		

//		public void  expandAllThePanelsAtATime__T352__T359(String userType) throws Exception {
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T352 - Guest User- Verify for can user able to expand all the panels at a time");
//					System.out.println("T352");
//					extent.extentLogger("Shop Page> Saved Moment", "T352");
//					}else {
//						extent.HeaderChildNode("T359 - Logged In User- Verify for can user able to expand all the panels at a time");
//						System.out.println("T359");
//						extent.extentLogger("Shop Page> Saved Moment", "T359");	
//					}
//				navigateToSavedMoments();
//			  String productDetails = getText(HipiShopPage.objProductDetailsPage);
//			 Swipe("UP", 4);
//			  String productDetails1 = getText(HipiShopPage.objProductDetailsPage);
//
//			  if (!productDetails.equals(productDetails1)) {
//					logger.info("User is able to Expand data for one product at a time and able to view other product data once the existing opend panel is closed.");	
//					extent.extentLoggerPass("Shop >In app Browser", "User is able to Expand data for one product at a time and able to view other product data once the existing opend panel is closed.");
//				}else {
//					logger.info("User is not able to Expand data for one product at a time and able to view other product data once the existing opend panel is closed.");	
//					extent.extentLoggerFail("Shop >In app Browser", "User is not able to Expand data for one product at a time and able to view other product data once the existing opend panel is closed.");
//				}
//					navigateToHomePage();
//			
//		}
			
		
//		public void expandedProductsDetailsPage__T353__T360(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User- Validate the expanded products details page on \"Saved moment\" tab");
//					System.out.println("T353");
//					extent.extentLogger("Shop Page> Saved Moment", "T353");
//					}else {
//						extent.HeaderChildNode("Logged In User-Validate the expanded products details page on WISHLIST");
//						System.out.println("T360");
//						extent.extentLogger("Shop Page> Saved Moment", "T360");	
//					}
//				navigateToSavedMomentsAllTabs();
////				verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
//				productDetailsAllTabs();
//				
//				navigateToHomePage();
//		
//		}
		String siteName = null;
		String productName = null;
		public void productDetailsAllTabs() throws Exception {
			
			
			verifyElementPresent(HipiShopPage.objThumbnailImageOfTheVideo, "Thumbnail image of the video");
			
			verifyElementPresent(HipiShopPage.objArtistTitle, "Artist Title");
			
			verifyElementPresent(HipiShopPage.objLessButton, "Less Button");
			
			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");

			verifyElementPresent(HipiShopPage.objOutfitTab, "Outfit Tab");
			if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
				logger.info("Products images is displayed ");	
				extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
			}else {
				logger.info("Products images is displayed ");	
				extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
			}
//			SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
			PartialSwipe("UP", 1);
			if (verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product")) {
				logger.info("Arrow Mark is displayred Below The Product");	
				extent.extentLoggerPass("Shop >In app Browser", "Arrow Mark is displayred Below The Product");
			}else {
				logger.info("Arrow Mark is not displayred Below The Product");	
				extent.extentLoggerFail("Shop >In app Browser", "Arrow Mark is not displayred Below The Product");
			}
			  siteName = getText(HipiShopPage.objThirdPartySiteName);
				if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
					  logger.info("third party site name is " + siteName);	
						extent.extentLoggerPass("Shop", "third party site name is " + siteName);
					}else {
						logger.info("third party site name is displayed");	
						extent.extentLoggerFail("Shop", "third party site name is displayed");
					} 
				if (verifyElementPresentAndClick(HipiShopPage.objProductDetailsPage, "Product Details")) {
					logger.info("User is able to see product panel on Shop page");	
					extent.extentLoggerPass("Shop", "User is able to see product panel on Shop page");
				}else {
					logger.info("User is not able to see product panel on Shop page");	
					extent.extentLoggerFail("Shop", "User is not able to see product panel on Shop page");
				}
				PartialSwipe("DOWN", 1);
			verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
			if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
				logger.info("Products images is displayed ");	
				extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
			}else {
				logger.info("Products images is displayed ");	
				extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
			}
//			SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
			PartialSwipe("UP", 1);
			if (verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product")) {
				logger.info("Arrow Mark is displayred Below The Product");	
				extent.extentLoggerPass("Shop >In app Browser", "Arrow Mark is displayred Below The Product");
			}else {
				logger.info("Arrow Mark is not displayred Below The Product");	
				extent.extentLoggerFail("Shop >In app Browser", "Arrow Mark is not displayred Below The Product");
			}
			 siteName = getText(HipiShopPage.objThirdPartySiteName);
				if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
					  logger.info("third party site name is " + siteName);	
						extent.extentLoggerPass("Shop", "third party site name is " + siteName);
					}else {
						logger.info("third party site name is displayed");	
						extent.extentLoggerFail("Shop", "third party site name is displayed");
					} 
				if (verifyElementPresentAndClick(HipiShopPage.objProductDetailsPage, "Product Details")) {
					logger.info("User is able to see product panel on Shop page");	
					extent.extentLoggerPass("Shop", "User is able to see product panel on Shop page");
				}else {
					logger.info("User is not able to see product panel on Shop page");	
					extent.extentLoggerFail("Shop", "User is not able to see product panel on Shop page");
				}
				PartialSwipe("DOWN", 1);
			verifyElementPresentAndClick(HipiShopPage.objBeautyTab, "Beauty Tab");
			PartialSwipe("UP", 1);
			if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
				logger.info("Products images is displayed ");	
				extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
			}else {
				logger.info("Products images is displayed ");	
				extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
			}
//			SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//			PartialSwipe("DOWN", 1);
			if (verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product")) {
				logger.info("Arrow Mark is displayred Below The Product");	
				extent.extentLoggerPass("Shop >In app Browser", "Arrow Mark is displayred Below The Product");
			}else {
				logger.info("Arrow Mark is not displayred Below The Product");	
				extent.extentLoggerFail("Shop >In app Browser", "Arrow Mark is not displayred Below The Product");
			}
			  siteName = getText(HipiShopPage.objThirdPartySiteName);
				if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
					  logger.info("third party site name is " + siteName);	
						extent.extentLoggerPass("Shop", "third party site name is " + siteName);
					}else {
						logger.info("third party site name is displayed");	
						extent.extentLoggerFail("Shop", "third party site name is displayed");
					} 
				if (verifyElementPresentAndClick(HipiShopPage.objProductDetailsPage, "Product Details")) {
					logger.info("User is able to see product panel on Shop page");	
					extent.extentLoggerPass("Shop", "User is able to see product panel on Shop page");
				}else {
					logger.info("User is not able to see product panel on Shop page");	
					extent.extentLoggerFail("Shop", "User is not able to see product panel on Shop page");
				}
				PartialSwipe("DOWN", 1);
			verifyElementPresentAndClick(HipiShopPage.objHairTab, "Hair Tab");
			Swipe("UP", 1);
			if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
				logger.info("Products images is displayed ");	
				extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
			}else {
				logger.info("Products images is displayed ");	
				extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
			}
//			SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
			PartialSwipe("UP", 1);
			if (verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product")) {
				logger.info("Arrow Mark is displayred Below The Product");	
				extent.extentLoggerPass("Shop >In app Browser", "Arrow Mark is displayred Below The Product");
			}else {
				logger.info("Arrow Mark is not displayred Below The Product");	
				extent.extentLoggerFail("Shop >In app Browser", "Arrow Mark is not displayred Below The Product");
			}
			siteName = getText(HipiShopPage.objThirdPartySiteName);
				if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
					  logger.info("third party site name is " + siteName);	
						extent.extentLoggerPass("Shop", "third party site name is " + siteName);
					}else {
						logger.info("third party site name is displayed");	
						extent.extentLoggerFail("Shop", "third party site name is displayed");
					} 
				if (verifyElementPresentAndClick(HipiShopPage.objProductDetailsPage, "Product Details")) {
					logger.info("User is able to see product panel on Shop page");	
					extent.extentLoggerPass("Shop", "User is able to see product panel on Shop page");
				}else {
					logger.info("User is not able to see product panel on Shop page");	
					extent.extentLoggerFail("Shop", "User is not able to see product panel on Shop page");
				}
			
		}
		
//		public void switchBetweenTheOutfitAccessoriesBeautyHairTab__T354__T361(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User - Verify for user's able to switch between the outfit/accessories/Beauty/hair tab in side the product panel.");
//					System.out.println("T354");
//					extent.extentLogger("Shop Page> Saved Moment", "T354");
//					}else {
//						extent.HeaderChildNode("Logged In user- Verify for user's able to switch between the outfit/accessories/Beauty/hair tab in side the product panel");
//						System.out.println("T361");
//						extent.extentLogger("Shop Page> Saved Moment", "T361");	
//					}
//				navigateToSavedMomentsAllTabs();
////				verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
//				
//				  String productDetails = getText(HipiShopPage.objProductDetailsPage);
//				  click(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//					SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//					PartialSwipe("DOWN", 1);
//				  String productDetails1 = getText(HipiShopPage.objProductDetailsPage);
//				  
//				  if (!productDetails.equals(productDetails1)) {
//						logger.info("User is able to switch  the accessories tab");	
//						extent.extentLoggerPass("Shop >In app Browser", "User is able to switch the accessories tab");
//					}else {
//						logger.info("User is not able to switch the accessories tab");	
//						extent.extentLoggerFail("Shop >In app Browser", "User is not able to switch the accessories tab");
//					}
//			
//				  	click(HipiShopPage.objBeautyTab, "Beauty Tab");
//					SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//					PartialSwipe("DOWN", 1);
//				     productDetails2 = getText(HipiShopPage.objProductDetailsPage);
//				    
//					  if (!productDetails1.equals(productDetails2)) {
//							logger.info("User is able to switch  the Beauty tab");	
//							extent.extentLoggerPass("Shop >In app Browser", "User is able to switch the Beauty tab");
//						}else {
//							logger.info("User is not able to switch  the Beauty tab");	
//							extent.extentLoggerFail("Shop >In app Browser", "User is not able to switch the Beauty tab");
//						}
//						click(HipiShopPage.objHairTab, "Hair Tab");
//						SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
////						PartialSwipe("DOWN", 1);
//						    productDetails3 = getText(HipiShopPage.objProductDetailsPage);
//						   if (!productDetails2.equals(productDetails3)) {
//								logger.info("User is able to switch  the Hair tab");	
//								extent.extentLoggerPass("Shop >In app Browser", "User is able to switch the Hair tab");
//							}else {
//								logger.info("User is not able to switch  the Hair tab");	
//								extent.extentLoggerFail("Shop >In app Browser", "User is not able to switch the Hair tab");
//							} 
//						 navigateToHomePage();
//						}
//	
			
		
//		public void  scrollDownScrollUp__T363__T374(String userType) throws Exception {
//
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify for user should be able to scroll down/scroll up to see the products under the panel.");
//					System.out.println("T363");
//					extent.extentLogger("Shop Page> Saved Moment", "T363");
//					}else {
//						extent.HeaderChildNode("Logged In userVerify for user should be able to scroll down/scroll up to see the products under the panel.");
//						System.out.println("T374");
//						extent.extentLogger("Shop Page> Saved Moment", "T374");
//					}
//			
//				navigateToSavedMomentsAllTabs();
//				scrollUPAndScrollDownAllTabs(userType);
//				verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//				scrollUPAndScrollDownAllTabs(userType);
//				click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				scrollUPAndScrollDownAllTabs(userType);
//				click(HipiShopPage.objHairTab, "Hair Tab");
//				scrollUPAndScrollDownAllTabs(userType);
//				navigateToHomePage();
//			}
		
	
//		public void navigateToSavedMomentsAllTabs() throws Exception {
//			for(int i=1; i<=15; i++) {
//				navigateHomeandSaveMomentTab();
//
//				if (verifyElementExist(HipiShopPage.objOutfitTab, "Outfit Tab") && verifyElementExist(HipiShopPage.objAccessoriesTab, "Accessories Tab") && verifyElementExist(HipiShopPage.objBeautyTab, "Beauty Tab") &&  verifyElementExist(HipiShopPage.objHairTab, "Hair Tab")){
//		
//					logger.info("Outfit Tab,Accessories Tab,Beauty Tab and Hair Tab is displayed");	
//					extent.extentLoggerPass("Shop >In app Browser", "Outfit Tab,Accessories Tab,Beauty Tab and Hair Tab is displayed");
//					break;
//				}else {
//					navigateToHomePage();
//					waitTime(4000);
//					Swipe("UP", 1);
//				}
//			}
//			
//		}
		
		public void scrollUPAndScrollDownAllTabs(String userType) throws Exception {
			
			 productDetails = getText(HipiShopPage.objProductDetailsPage);
			 Swipe("UP", 3);
			 productDetails1 = getText(HipiShopPage.objProductDetailsPage);

			  if (!productDetails.equals(productDetails1)) {
					logger.info("User is able to scroll the page up side");	
					extent.extentLoggerPass("Shop >In app Browser", "User is able to scroll the page up side");
				}else {
					logger.info("User is not able to scroll the page up side");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not able to scroll the page up side");
				}
//				
				
			  PartialSwipe("DOWN", 3);
			  productDetails2 = getText(HipiShopPage.objProductDetailsPage);

			  if (!productDetails1.equals(productDetails2)) {
					logger.info("User is able to scroll the page down side");	
					extent.extentLoggerPass("Shop >In app Browser", "User is able to scroll the page down side");
				}else {
					logger.info("User is not able to scroll the page down side");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not able to scroll the page down side");
				}
//			  Back(1);
//			  click(HipiHomePage.objShopButton, "Shop Button");
//				click(HipiShopPage.objSavedMomentTab, "WISHLIST");
//				verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
			
		}
		
		public void clickingOnTheMiniPlayer__T364__T375(String userType) throws Exception{
	
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T364 - (Guest User-Verify for Clicking on the mini player when user on WISHLIST)");
					System.out.println("T364");
					extent.extentLogger("Shop Page> Saved Moment", "T364");
					}else {
						extent.HeaderChildNode("T375 - (Logged In User-Verify for Clicking on the mini player when user on Saved momenttab)");
						System.out.println("T375");
						extent.extentLogger("Shop Page> Saved Moment", "T375");
					}
				
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
				navigateHomeandClickonShop();
				click(HipiHomePage.objShopButton, "Shop Button");
				click(HipiHomePage.objHomeIcon, "Home icon");
				String description = getText(HipiHomePage.objDescription);
				verifyElementPresentAndClick(HipiHomePage.objShopButton, "Save Lock");
				waitTime(2000);
				click(HipiHomePage.objShopButton, "Shop Button");
				click(HipiShopPage.objSavedMomentTab, "WISHLIST");
				verifyElementPresentAndClick(HipiShopPage.objMiniPlayer, "Mini player");
				waitTime(3000);
			 
			 
			String description1 = getText(HipiHomePage.objDescription);
			if (description.equals(description1)) {
				logger.info("User is navigated back to the last page and same video playing.");	
				extent.extentLoggerPass("Shop page > Mini player", "User is navigated back to the last page and same video playing.");
			}else {
				logger.info("User is not navigated back to the last page and same video playing.");	
				extent.extentLoggerFail("Shop page > Mini player", "User is not navigated back to the last page and same video playing.");
			}
				navigateToHomePage();
		}


		
//		public void productImagesAreClickable__T365__T376(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify for all the product images are clickable from opened/expaned product panel on WISHLIST");
//					System.out.println("T365");
//					extent.extentLogger("Shop Page> Saved Moment", "T365");
//					}else {
//						extent.HeaderChildNode("Logged In User-Verify for all the product images are clickable from opened/expaned product panel on WISHLIST.");
//						System.out.println("T376");
//						extent.extentLogger("Shop Page> Saved Moment", "T376");
//					}	
//				navigateToSavedMomentsAllTabs();
//				productImageAreClickableAllTabs();
//				navigateToHomePage();
//		} 
	
		
		
		
		
		public void productImageAreClickableAllTabs() throws Exception {
			click(HipiShopPage.objcloseIconMiniPlayer, "Close Mini Player");
			click(HipiShopPage.objOutfitTab, "Out Fit Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnImage();
			click(HipiShopPage.objCloseButtonThirdPartySite, "Close third party site");
			verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnImage();
			click(HipiShopPage.objCloseButtonThirdPartySite, "Close third party site");
			verifyElementPresentAndClick(HipiShopPage.objBeautyTab, "Beauty Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnImage();
			click(HipiShopPage.objCloseButtonThirdPartySite, "Close third party site");
			verifyElementPresentAndClick(HipiShopPage.objHairTab, "Hair Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnImage();
			
		}
		public void arrowButtonAreClikableAllTabs() throws Exception {
			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
			click(HipiShopPage.objOutfitTab, "Out Fit Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnArrowButton();
			click(HipiShopPage.objCloseButtonThirdPartySite, "Close third party site");
			verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnArrowButton();
			click(HipiShopPage.objCloseButtonThirdPartySite, "Close third party site");
			verifyElementPresentAndClick(HipiShopPage.objBeautyTab, "Beauty Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnArrowButton();
			click(HipiShopPage.objCloseButtonThirdPartySite, "Close third party site");
			verifyElementPresentAndClick(HipiShopPage.objHairTab, "Hair Tab");
			navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnArrowButton();
			
			
			
		}
		public void navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnImage() throws Exception {
			
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");

			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("product images is clickable and user is navigated to third party site.");	
				extent.extentLoggerPass("Shop Page> Saved Moment", "product images is clickable and user is navigated to third party site.");
				
			}else {
				logger.info("product images is not clickable and user is not navigated to third party site.");	
				extent.extentLoggerFail("Shop Page> Saved Moment", "product images is not clickable and user is not navigated to third party site.");	
			}
			
			
			
		}
//		public void arrowButtonsAreClickable__T366__T377(String userType) throws Exception {
//			
//	
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify for all the Arrow buttons are clickable from opened/expaned product panel on WISHLIST.");
//					System.out.println("T366");
//					extent.extentLogger("Shop Page> Saved Moment", "T366");
//					}else {
//						extent.HeaderChildNode("Logged In user-Verify for all the Arrow buttons are clickable from opened/expaned product panel on WISHLIST.");
//						System.out.println("T377");
//						extent.extentLogger("Shop Page> Saved Moment", "T377");
//					}	
//				
//				navigateToSavedMomentsAllTabs();
//				arrowButtonAreClikableAllTabs();
//				navigateToHomePage();
//			}		
	
		
		public void navigateTo_ShopPage_To_ThirdpartySite_ByClickingOnArrowButton() throws Exception {
			
			
			verifyElementPresentAndClick(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
			waitTime(5000);
			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("Arrow button is clickable and user is navigated to third party site.");	
				extent.extentLoggerPass("Shop Page> Saved Moment", "Arrow button is clickable and user is navigated to third party site.");
				
			}else {
				logger.info("Arrow button is not clickable and user is not navigated to third party site.");	
				extent.extentLoggerFail("Shop Page> Saved Moment", "Arrow button is not clickable and user is not navigated to third party site.");	
			}
		}
		
		
		String description = null;
		String description1 = null;
		public void navigateToSavedMoments() throws Exception {

			if(verifyElementExist(HipiHomePage.objShopButton, "Shop Button")){
				logger.info("User is able to see shop button");	
				extent.extentLoggerPass("SHOP button", "User is able to see shop button");
//				click(HipiHomePage.objShopButton, "Shop Button");
			}else {
				waitTime(5000);
				
				SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				//click(HipiHomePage.objShopButton, "Shop Button");
			}		
//			click(HipiHomePage.objShopButton, "Shop Button");
//			click(HipiHomePage.objHomeIcon, "Home icon");
			description = getText(HipiHomePage.objDescription);
//			click(HipiHomePage.objSaveLook, "Save Lock");
			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(4000);
			click(HipiShopPage.objSavedMomentTab, "WISHLIST");
//			click(HipiShopPage.objExpanButton, "Expan Button");
			waitTime(4000);
			
		}
		public void closingTheShopDetailsPage__T369__T380(String userType) throws Exception {
			
			
	
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("Guest User- Verify for closing the shop details page when user on Saved momenttab");
					System.out.println("T369");
					extent.extentLogger("Shop Page> Saved Moment", "T369");
					}else {
						extent.HeaderChildNode("Logged In User- Verify for closing the shop details page when user on WISHLIST");
						System.out.println("T380");
						extent.extentLogger("Shop Page> Saved Moment", "T380");
					}	
				navigateToSavedMoments();
				Back(1);
				String description1 = getText(HipiHomePage.objDescription);

				 if (description.equals(description1)) {
						logger.info("User is navigated back to the last page and user is able see the same video playing.");	
						extent.extentLoggerPass("Shop Page> Saved Moment", "User is navigated back to the last page and user is able see the same video playing.");
					}else {
						logger.info("User is not navigated back to the last page and user is not able see the same video playing.");	
						extent.extentLoggerFail("Shop Page> Saved Moment", "User is not navigated back to the last page and user is not see the same video playing.");
					}
				
				navigateToHomePage();
					
		
		}
//		public void lessDataForTheProduct_T367__T378(String userType) throws Exception {
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T367 - (Guest User -Verify for user is able to view less data for the product by clicking the Less drop down on the panel on WISHLIST.)");
//					System.out.println("T367");
//					extent.extentLogger("Shop Page> Saved Moment", "T367");
//					}else {
//						extent.HeaderChildNode("T378 - (Logged In user -Verify for user is able to view less data for the product by clicking the Less drop down on the panel on WISHLIST.)");
//						System.out.println("T378");
//						extent.extentLogger("Shop Page> Saved Moment", "T378");
//					}	
//				navigateToSavedMoments();
//				verifyElementPresentAndClick(HipiShopPage.objLessButton, "Less Button");
//				verifyElementPresent(HipiShopPage.objThumbnailImageOfTheVideo, "Thumbnail image of the video");
//				
//				verifyElementPresent(HipiShopPage.objArtistTitle, "Artist Title");
//				verifyElementPresent(HipiShopPage.objImagesOfProductSingleRow, "Images of product available single row");
//				verifyElementPresent(HipiShopPage.objExpanButton, "Expan Button");
//				verifyElementPresent(HipiShopPage.objDeleteOption, "Delete Option");
//				navigateToHomePage();
//				
//			}	
//	
		
//		public void  seeRespectiveProduct__T355__T362(String userType) throws Exception {
//	
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User- Verify for user should be able to see respective products under outfit/accessories/Beauty/hair tabs on \"saved moments\" tab");
//					System.out.println("T355");
//					extent.extentLogger("Shop Page> Saved Moment", "T355");
//					}else {
//						extent.HeaderChildNode("Logged In User - Verify for user should be able to see respective products under outfit/accessories/Beauty/hair tabs on WISHLIST");
//						System.out.println("T362");
//						extent.extentLogger("Shop Page> Saved Moment", "T362");	
//					}
//				
//				navigateToSavedMomentsAllTabs();
//				 productDetails = getText(HipiShopPage.objProductDetailsPage);
//				 verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//				 productDetails1 = getText(HipiShopPage.objProductDetailsPage);
//				 if (!productDetails.equals(productDetails1)) {
//						logger.info("User is able to see respective products when user switch the accessories tab.");	
//						extent.extentLoggerPass("Shop >In app Browser", "User is able to see respective products when user switch the accessories tab.");
//					}else {
//						logger.info("User is able to see respective products when user switch the accessories tab.");	
//						extent.extentLoggerFail("Shop >In app Browser", "User is able to see respective products when user switch the accessories tab.");
//					}
//				 
//				 	click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				     productDetails2 = getText(HipiShopPage.objProductDetailsPage);
//				     if (!productDetails1.equals(productDetails2)) {
//							logger.info("User is able to see respective products when user switch the Beauty tab.");	
//							extent.extentLoggerPass("Shop >In app Browser", "User is able to see respective products when user switch the Beauty tab.");
//						}else {
//							logger.info("User is able to see respective products when user switch the Beauty tab.");	
//							extent.extentLoggerFail("Shop >In app Browser", "User is able to see respective products when user switch the Beauty tab.");
//						}
//				 	click(HipiShopPage.objHairTab, "Hair Tab");
//				    productDetails3 = getText(HipiShopPage.objProductDetailsPage);
//				   if (!productDetails2.equals(productDetails3)) {
//					   logger.info("User is able to see respective products when user switch the Beauty tab.");	
//						extent.extentLoggerPass("Shop >In app Browser", "User is able to see respective products when user switch the Beauty tab.");
//					}else {
//						logger.info("User is able to see respective products when user switch the Beauty tab.");	
//						extent.extentLoggerFail("Shop >In app Browser", "User is able to see respective products when user switch the Beauty tab.");
//					} 
//				   navigateToHomePage();
//			}		
	
		
//		public void lessButtonOnTheProductDetailsPage__T368__T379(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User- Verify for LESS button button on the product details page");
//					System.out.println("T368");
//					extent.extentLogger("Shop Page> Saved Moment", "T368");
//					}else {
//						extent.HeaderChildNode("Logged In User-Verify for LESS button button on the product details page");
//						System.out.println("T379");
//						extent.extentLogger("Shop Page> Saved Moment", "T379");
//					}		
//			
//				navigateToSavedMoments();
//				verifyElementPresentAndClick(HipiShopPage.objLessButton, "Less Button");
//				
//				if (verifyElementExist(HipiShopPage.objLessButton, "Less Button")) {
//					logger.info("User is not able to close the product  details page tapping  LESS button");	
//					extent.extentLoggerFail("Shop >In app Browser", "User is not able to close the product  details page tapping  LESS button");
//				}else {
//					logger.info("User is able to close the product  details page tapping  LESS button");	
//					extent.extentLoggerPass("Shop >In app Browser", " is able to close the product  details page tapping  LESS button");
//				} 
//				navigateToHomePage();
//
//			}	
		

		
//		public void thirdPartySiteNameBelowTheProductImages__T371__T382(String userType) throws Exception {
//			
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify for each product on theshop details page has third party site name below the product images.");
//					System.out.println("T371");
//					extent.extentLogger("Shop Page> Saved Moment", "T371");
//					}else {
//						extent.HeaderChildNode("Logged In user-Verify for each product on the site name below the product images.");
//						System.out.println("T382");
//						extent.extentLogger("Shop Page> Saved Moment", "T382");
//					}		
//				navigateToSavedMomentsAllTabs();
//				 String siteName = getText(HipiShopPage.objThirdPartySiteName);
//				if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//					  logger.info("third party site name is " + siteName);	
//						extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteName);
//					}else {
//						logger.info("third party site name is displayed");	
//						extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//					} 
//				 click(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//				 String siteNameAccessories = getText(HipiShopPage.objThirdPartySiteName);
//					if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//						  logger.info("third party site name is " + siteNameAccessories);	
//							extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteNameAccessories);
//						}else {
//							logger.info("third party site name is displayed");	
//							extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//						} 
//					click(HipiShopPage.objBeautyTab, "Beauty Tab");
//					 String siteNameBeauty= getText(HipiShopPage.objThirdPartySiteName);
//					 if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//						  logger.info("third party site name is " + siteNameBeauty);	
//							extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteNameBeauty);
//						}else {
//							logger.info("third party site name is displayed");	
//							extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//						} 
//					 click(HipiShopPage.objHairTab, "Hair Tab");
//					 String siteNameHair= getText(HipiShopPage.objThirdPartySiteName);
//					 if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//						  logger.info("third party site name is " + siteNameHair);	
//							extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteNameHair);
//						}else {
//							logger.info("third party site name is displayed");	
//							extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//						} 
//					 navigateToHomePage();
//			
//		}
//					 public void navigateToProductWebsite__T372____T383(String userType) throws Exception {
//			
//
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T372 - Guest User- Verify each product image is clickble and navigate to product website");
//					System.out.println("T372");
//					extent.extentLogger("Shop Page> Saved Moment", "T372");
//					}else {
//						extent.HeaderChildNode("T38 - Logged In User- Verify each product image is clickble and navigate to product website");
//						System.out.println("T383");
//						extent.extentLogger("Shop Page> Saved Moment", "T383");
//					}		
//				
//
//				swipeDownMultipleVideos();
//				navigateToSavedMomentsAllTabs();
//				verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				clickingOnProductImageUserNavigateToProductWebSite(userType);
//				 click(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//				 clickingOnProductImageUserNavigateToProductWebSite(userType);
//				 click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				 clickingOnProductImageUserNavigateToProductWebSite(userType);
//				 click(HipiShopPage.objHairTab, "Hair Tab");
//				 clickingOnProductImageUserNavigateToProductWebSite(userType);
////				 navigateToHomePage();
//			}	
			
		
		public void clickingOnProductImageUserNavigateToProductWebSite(String userType) throws Exception {
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			waitTime(5000);
			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			 verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
			
		}
		
		public void clickingOnArrowMarkUserNavigateToProductWebSite(String userType) throws Exception {
			
//			SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
			PartialSwipe("UP", 1);
			verifyElementPresentAndClick(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
			waitTime(5000);
			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			 verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
			
		}
//		public void ArrowMarkUserNavigateToProductWebSite__T373__T384(String userType) throws Exception {
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T373 - Guest User - Verify each Arrow Mark (Get Button) is clickble and navigate to product website");
//					System.out.println("T373");
//					extent.extentLogger("Shop Page> Saved Moment", "T373");
//					}else {
//						extent.HeaderChildNode("T384 - Logged In User - Verify each Arrow Mark (Get Button) is clickble and navigate to product website");
//						System.out.println("T384");
//						extent.extentLogger("Shop Page> Saved Moment", "T384");
//					}			
//				swipeDownMultipleVideos();
//				navigateToSavedMomentsAllTabs();
//				verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				clickingOnArrowMarkUserNavigateToProductWebSite(userType);
//				PartialSwipe("DOWN", 1);
//				click(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//				clickingOnArrowMarkUserNavigateToProductWebSite(userType);
//				PartialSwipe("DOWN", 1);
//				click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				clickingOnArrowMarkUserNavigateToProductWebSite(userType);
//				PartialSwipe("DOWN", 1);
//				click(HipiShopPage.objHairTab, "Hair Tab");
//				clickingOnArrowMarkUserNavigateToProductWebSite(userType);
////				navigateToHomePage();
//				
//			}
	
		
		
//		public void productCardDetails__T370__T381(String userType) throws Exception {
//			
//				
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T370 - Guest User- Verify the product card details");
//					System.out.println("T370");
//					extent.extentLogger("Shop Page> Saved Moment", "T370");
//					}else {
//						extent.HeaderChildNode("T381 - Logged In user-Verify the product card details");
//						System.out.println("T381");
//						extent.extentLogger("Shop Page> Saved Moment", "T381");
//					}		
//				
//				navigateToSavedMoments();
//				
//				PartialSwipe("UP", 1);
//				
//				verifyElementPresent(HipiShopPage.objProductImageThumbnail, "product card image");
//				verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Product card GET ");
//				verifyElementPresent(HipiShopPage.objProductDetailsPage,"Product card name");
//				
//				String siteName = getText(HipiShopPage.objThirdPartySiteName);
//				
//					if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//						  logger.info("third party site name is " + siteName);	
//							extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteName);
//						}else {
//							logger.info("third party site name is displayed");	
//							extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//						} 	
//					navigateToHomePage();
//			}			
						
		
//=============================================Shop >Beauty========================================================
		
//		public void beautyBannerImage__T385__T388(String userType) throws Exception {
//			
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify Beauty banner image");
//					System.out.println("T385");
//					extent.extentLogger("Shop >Beauty", "T385");
//					}else {
//						extent.HeaderChildNode("Logged In user-Verify Beauty banner image");
//						System.out.println("T388");
//						extent.extentLogger("Shop >Beauty", "T388");
//					}		
//			
//
//				navigateToSavedMomentsAllTabs();
//				click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				click(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				verifyElementPresent(HipiShopPage.objBeautyBannerImage, "Beauty banner image");
//				verifyElementPresent(HipiShopPage.objBeautyCoverHeading, "Beauty Cover Heading");
//				verifyElementPresent(HipiShopPage.objBeautyCoverMessage, "Beauty Cover Message");
//				navigateToHomePage();
//			}
		
		
		
		
//		public void beatyDetails__T386__T389(String userType) throws Exception {
//			
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify Beaty details page");
//					System.out.println("T386");
//					extent.extentLogger("Shop >Beauty", "T386");
//					}else {
//						extent.HeaderChildNode("Logged In user-Verify Beaty details page");
//						System.out.println("T389");
//						extent.extentLogger("Shop >Beauty", "T389");
//					}		
//				navigateToSavedMomentsAllTabs();
//				click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				click(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				verifyElementPresent(HipiShopPage.objProductImageThumbnail, "product card image");
//				verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Product card GET ");
//				verifyElementPresent(HipiShopPage.objProductDetailsPage,"Product card name");
//				verifyElementPresent(HipiShopPage.objProductCardPosterImage,"Product card poster image");
//				String siteName = getText(HipiShopPage.objThirdPartySiteName);
//					if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//						  logger.info("third party site name is " + siteName);	
//							extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteName);
//						}else {
//							logger.info("third party site name is displayed");	
//							extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//						} 	
//					navigateToHomePage();
//			}	
		
		
		
//		public void beautyCardImageClickAndGetButton__T387__T390(String userType) throws Exception {
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T387 - Guest User- Verify Beauty Card image click and get button click(Arrow mark)");
//					System.out.println("T387");
//					extent.extentLogger("Shop >Beauty", "T387");
//					}else {
//						extent.HeaderChildNode("T390 - Logged In User- Verify Beauty Card image click and get button click(Arrow mark)");
//						System.out.println("T390");
//						extent.extentLogger("Shop >Beauty", "T390");
//					}		
//				swipeDownMultipleVideos();
//				navigateToSavedMomentsAllTabs();
//				click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				clickingOnProductImageUserNavigateToProductWebSite(userType);
//				clickingOnArrowMarkUserNavigateToProductWebSite(userType);
////				navigateToHomePage();
//			}
			
		
		
//======================================Shop >Hair==================================================================
		
//public void beautyBannerImageHair__T391__T395(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify Hair banner image");
//					System.out.println("T391");
//					extent.extentLogger("Shop >Beauty", "T391");
//					}else {
//						extent.HeaderChildNode("Logged In user-Verify Hair banner image");
//						System.out.println("T395");
//						extent.extentLogger("Shop >Beauty", "T395");
//					}		
//			
//
//				navigateToSavedMomentsAllTabs();
//				click(HipiShopPage.objHairTab, "Hair Tab");
//				click(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				verifyElementPresent(HipiShopPage.objBeautyBannerImage, "Beauty banner image");
//				verifyElementPresent(HipiShopPage.objBeautyCoverHeading, "Beauty Cover Heading");
//				verifyElementPresent(HipiShopPage.objBeautyCoverMessage, "Beauty Cover Message");
//				navigateToHomePage();
//			}
//	
		
		
		
//		public void beatyDetailsHair__T392__T394(String userType) throws Exception {
//			
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User-Verify Hair details page");
//					System.out.println("T392");
//					extent.extentLogger("Shop >Beauty", "T392");
//					}else {
//						extent.HeaderChildNode("Logged In user-Verify Hair details page");
//						System.out.println("T394");
//						extent.extentLogger("Shop >Beauty", "T394");
//					}		
//				navigateToSavedMomentsAllTabs();
//				click(HipiShopPage.objHairTab, "Hair Tab");
//				click(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				verifyElementPresent(HipiShopPage.objProductImageThumbnail, "product card image");
//				verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Product card GET ");
//				verifyElementPresent(HipiShopPage.objProductDetailsPage,"Product card name");
//				verifyElementPresent(HipiShopPage.objProductCardPosterImage,"Product card poster image");
//				String siteName = getText(HipiShopPage.objThirdPartySiteName);
//					if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
//						  logger.info("third party site name is " + siteName);	
//							extent.extentLoggerPass("Shop >In app Browser", "third party site name is " + siteName);
//						}else {
//							logger.info("third party site name is displayed");	
//							extent.extentLoggerFail("Shop >In app Browser", "third party site name is displayed");
//						} 	
//					navigateToHomePage();
//			}	
//		
		
		
//		public void beautyCardImageClickAndGetButtonHair__T393__T396(String userType) throws Exception {
//	
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T393 - Guest User- Verify Hair Card image click and get button click(Arrow mark)");
//					System.out.println("T393");
//					extent.extentLogger("Shop >Beauty", "T393");
//					}else {
//						extent.HeaderChildNode("T396 - Logged In User- Verify Hair Card image click and get button click(Arrow mark)");
//						System.out.println("T396");
//						extent.extentLogger("Shop >Beauty", "T396");
//					}		
//				swipeDownMultipleVideos();
//				navigateToSavedMomentsAllTabs();
//				click(HipiShopPage.objHairTab, "Hair Tab");
//				verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon mini player");
//				clickingOnProductImageUserNavigateToProductWebSite(userType);
//				clickingOnArrowMarkUserNavigateToProductWebSite(userType);
//				navigateToHomePage();
//			}
			
	
		
		
		
		
//========================================Shoppable Vidoes==================================================================
		
		
		
		public void videoIsShopable__T174(String userType) throws Exception {
			extent.HeaderChildNode("T174 , Verify that video is shopable");
			System.out.println("T174");
			extent.extentLogger("Shoppable Vidoes", "T174");
			navigateHomeandClickonShop();
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");

			waitTime(3000);
				
				if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
					logger.info("User is able to see SHOP button on the video below the screen beside discovery icon");	
					extent.extentLoggerPass("Shoppable Vidoes", "User is able to see SHOP button on the video below the screen beside discovery icon");
				}else {
					logger.info("User is not able to see SHOP button on the video below the screen beside discovery icon");	
					extent.extentLoggerFail("Shoppable Vidoes", "User is not able to see SHOP button on the video below the screen beside discovery icon");
				}
				navigateToHomePage();
				
			
		}
		
		public void shoppableVideo__T175__T179(String userType) throws Exception {
			
			
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T175 - (Guest User - Verify Shoppable video)");
					System.out.println("T175");
					extent.extentLogger("Shoppable Vidoes", "T175");
					}else {
						extent.HeaderChildNode("T179 - (Logged In User - Verify Shoppable video)");
						System.out.println("T179");
						extent.extentLogger("Shoppable Vidoes", "T179");
					}	
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
				navigateHomeandClickonShop();
				verifyElementPresent(HipiHomePage.objForYou, "For You");
				
				verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen");
				if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
					logger.info("shoppale video is appears on the For You section for Guest user");	
					extent.extentLoggerPass("Shoppable Vidoes", "shoppale video is appears on the For You section for Guest user");
				}else {
					logger.info("shoppale video is not appears on the For You section for Guest user");	
					extent.extentLoggerFail("Shoppable Vidoes", "shoppale video is not appears on the For You section for Guest user");
				}
				navigateToHomePage();
				
				
			}
	
	
		public void  shoppableVideo__T176__T180(String userType) throws Exception {
			
				
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T176 - Guest User -Verify Shoppable video For You section");
					System.out.println("T176");
					extent.extentLogger("Shoppable Vidoes", "T176");
					}else {
						extent.HeaderChildNode("T180 - Logged In Userr - Verify Shoppable video For You section");
						System.out.println("T180");
						extent.extentLogger("Shoppable Vidoes", "T180");
					}		
				SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				verifyElementPresent(HipiHomePage.objForYou, "For You");
				
				
				if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
					logger.info("shoppale video is appears on the For You section for Guest user");	
					extent.extentLoggerPass("Shoppable Vidoes", "shoppale video is appears on the For You section for Guest user");
				}else {
					logger.info("shoppale video is not appears on the For You section for Guest user");	
					extent.extentLoggerFail("Shoppable Vidoes", "shoppale video is not appears on the For You section for Guest user");
				}
				
				if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
					logger.info("user is able to see shoppable videos on For You section");	
					extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
				}else {
					logger.info("user is not able to see shoppable videos on For You section");	
					extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
				}
				
				navigateToHomePage();

			}
		
		
		public void  shoppableVideoFollowingSection__T177(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("Guest User -Verify Shoppable video Following section");
					System.out.println("T177");
					extent.extentLogger("Shoppable Vidoes", "T177");
				
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
				waitTime(4000);
				if(verifyElementPresent(HipiHomePage.objFollowCTAFollowingScreen, "Follow Button")){
					logger.info("When ever user clicking on Following Button user is able to see login button");	
					extent.extentLoggerPass("Shoppable Vidoes", "When ever user clicking on Following Button user is able to see login button");
				}else {
					logger.info("When ever user clicking on Following Button user is not able to see login button");	
					extent.extentLoggerFail("Shoppable Vidoes", "When ever user clicking on Following Button user is not able to see login button");
				}
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
				navigateToHomePage();
				
			}		
		}
		public void shopableVideosArePresentOnTheFeed__T178__T182(String userType) throws Exception {
			

			
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T178 - Guest User -Verify that shopable videos are present on the feed");
					System.out.println("T178");
					extent.extentLogger("Shoppable Vidoes", "T178");
					}else {
						extent.HeaderChildNode("T182 - Logged In User -Verify that shopable videos are present on the feed");
						System.out.println("T182");
						extent.extentLogger("Shoppable Vidoes", "T182");
					}				
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
				navigateHomeandClickonShop();
				waitTime(4000);
				if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
					logger.info("user is able to see shoppable videos on For You section");	
					extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
				}else {
					logger.info("user is not able to see shoppable videos on For You section");	
					extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
				}
				if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
					logger.info("The shopable video is present at on the feed along with SHOP button for you section");	
					extent.extentLoggerPass("Shoppable Vidoes", "The shopable video is present at on the feed along with SHOP button for you section");
				}else {
					logger.info("The shopable video is not present at on the feed along with SHOP button for you section");	
					extent.extentLoggerFail("Shoppable Vidoes", "The shopable video is not  present at on the feed along with SHOP button for you section");
				}
				
				navigateToHomePage();
				
			}	
		
		

		
		public void  shoppableVideoFollowingSectionNonSub__T181(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
					extent.HeaderChildNode("T181 - Logged In User - Verify Shoppable video Following section");
					System.out.println("T181");
					extent.extentLogger("Shoppable Vidoes", "T181");
					
				
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
				waitTime(5000);
				SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
					logger.info("user is able to see shoppable videos on For You section");	
					extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
				}else {
					logger.info("user is not able to see shoppable videos on For You section");	
					extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
				}
				if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
					logger.info("user is able see shoppable video on following section");	
					extent.extentLoggerPass("Shoppable Vidoes", "user is able see shoppable video on following section");
				}else {
					logger.info("user is not able see shoppable video on following section");	
					extent.extentLoggerFail("Shoppable Vidoes", "user is not able see shoppable video on following section");
				}
				
				navigateToHomePage();
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
				navigateToHomePage();
			}		
		}
		
		
//		public void saveLookCTANavigationOnShoppableVideo__T1620__T1624(String userType) throws Exception {
//			
//			if(userType.equalsIgnoreCase("Guest")) {
//				extent.HeaderChildNode("T1620 - Guest User- Verify the Save Look CTA and it click & Navigation on shoppable video");
//				System.out.println("T1620");
//				extent.extentLogger("Shoppable Vidoes", "T1620");
//				}else {
//					extent.HeaderChildNode("T1624 - Logged In User- Verify the Save Look CTA and it click & Navigation on shoppable video");
//					System.out.println("T1624");
//					extent.extentLogger("Shoppable Vidoes", "T1624");
//				}			
//			
//			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//			waitTime(4000);
//			
////			verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "More Button trending On Hipi");
//			waitTime(3000);
//			for(int i=0;i<=10;i++)
//			{
//				if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
//				{
//					verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
//					waitTime(4000);
//					if(verifyElementExist(HipiHomePage.objmonetizationCard, "Save look")) {
//						verifyElementPresentAndClick(HipiHomePage.objmonetizationCard, "Save look");
//						break;
//					}else {
//						Back(1);
//						Swipe("UP", 1);
//						
//					}
//					
//				}else {
//					Swipe("UP", 1);
//				}
//				
//			}
//			waitTime(3000);
//			if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
//				logger.info("user is able to see shoppable videos on For You section");	
//				extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
//			}else {
//				logger.info("user is not able to see shoppable videos on For You section");	
//				extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
//			}
//			description = getText(HipiHomePage.objDescription);
//			System.out.println(description);
//			String[] name = description.split("@");
//			System.out.println(name);
//			logger.info("User account name " + name[1]);
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//			waitTime(2000);
////			verifyElementPresentAndClick(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
//			waitTime(1000);
//			
//			if (verifyElementPresentAndClick(HipiHomePage.objSavedCTAText, "Saved CTA")) {
//				logger.info("On Tap Save Look CTA it is changed to Saved CTA on video screen");	
//				extent.extentLoggerPass("Shoppable Vidoes", "On Tap Save Look CTA it is changed to Saved CTA on video screen");
//			}else {
//				logger.info("On Tap Save Look CTA it is not changed to Saved CTA on video screen");	
//				extent.extentLoggerFail("Shoppable Vidoes", "On Tap Save Look CTA it is not changed to Saved CTA on video screen");
//			}
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
//			waitTime(2000);
//			verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//			description1 = getText(HipiShopPage.objArtistTitle);
//			String[] name1 = description.split("|");
//			System.out.println(name1);
//			logger.info(description1);
//			if(name[1].contains(name1[1])) {
//				logger.info("Shop page of same video is displayed");
//				extent.extentLoggerPass("Shoppable Vidoes", "Shop page of same video is displayed");
//			}else {
//				logger.error("Shop page of same video is NOT displayed");
//				extent.extentLoggerFail("Shoppable Vidoes", "Shop page of same video is NOT displayed");
//			}
//			verifyElementPresentAndClick(HipiShopPage.objDeleteOption, "Delete Option");
//			Back(1);
//			if (verifyElementExist(HipiHomePage.objSavedCTAText, "Saved CTA")) {
//				logger.info("When ever user delete video WISHLIST of shop page the Saved CTA is not change  to Save Look CTA again on the player screen ");
//				extent.extentLoggerFail("Shoppable Vidoes", "When ever user delete video WISHLIST of shop page the Saved CTA is not change  to Save Look CTA again on the player screen ");
//			}else {
//				logger.error("When ever user delete video WISHLIST of shop page the Saved CTA is change  to Save Look CTA again on the player screen ");
//				extent.extentLoggerPass("Shoppable Vidoes", "When ever user delete video WISHLIST of shop page the Saved CTA is change  to Save Look CTA again on the player screen ");
//			}
//			navigateToHomePage();
//	
//	}

//public void  productImagesOfPlayingVideoDisplays__T1621___T1625(String userType) throws Exception {
//			
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T1621 - Guest User- Verify the Saved CTA and it click & Navigation on shoppable video");
//					System.out.println("T1621");
//					extent.extentLogger("Shoppable Vidoes", "T1621");
//					}else {
//						extent.HeaderChildNode("T1625 - Logged In User- Verify the Saved CTA and it click & Navigation on shoppable video");
//						System.out.println("T1625");
//						extent.extentLogger("Shoppable Vidoes", "T1625");
//					}			
//				
//
//			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//			waitTime(4000);
//			for(int i=0;i<=10;i++)
//			{
//				if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
//				{
//					verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
//					if(verifyElementExist(HipiHomePage.objmonetizationCard, "Save look")) {
//						verifyElementPresentAndClick(HipiHomePage.objmonetizationCard, "Save look");
//						break;
//					}else {
//						Back(1);
//						Swipe("UP", 1);
//						
//					}
//					
//				}
//				
//			}
//			waitTime(3000);
//				if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
//				logger.info("user is able to see shoppable videos on For You section");	
//				extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
//			}else {
//				logger.info("user is not able to see shoppable videos on For You section");	
//				extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
//			}
//			description = getText(HipiHomePage.objDescription);
//			System.out.println(description);
//			String[] name = description.split("@");
//			System.out.println(name);
//			logger.info("User account name " + name[1]);
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//			waitTime(1000);
//			if (verifyElementPresentAndClick(HipiHomePage.objSavedCTAText, "Saved CTA")) {
//				logger.info("On Tap Save Look CTA it is changed to Saved CTA on video screen");	
//				extent.extentLoggerPass("Shoppable Vidoes", "On Tap Save Look CTA it is changed to Saved CTA on video screen");
//			}else {
//				logger.info("On Tap Save Look CTA it is not changed to Saved CTA on video screen");	
//				extent.extentLoggerFail("Shoppable Vidoes", "On Tap Save Look CTA it is not changed to Saved CTA on video screen");
//			}
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
//			waitTime(2000);
//			verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//			description1 = getText(HipiShopPage.objArtistTitle);
//			String[] name1 = description.split("|");
//			System.out.println(name1);
//			logger.info(description1);
//			if(name[1].contains(name1[1])) {
//				logger.info("Shop page of same video is displayed");
//				extent.extentLoggerPass("Shoppable Vidoes", "Shop page of same video is displayed");
//			}else {
//				logger.error("Shop page of same video is NOT displayed");
//				extent.extentLoggerFail("Shoppable Vidoes", "Shop page of same video is NOT displayed");
//			}
//			verifyElementPresentAndClick(HipiShopPage.objDeleteOption, "Delete Option");
//			Back(1);
//			if (verifyElementExist(HipiHomePage.objSavedCTAText, "Saved CTA")) {
//				logger.info("When ever user delete video WISHLIST of shop page the Saved CTA is not change  to Save Look CTA again on the player screen ");
//				extent.extentLoggerFail("Shoppable Vidoes", "When ever user delete video WISHLIST of shop page the Saved CTA is not change  to Save Look CTA again on the player screen ");
//			}else {
//				logger.error("When ever user delete video WISHLIST of shop page the Saved CTA is change  to Save Look CTA again on the player screen ");
//				extent.extentLoggerPass("Shoppable Vidoes", "When ever user delete video WISHLIST of shop page the Saved CTA is change  to Save Look CTA again on the player screen ");
//			}
//			navigateToHomePage();
//			}
//		
//		
		
		
//	public void  productThumnailImage__T1622__T1626(String userType) throws Exception {
//	
//	if(userType.equalsIgnoreCase("Guest")) {
//		extent.HeaderChildNode("T1622 - Guest User- Verify the product thumnail image and it click & Navigation on the shoppable video");
//		System.out.println("T1622");
//		extent.extentLogger("Shoppable Vidoes", "T1622");
//		}else {
//			extent.HeaderChildNode("T1626 - Logged In User- Verify the product thumnail image and it click & Navigation on the shoppable video");
//			System.out.println("T1626");
//			extent.extentLogger("Shoppable Vidoes", "T1626");
//		}			
//	
//
//
//	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//	waitTime(4000);
////	Swipe("UP", 1);
//	verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "More Button trending On Hipi");
//	waitTime(3000);
//	for(int i=0;i<=10;i++)
//	{
//		if(verifyElementExist(HipiDiscoverPage.objBucketIcon,"Buckte Icon"))
//		{
//			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
//			if(verifyElementExist(HipiHomePage.objSaveLook, "Save look")) {
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save look");
//				break;
//			}else {
//				Back(1);
//				Swipe("UP", 1);	
//			}
//		}else {
//			Swipe("UP", 1);	
//		}
//	}
//	waitUntilElementDisplayed(HipiHomePage.objSaveLook, 10);
//	verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//	waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
////&& verifyElementPresent(HipiHomePage.objProductImage3, "Product Image 3 Thumbnail"
//	if(verifyElementPresent(HipiHomePage.objProductImage, "Product Image 1 Thumbnail") && verifyElementPresent(HipiHomePage.objProductImage2, "Product Image 2 Thumbnail") ) {
//	logger.info("The product images of playing video is display bottom of the video and 3 image is display");
//	extent.extentLoggerPass("Shoppable Vidoes", "The product images of playing video is display bottom of the video and 3 image is display");
//	}else {
//	logger.info("The product images of playing video is not display bottom of the video and 3 image is not display");
//	extent.extentLoggerFail("Shoppable Vidoes", "The product images of playing video is display bottom of the video and 3 image is not display");
//	
//	}
//	waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//	click(HipiHomePage.objProductImage, "Product Image Thumbnail");
//
//	if (verifyElementExist(AMDShopPage.objInThisVideo,"In This Video option")) {
//	logger.info("On tap those product images from bottom side user is able navigates to shop page ");	
//	extent.extentLoggerPass("", "On tap those product images from bottom side user is able navigates to shop page ");
//	}else {
//	logger.info("On tap those product images from bottom side user is not able navigates to shop page ");	
//	extent.extentLoggerFail("", "On tap those product images from bottom side user is not able navigates to shop page ");
//	}
//	navigateToHomePage();
//	}
		
		

		
//	public void TapOnProductImages__T1623__T1627(String userType) throws Exception {
//	
//	
//	if(userType.equalsIgnoreCase("Guest")) {
//		extent.HeaderChildNode("T1623 - Guest User- Verify the shop page navigation from shoppable video");
//		System.out.println("T1623");
//		extent.extentLogger("Shoppable Vidoes", "T1623");
//		}else {
//			extent.HeaderChildNode("T1627 - Logged In User- Verify the shop page navigation from shoppable video");
//			System.out.println("T1627");
//			extent.extentLogger("Shoppable Vidoes", "T1627");
//		}			
//
//	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//	waitTime(4000);
////	Swipe("UP", 1);
//	verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "More Button trending On Hipi");
//	waitTime(3000);
//	for(int i=0;i<=10;i++)
//	{
//		if(verifyElementExist(HipiDiscoverPage.objBucketIcon,"Bucket Icon"))
//		{
//			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
//			waitTime(4000);
//			if(verifyElementExist(HipiHomePage.objmonetizationCard, "Save look")) {
//				verifyElementPresentAndClick(HipiHomePage.objmonetizationCard, "Save look");
//				break;
//			}else {
//				Back(1);
//				Swipe("UP", 1);
//				
//			}
//			
//		}
//		
//	}
//waitTime(3000);
//verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//click(HipiHomePage.objProductImage, "Product Image Thumbnail");
//if (verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option")) {
//	logger.info("On tap those product images from bottom side user is able navigates to shop page ");	
//	extent.extentLoggerPass("", "On tap those product images from bottom side user is able navigates to shop page ");
//}else {
//	logger.info("On tap those product images from bottom side user is not able navigates to shop page ");	
//	extent.extentLoggerFail("", "On tap those product images from bottom side user is not able navigates to shop page ");
//}	
//verifyElementExist(AMDShopPage.objInThisVideo,"In This Video option");
//
//if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
//	logger.info("Products images is displayed ");	
//	extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
//}else {
//	logger.info("Products images is displayed ");	
//	extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
//}
//verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab,"WISHLIST");
//
//verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
//waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
//	logger.info("Products images is displayed ");	
//	extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
//}else {
//	logger.info("Products images is displayed ");	
//	extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
//}
//navigateToHomePage();
//}
		
		
		
//============================================Shop>carousel sheet========================================================
		
//		public void userShouldBeLandedOnINTHISVIDEOTab__T313__T323(String userType) throws Exception {
//			
//			
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User -Verify for user should be landed on \"IN THIS VIDEO\" tab of the shop page when clicks the saved video objects/products in a small carousel");
//					System.out.println("T313");
//					extent.extentLogger("Shoppable Vidoes", "T313");
//					}else {
//						extent.HeaderChildNode("Logged In User -Verify for user should be landed on \"IN THIS VIDEO\" tab of the shop page when clicks the saved video objects/products in a small carousel");
//						System.out.println("T323");
//						extent.extentLogger("Shoppable Vidoes", "T323");
//					}	
//
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				click(HipiHomePage.objShopButton, "Shop Button");
//				click(HipiHomePage.objHomeIcon, "Home Icon");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//				click(HipiHomePage.objProductImage, "Product Image Thumbnail");
//				if (verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option")) {
//					logger.info(" User is always land on IN THIS VIDEO tab with all the shop page details.");	
//					extent.extentLoggerPass("", " User is always land on IN THIS VIDEO tab with all the shop page details.");
//				}else {
//					logger.info(" User is not land on IN THIS VIDEO tab with all the shop page details.");	
//					extent.extentLoggerFail("", " User is not land on IN THIS VIDEO tab with all the shop page details.");
//				}	
//				navigateToHomePage();
//				
//			}	
		
		
//		public void productByClickingTheSavedSmallCarouselImages__T325(String userType) throws Exception {
//			
//		
//			
//				extent.HeaderChildNode("Verify for user can able to buy a product by clicking the saved small carousel images.");
//				System.out.println("T325");
//				extent.extentLogger("Shoppable Vidoes", "T325");
//			
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			description = getText(HipiHomePage.objDescription);
//			System.out.println(description);
//			String[] name = description.split("@");
//			System.out.println(name);
//			logger.info("User account name " + name[1]);
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//			click(HipiHomePage.objProductImage, "Product Image Thumbnail");
//			waitTime(2000);
//			verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//			description1 = getText(HipiShopPage.objArtistTitle);
//			String[] name1 = description.split("|");
//			System.out.println(name1);
//			logger.info(description1);
//			if(name[1].contains(name1[1])) {
//				logger.info("Shop page of same video is displayed");
//				extent.extentLoggerPass("Shoppable Vidoes", "Shop page of same video is displayed");
//			}else {
//				logger.error("Shop page of same video is NOT displayed");
//				extent.extentLoggerFail("Shoppable Vidoes", "Shop page of same video is NOT displayed");
//			}
//			verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
//			waitTime(5000);
//			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
//				logger.info("User is redirect to product  website ");	
//				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
//				
//			}else {
//				logger.info("User is not redirect to product  website ");	
//				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
//			}
//			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
//				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
//				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
//			}else {
//				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
//				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
//			}
//			verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
//			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
//			
//			verifyElementPresentAndClick(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
//			waitTime(5000);
//			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
//				logger.info("User is redirect to product  website ");	
//				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
//				
//			}else {
//				logger.info("User is not redirect to product  website ");	
//				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
//			}
//			
//			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
//				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
//				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
//			}else {
//				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
//				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
//			}
//	
//			navigateToHomePage();
//			
//			}
//		
		
		
		
//================================================Feed > SHOP | And | Feed > Saved==============================================================
		
	
//		public void feedSHOPWifiConnectionToOFF__T411__T414(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User- Verify Network Error tapping upon SHOP CTA");
//					System.out.println("T411");
//					extent.extentLogger("Shoppable Vidoes", "T411");
//					}else {
//						extent.HeaderChildNode("Logged In User- Verify Network Error tapping upon SHOP CTA");
//						System.out.println("T414");
//						extent.extentLogger("Shoppable Vidoes", "T414");
//					}	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");	
//			setWifiConnectionToONOFF("Off");
//			waitTime(15000);
//			click(HipiHomePage.objShopButton, "Shop Button");
//			waitTime(3000);
//			
//			if (verifyElementExist(AMDShopPage.objInThisVideo,"In This Video option")) {
//				logger.info("User not get network error when he tap on SHOP CTA without Internet and open Shop page");	
//				extent.extentLoggerFail("", "User not get network error when he tap on SHOP CTA without Internet and open Shop page");
//			}else {
//				logger.info("User get network error when he tap on SHOP CTA without Internet ");	
//				extent.extentLoggerPass("", "User get network error when he tap on SHOP CTA without Internet ");
//			}	
//			setWifiConnectionToONOFF("On");
//			waitTime(3000);
//			navigateToHomePage();
//		}
	

//		public void  feedSavedWifiConnectionToOFF__T410__T413(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User- Verify Network Error tapping upon Saved CTA");
//					System.out.println("T410");
//					extent.extentLogger("Shoppable Vidoes", "T410");
//					}else {
//						extent.HeaderChildNode("Logged In User- Verify Network Error tapping upon Saved CTA");
//						System.out.println("T413");
//						extent.extentLogger("Shoppable Vidoes", "T413");
//					}	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");	
//			setWifiConnectionToONOFF("Off");
//			waitTime(15000);
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Lock");
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//			if(verifyElementExist(HipiHomePage.objProductImage, "Product Image Thumbnail")) {
//				logger.info("User is not get network error when he tap on Saved CTA without Internet and Product Image Thumbnail is displayed");
//				extent.extentLoggerFail("Shoppable Vidoes", "User is not get network error when he tap on Saved CTA without Internet and Product Image Thumbnail is displayed");
//			}else {
//				logger.info("User is get network error when he tap on Saved CTA without Internet");
//				extent.extentLoggerPass("Shoppable Vidoes", "User is get network error when he tap on Saved CTA without Internet");
//				
//			}
//			
//			setWifiConnectionToONOFF("On");
//			waitTime(3000);
//		navigateToHomePage();
//	}
					
		
		
//=======================================================Shop > Shop page=======================================================
		
		
				
//		public void  UnSaveAndSaveTheProductAgain__T212__T248(String userType) throws Exception {
//			
//	
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User -Verify for user should be able to Un-save and save the product again from shoppable video.");
//					System.out.println("T212");
//					extent.extentLogger("Shoppable Vidoes", "T212");
//					}else {
//						extent.HeaderChildNode("Logged In User -Verify for user should be able to Un-save and save the product again from shoppable video.");
//						System.out.println("T248");
//						extent.extentLogger("Shoppable Vidoes", "T248");
//					}	
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				click(HipiHomePage.objShopButton, "Shop Button");
//				click(HipiHomePage.objHomeIcon, "Home Icon");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitTime(2000);	
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitTime(2000);	
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitTime(2000);	
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitTime(2000);	
//				click(HipiHomePage.objShopButton, "Shop Button");
//				waitTime(2000);
//				verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//				deleteTheProductsFromSavedMomentsTab(userType);
////				Swipe("DOWN", 1);
//				Back(1);
////				if (verifyElementExist(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet")) {
////					logger.info("User able to see Close Button Carousel Sheet");	
////					extent.extentLoggerPass("Shoppable Vidoes", "User able to see Close Button Carousel Sheet");
////					click(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
////				}else {
////					logger.info("User not able to see Close Button Carousel Sheet");	
////					extent.extentLoggerFail("Shoppable Vidoes", "User not able to see Close Button Carousel Sheet");
////				}	
////				if (verifyElementPresentAndClick(HipiHomePage.objSaveLookCTAText, "Save Look CTA")) {
////					logger.info("user is able to see the  save look button when use delect WISHLIST video");	
////					extent.extentLoggerPass("Shoppable Vidoes", "user is able to see the  save look button when use delect WISHLIST video");
////				}else {
////					logger.info("user is not able to see the  save look button when use delect WISHLIST video");	
////					extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see the  save look button when use delect WISHLIST video");
////				}	
//				verifyElementPresentAndClick(HipiHomePage.objSaveLookCTAText, "Save Look CTA");
//				description = getText(HipiHomePage.objDescription);
//				System.out.println(description);
//				String[] name = description.split("@");
//				System.out.println(name);
//				logger.info("User account name " + name[1]);
//				waitTime(3000);
////				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitTime(2000);	
//				click(HipiHomePage.objShopButton, "Shop Button");
//				waitTime(2000);
//				verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//				waitTime(2000);
//				description1 = getText(HipiShopPage.objArtistTitle);
//				String[] name1 = description.split("|");
//				System.out.println(name1);
//				logger.info(description1);
//				if(name[1].contains(name1[1])) {
//					logger.info("User is able to save again if the product delete from WISHLIST by clicking on Save look");
//					extent.extentLoggerPass("Shoppable Vidoes", "User is able to save again if the product delete from WISHLIST by clicking on Save look");
//				}else {
//					logger.error("User is not able to save again if the product delete from WISHLIST by clicking on Save look");
//					extent.extentLoggerFail("Shoppable Vidoes", "User is not able to save again if the product delete from WISHLIST by clicking on Save look");
//				}
//				navigateToHomePage();
//			}
//				

//		public void productDataInsideSavedMomentTab__T215__T251(String userType) throws Exception {
//			
//		
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("Guest User - Verify for product data inside WISHLIST");
//					System.out.println("T215");
//					extent.extentLogger("Shoppable Vidoes", "T215");
//					}else {
//						extent.HeaderChildNode("Logged In User -Verify for product data inside WISHLIST");
//						System.out.println("T251");
//						extent.extentLogger("Shoppable Vidoes", "T251");
//					}	
//			
//				
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				description = getText(HipiHomePage.objDescription);
//				System.out.println(description);
//				String[] name = description.split("@");
//				System.out.println(name);
//				logger.info("User account name " + name[1]);
//				click(HipiHomePage.objShopButton, "Shop Button");
//				click(HipiHomePage.objHomeIcon, "Home Icon");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//				verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
//				waitTime(2000);
//				verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//				description1 = getText(HipiShopPage.objArtistTitle);
//				String[] name1 = description.split("|");
//				System.out.println(name1);
//				logger.info(description1);
//				if(name[1].contains(name1[1])) {
//					logger.info("Shop page of same video is displayed");
//					extent.extentLoggerPass("Shoppable Vidoes", "Shop page of same video is displayed");
//				}else {
//					logger.error("Shop page of same video is NOT displayed");
//					extent.extentLoggerFail("Shoppable Vidoes", "Shop page of same video is NOT displayed");
//				}
//				navigateToHomePage();
//			}
			

					
		public void deleteTheProductsFromSavedMomentsTab(String userType) throws Exception {
			
	
		 for(int i=1; i<=30; i++) {
			 
			 if (verifyElementExist(HipiShopPage.objDeleteOption, "Delete Option")) {
				
				 click(HipiShopPage.objDeleteOption, "Delete Option");
					logger.info("user is able to delete the products from WISHLIST");
					extent.extentLoggerPass("Shoppable Vidoes", "user is able to delete the products from WISHLIST");
			 }	else {
				 
				break;
			}
		 	}
		 }
		
		
//=============================================Shop==========================================================
		
		
//		public void ableToDeleteSavedItems__T218__T254(String userType) throws Exception {
//		
//			
//	
//				if(userType.equalsIgnoreCase("Guest")) {
//					extent.HeaderChildNode("T218 - Guest User - Verify for user able to delete saved items idividually after saving multuple products");
//					System.out.println("T218");
//					extent.extentLogger("Shop", "T218");
//					}else {
//						extent.HeaderChildNode("T254 - Logged In User - Verify for user able to delete saved items idividually after saving multuple products");
//						System.out.println("T254");
//						extent.extentLogger("Shop", "T254");
//					}	
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				click(HipiHomePage.objShopButton, "Shop Button");
//				click(HipiHomePage.objHomeIcon, "Home Icon");
//				verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//				waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//				verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
//				waitTime(2000);
//				verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//				deleteTheProductsFromSavedMomentsTab(userType);
//				
//				if(verifyElementExist(HipiShopPage.objDeleteOption, "Delete Option")){
//					logger.info("User is not able to remove particular product from save moment tab on shop details page.");
//					extent.extentLoggerFail("Shop", "User is not able to remove particular product from save moment tab on shop details page.");
//				}else {
//					logger.error("User is able to remove particular product from save moment tab on shop details page.");
//					extent.extentLoggerPass("Shop", "User is able to remove particular product from save moment tab on shop details page.");
//				}
//			navigateToHomePage();
//		}
		
		
		public void shopDetailPageScreen__T255__T264(String userType) throws Exception {
			
			
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T255 - Guest User- Verify for Shop Detail Page Screen");
					System.out.println("T255");
					extent.extentLogger("Shop", "T255");
					}else {
						extent.HeaderChildNode("T264 - Logged In User -Verify for Shop Detail Page Screen	");
						System.out.println("T264");
						extent.extentLogger("Shop", "T264");
					}	
				navigateToShopPage();
				
				navigateToHomePage();	
			}
			
	
		
		public void navigateToShopPage() throws Exception {
			
			navigateHomeandClickonShop();
			description = getText(HipiHomePage.objDescription);
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");	
			waitTime(3000);
			click(HipiHomePage.objShopButton, "Shop Button");
//			click(HipiHomePage.objHomeIcon, "Home Icon");
			waitTime(5000);
//			description = getText(HipiHomePage.objDescription);
			waitTime(3000);
			
//			click(HipiHomePage.objShopButton, "Shop Button");
			if (verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option")) {
				logger.info("Taping on SHOP button the Shop page is get open on the screen");	
				extent.extentLoggerPass("SHOP button", "Taping on SHOP button the Shop page is get open on the screen");
			}else {
				logger.info("Taping on SHOP button the Shop page is not get open on the screen");	
				extent.extentLoggerFail("SHOP button", "Taping on SHOP button the Shop page is not get open on the screen");
			}		
		}
		
		
		
	public void  shopDetailsPage__T256__T265(String userType) throws Exception {
	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T256 - (Guest User- Validate the shop details page)");
				System.out.println("T256");
				extent.extentLogger("Shop", "T256");
				}else {
					extent.HeaderChildNode("T265 - (Logged In User - Verify shop  details  page)");
					System.out.println("T265");
					extent.extentLogger("Shop", "T265");
				}	
			navigateToShopPage();
			

			verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video Tab");
			verifyElementPresent(HipiShopPage.objSavedMomentTab,"WISHLIST");
			
			
			if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
				logger.info(" Mini player is appears on bottom right side of the shop page.");	
				extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
			}else {
				logger.info(" Mini player is not appears on bottom right side of the shop page.");	
				extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
			}
			navigateToHomePage();			
				
		}
	
		
		
//	public void  clickingOnSavedProductRailsOnTheSavedVideo__T258__T267(String userType) throws Exception {
//
//		
//			if(userType.equalsIgnoreCase("Guest")) {
//				extent.HeaderChildNode("T258 - Guest User- Verify for user should be able to open shop page by clicking on saved product rails on the saved video.");
//				System.out.println("T258");
//				extent.extentLogger("Shop", "T258");
//				}else {
//					extent.HeaderChildNode("T267 - Logged In User- Verify for user should be able to open shop page by clicking on saved product rails on the saved video.");
//					System.out.println("T267");
//					extent.extentLogger("Shop", "T267");
//				}	
//	SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//	click(HipiHomePage.objShopButton, "Shop Button");
//	click(HipiHomePage.objHomeIcon, "Home Icon");
//	verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//	waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//	click(HipiHomePage.objProductImage, "Product Image Thumbnail");
//	if (verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option")) {
//		logger.info("Shop page is open by tapping on the saved product rails/small carousel image");	
//		extent.extentLoggerPass("", "Shop page is open by tapping on the saved product rails/small carousel image");
//	}else {
//		logger.info("Shop page is not open by tapping on the saved product rails/small carousel image");	
//		extent.extentLoggerFail("", "Shop page is not open by tapping on the saved product rails/small carousel image");
//	}	
//	navigateToHomePage();
//		}	
		
	
	public void swipeDownTheShopPage__T259__T268(String userType) throws Exception {
	

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T259 - Guest User - Verify that the SHOP Page gets closed");
			System.out.println("T259");
			extent.extentLogger("Shop", "T259");
			}else {
				extent.HeaderChildNode("T268 - Logged In User- Verify that the SHOP Page gets closed");
				System.out.println("T268");
				extent.extentLogger("Shop", "T268");
			}	
		navigateToShopPage();
		Swipe("DOWN", 1);
		String description1 = getText(HipiHomePage.objDescription);
		System.out.println(description1);
		 if (description.equals(description1)) {
				logger.info("User is navigated back to the last page and user is able see the same video playing.");	
				extent.extentLoggerPass("Shop", "User is navigated back to the last page and user is able see the same video playing.");
			}else {
				logger.info("User is not navigated back to the last page and user is not able see the same video playing.");	
				extent.extentLoggerFail("Shop", "User is not navigated back to the last page and user is not see the same video playing.");
			}
		navigateToHomePage();
			
		}
	
	
				
	

	public void clickingTheBackButton__T260__T269(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T260 - Guuest User-Verify for SHOP Page gets  closed by clicking the back button on device.");
				System.out.println("T260");
				extent.extentLogger("Shop", "T260");
				}else {
					extent.HeaderChildNode("T269 - Logged In User-Verify for SHOP Page gets  closed by clicking the back button on device.");
					System.out.println("T269");
					extent.extentLogger("Shop", "T269");
				}	
			navigateToShopPage();
			Back(1);
			String description1 = getText(HipiHomePage.objDescription);
			System.out.println(description1);
			 if (description.equals(description1)) {
					logger.info("User is navigated back to the last page and user is able see the same video playing.");	
					extent.extentLoggerPass("Shop", "User is navigated back to the last page and user is able see the same video playing.");
				}else {
					logger.info("User is not navigated back to the last page and user is not able see the same video playing.");	
					extent.extentLoggerFail("Shop", "User is not navigated back to the last page and user is not see the same video playing.");
				}
			navigateToHomePage();
				
			}
		
	
	
	public void InThisVideoTabOnShopDetailsPage__T274__T288(String userType) throws Exception {
	
	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User- Validate the In This video tab on shop details page");
				System.out.println("T274");
				extent.extentLogger("Shop", "T274");
				}else {
					extent.HeaderChildNode("Logged In User-Validate the In This video tab on shop details page");
					System.out.println("T288");
					extent.extentLogger("Shop", "T288");
				}	
				
			navigateToInThisVideosAllTabs();
			verifyElementPresent(HipiShopPage.objThumbnailImageOfTheVideo, "Thumbnail image of the video");
			
			verifyElementPresent(HipiShopPage.objArtistTitle, "Artist Title");
			
			verifyElementPresent(HipiShopPage.objLessButton, "Less Button");
			
			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");

			verifyElementPresent(HipiShopPage.objOutfitTab, "Outfit Tab");
			if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
				logger.info("Products images is displayed ");	
				extent.extentLoggerPass("Shop >In app Browser", "Products images is displayed ");
			}else {
				logger.info("Products images is displayed ");	
				extent.extentLoggerFail("Shop >In app Browser", "Products images is displayed ");
			}
			if (verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product")) {
				logger.info("Arrow Mark is displayred Below The Product");	
				extent.extentLoggerPass("Shop >In app Browser", "Arrow Mark is displayred Below The Product");
			}else {
				logger.info("Arrow Mark is not displayred Below The Product");	
				extent.extentLoggerFail("Shop >In app Browser", "Arrow Mark is not displayred Below The Product");
			}
			navigateToHomePage();
		}



	public void navigateToInThisVideosAllTabs() throws Exception {
		for(int i=1; i<=15; i++) {
			
			navigateToShopPage();
//			if(checkeler)
//			click(HipiHomePage.objShopButton, "Shop Button");

			if (verifyElementExist(HipiShopPage.objOutfitTab, "Outfit Tab") && verifyElementExist(HipiShopPage.objAccessoriesTab, "Accessories Tab") && verifyElementExist(HipiShopPage.objBeautyTab, "Beauty Tab") &&  verifyElementExist(HipiShopPage.objHairTab, "Hair Tab")){
	
				logger.info("Outfit Tab,Accessories Tab,Beauty Tab and Hair Tab is displayed");	
				extent.extentLoggerPass("Shop >In app Browser", "Outfit Tab,Accessories Tab,Beauty Tab and Hair Tab is displayed");
				break;
			}else {
				navigateToHomePage();
				waitTime(4000);
				Swipe("UP", 1);
			}
		}
		
	}
		
		
	public void navigateToInThisVideos() throws Exception {
//		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
		navigateHomeandClickonShop();
		click(HipiHomePage.objShopButton, "Shop Button");
		click(HipiHomePage.objHomeIcon, "Home icon");
		description = getText(HipiHomePage.objDescription);
//		click(HipiHomePage.objSaveLook, "Save Lock");
		click(HipiHomePage.objShopButton, "Shop Button");
		waitTime(3000);
//		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
//		click(HipiShopPage.objExpanButton, "Expan Button");
		
		
	}	
	

	
	
	
	public void twoSectionsOfShopPageAre__T262__T271(String userType) throws Exception {
		
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User- Verify two sections of Shop Page are IN THIS VIDEO and SAVED MOMENTS ");
				System.out.println("T262");
				extent.extentLogger("Shop", "T262");
				}else {
					extent.HeaderChildNode("Logged In user- Verify two sections of Shop Page are IN THIS VIDEO and SAVED MOMENTS ");
					System.out.println("T271");
					extent.extentLogger("Shop", "T271");
				}	
				navigateToShopPage();
				if (verifyElementExist(AMDShopPage.objInThisVideo,"In This Video option")) {
					logger.info("user is able to see In This Video option when ever clicking on shop button");	
					extent.extentLoggerPass("SHOP button", "user is able to see In This Video option when ever clicking on shop button");
				}else {
					logger.info("user is not able to see In This Video option when ever clicking on shop button");	
					extent.extentLoggerFail("SHOP button", "user is not able to see In This Video option when ever clicking on shop button");
				}
				verifyShopPage();
				verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//				verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
				verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
				navigateToHomePage();
		}
	
		
		
		public void verifyShopPage() throws Exception {
			
			
			waitTime(4000);
			verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
			verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
			
			
			
			
		}
		
	public void productFromTheCurrentlyPlayingVideo__T273__T287(String userType) throws Exception {
		
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User-Verify for IN THIS VIDEO section  on the Shop Page");
				System.out.println("T273");
				extent.extentLogger("Shop", "T273");
				}else {
					extent.HeaderChildNode("Logged In User-Verify for IN THIS VIDEO section  on the Shop Page");
					System.out.println("T287");
					extent.extentLogger("Shop", "T287");
				}	
				
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
			
			description = getText(HipiHomePage.objDescription);
			System.out.println(description);
			String[] name = description.split("@");
			System.out.println(name);
			logger.info("User account name " + name[1]);
			waitTime(3000);
//			verifyElementPresentAndClick(HipiHomePage.objShopButton, "Save Look");
			waitTime(2000);	
			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(2000);
			description1 = getText(HipiShopPage.objArtistTitle);
			String[] name1 = description.split("|");
			System.out.println(name1);
			logger.info(description1);
			if(name[1].contains(name1[1])) {
				logger.info("IN THIS SECTION contais only product from the currently playing video on the feed screen");
				extent.extentLoggerPass("Shoppable Vidoes", "IN THIS SECTION contais only product from the currently playing video on the feed screen");
			}else {
				logger.error("IN THIS SECTION contais only product from the deferent video playing on the feed screen");
				extent.extentLoggerFail("Shoppable Vidoes", "IN THIS SECTION contais only product from the deferent video playing on the feed screen");
			}
			navigateToHomePage();
		
		}
		
	
		
		
	public void  iNTHISVideoTabUI__T275__T289(String userType) throws Exception {
		
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User-Verify for IN THIS Video tab UI");
				System.out.println("T275");
				extent.extentLogger("Shop", "T275");
				}else {
					extent.HeaderChildNode("Logged In user-Verify for IN THIS Video tab UI");
					System.out.println("T289");
					extent.extentLogger("Shop", "T289");
				}	
				navigateToShopPage();
				shopPageUIValidation();
				navigateToHomePage();
		}
	
	
		
	public void clickingLessDropDownOn__T276__T291(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("Nonsubscribeduser")) {	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T276 - (Guest User -Verify for user is able to view less data by clicking Less drop down on \"IN THIS VIDEO\" tab of the shop detail page.)");
				System.out.println("T276");
				extent.extentLogger("Shop", "T276");
				}else {
					extent.HeaderChildNode("T291 - (Logged In user - Verify for user is able to view less data by clicking Less drop down on \"IN THIS VIDEO\" tab of the shop detail page.)");
					System.out.println("T291");
					extent.extentLogger("Shop", "T291");
				}	
			
			navigateToShopPage();
			verifyElementPresentAndClick(HipiShopPage.objLessButton, "Less Button");
			shopPageUIValidation();
			verifyElementPresent(HipiShopPage.objExpanButton, "Expand Button");
			navigateToHomePage();
		}

	} 
	

	public void  clickLESSiconOnINTHISVIDEO__T277__T290(String userType) throws Exception {
		
		
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User -Verify for user is able to click \"LESS\" icon on \"IN THIS VIDEO\" tab on shop detail page.");
				System.out.println("T277");
				extent.extentLogger("Shop", "T277");
				}else {
					extent.HeaderChildNode("Logged In User- Verify for user is able to click \"LESS\" icon on \"IN THIS VIDEO\" tab on shop detail page.");
					System.out.println("T290");
					extent.extentLogger("Shop", "T290");
				}	
			
				navigateToShopPage();
				verifyElementPresentAndClick(HipiShopPage.objLessButton, "Less Button");
				if (verifyElementExist(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
					logger.info("User is not able to click Less icon");	
					extent.extentLoggerFail("Shop", "User is not able to click Less icon");
				}else {
					logger.info("User is able to click Less icon");	
					extent.extentLoggerPass("Shop", "User is able to click Less icon");
				}
			navigateToHomePage();
		}

	
	public void clickOnExpandIconINTHISVIDEO__T278__T292(String userType) throws Exception {
		
	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User - Verify for user is able to click \"Expand\" icon on \"IN THIS VIDEO\" tab on shop detail page.");
				System.out.println("T278");
				extent.extentLogger("Shop", "T278");
				}else {
					extent.HeaderChildNode("Logged In User - Verify for user is able to click \"Expand\" icon on \"IN THIS VIDEO\" tab on shop detail page.");
					System.out.println("T292");
					extent.extentLogger("Shop", "T292");
				}	
			
				navigateToShopPage();
				verifyElementPresentAndClick(HipiShopPage.objLessButton, "Less Button");
				verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expand Button");
					
					
				if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
					logger.info("User is able to click Expand icon");	
					extent.extentLoggerPass("Shop", "User is able to click Expand icon");
				}else {
					logger.info("User is not able to click Expand icon");	
					extent.extentLoggerFail("Shop", "User is not able to click Expand icon");
				}
				
				navigateToHomePage();
		
		}	
	
	
	public void pageObjectDetails__T280__T295(String userType) throws Exception {
		
		
	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User-Verify for default behavior on \"IN THIS VIDEO\" tab");
				System.out.println("T280");
				extent.extentLogger("Shop", "T280");
				}else {
					extent.HeaderChildNode("Logged In User-Verify for default behavior on \"IN THIS VIDEO\" tab");
					System.out.println("T295");
					extent.extentLogger("Shop", "T295");
				}	
			navigateToShopPage();
			validateProductDetailsInShopPage();
			navigateToHomePage();
		}		
	
	
	
	
	public void validateProductDetailsInShopPage() throws Exception {
		
		
		verifyElementPresent(HipiShopPage.objThumbnailImageOfTheVideo, "Thumbnail image of the video");
		
		verifyElementPresent(HipiShopPage.objArtistTitle, "Artist Title");
		
		verifyElementPresent(HipiShopPage.objLessButton, "Less Button");
		
		verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
		
		
		if(verifyElementPresent(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail")) {
			logger.info("Products images is displayed ");	
			extent.extentLoggerPass("Shop", "Products images is displayed ");
		}else {
			logger.info("Products images is displayed ");	
			extent.extentLoggerFail("Shop", "Products images is displayed ");
		}
		if (verifyElementPresent(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product")) {
			logger.info("Arrow Mark is displayred Below The Product");	
			extent.extentLoggerPass("Shop", "Arrow Mark is displayred Below The Product");
		}else {
			logger.info("Arrow Mark is not displayred Below The Product");	
			extent.extentLoggerFail("Shop", "Arrow Mark is not displayred Below The Product");
		}
		 String siteName = getText(HipiShopPage.objThirdPartySiteName);
			if(verifyElementDisplayed(HipiShopPage.objThirdPartySiteName)){
				  logger.info("third party site name is " + siteName);	
					extent.extentLoggerPass("Shop", "third party site name is " + siteName);
				}else {
					logger.info("third party site name is displayed");	
					extent.extentLoggerFail("Shop", "third party site name is displayed");
				} 
			if (verifyElementPresentAndClick(HipiShopPage.objProductDetailsPage, "Product Details")) {
				logger.info("User is able to see product panel on Shop page");	
				extent.extentLoggerPass("Shop", "User is able to see product panel on Shop page");
			}else {
				logger.info("User is not able to see product panel on Shop page");	
				extent.extentLoggerFail("Shop", "User is not able to see product panel on Shop page");
			}
		
	}
	
	
	
	
	public void moreDataByClickingTheExpandButton__T281__T293(String userType) throws Exception {

			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T281 - Guest User-Verify for default behavior on \"IN THIS VIDEO\" tab");
				System.out.println("T281");
				extent.extentLogger("Shop", "T281");
				}else {
					extent.HeaderChildNode("T293 - Logged In User-Verify for default behavior on \"IN THIS VIDEO\" tab");
					System.out.println("T293");
					extent.extentLogger("Shop", "T293");
				}	
			navigateToInThisVideosAllTabs();
			productDetailsAllTabs();
		//	navigateToHomePage();
			
			
		}	
	
	
	public void productName_T302(String userType) throws Exception {
		
			extent.HeaderChildNode("T302 - Verify for all products should have product name below the product image");
			System.out.println("T302");
			extent.extentLogger("Shop", "T302");
			swipeDownMultipleVideos();
			navigateToInThisVideosAllTabs();
			verifyProductNameBelowTheImages(userType);
//			navigateToHomePage();
	} 
	
	public void verifyProductNameBelowTheImages(String userType) throws Exception {
		verifyElementPresent(HipiShopPage.objOutfitTab, "Outfit Tab");
//		SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "Arrow Mark Below The Product");
//		PartialSwipe("DOWN", 1);
		getProductNameBelowTheImages(userType);
		 PartialSwipe("DOWN", 1);
		verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//		SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//		PartialSwipe("DOWN", 1);
		getProductNameBelowTheImages(userType);
		PartialSwipe("DOWN", 1);
		verifyElementPresentAndClick(HipiShopPage.objBeautyTab, "Beauty Tab");
//		SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//		PartialSwipe("UP", 1);
		getProductNameBelowTheImages(userType);
		PartialSwipe("DOWN", 1);

		verifyElementPresentAndClick(HipiShopPage.objHairTab, "Hair Tab");
//		SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//		PartialSwipe("UP", 1);

		getProductNameBelowTheImages(userType);
	}
	public void getProductNameBelowTheImages(String userType) throws Exception {
		 PartialSwipe("UP", 1);
		productName = getText(HipiShopPage.objProductDetailsPage);
					if(verifyElementDisplayed(HipiShopPage.objProductDetailsPage)){
						  logger.info("third party site name is " + productName);	
							extent.extentLoggerPass("Shop", "third party site name is " + productName);
						}else {
							logger.info("third party site name is displayed");	
							extent.extentLoggerFail("Shop", "third party site name is displayed");
						} 
					
	}

	public void ableSwipeUpPageToSeeBottomProducts__T282__T296(String userType) throws Exception {
		
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T282 - Guest User- Verify for user can able swipe up page to see bottom products.");
				System.out.println("T282");
				extent.extentLogger("Shop", "T282");
				}else {
					extent.HeaderChildNode("T296 - Logged In user-Verify for user can able swipe up page to see bottom products.");
					System.out.println("T296");
					extent.extentLogger("Shop", "T296");
				}	
		
			navigateToShopPage();
		 productDetails = getText(HipiShopPage.objProductDetailsPage);
		 Swipe("UP", 3);
		 productDetails1 = getText(HipiShopPage.objProductDetailsPage);

		  if (!productDetails.equals(productDetails1)) {
				logger.info("User is able to swipe up the page to see bottom products.");	
				extent.extentLoggerPass("Shop", "User is able to swipe up the page to see bottom products.");
			}else {
				logger.info("User is not able to swipe up the page to see bottom products.");	
				extent.extentLoggerFail("Shop", "User is not able to swipe up the page to see bottom products.");
			}
	
		navigateToHomePage();
		
		

		}

	
	
	public void  ableSwipeDownPageToSeeTopProducts__T283__T297(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T283 - Guest User- Verify for user can able swipe down page to see top products.");
				System.out.println("T283");
				extent.extentLogger("Shop", "T283");
				}else {
					extent.HeaderChildNode("T297 - Logged In user-Verify for user can able swipe down page to see top products.");
					System.out.println("T297");
					extent.extentLogger("Shop", "T297");
				}	
		
			
			
			navigateToShopPage();

			 productDetails = getText(HipiShopPage.objProductDetailsPage);
			 Swipe("UP", 3);
			 productDetails1 = getText(HipiShopPage.objProductDetailsPage);

			  if (!productDetails.equals(productDetails1)) {
					logger.info("User is able to scroll the page up side");	
					extent.extentLoggerPass("Shop >In app Browser", "User is able to scroll the page up side");
				}else {
					logger.info("User is not able to scroll the page up side");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not able to scroll the page up side");
				}
			  PartialSwipe("DOWN", 4);
			  if (!productDetails1.equals(productDetails)) {
					logger.info("User is able to scroll the page down side");	
					extent.extentLoggerPass("Shop", "User is able to scroll the page down side");
				}else {
					logger.info("User is not able to scroll the page up side");	
					extent.extentLoggerFail("Shop", "User is not able to scroll the page down side");
				}
			  navigateToHomePage();
		}
		

	
	
	
	public void swipeByElements(WebElement webElement, WebElement webElement2) {

		touchAction = new TouchAction<>(getDriver());

		int startX = webElement.getLocation().getX() + (webElement.getSize().getWidth() / 2);
		int startY = webElement.getLocation().getY() + (webElement.getSize().getHeight() / 2);

		int endX = webElement2.getLocation().getX() + (webElement2.getSize().getWidth() / 2);
		int endY = webElement2.getLocation().getY() + (webElement2.getSize().getHeight() / 2);
		touchAction.press(PointOption.point(startX, startY))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(2000))).moveTo(PointOption.point(endX, endY))
				.release().perform();
	}
	
	
	public void  tabsOnShopDetailsPageInsideINTHIDVIDEOSection__T285__T299(String userType) throws Exception {
		
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T285 - Guest User - Verify for tabs on shop details page inside IN THID VIDEO section");
				System.out.println("T285");
				extent.extentLogger("Shop", "T285");
				}else {
					extent.HeaderChildNode("T299 - Logged In User - Verify for tabs on shop details page inside IN THIS VIDEO section");
					System.out.println("T299");
					extent.extentLogger("Shop", "T299");
				}	
			swipeDownMultipleVideos();
			navigateToInThisVideosAllTabs();
			  PartialSwipe("UP", 1);
			 productDetails = getText(HipiShopPage.objProductDetailsPage);
			  PartialSwipe("DOWN", 1);
			 verifyElementPresentAndClick(HipiShopPage.objAccessoriesTab, "Accessories Tab");
//			  	SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
			 PartialSwipe("UP", 1);
			 productDetails1 = getText(HipiShopPage.objProductDetailsPage);
			 if (!productDetails.equals(productDetails1)) {
					logger.info("User is able to see respective products when user switch the accessories tab.");	
					extent.extentLoggerPass("Shop >In app Browser", "User is able to see respective products when user switch the accessories tab.");
				}else {
					logger.info("User is able to see respective products when user switch the accessories tab.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is able to see respective products when user switch the accessories tab.");
				}
			 PartialSwipe("DOWN", 1);
			 	click(HipiShopPage.objBeautyTab, "Beauty Tab");
//				SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
				PartialSwipe("UP", 1);
			     productDetails2 = getText(HipiShopPage.objProductDetailsPage);
			     if (!productDetails1.equals(productDetails2)) {
						logger.info("User is able to see respective products when user switch the Beauty tab.");	
						extent.extentLoggerPass("Shop >In app Browser", "User is able to see respective products when user switch the Beauty tab.");
					}else {
						logger.info("User is not able to see respective products when user switch the Beauty tab.");	
						extent.extentLoggerFail("Shop >In app Browser", "User is not able to see respective products when user switch the Beauty tab.");
					}
			 	PartialSwipe("DOWN", 1);
			 	click(HipiShopPage.objHairTab, "Hair Tab");
			 	PartialSwipe("UP", 1);
//				SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
//				PartialSwipe("DOWN", 1);
			    productDetails3 = getText(HipiShopPage.objProductDetailsPage);
			   if (!productDetails2.equals(productDetails3)) {
				   logger.info("User is able to see respective products when user switch the Beauty tab.");	
					extent.extentLoggerPass("Shop >In app Browser", "User is able to see respective products when user switch the Beauty tab.");
				}else {
					logger.info("User is not able to see respective products when user switch the Beauty tab.");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not able to see respective products when user switch the Beauty tab.");
				} 
//			   navigateToHomePage();
			
		}
	public void swipeDownMultipleVideos() throws Exception {
		if(verifyElementExist(HipiShopPage.objMultipleSavedVideos,"Multiple Saved Videos"))
		{
//			for (int i = 1; i <= 100; i++) {
//			PartialSwipe("DOWN", 1);
//			if(verifyElementExist(HipiHomePage.objShopButton, "Shop Button")) {
//				
//				break;
//			}
//			
			Back(1);
//			 }
//			SwipeDownSvedMomentTab();
		}
		else
		{
			navigateToHomePage();
			
		}
	}
	
	

	public void switchBetweenTabsWithInINTHISVIDEOPage__T284__T298(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T284 - Guest User -Verify for user should be able to click/ switch between tabs with in \"IN THIS VIDEO\" page.");
				System.out.println("T284");
				extent.extentLogger("Shop", "T284");
				}else {
					extent.HeaderChildNode("T298 - Logged In User -Verify for user should be able to click/ switch between tabs with in \"IN THIS VIDEO\" page.");
					System.out.println("T298");
					extent.extentLogger("Shop", "T298");
				}	
			swipeDownMultipleVideos();
			navigateToInThisVideosAllTabs();
//			verifyElementPresentAndClick(HipiShopPage.objExpanButton, "Expan Button");
			PartialSwipe("UP", 1);
			  String productDetails = getText(HipiShopPage.objProductDetailsPage);
			  PartialSwipe("DOWN", 1);
			 
			  click(HipiShopPage.objAccessoriesTab, "Accessories Tab");
			  PartialSwipe("UP", 1);
			  String productDetails1 = getText(HipiShopPage.objProductDetailsPage);
			  
			  if (!productDetails.equals(productDetails1)) {
					logger.info("User is able to switch  the accessories tab");	
					extent.extentLoggerPass("Shop >In app Browser", "User is able to switch the accessories tab");
				}else {
					logger.info("User is not able to switch the accessories tab");	
					extent.extentLoggerFail("Shop >In app Browser", "User is not able to switch the accessories tab");
				}
			  PartialSwipe("DOWN", 1);
			  	click(HipiShopPage.objBeautyTab, "Beauty Tab");
//			  	SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
				PartialSwipe("UP", 1);
			     productDetails2 = getText(HipiShopPage.objProductDetailsPage);
			    
				  if (!productDetails1.equals(productDetails2)) {
						logger.info("User is able to switch  the Beauty tab");	
						extent.extentLoggerPass("Shop >In app Browser", "User is able to switch the Beauty tab");
					}else {
						logger.info("User is not able to switch  the Beauty tab");	
						extent.extentLoggerFail("Shop >In app Browser", "User is not able to switch the Beauty tab");
					}
				  PartialSwipe("DOWN", 1);
					click(HipiShopPage.objHairTab, "Hair Tab");
//				  	SwipeUntilFindElement(HipiShopPage.objArrowMarkBelowTheProduct, "UP");
					PartialSwipe("UP", 1);
					    productDetails3 = getText(HipiShopPage.objProductDetailsPage);
					   if (!productDetails2.equals(productDetails3)) {
							logger.info("User is able to switch  the Hair tab");	
							extent.extentLoggerPass("Shop >In app Browser", "User is able to switch the Hair tab");
						}else {
							logger.info("User is not able to switch  the Hair tab");	
							extent.extentLoggerFail("Shop >In app Browser", "User is not able to switch the Hair tab");
						} 
					 navigateToHomePage();
		}
	
	public void  eachProductImagesAreClickable__T305__T315(String userType) throws Exception {
	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User - Validate the each product images are clickable");
				System.out.println("T305");
				extent.extentLogger("Shop", "T305");
				}else {
					extent.HeaderChildNode("Logged In User- Validate the each product images are clickable");
					System.out.println("T315");
					extent.extentLogger("Shop", "T315");
				}	
			
			navigateToInThisVideosAllTabs();

			productImageAreClickableAllTabs();
		
			navigateToHomePage();
		
		}
	
	
	
	public void  arrowPresentOnTheProductSiteShouldBeClickable__T306__T316(String userType) throws Exception {
		
		
	
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User -Validate every Arrow present on the product site should be clickable");
				System.out.println("T306");
				extent.extentLogger("Shop", "T306");
				}else {
					extent.HeaderChildNode("Logged In user -Validate every Arrow present on the product site should be clickable");
					System.out.println("T316");
					extent.extentLogger("Shop", "T316");
				}	
			navigateToInThisVideosAllTabs();
			arrowButtonAreClikableAllTabs();
			navigateToHomePage();
		}	
		
	
		
		public void thirdPartySiteWithinTheAppClickingOnArrowMark__T309__T319(String userType) throws Exception {
		
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T309 - Guest User - Verify for user should open the third party site within the app when they click the Arrow button.");
					System.out.println("T309");
					extent.extentLogger("Shop", "T309");
					}else {
						extent.HeaderChildNode("T319 - Logged In User -Verify for user should open the third party site within the app when they click the Arrow button.");
						System.out.println("T319");
						extent.extentLogger("Shop", "T319");
					}	
			
			navigateToInThisVideos();
			navigateTothirdPartySiteWithinTheHipiInappBrowser();
			navigateToHomePage();
			
			}
	
		public void thirdPartySiteWithinTheAppClickingOnProductImage__T310__T320(String userType) throws Exception {
			
			
				
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T310 - Guest User -Verify for user should open the third party site within the app when they click the on the product images.");
					System.out.println("T310");
					extent.extentLogger("Shop", "T310");
					}else {
						extent.HeaderChildNode("T320 - Logged In User -Verify for user should open the third party site within the app when they click the on the product images.");
						System.out.println("T320");
						extent.extentLogger("Shop", "T320");
					}	
				navigateToThirdPartySiteClickingOnProductImage();
				navigateToHomePage();

			}
	
		
		private String thirdPartySiteName = null;
		
		public void navigatedToRespectiveThirdPartySiteClickingOnArrowButton__T311__T321(String userType) throws Exception {
			
			

				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T311 - Guest User- Verify for user should be navigated to respective third party site whe they clicked on the product images.");
					System.out.println("T311");
					extent.extentLogger("Shop", "T311");
					}else {
						extent.HeaderChildNode("T321 - Logged In User -Verify for user should be navigated to respective third party site whe they clicked on the product images.");
						System.out.println("T321");
						extent.extentLogger("Shop", "T321");
					}	
			
				
				navigateToInThisVideos();
//				 thirdPartySiteName = getText(HipiShopPage.objThirdPartySiteName);
				navigateTothirdPartySiteWithinTheHipiInappBrowser();
				
				navigateToHomePage();

				
				
			}
		 
		
	
		public void navigatedToRespectiveThirdPartySiteClickingOnImage__T312__T322(String userType) throws Exception {
		
	
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("Guest User -Verify for user should be navigated to respective third party site when they clicked on the Arrow icon to buy a product.");
					System.out.println("T312");
					extent.extentLogger("Shop", "T312");
					}else {
						extent.HeaderChildNode("Logged In User -Verify for user should be navigated to respective third party site when they clicked on the Arrow icon to buy a product.");
						System.out.println("T322");
						extent.extentLogger("Shop", "T322");
					}	
			
				navigateToThirdPartySiteClickingOnProductImage();
				navigateToHomePage();
			
				
		
			}
		
		
		public void  changeThePositionOfMiniPlayer_T331__T344(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T331 - Guest User- Verify for able to change the position of Mini player");
				System.out.println("T331");
				extent.extentLogger("Shop", "T331");
				}else {
					extent.HeaderChildNode("T344 - Logged In User-Verify for user able to scroll more videos on Mini player");
					System.out.println("T344");
					extent.extentLogger("Shop", "T344");
				}	
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
			click(HipiHomePage.objShopButton, "Shop Button");
			waitTime(4000);
			try {
			dragnddrop(HipiShopPage.objMiniPlayer, HipiShopPage.objAccessoriesTab);
			logger.info("user is able to drag the mini screen");
			extent.extentLoggerFail("", "user is able to drag the mini screen");
			softAssert.assertEquals(false, true, "user able to  drag mini screen");
			}catch (Exception e) {
				screencapture();
				logger.info("user is not able to drag the mini screen");
				extent.extentLoggerPass("", "user is not able to drag the mini screen");
				softAssert.assertEquals(true, true, "Not able to  drag mini screen");
			
			}
			navigateToHomePage();
			
			
		}
		
		
		
	
		
		
		
		
		
		
		


		

		
		
		



//===========================================Settings and Privacy=============================================

		public void directingToSettingsAndPrivacyScreen__T729(String userType) throws Exception {
	
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("Check if after tapping on 3 dots on top right corner under Profile user is directing user to \"Settings and Privacy\"screen.");
				System.out.println("T729");
				extent.extentLogger("Settings and Privacy", "T729");
				
				navigateToSettingAndPrivacy(userType);
				Back(1);
				navigateToHomePage();
	
	
		}
			}

		public void navigateToSettingAndPrivacy(String userType) throws Exception {
	
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "3 Dots");
			waitUntilElementDisplayed(HipiSettingsPage.objSettingAndPrivacy, 2);
			if(verifyElementPresent(HipiSettingsPage.objSettingAndPrivacy, "Setting  & Privacy")){
				logger.info("User is directed to Settings and Privacy screen");
				extent.extentLoggerPass("Settings and Privacy", "User is directed to Settings and Privacy screen");
			}else {
				logger.error("User is not directed to Settings and Privacy screen");
				extent.extentLoggerFail("Settings and Privacy", "User is not directed to Settings and Privacy screen");
			}
	
	
		}

		public void checkTheUIOfSettingAndPrivacyScreen__T730(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("To check the UI of Setting and Privacy screen");
				System.out.println("T730");
				extent.extentLogger("Settings and Privacy", "T730");
				
				navigateToSettingAndPrivacy(userType);
				verifyElementPresent(HipiSettingsPage.objAccount, "Account");
				verifyElementPresent(HipiSettingsPage.objChangePassword, "Change Password");
				verifyElementPresent(HipiSettingsPage.objPrivacy, "Privacy");
				verifyElementPresent(HipiSettingsPage.objShareProfile, "Share Profile");
				verifyElementPresent(HipiSettingsPage.objContentAndActivity, "Content And Activity");
				verifyElementPresent(HipiSettingsPage.objAppLanguage, "App Language");
				verifyElementPresent(HipiSettingsPage.objSupport, "Support");
				verifyElementPresent(HipiSettingsPage.objHelpCenter, "Help Center");
				verifyElementPresent(HipiSettingsPage.objContentComplaints, "Content Complaints");
				verifyElementPresent(HipiSettingsPage.objAbout, "About");
				verifyElementPresent(HipiSettingsPage.objCommunityGuidelines, "Community Guidelines");
				verifyElementPresent(HipiSettingsPage.objTermsOfUse, "Terms Of Use");
				verifyElementPresent(HipiSettingsPage.objCommunityCentre, "Community Centre");
				verifyElementPresent(HipiSettingsPage.objLogOut, "Log Out");
				Back(1);
				navigateToHomePage();
			}
		}
		
//============================================Content and Activity >> App Language====================================
		public void  appLanguageIsSetToEnglish__T777(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("Check if app language is set to English");
				System.out.println("T777");
				extent.extentLogger("Settings and Privacy", "T777");
				navigateToSettingAndPrivacy(userType);
				verifyElementPresentAndClick(HipiSettingsPage.objAppLanguage, "App Language");
				if(verifyElementPresent(HipiSettingsPage.objAppLanguageTitle, "App Language Title")){
					logger.info("User is able to land app language Page");
					extent.extentLoggerPass("Settings and Privacy", "User is able to land app language Page");
				}else {
					logger.error("User is able to land app language Page");
					extent.extentLoggerFail("Settings and Privacy", "User is able to land app language Page");
				}
				if(verifyElementPresent(HipiSettingsPage.objEnglish, "English language")){
					logger.info("Tapping on App Language lands user to English set as a single default option");
					extent.extentLoggerPass("Settings and Privacy", "Tapping on App Language lands user to English set as a single default option");
				}else {
					logger.error("Tapping on App Language lands user to English not set as a single default option");
					extent.extentLoggerFail("Settings and Privacy", "Tapping on App Language lands user to English not set as a single default option");
				}
			Back(1);
			navigateToHomePage();
			}
		} 
	
//====================================================About >> Log Out======================================================
		
		
		public void logOutOpensAPopup__T795(String userType) throws Exception {
			
			
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("T795 - Check if tapping on Log out opens a popup");
				System.out.println("T795");
				extent.extentLogger("Settings and Privacy", "T795");
				navigateToSettingAndPrivacy(userType);
				Swipe("UP", 2);
				verifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out button");
				verifyElementPresent(HipiSettingsPage.objLogOutTitle, "Log out title");
				verifyElementPresent(HipiSettingsPage.objAreYouSureYouWantToLogout, "Are you Sure you want to logout");
				verifyElementPresent(HipiSettingsPage.objNoCTALogOutPopup, "No CTA LogOut Popup");
				verifyElementPresent(HipiSettingsPage.objYesCTALogOutPopup, "Yes CTA LogOut Popup");
				Back(2);
				navigateToHomePage();

			}
			
		}
		
		public void noCTAClosesThePopup__T796(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("T796 - Check if tapping on No CTA closes the popup");
				System.out.println("T796");
				extent.extentLogger("Settings and Privacy", "T796");
				navigateToSettingAndPrivacy(userType);
				Swipe("UP", 2);
				verifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out button");
				waitTime(3000);
				verifyElementPresentAndClick(HipiSettingsPage.objNoCTALogOutPopup, "No CTA LogOut Popup");
				if(verifyElementExist(HipiSettingsPage.objNoCTALogOutPopup, "No CTA LogOut Popup")){
					logger.info("Log out pop up is not closes after user taps on No");
					extent.extentLoggerFail("Settings and Privacy", "Log out pop up is not closes after user taps on No");
				}else {
					logger.error("Log out pop up closes after user taps on No");
					extent.extentLoggerPass("Settings and Privacy", "Log out pop up closes after user taps on No");
				}
			Back(1);
			navigateToHomePage();
			
			}
		}
		
		public void tappingOutssideThePopupScreen__T797(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("T797 - Check if tapping outsside the popup screen closes the popup");
				System.out.println("T797");
				extent.extentLogger("Settings and Privacy", "T797");
				navigateToSettingAndPrivacy(userType);
				Swipe("UP", 2);
				verifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out button");
				waitTime(4000);
				verifyElementPresentAndClick(HipiSettingsPage.objOutssideThePopupScreen, "Out side The Popup Screen");
				waitTime(2000);
				if(verifyElementExist(HipiSettingsPage.objNoCTALogOutPopup, "No CTA LogOut Popup")){
					logger.info("Popup is not close if user taps outside the pop up area");
					extent.extentLoggerFail("Settings and Privacy", "Popup is not close if user taps outside the pop up area");
				}else {
					logger.error("Popup is close if user taps outside the pop up area");
					extent.extentLoggerPass("Settings and Privacy", "Popup is close if user taps outside the pop up area");
				}
				Back(1);
				navigateToHomePage();
			}

		}
		
		
	public void  tappingOnYesCTALogsOutTheUser__T798(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("T798 - Check if tapping on Yes CTA logs out the user");
			System.out.println("T798");
			extent.extentLogger("Settings and Privacy", "T798");
			navigateToSettingAndPrivacy(userType);
			Swipe("UP", 2);
			verifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSettingsPage.objYesCTALogOutPopup, "Yes Button");
			waitTime(4000);
			if(verifyElementPresent(HipiHomePage.objPlayerScreen, "Player Screen")){
				logger.info("User is logged out of the application and lands on Feed when he taps on Yes");
				extent.extentLoggerPass("Settings and Privacy", "User is logged out of the application and lands on Feed when he taps on Yes");
			}else {
				logger.error("User is not logged out of the application and useris not lands on Feed when he taps on Yes");
				extent.extentLoggerFail("Settings and Privacy", "User is not logged out of the application and useris not lands on Feed when he taps on Yes");
			}
			
		navigateToHomePage();
	
		}	
		
	}	
		
		
	//===========================================About >> Privacy Policy===================================================
	
	public void  theUIOfHelpCnetreScreen(String userType) throws Exception {
		
		

		if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("Check if for the UI of Help cnetre screen");
			System.out.println("T778");
			extent.extentLogger("Settings and Privacy", "T778");
			navigateToSettingAndPrivacy(userType);
			verifyElementPresentAndClick(HipiSettingsPage.objHelpCenter, "Help Center");
			waitTime(3000);
			
		}
	}
	
	
//===================================For You(Priority P0)=====================================================
	
	public void  videoIsPlayingByDefaultInForYouTab__T009__T025(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T009 - Guest User - Check if video is playing by default in For You tab ");
			System.out.println("T009");
			extent.extentLogger("For You", "T009");
			}else {
				extent.HeaderChildNode("T025 - Logged in User - Check if user is able to verify the video is playing by default in \"For You\" tab ");
				System.out.println("T025");
				extent.extentLogger("For You", "T025");
			}	
	
			verifyElementPresent(HipiHomePage.objForYou, "For You button");
			playerScreenValidation();
			navigateToHomePage();
	
	}
public void playerScreenValidation() throws Exception {
	waitUntilElementDisplayed(HipiHomePage.objPlayerScreen, 4);
	if (verifyElementExistTv(HipiHomePage.objPlayerScreen, "Player Screen")) {
		logger.info("User able to see the video is played by default in 'For You' tab in 'Feed' section,Expected Behaviour");
		extent.extentLoggerPass("For You","User able to see the video is played by default in 'For You' tab in 'Feed' section,Expected Behaviour");
	} else {
		logger.info("User is not able to see the video is played by default in 'For You' tab in 'Feed' section");
		extent.extentLoggerFail("For You","User is not able to see the video is played by default in 'For You' tab in 'Feed' section");

	}
	
}
	public void ForYouAndFollowingTabs__T006__T019(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T006 - Guest User - Check if  \"For You\" and \"Following\" tabs are displayed at top of the screen in \"Feed\" section");
			System.out.println("T006");
			extent.extentLogger("For You", "T006");
			}else {
				extent.HeaderChildNode("T019 - Logged in User - Check if  \"For You\" and \"Following\" tabs are displayed at top of the screen in \"Feed\" section");
				System.out.println("T019");
				extent.extentLogger("For You", "T019");
			}	
		
		if (verifyElementPresent(HipiHomePage.objForYou, "For you")) {
			logger.info("User is able to verify the For you option in top section,Expected Behaviour");
			extent.extentLoggerPass("For You","User is able to verify the For you option in top section,Expected Behaviour");
		} else {
			logger.info("User is not able to verify the For you option in top section");
			extent.extentLoggerFail("For You","User is not able to verify the For you option in top section");

		}

		if (verifyElementPresent(HipiHomePage.objFollowingButton, "Following Option")) {
			logger.info("User is able to verify the Following option in top section,Expected Behaviour");
			extent.extentLoggerPass("For You","User is able to verify the Following option in top section,Expected Behaviour");
		} else {
			logger.info("User is not able to verify the Following option in top section");
			extent.extentLoggerFail("For You","User is not able to verify the Following option in top section");

		}
		navigateToHomePage();
	}
	
	public void verifyFeedscreen__T005__T018(String userType) throws Exception {
		

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T005 - Guest User - Check if user is able to view \"Feed\" screen");
			System.out.println("T005");
			extent.extentLogger("For You", "T005");
			}else {
				extent.HeaderChildNode("T018 - Logged in User - Check if user is able view \"Feed\" screen");
				System.out.println("T018");
				extent.extentLogger("For You", "T018");
			}	
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("Home Icon is displayed when ever user launch app,Expected Behaviour");	
				extent.extentLoggerPass("For You", "Home Icon is displayed when ever user launch app,Expected Behaviour");
			}else {
				logger.info("Home Icon is not displayed when ever user launch app");	
				extent.extentLoggerFail("For You", "Home Icon is not displayed when ever user launch app");	
			}
			playerScreenValidation();
			navigateToHomePage();
			
	}
	
	
	public void  checkTheOptionsArePresentFeedSection__T007__T020(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T007 - Guest User - Check the options are present at bottom of the screen in \"Feed\" section");
			System.out.println("T007");
			extent.extentLogger("For You", "T007");
			}else {
				extent.HeaderChildNode("T020 - Logged in User - Check the options are present at bottom of the screen in \"Feed\" section");
				System.out.println("T020");
				extent.extentLogger("For You", "T020");
			}	
		
		if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
			logger.info("Home Icon is displayed when ever user launch app,Expected Behaviour");	
			extent.extentLoggerPass("For You", "Home Icon is displayed when ever user launch app,Expected Behaviour");
		}else {
			logger.info("Home Icon is not displayed when ever user launch app");	
			extent.extentLoggerFail("For You", "Home Icon is not displayed when ever user launch app");	
		}
		verifyElementPresent(HipiHomePage.objDiscoverButton, "Discover Button");
		verifyElementPresent(HipiHomePage.objVideoCreateIcon, "Video Create Icon");
		verifyElementPresent(AMDHomePage.objProfileIcon, "Profile Icon");
		
		SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");

		waitTime(3000);
			
			if(verifyElementPresent(HipiHomePage.objShopButton, "Shop Button")) {
				logger.info("User is able to see SHOP button on the video below the screen beside discovery icon,Expected Behaviour");	
				extent.extentLoggerPass("For You", "User is able to see SHOP button on the video below the screen beside discovery icon,Expected Behaviour");
			}else {
				logger.info("User is not able to see SHOP button on the video below the screen beside discovery icon");	
				extent.extentLoggerFail("For You", "User is not able to see SHOP button on the video below the screen beside discovery icon");
			}
			navigateToHomePage();
	
	}
	
	public void selectedByDefaultInFeedScreen__T008(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T008 - Guest User - Check if \"For You\" tab selected by default in \"Feed\" screen");
			System.out.println("T008");
			extent.extentLogger("For You", "T008");
			
			if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
				logger.info("User is able to see the For You tab selected by default,Expected Behaviour");	
				extent.extentLoggerPass("For You", "User is able to see the For You tab selected by default,Expected Behaviour");
			}else {
				logger.info("User is not able to see the For You tab selected by default");	
				extent.extentLoggerFail("For You", "User is not able to see the For You tab selected by default");
			}
			navigateToHomePage();
			}	
	}
		
	
	public void  videoIsPlayingByDefaultInForYouTab__T010(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T010 - Guest User - Check that guest user only can see \"For You\" section videos");
			System.out.println("T010");
			extent.extentLogger("For You", "T010");
			verifyElementPresent(HipiHomePage.objForYou, "For You button");
			playerScreenValidation();
			navigateToHomePage();
		}	
	}
	
	
	public void refreshTheListOnContents__T011__T023(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T011 - Guest User - Check if user is able to refresh the list on contents in \"For You\" tab of HiPi");
			System.out.println("T011");
			extent.extentLogger("For You", "T011");
			}else {
				extent.HeaderChildNode("T023 - Logged in User - Check if user is able to refresh the list on contents in \"For You\" tab of HiPi");
				System.out.println("T023");
				extent.extentLogger("For You", "T023");
			}	
		description = getText(HipiHomePage.objDescription);
		System.out.println(description);
		Swipe("DOWN", 3);
		waitTime(8000);
		description1 = getText(HipiHomePage.objDescription);
		System.out.println(description1);
		if (!description.equals(description1)) {
			logger.info("User is able to refresh the list on contents in For You tab of HiPi");	
			extent.extentLoggerPass("For You", "User is able to refresh the list on contents in For You tab of HiPi");
		}else {
			logger.info("User is able to refresh the list on contents in For You tab of HiPi");	
			extent.extentLoggerFail("For You", "User is able to refresh the list on contents in For You tab of HiPi");
		}
		navigateToHomePage();
	}
	public void PausePlayer() throws Exception {
		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		int heightOfScreen = getDriver().manage().window().getSize().getHeight();
		int widthOfScreen = getDriver().manage().window().getSize().getWidth();
		int x = widthOfScreen / 2;
		int y = heightOfScreen / 2;
		touch.tap(PointOption.point(x, y)).perform();
	}
	public void pauseVideo() throws Exception {
		for (int i = 1; i <= 10; i++) {
			try {
				if (verifyIsElementDisplayed(HipiHomePage.objplaybutton)) {
					System.out.println("Video is already paused");
					break;
				} else {
					PausePlayer();

					if (verifyIsElementDisplayed(HipiHomePage.objplaybutton, "playbutton")) {
						System.out.println("Video Paused");
						extent.extentLogger("", "Video Paused");
						break;
					}else{
						Swipe("UP", 1);
						PausePlayer();
						if (verifyIsElementDisplayed(HipiHomePage.objplaybutton)) {
							System.out.println("Video is already paused");
							break;
						}
						
					}
				}
			} catch (Exception e) {
				if (verifyIsElementDisplayed(HipiFeedPage.objplaybutton)) {
					System.out.println("Video is already paused");
					break;
				} else {
					PausePlayer();

					if (verifyIsElementDisplayed(HipiFeedPage.objplaybutton, "playbutton")) {
						System.out.println("Video Paused");
						extent.extentLogger("", "Video Paused");
						break;
					}else{
						Swipe("UP", 1);
						PausePlayer();
						if (verifyIsElementDisplayed(HipiFeedPage.objplaybutton)) {
							System.out.println("Video is already paused");
							break;
						}
						
					}
				}
			}

		}

	}

	
	public void ValidatePlayandPause__T012_T026(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T012 - Guest User - Check if user is able to pause and play the video in \"For You\" tab");
			System.out.println("T012");
			extent.extentLogger("", "T012");
			}else {
				extent.HeaderChildNode("T026 - Logged in User - Check if user is able to pause and play the video in \"For You\" tab");
				System.out.println("T026");
				extent.extentLogger("For You", "T026");
			}	

		PausePlayer();
		pauseVideo();
	//	logger.info("Hipi feed screen:" + "ClickCoodinate() used to pause the video of feed screen");
		if (verifyElementExist(HipiHomePage.objplaybutton, "Play button")) {
			logger.info("Hipi feed screen:" + "Paused the Player");
			extent.extentLoggerPass("Hipi feed screen:", "Paused the Player");
			click(HipiHomePage.objplaybutton, "Play button");
		} else {
			extent.extentLoggerFail("Hipi feed screen:", "Dint pause the player");
			logger.info("Hipi feed screen:" + "Dint pause the player");
		}
		navigateToHomePage();
	}
	

	public void  validateUIOfTheForYou__T013__T027(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T013 - Guest User -  Check the UI of the \"For You\" tab in \"Feed\" screen");
			System.out.println("T013");
			extent.extentLogger("", "T013");
			}else {
				extent.HeaderChildNode("T027 - Logged in User -  Check the UI of the \"For You\" tab in \"Feed\" screen");
				System.out.println("T027");
				extent.extentLogger("For You", "T027");
			}		
			
		verifyFeedUI();
		navigateToHomePage();
	}
	
public void verifyFeedUI() throws Exception {
	
	verifyElementPresent(HipiHomePage.objProfilePicture, "Profile Picture");
	verifyElementPresent(HipiHomePage.objPlusFollowICON, "Plus Follow Icon");
	verifyElementPresent(HipiHomePage.objLikeICON, "Like Icon");
	verifyElementPresent(HipiHomePage.objShareICON, "Share Icon");
	SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
	waitTime(3000);
//	verifyElementPresent(HipiHomePage.objSaveLook, "Save look CTA");
	verifyElementPresent(HipiHomePage.objShopButton, "Shop CTA");
	verifyElementPresent(HipiHomePage.objDescription, "User name");
	verifyElementPresent(HipiHomePage.objHeartICON, "Heart Icon");
	SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
	verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
	verifyElementPresent(HipiHomePage.objHashtagButtonDescription, "Hashtag Description ");
		
}
public void verifyFeedUILike() throws Exception {
	extent.HeaderChildNode("Feed is Down");
//	Swipe("UP", 1);
	waitUntilElementDisplayed(HipiHomePage.objLikeICON, 2);
	if(verifyElementPresent(HipiHomePage.objLikeICON, "Like Icon")) {
		logger.info("Feed is UP");	
		extent.extentLoggerPass("For You", "Feed is UP");
	}else {
		logger.info("Feed is Down");	
		extent.extentLoggerFail("For You", "Feed is Down");
	}
	

	
		
}
	public void  scrollVerticallyToInfiniteLevel__T014__T024(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T014 - Guest User - Check vertical scrolling of For you Tab section is infinte");
			System.out.println("T014");
			extent.extentLogger("", "T014");
			}else {
				extent.HeaderChildNode("T024 - Logged in User - Check vertical scrolling of For you Tab section is infinte");
				System.out.println("T024");
				extent.extentLogger("For You", "T024");
			}		
	
		boolean swipecheck=true;
		
		for(int i=0;i<8;i++){
			getDriver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
			description = getText(HipiHomePage.objDescription);
		     Swipe("UP", 1);
		     description1 = getText(HipiHomePage.objDescription);
		     if (!description.equals(description1)) {
					logger.info("Screen Swipe Successfully");	
					extent.extentLoggerPass("", "Screen Swipe Successfully");
				}else {
					logger.info("Screen not Swipe");	
					extent.extentLoggerFail("", "Screen not Swipe");
				}
		    
		     if (swipecheck==false) {
		    	 	extent.extentLoggerFail("Hipi feed screen:", "User is not able to Swipe Screen");
					logger.info("User is not able to Swipe Screen");
			}
		}
		if(swipecheck==true){
			logger.info("User is able to see the videos Unlimited in For You tab");
			extent.extentLoggerPass("Hipi feed screen:", "User is able to see the videos Unlimited in For You tab");
		}
	}
	
	
	public void tappingOnBbackFromAnyKeySection__T021(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T021 - Logged in User - Check by tapping on back from any key section, user is navigated to Feed screen");
			System.out.println("T021");
			extent.extentLogger("", "T021");
			
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(3000);
			Back(1);
			waitTime(3000);
			validateDescription();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(3000);
			Back(1);
			waitTime(3000);
			validateDescription();
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon, "Create button");
			allowPermissions();
			waitTime(5000);
			Back(1);
			waitTime(3000);
			validateDescription();
			navigateToHomePage();
		}
	}
	public void validateDescription() throws Exception {
		if(verifyElementPresent(HipiHomePage.objDescription, "Description")){
			logger.info("Hipi feed screen:" + "User is redirect back to Feed from  ever section");
			extent.extentLoggerPass("Hipi feed screen:", "User is redirect back to Feed from  ever section");
		} else {
			extent.extentLoggerFail("Hipi feed screen:", "User is redirect back to Feed from  ever section");
			logger.info("Hipi feed screen:" + "User is redirect back to Feed from  ever section");
		}
		
	}
	public void allowPermissions() throws InterruptedException, Exception {
		
		if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow Hipi to take pictures and record video?"))
		{
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow Hipi to take pictures and record video?");
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow Hipi to take pictures and record video-"+ "Allow button clicked");
			Thread.sleep(2000);
			}else {
				logger.info("Permission dialog:"+ "Allow Hipi to take pictures and record video? is not displayed");
				
			}
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow Hipi to access photos, media, and files on your device");
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow ZEE5 to access photos, media, and files on your device?");		
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow Hipi to access photos, media, and files on your device-"+ "Allow button clicked");
			Thread.sleep(2000);
			}else {
				logger.info("Permission dialog:"+ "Allow Hipi to take pictures and record video? is not displayed");	
			}
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow Hipi to record audio");
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow Hipi to record audio?");
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");	
			logger.info("Allow ZEE5 to record audio-"+ "Allow button clicked");
//			Thread.sleep(10000);
			}else {
				logger.info("Permission dialog:"+ "Allow Hipi to take pictures and record video? is not displayed");
				
			}
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow Hipi to access photos, media, and files on your device");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow Hipi to access photos, media, and files on your device?");		
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow Hipi to access photos, media, and files on your device-"+ "Allow button clicked");
				Thread.sleep(2000);
				}else {
					logger.info("Permission dialog:"+ "Allow Hipi to take pictures and record video? is not displayed");	
				}
//			verifyElementExist(HipiCreateVideoPage.objCreateReadyDialog, "Ready dialog");
//			click(HipiCreateVideoPage.objCreateReadyYes, "yes button clicked");	
//			logger.info("Ready dialog displayed:"+ "yes button clicked");
			Thread.sleep(2000);
		}
		
	}
	

	public void verifyDefaultTabOfFeedKeySection__T022(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T022 - Logged in User - Check the tabs present in Feed key section and also verify default tab of Feed key section");
			System.out.println("T022");
			extent.extentLogger("", "T022");
			if (verifyElementPresent(HipiHomePage.objForYou, "For you")) {
				logger.info("User is able to verify the For you option in top section,Expected Behaviour");
				extent.extentLoggerPass("For You","User is able to verify the For you option in top section,Expected Behaviour");
			} else {
				logger.info("User is not able to verify the For you option in top section");
				extent.extentLoggerFail("For You","User is not able to verify the For you option in top section");

			}

			if (verifyElementPresent(HipiHomePage.objFollowingButton, "Following Option")) {
				logger.info("User is able to verify the Following option in top section,Expected Behaviour");
				extent.extentLoggerPass("For You","User is able to verify the Following option in top section,Expected Behaviour");
			} else {
				logger.info("User is not able to verify the Following option in top section");
				extent.extentLoggerFail("For You","User is not able to verify the Following option in top section");

			}
			if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
				logger.info("User is able to see the For You tab selected by default,Expected Behaviour");	
				extent.extentLoggerPass("For You", "User is able to see the For You tab selected by default,Expected Behaviour");
			}else {
				logger.info("User is not able to see the For You tab selected by default");	
				extent.extentLoggerFail("For You", "User is not able to see the For You tab selected by default");
			}
		navigateToHomePage();
		}
	}

	public void  listOfActionableItems__T028(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T028 - Logged in User - Check if user is able to see the list of actionable items for a video");
			System.out.println("T028");
			extent.extentLogger("", "T028");
			verifyElementPresent(HipiHomePage.objLikeCount, "Like Count");
			verifyElementPresent(HipiHomePage.objCommentCount, "Comment Count");
			verifyFeedUI();
			navigateToHomePage();
		}
	}	
	
	public void defaultVideoByTappingOnIt__T029(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T029 - Logged in User - Check if user is able to pause the played by default video by tapping on it");
			System.out.println("T029");
			extent.extentLogger("", "T029");
		
			verifyElementPresentAndClick(HipiHomePage.objPlayerScreen, "Player Screen");
			if (verifyElementPresent(HipiHomePage.objplaybutton,"Paused Button")) {
				logger.info("Default played video is paused with a paused icon displayed over the video.");	
				extent.extentLoggerPass("For You", "Default played video is paused with a paused icon displayed over the video.");
			}else {
				logger.info("Default played video is not paused with a paused icon displayed over the video.");	
				extent.extentLoggerFail("For You", "Default played video is not paused with a paused icon displayed over the video.");
			}
			click(HipiHomePage.objPlayerScreen, "Player Screen");
			navigateToHomePage();
		}
	}
	
	public void resumePausedVideoByTappingPlayerScreen__T030(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T030 - Logged in User - Check if user is able to resume a paused video by tapping on it");
			System.out.println("T030");
			extent.extentLogger("", "T030");
		
			verifyElementPresentAndClick(HipiHomePage.objPlayerScreen, "Player Screen");
			if (verifyElementPresent(HipiHomePage.objplaybutton,"Paused Button")) {
				logger.info("Default played video is paused with a paused icon displayed over the video.");	
				extent.extentLoggerPass("For You", "Default played video is paused with a paused icon displayed over the video.");
			}else {
				logger.info("Default played video is not paused with a paused icon displayed over the video.");	
				extent.extentLoggerFail("For You", "Default played video is not paused with a paused icon displayed over the video.");
			}
			click(HipiHomePage.objPlayerScreen, "Player Screen");
			waitTime(3000);
			if (verifyElementExist(HipiHomePage.objplaybutton,"Paused Button")) {
				logger.info("Taping on paused icon video not starts playing.");	
				extent.extentLoggerFail("For You", "Taping on paused icon video not starts playing.");
			}else {
				logger.info("Taping on paused icon video starts playing.");	
				extent.extentLoggerPass("For You", "Taping on paused icon video starts playing.");
			}
		navigateToHomePage();
		}
	} 
	public void longPress(By element) throws Exception {
		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(findElement(element))))
				.release().perform();
	}
	public void  listOfActionsPresentOnLongPress__T034(String userType) throws Exception{

		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T034 - Logged in User - Check the list of actions present on long press popup of a video");
			System.out.println("T034");
			extent.extentLogger("", "T034");
		
		longPress(HipiHomePage.objPlayerScreen);
		Thread.sleep(5000);
		verifyElementPresent(HipiHomePage.objSaveVideo, "Save Video");
		verifyElementPresent(HipiHomePage.objAddToFavourites, "Add To Favourites");
		verifyElementPresent(HipiHomePage.objReport, "Report");
		verifyElementPresent(HipiHomePage.objNotInterested, "Not Interested");
		navigateToHomePage();
		}

	}

	public void tappingBackMobileOptionInListOfActionsScreen__T037(String userType) throws Exception{

		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T037 - Logged in User- Check on tapping 'back' mobile option in list of actions screen of a video , user is redirected to \"Feed\" screen");
			System.out.println("T037");
			extent.extentLogger("", "T037");
		
		longPress(HipiHomePage.objPlayerScreen);
		Thread.sleep(5000);
		verifyElementPresent(HipiHomePage.objSaveVideo, "Save Video");
		Back(1);
		if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
			logger.info("User is navigate to HiPi home screen on tapping 'back' icon on device");	
			extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'back' icon on device");
		}else {
			logger.info("User is not navigate to HiPi home screen on tapping 'back' icon on device");	
			extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'back' icon on device");	
		}
			}
		}
	public void profileDetailsScreenIsDisplayed__T038(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T038 - Logged in User - Check if 'Profile details' screen is displayed when tapped on 'name' of a video description");
			System.out.println("T038");
			extent.extentLogger("", "T038");
			verifyElementPresentAndClick(HipiHomePage.objDescription, "Description");
			waitTime(2000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details screen is not displayed when tapped on name of a video description");	
			}
			navigateToHomePage();
			}
	}
	
	
	public void switchBetweenTheFollowingAndForYouSection__T039(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T039 - Logged in User - Check that user can switch between the \"Following\" and \"For You\" Section");
			System.out.println("T039");
			extent.extentLogger("", "T039");	
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(2000);
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}
			
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Button");
			
			if (verifyElementPresent(HipiHomePage.objForYouhigHlighted, "For you Button Highlighted")) {
				logger.info("User is able to switch For you section");	
				extent.extentLoggerPass("", "User is able to switch For you section");
			}else {
				logger.info("User is not able to switch For you section");	
				extent.extentLoggerFail("", "User is not able to switch For you section");	
			}
			navigateToHomePage();
			
		}
	}
	
	
//=====================================For You >> Sound and For You >> Sound Detail Page===========================================
	
	public void  ableToViewSoundOnPlayed__T050(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to view sound on played/paused video");
			System.out.println("T050");
			extent.extentLogger("", "T050");
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			if(verifyElementExist(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
//				logger.info("User is able to see shop button");	
				extent.extentLoggerPass("", "User is able to see sound button");
//				click(HipiHomePage.objShopButton, "Shop Button");
			}else {
				waitTime(5000);
				SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
				//click(HipiHomePage.objShopButton, "Shop Button");
			}		
			if(verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
				logger.info("User is able to view sound used for played video");	
				extent.extentLoggerPass("", "User is able to view sound used for played video");
			}else {
				logger.info("User is not able to view sound used for played video");	
				extent.extentLoggerFail("", "User is not able to view sound used for played video");	
			}
			navigateToHomePage();
		}
	}
	
	public void tapOnMusicOnPlayerScreen__T096__T051(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T096 - Guest User -  Check if user is able to navigate to Sound detail page by tapping on Music present in \"For You\" screen");
			System.out.println("T096");
			extent.extentLogger("", "T096");
			}else {
				extent.HeaderChildNode("T051 - Logged in User - Check if user is able to view Sound detail page by tapping on Sound in the description on played/paused video");
				System.out.println("T051");
				extent.extentLogger("", "T051");
			}	
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		if(verifyElementExist(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
//			logger.info("User is able to see shop button");	
			extent.extentLoggerPass("", "User is able to see sound button");
//			click(HipiHomePage.objShopButton, "Shop Button");
		}else {
			waitTime(5000);
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			//click(HipiHomePage.objShopButton, "Shop Button");
		}		
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
			
			if(verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title")){
				logger.info("User is able to navigate to Sound details page");	
				extent.extentLoggerPass("", "User is able to navigate to Sound details page");
			}else {
				logger.info("User is not able to navigate to Sound details page");	
				extent.extentLoggerFail("", "User is not able to navigate to Sound details page");	
			}
			navigateToHomePage();
			}
	
	
	public void  userCheckIfProfileDetailsScreenDisplayedWhenTappedOnProfilePictureOfVideo__T137(String userType) throws Exception {
		  if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		  extent.HeaderChildNode("T137 - Logged in User - Check if 'Profile details' screen is displayed when tapped on Profile picture of a video");
			System.out.println("T137");
			extent.extentLogger("Feed", "T137");
	
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("Profile details' screen is displayed when tapped on name of a video description");	
			extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
			logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
			extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
		navigateToHomePage();
	
	}
	
	
	}
	
	
	public void  tappingOnBackArrowinSoundDetailScreen__T097__T052(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T097 - Guest User - Check if user is able is redirected to 'Feed' screen on tapping on \"<-\" in Sound Detail Screen");
			System.out.println("T097");
			extent.extentLogger("", "T097");
			}else {
				extent.HeaderChildNode("T052 - Logged in user - Check if user is able is redirected to 'Feed' screen on tapping on \"<-\" in Sound Detail Screen");
				System.out.println("T052");
				extent.extentLogger("", "T052");
			}	
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		if(verifyElementExist(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
//			logger.info("User is able to see shop button");	
			extent.extentLoggerPass("", "User is able to see sound button");
//			click(HipiHomePage.objShopButton, "Shop Button");
		}else {
			waitTime(5000);
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			//click(HipiHomePage.objShopButton, "Shop Button");
		}		
//		if(verifyElementExist(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
////			logger.info("User is able to see shop button");	
//			extent.extentLoggerPass("", "User is able to see sound button");
////			click(HipiHomePage.objShopButton, "Shop Button");
//		}else {
//			waitTime(5000);
//			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
//			//click(HipiHomePage.objShopButton, "Shop Button");
//		}
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
			waitTime(4000);
			if(verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title")){
				logger.info("User is able to navigate to Sound details page");	
				extent.extentLoggerPass("", "User is able to navigate to Sound details page");
			}else {
				logger.info("User is not able to navigate to Sound details page");	
				extent.extentLoggerFail("", "User is not able to navigate to Sound details page");	
			}
			verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is navigate to HiPi home screen on tapping 'Back Arrow' icon");	
				extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'Back Arrow' icon");
			}else {
				logger.info("User is not navigate to HiPi home screen on tapping 'Back Arrow' icon");	
				extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'Back Arrow' icon");	
			}
			navigateToHomePage();
		}

	public void  redirectToFeedScreenOnTappingOnDeviceBackButtonInSoundDetailScreen__T098__T053(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T098 - Guest User - Check if user is able to redirect to 'Feed' screen on tapping on device back button in Sound Detail Screen");
			System.out.println("T098");
			extent.extentLogger("", "T098");
			}else {
				extent.HeaderChildNode("T053 - Logged in user - Check if user is able to redirect to 'Feed' screen on tapping on device back button in Sound Detail Screen");
				System.out.println("T053");
				extent.extentLogger("", "T053");
			}	
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		if(verifyElementExist(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
//			logger.info("User is able to see shop button");	
			extent.extentLoggerPass("", "User is able to see sound button");
//			click(HipiHomePage.objShopButton, "Shop Button");
		}else {
			waitTime(5000);
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			//click(HipiHomePage.objShopButton, "Shop Button");
		}		
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
			
			if(verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title")){
				logger.info("User is able to navigate to Sound details page");	
				extent.extentLoggerPass("", "User is able to navigate to Sound details page");
			}else {
				logger.info("User is not able to navigate to Sound details page");	
				extent.extentLoggerFail("", "User is not able to navigate to Sound details page");	
			}
			Back(1);
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is navigate to HiPi home screen on tapping 'Back ' icon on device");	
				extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'Back ' icon on device");
			}else {
				logger.info("User is not navigate to HiPi home screen on tapping 'Back ' icon on device");	
				extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'Back ' icon on device");	
			}
			navigateToHomePage();
		}
	
	
	
	
//==================================Profile================================================
	
	public void userIsAbleToNavigateToUserProfilePage__T058(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T058 - Logged in User - Check if user is able to navigate to user profile page by tapping on profile icon");
			System.out.println("T058");
			extent.extentLogger("", "T058");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			waitTime(2000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on  Profile");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on  Profile");
			}else {
				logger.info("Profile details' screen is displayed when tapped on  Profile");	
				extent.extentLoggerFail("", "Profile details' screen is displayed when tapped on  Profile");	
			}
			navigateToHomePage();

		}
	}
	public void checktheUIOfUserProfilePage() throws Exception {
		
		verifyElementPresent(HipiProfilePage.objProfilePicture, "Profile Picture");
		verifyElementPresent(HipiProfilePage.objFindFriedsIcon, "Find Frieds Icon");
		verifyElementPresent(HipiProfilePage.objNotificationBell, "Notification bell");
		verifyElementPresent(HipiProfilePage.objThreeDots, "3 Dots");
		verifyElementPresent(HipiProfilePage.objFollowing, "Following");
		verifyElementPresent(HipiProfilePage.objFollowers, "Followers");
		verifyElementPresent(HipiProfilePage.objLikeSections, "Like Sections");
		verifyElementPresent(HipiProfilePage.objEditProfile, "Edit Profile");
		verifyElementPresent(HipiProfilePage.objFavoritesButton, "Save Video");
		verifyElementPresent(HipiProfilePage.objListOfVideoSection, "List Of Video Section");
		verifyElementPresent(HipiProfilePage.objShoppableTab, "Shopable Video Tab");
		verifyElementPresent(HipiProfilePage.objPrivateVideoTab, "Private Video Tab");
		
	}
	
	public void verifyUserProfilePage__T059(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check the UI of User Profile Page");
			System.out.println("T059");
			extent.extentLogger("", "T059");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			checktheUIOfUserProfilePage();
			navigateToHomePage();
		}
		
	}
	
	
	public void shoppableVideoUnderUserProfilePage__T060(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T060 - Looged in User - Check for shoppable video under user profile page");
			System.out.println("T060");
			extent.extentLogger("", "T060");
		
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(4000);
			
			click(HipiProfilePage.objShoppableTab, "shoppable Tab");
			if(verifyElementExist(HipiProfilePage.objNoShoppableVideos, "No shoppable Videos")) {
				logger.info("User is able to tap on shoppable tab and User is able to see disclaimer when there is no video under shoppable");	
				extent.extentLoggerPass("Shoppable", "User is able to tap on shoppable tab and User is able to see disclaimer when there is no video under shoppable");
			}else if (verifyElementExist(HipiProfilePage.objVideoUnderAllTabs, "Videos")) {
				logger.info("User is able to tap on shoppable tab and User is  able to see video under shoppable");	
				extent.extentLoggerPass("Shoppable", "User is able to tap on shoppable tab and User is  able to see video under shoppable");
			}
			else
			{
				logger.info("User is not able to tap on shoppable tab , User is not able to see disclaimer when there is no video under shoppable ,  ");	
				extent.extentLoggerFail("Shoppable", "User is not able to tap on shoppable tab and User is not able to see disclaimer when there is no video under shoppable");
		
			}
		navigateToHomePage();	
		}

}
	
	
	public void addToFavouritesActionByTapping__T063(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User - Check if user is unable to perform \"Add to Favourites\" action by tapping on it");
			System.out.println("T063");
			extent.extentLogger("", "T063");
		
			tapiOS_Middlepoint(1);
			Thread.sleep(5000);
			verifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "Add To Favourites");
			waitTime(2000);
			VerifyLoginPopUp();
			navigateToHomePage();
		}
	}
	public void saveVideoActionByTapping__T065__T121(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T065 - Guest User - Check if user is unable to perform \"Save Video\" action by tapping on it");
			System.out.println("T065");
			extent.extentLogger("", "T065");
		}else {
				extent.HeaderChildNode("T121 - Logged in User - Check if user is able to perform \"Save Video\" action by tapping on it");
				System.out.println("T121");
				extent.extentLogger("", "T121");
		}
		tapiOS_Middlepoint(1);
			Thread.sleep(5000);
			verifyElementPresentAndClick(HipiHomePage.objSaveVideo, "Save Video");
			waitTime(2000);
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow")) {
			logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
			
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
			}else {
				logger.info("Permission dialog popup not displayed");
			}
			
			waitUntilElementDisplayed(HipiHomePage.objVideoSaved, 60);
//			click(HipiHomePage.objSaveVideo, "Save Video");
			if(verifyElementPresent(HipiHomePage.objVideoSaved, "Video saved")){
				logger.info("User is able to saved Video");	
				extent.extentLoggerPass("", "User is able to saved Video");
			}else {
				logger.info("User is not able to saved Video");	
				extent.extentLoggerFail("", "User is not able to saved Video");
			}
//			VerifyLoginPopUp();
			navigateToHomePage();
			}
	
	

	public void performReportActionByTapping__T067(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T067 - Guest User - Check if user is unable to perform \"Report\" action by tapping on it");
			System.out.println("T067");
			extent.extentLogger("", "T067");
			waitTime(3000);
			longPress(HipiHomePage.objPlayerScreen);
			Thread.sleep(5000);
			verifyElementPresentAndClick(HipiHomePage.objReport, "Report Video");
			waitTime(2000);
			VerifyLoginPopUp();
			navigateToHomePage();
		}
	} 
	
	public void performNotInterestedActionByTapping__T069(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T069 - Guest User - Check if user is unable to perform \"Not interested\" action by tapping on it");
			System.out.println("T069");
			extent.extentLogger("", "T069");
			waitTime(3000);
			longPress(HipiHomePage.objPlayerScreen);
			Thread.sleep(5000);
			verifyElementPresentAndClick(HipiHomePage.objNotInterested, "Not Interested");
			waitTime(2000);
			VerifyLoginPopUp();
			navigateToHomePage();
		}
	} 

	
	public void checkifuserIsAbleToNavigateToUserProfilePage__T071(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T071 - Guest User - Check if user is able to navigate to user profile page by tapping on Profile picture in \"For You\" tab");
			System.out.println("T071");
			extent.extentLogger("", "T071");
			
			verifyElementPresentAndClick(HipiHomePage.objProfilePicture, "Profile Picture");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			Back(1);
			verifyElementPresentAndClick(HipiHomePage.objDescription, "Description");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			navigateToHomePage();
		}
	}
	
	public void ableToSeeProfilePictureOnTheVideoScreenOfFeed__T138__T072(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T072 - Guest User - Check if user is able to see profile picture on the video screen of feed");
			System.out.println("T072");
			extent.extentLogger("", "T072");
			}else {
				extent.HeaderChildNode("T138 - Logged in User - Check if user is able to see profile picture on the video screen of feed");
				System.out.println("T138");
				extent.extentLogger("Shop", "T138");
			}	
			if (verifyElementPresent(HipiHomePage.objProfilePicture, "Profile Picture")) {
				logger.info("User is able to see the profile picture on the video screen of feed");	
				extent.extentLoggerPass("", "User is able to see the profile picture on the video screen of feed");
			}else {
				logger.info("User is not able to see the profile picture on the video screen of feed");	
				extent.extentLoggerFail("", "User is not able to see the profile picture on the video screen of feed");	
			}
			navigateToHomePage();
		}
	
	
	public void navigateToUserProfilePageByTappingOnUserName__T074(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User - Check if user is able to navigate to user profile page by tapping on User name in \"For You\" tab");
			System.out.println("T074");
			extent.extentLogger("", "T074");
			verifyElementPresentAndClick(HipiHomePage.objDescription, "Description");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			navigateToHomePage();
		}
	}
	
	
	public void checkIfCommentScreenIsDisplayedWhenTappedOnCommentChatIcon_T143(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T143 - Logged in User - Check if Comment screen is displayed when tapped on Comment Chat Icon_T143");
			System.out.println("T143");
			extent.extentLogger("Feed-ForYou_Comment","T143");
			//verifyElementPresent(HipiHomePage.objForYou, "For You")
			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
//			waitUntilElementDisplayed(HipiHomePage.objFirstCommentUserName, 10);
			waitTime(4000);
			if(verifyElementPresent(HipiHomePage.objAddAComment, "Add a comment")) {
				
				logger.info("Comment screen is be displayed");
				extent.extentLoggerPass("Feed-ForYou_Comment", "Comment screen is be displayed");
			}else {
				logger.info("Comment screen is not be displayed");
				extent.extentLoggerFail("Feed-ForYou_Comment", "Comment screen is not be displayed");
			}		
			navigateToHomePage();
			
}
	}
	
	
	
	
	public void checkIfUserIsAbleToSeeTheUserNameInForYouTab_T141(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T141 - Logged in User - Check if user is able to see the user name in For You tab_T141");
			System.out.println("T141");
			extent.extentLogger("Feed-ForYou_username","T141");
			//verifyElementPresent(HipiHomePage.objForYou, "For You")
			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			if(verifyElementPresent(HipiHomePage.objDescription,"Description")) {
				logger.info("User is able to see the user name");
				extent.extentLoggerPass("Feed-ForYou_username", "User is able to see the user name");
			}else {
				logger.info("User is able to see the user name");
				extent.extentLoggerFail("Feed-ForYou_username", "User is able to see the user name");
			}		
			navigateToHomePage();
}
	}
	
	//=========================================================Deepa==========================================================================
//	========================================= For You >> Exit =======================================================
	
	public void userCheckIfCommentScreenIsDisplayedWhenTappedOnComment__T492(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T492 - Logged in User - Check if 'Comment' screen is displayed when tapped on Comment [Chat Icon]");
		System.out.println("T492");
		extent.extentLogger("Feed", "T492");
		followUser();
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		waitTime(2000);
		if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
			logger.info("User is able to switch Following the section");	
			extent.extentLoggerPass("", "User is able to switch Following the section");
		}else {
			logger.info("User is able to switch Following section");	
			extent.extentLoggerFail("", "User is able to switch Following section");	
		}
	
	     if (verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Cooment ICON")) {
		  logger.info("Comment screen is displayed");	
		  extent.extentLoggerPass("", "Comment screen is displayed");
	}else {
		logger.info("Comment screen is not displayed");	
		extent.extentLoggerFail("", "Comment screen is not displayed");	
	}
	     navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	   }
	}
	
	
	public void userCheckByTappingOnBackFromAnyKeySectionUserIsNavigatedToFeedScreen__T424(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T424 - Logged in User - Check by tapping on \"back\" from any key section, user is navigated to \"Feed\" screen");
		System.out.println("T424");
		extent.extentLogger("Feed", "T424");
	
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		waitTime(2000);
		if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
			logger.info("User is able to switch Following the section");	
			extent.extentLoggerPass("", "User is able to switch Following the section");
		}else {
			logger.info("User is able to switch Following section");	
			extent.extentLoggerFail("", "User is able to switch Following section");	
		}
	     verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover button");
	     waitTime(4000);
	
	     if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar,"search field")) {
	 	  logger.info(" User is able to navigate to the discover page");	
	 	  extent.extentLoggerPass("Feed", " User is able to navigate to the discover page");
	     }else {
		 logger.info(" User is not  able to navigate to the discover page");	
		 extent.extentLoggerFail("Feed", " User is not  able to navigate to the discover page");
	     }
	     Back(1);  
	     verifyForYouOrHomeOrFeedScreen();  
	     verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
		logger.info("Profile details' screen is displayed when tapped on name of a video description");	
		extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
		}else {
		logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
		extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
		}
			
		Back(1);
		verifyForYouOrHomeOrFeedScreen();
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
		allowPermissions();
		if(verifyElementPresent(HipiCreateVideoPage.objRecordIcon,"Record icon")) {
		logger.info("Video recording screen has been displayed");
    	extent.extentLoggerPass("Create Video Screen", "Video recording screen has been displayed");
		}else {
		 logger.info("Video recording screen failed to displayed");
		 extent.extentLoggerFail("Create Video Screen", "Video recording screen failed to displayed");   		
		}
		Back(1);
		verifyForYouOrHomeOrFeedScreen();
			
		navigateToHomePage();
	
	}
	      }
	
	public void verifyForYouOrHomeOrFeedScreen() throws Exception {
		
		  if (verifyElementPresent(HipiHomePage.objForYou, "For You")) {
		    	 logger.info("User is able to navigate to the Feed screen");	
			 	 extent.extentLoggerPass("Feed", "User is able to navigate to the Feed screen");
				}else {
				 logger.info("User is not able to navigate to the Feed screen");	
				 extent.extentLoggerFail("Feed", "User is not able to navigate to the Feed screen");
				}
	}
//	public void userVerifyForPINAnimationCircleOonTheVideoScreenCollectingMomentsFromTheVideo__T201(String userType) throws Exception {
//		  if(userType.equalsIgnoreCase("Guest")) {
//		  extent.HeaderChildNode("T201 - Guest User- Verify for PIN animation circle  on the video screen collecting moments from the video");
//			System.out.println("T201");
//			extent.extentLogger("Feed", "T201");
//	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Lock");
//			waitTime(3000);
//			
//			if (verifyElementPresent(HipiHomePage.objPINAnimationCircle, "PIN Animation Circle")) {
//				logger.info("User is get redPIN Animation Circle on the SHOP button ");	
//				extent.extentLoggerPass("", "User is get red PIN Animation Circle on the SHOP button ");
//			}else {
//				logger.info("User is not get red PIN Animation Circle on the SHOP button ");	
//				extent.extentLoggerFail("", "User is not get red PIN Animation Circle on the SHOP button ");
//			}
//
//			navigateToHomePage();
//	
//}
//	}
	public void userCheckDisplayOfLatestCommentAppearOnTop__T157(String userType) throws Exception {
		  if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		  extent.HeaderChildNode("T157 - Logged in User - Check display of latest comment appears on top and time is changed after few min");
			System.out.println("T157");
			extent.extentLogger("Feed", "T157");
			
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 10);
			hideKeyboard();
			waitTime(3000);
			PartialSwipe("UP", 3);
			click(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(4000);
			type(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
			hideKeyboard();
			waitTime(4000);
			click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			waitTime(8000);
			 String comment = getText(HipiHomePage.objFirstComment);
			 System.out.println(comment);
		if (comment.contains("Hi Few seconds ago")) {
			logger.info("Comment is added with the typed description on the top [with time display as - just now or few seconds ago]");	
			extent.extentLoggerPass("", "Comment is added with the typed description on the top [with time display as - just now or few seconds ago]");
		}else {
			logger.info("Comment is not added with the typed description on the top [with time display as - just now or few seconds ago]");	
			extent.extentLoggerFail("", "Comment is not added with the typed description on the top [with time display as - just now or few seconds ago]");
			}
		navigateToHomePage();
	
}
	}
	
	
	public void  tappingOnDeviceBackButtonExitOpensPopup__T041__T101(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T101 - Guest User - Check if tapping on device back button \"Exit\" opens a popup");
			System.out.println("T101");
			extent.extentLogger("Shop", "T101");
			}else {
				extent.HeaderChildNode("T041 - Logged in User - Check if tapping on device back button \"Exit\" opens a popup");
				System.out.println("T041");
				extent.extentLogger("For You >> Exit", "T041");
			}			
		Back(1);
		
		if (verifyElementPresent(HipiHomePage.objExit, "Exit Button")) {
			logger.info("User is able to see the Exit Title");	
			extent.extentLoggerPass("", "User is able to see the Exit Title");
		}else {
			logger.info(" User is not able to see the Exit Title ");	
			extent.extentLoggerFail("", "User is not able to see the Exit Title");	
		}
		
		if (verifyElementPresent(HipiHomePage.objAreYouSureWantToExitText, "Are You Sure Want To Exit Text")) {
			logger.info("User is able to see the Are You Sure Want To Exit Text");	
			extent.extentLoggerPass("", "User is able to see the Are You Sure Want To Exit Text");
		}else {
			logger.info("User is not able to see the Are You Sure Want To Exit Text");	
			extent.extentLoggerFail("", "User is not able to see the Are You Sure Want To Exit Text");	
		}			
		if (verifyElementPresent(HipiHomePage.objNoCTA, "No CTA Button")) {
			logger.info("User is able to See No CTA button");	
			extent.extentLoggerPass("", "User is able to see No CTA button");
		}else {
			logger.info("User is not able to See on No CTA button");	
			extent.extentLoggerFail("", "User is not able to See No CTA button");	
		}
		if (verifyElementPresent(HipiHomePage.objYesCTA, "Yes CTA Button")) {
			logger.info("User is able to see Yes CTA button");	
			extent.extentLoggerPass("", "User is able to See Yes CTA button");
		}else {
			logger.info("User is not able to See Yes CTA button");	
			extent.extentLoggerFail("", "User is not able to See  Yes CTA button");	
		}
		navigateToHomePage();
			
	  

	}
	

	public void  tappingOnNoCTAClosesThePopup__T102__T042(String userType) throws Exception {	
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T102 - Guest in User - Check if tapping on \"No\" CTA closes the popup");
			System.out.println("T102");
			extent.extentLogger("For You >> Exit", "T102");
			}else {
				extent.HeaderChildNode("T042 - Logged in User - Check if tapping on \"No\" CTA closes the popup");
				System.out.println("T042");
				extent.extentLogger("For You >> Exit", "T042");
			}			
			
			Back(1);
			
			verifyElementPresentAndClick(HipiHomePage.objNoCTA, "No CTA Button");
			waitTime(2000);
			
//			if (verifyElementExist(HipiHomePage.objNoCTA, "No CTA Button")) {
//				logger.info("User is able to Click on No CTA button");	
//				extent.extentLoggerFail("", "User is able to Click on No CTA button");	
//			}else {
//				logger.info("User is not able to Click on No CTA button");	
//				extent.extentLoggerPass("", "User is not able to Click on No CTA button");
//			}
			
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is navigate to HiPi home screen on tapping NO CTA button");	
				extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping NO CTA button");
			}else {
				logger.info("User is not navigate to HiPi home screen on tapping NO CTA button");	
				extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping NO CTA button");	
			}
			navigateToHomePage();
		}
			
	
	
	public void  tappingOnYesCTAClosesThePopup__T104__T044(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T104 - Guest User - Check if tapping on \"Yes\" CTA logs out the user");
			System.out.println("T104");
			extent.extentLogger("Shop", "T104");
			}else {
				extent.HeaderChildNode("T044 - Logged in User - Check if tapping on \"Yes\" CTA logs out the user");
				System.out.println("T044");
				extent.extentLogger("For You >> Exit", "T044");
			}			
			Back(1);
			verifyElementPresentAndClick(HipiHomePage.objYesCTA, "Yes CTA Button");
			waitTime(2000);
			if (verifyElementExist(HipiHomePage.objYesCTA, "Yes CTA Button")) {
				logger.info("User is able to see Yes CTA ");	
				extent.extentLoggerFail("", "User is able to see Yes CTA ");	
			}else {
				logger.info("User is not able to see Yes CTA ");	
				extent.extentLoggerPass("", "User is not able to see Yes CTA ");
			}
//			navigateToHomePage();
		}
	
//	=========================================For You >> + (Follow) icon====================
	public void userIsAbleToSeeThePlusFollowIconForYouScreen__T076(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T076 - Guest User -  Check if user is able to see the \"+\" (Follow) icon For You screen");
			System.out.println("T076");
			extent.extentLogger("For You >> + (Follow) icon", "T076");
			
			if (verifyElementExist(HipiHomePage.objPlusFollowICON, " Plus Follow ICON")) {
				logger.info("User is able to see the Plus (Follow) icon in For You tab");	
				extent.extentLoggerPass(userType, userType);	
			}else {
				logger.info("User is not able to see the Plus (Follow) icon in For You tab");	
				extent.extentLoggerFail("", "User is not able to see the Plus (Follow) icon in For You tab");
			}
			navigateToHomePage();
	}	
	
}	
	public void userIsNotAbleToFollowAnyProfile__T077(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User -  Check if user is not able to follow any profile");
			System.out.println("T077");
			extent.extentLogger("For You >> + (Follow) icon", "T077");	
			
			verifyElementPresentAndClick(HipiHomePage.objPlusFollowICON, "Plus Follow ICON");
			waitTime(2000);
			
			VerifyLoginPopUp();
			navigateToHomePage();
		}		
	}
	public void userIsAbleToSeeTheLikeIconForYouScreen__T078(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T078 - Guest User -  Check if user is able to see the Like icon For You screen");
			System.out.println("T078");
			extent.extentLogger("For You >> Like", "T078");	
			
			if (verifyElementPresent(HipiHomePage.objLikeICON, " Like icon")){
			logger.info("User is able to see the Like icon");	
			extent.extentLoggerPass("", "User is able to see the Like icon");	
		}else {
			logger.info("User is not able to see the Like icon");	
			extent.extentLoggerFail("", "User is not able to see the Like icon");
		}
		navigateToHomePage();
		}
	}
	public void userGetLoginPopUpByTappingOnLikeIconVideoOnPlayedPausedVideo__T079(String userType) throws Exception{
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User - Check if user get login pop-up by tapping on like icon a video on played/paused video");
			System.out.println("T079");
			extent.extentLogger("For You >> Like", "T079");
			verifyElementPresentAndClick(HipiHomePage.objLikeICON, "Like Icon");
			VerifyLoginPopUp();
			
	navigateToHomePage();
	
	   }
	}

	public void VerifyLoginPopUp() throws Exception {
		if (verifyElementPresent(HipiLoginPage.objLoginPopup, "Login Popup")) {
			logger.info("User is able to see the Login Popup");	
			extent.extentLoggerPass("", "User is able to see the Login Popup");	
		}else {
			logger.info("User is not able to see the Login Popup");	
			extent.extentLoggerFail("", "User is not able to see the Login Popup");
		}
		
		
	}
	
	public void useIsAbleTooViewNumberOFLikesOnPlayedPausedVideo__T080(String userType) throws Exception {	
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User -  Check if user is able to view number of likes on played/paused video");
			System.out.println("T080");
			extent.extentLogger("For You >> Like", "T080");
			String likeCount = getText(HipiHomePage.objLikeCount);
			System.out.println(likeCount);
			
			
		if (verifyElementPresent(HipiHomePage.objLikeCount, "Like Count")) {
			logger.info("Like count is " + likeCount);	
			extent.extentLoggerPass("", "Like count is " + likeCount);	
		}else {
			logger.info("User is not able to see the Like Count");	
			extent.extentLoggerFail("", "User is not able to see the Like Count");
		   }
		navigateToHomePage();
		
	   }
	}
	public void userIsAbleToSeeTheCommentIconForYouScreen__T082(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User -  Check if user is able to see the \"Comment\" icon \"For You\" screen");
			System.out.println("T082");
			extent.extentLogger("For You >> Comment", "T082");
			
			if (verifyElementPresent(HipiHomePage.objCommentICON, " Comment icon")){
				logger.info("User is able to see the Comment icon");	
				extent.extentLoggerPass("", "User is able to see the Comment icon");	
			}else {
				logger.info("User is not able to see the Comment icon");	
				extent.extentLoggerFail("", "User is not able to see the Comment icon");
			}
			navigateToHomePage();
			}			
			
		
		
	}	
	
	public void userIsAbleToTapOnCommentIconInFeedScrrenAndLoginPopUpIsDisplay__T083(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T083 - Guest User -  Check if user is able to tap on \"Comment\" icon in \"Feed\" scrren and login pop-up is display");
			System.out.println("T083");
			extent.extentLogger("For You >> Comment", "T083");
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 10);
			click(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(3000);
			type(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
			click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			waitTime(2000);
			VerifyLoginPopUp();
			navigateToHomePage();
		
	  }

	}
	public void userIsAbleToSeeTheTotalCommentCountInFeedScreen__T084(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User -  Check if user is able to see the total \"Comment\" count in \"Feed\" screen");
			System.out.println("T084");
			extent.extentLogger("For You >> Comment", "T084");
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			if (verifyElementPresent(HipiHomePage.objCommentTitle, "Comment Title")){
				logger.info("User is able to see the Comment Title");	
				extent.extentLoggerPass("", "User is able to see the Comment Title");	
			}else {
				logger.info("User is not able to see the Comment Title");	
				extent.extentLoggerFail("", "User is not able to see the Comment Title");
			}
			navigateToHomePage();
			}	
	}
	
	
	
	public void  userIsAbleToSeeTheShareIconForYouScreen__T086(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T086 - Guest User -  Check if user is able to see the \"Share\" icon \"For You\" screen");
			System.out.println("T086");
			extent.extentLogger("For You >> Share", "T086");
			
			if (verifyElementPresent(HipiHomePage.objShareICON, "Share ICON")){
				logger.info("User is able to see the Share ICON");	
				extent.extentLoggerPass("", "User is able to see the Share ICON");	
			}else {
				logger.info("User is not able to see the Share ICON");	
				extent.extentLoggerFail("", "User is not able to see the Share ICON");
			}
			navigateToHomePage();
			}	
		}
		
	public void userIsAbleToTapOnnShareIconInFeedScreenAndLoginPopUpIsDisplay__T087(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User -  Check if user is able to tap on \"Share\" icon in \"Feed\" screen and login pop-up is display");
			System.out.println("T087");
			extent.extentLogger("For You >> Share", "T087");
			verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share ICON");
   VerifyLoginPopUp();
   navigateToHomePage();
		}


 }

   public void  loginPopUpIsDisplayedByTappingOnProfileTabOnTheApp__T095(String userType) throws Exception {
	   if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T095 - Guest User - Check the login pop-up is displayed by tapping on Profile Tab on the app");
			System.out.println("T095");
			extent.extentLogger("User Profile", "T095");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, " Profile ICON");
			
		 VerifyLoginPopUp();
		 navigateToHomePage();
					} 
	 
	 
 }
   public void  userIsAbleToLikeAVideoOnPlayedPausedVideo__T106(String userType) throws Exception {
	   if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T106 - Logged in User - Check if user is able to like a video on played/paused video");
			System.out.println("T106");
			extent.extentLogger("For You >> Like", "T106");
			
			
			verifyLikeIconWorkingFine();
			 
			navigateToHomePage();  
   }
	
   }
   
   public void userIsAbleToLikeAVideoOnPlayedPausedVideo__T108(String userType) throws Exception{
	   if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to Dislike a video on played/paused video");
			System.out.println("T108");
			extent.extentLogger("For You >> Like", "T108");

			
			verifyElementPresentAndClick(HipiHomePage.objLikeICON, "Like ICON");
			
			String afterclicklikeIcon = getText(HipiHomePage.objLikeCount);
			System.out.println(afterclicklikeIcon);
			click(HipiHomePage.objLikeICON, "Like ICON");

			String dislikeIcon  = getText(HipiHomePage.objLikeCount);
			
	        System.out.println(dislikeIcon);
			
			
			if (!afterclicklikeIcon.equals(dislikeIcon)) {
				logger.info("User is able to dislike the video");	
				extent.extentLoggerPass("", "User should able to dislike the video");
			}else {
				logger.info("User is not able to dislike the video");	
				extent.extentLoggerFail("", "User is not able to dislike the video");
			}	
			navigateToHomePage();
      }
   }
   public void userIsAbleToSeeFollowingTabInFeedScreen__T418(String userType) throws Exception {
	   if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T418 - Guest User - Check if user is able to see \"Following\" tab in \"Feed\" screen");
			System.out.println("T418");
			extent.extentLogger("Following", "T418");
			
			if (verifyElementPresent(HipiHomePage.objFollowingButton, "Following Option")) {
				logger.info("User is able to verify the Following option in top section,Expected Behaviour");
				extent.extentLoggerPass("For You","User is able to verify the Following option in top section,Expected Behaviour");
			} else {
				logger.info("User is not able to verify the Following option in top section");
				extent.extentLoggerFail("For You","User is not able to verify the Following option in top section");

			}
			navigateToHomePage();
	   
   }
   
   }
   
	public void TapOnFollowingTab__T419(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User - Check if user is able to tap on \"Following\" tab in \"Feed\" screen and login pop-up is displayed");
			System.out.println("T419");
			extent.extentLogger("Following", "T419");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following option");
			waitTime(2000);
			
			if(verifyElementPresent(HipiHomePage.objFollowCTAFollowingScreen, "Follow Button")){
				logger.info("When ever user clicking on Following Button user is able to see login button");	
				extent.extentLoggerPass("Shoppable Vidoes", "When ever user clicking on Following Button user is able to see login button");
			}else {
				logger.info("When ever user clicking on Following Button user is not able to see login button");	
				extent.extentLoggerFail("Shoppable Vidoes", "When ever user clicking on Following Button user is not able to see login button");
			}
			click(HipiHomePage.objFollowCTAFollowingScreen, "Follow Button");
			VerifyLoginPopUp();
			Back(1);
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
			}
			
	}
	 public void userIsAbleViewFollowingScreen__T421(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Logged in User - Check if user is able view Following screen");
				System.out.println("T421");
				extent.extentLogger("Following", "T421");
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following option");
				waitTime(2000);
		 	 if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
			logger.info("user is able to see  videos on For You section");	
			extent.extentLoggerPass("Shoppable Vidoes", "user is able to see  videos on For You section");
		 	 }else {
			logger.info("user is not able to see videos on For You section");	
			extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see  videos on For You section");
		}
	 }		
}
	
	 public void userIsAbleViewFollowingScreen__T0421(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Logged in User - Check if user is able view \"Following\" screen");
				System.out.println("T0421");
				extent.extentLogger("Following", "T0421");
				
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following option");
				waitTime(2000);
				
		 
		 	 if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
			logger.info("user is able to see shoppable videos on For You section");	
			extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
		}else {
			logger.info("user is not able to see shoppable videos on For You section");	
			extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
		}
	 }		
}
  
	
//	 public void  SAVELOOKbuttonOnTheShopableVideo__T193__T229(String userType) throws Exception {
//			
//			if(userType.equalsIgnoreCase("Guest")) {
//				extent.HeaderChildNode("T193 - Guest User- Verify for SAVE LOOK button \r\n"+ " on the shopable video");
//				System.out.println("T193");
//				extent.extentLogger("Feed", "T193");
//				}else {
//					extent.HeaderChildNode("T229 - Logged In User -Verify for SAVE LOOK button on the shopable video");
//					System.out.println("T229");
//					extent.extentLogger("Feed", "T229");
//				}	
////					SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				navigateHomeandClickonShop();
//		
//			 	 if(verifyElementPresent(HipiHomePage.objSaveLook,"Save look")) {
//				logger.info("User is able to see Save look button");	
//				extent.extentLoggerPass("Feed", "User is able to see Save look button");
//			 	 }else {
//				logger.info("User is not able to see Save look button");	
//				extent.extentLoggerFail("Feed", "User is not able to see Save look button");
//			 	 }	
//			 	 
//			 	 
//			 	if (verifyElementPresent(HipiHomePage.objHeartICON, "Heart Icon")) {
//					logger.info("User is able to see the heart icon on screen");	
//					extent.extentLoggerPass("Feed", "User is able to see the heart icon on screen");
//				}else {
//					logger.info("User is not able to see the heart icon on screen");	
//					extent.extentLoggerFail("Feed", "User is not able to see the heart icon on screen");	
//		}				
//	 }
//  
  
	public void userIsAbleToVerifyTheVideoIsPlayingInFollowingTab__T428(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T428 - Logged in User - Check if user is able to verify the video is playing in \"Following\" tab ");
				System.out.println("T428");
				extent.extentLogger("Feed", "T428");
				
		
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(2000);
				
			 	 if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
						logger.info("User is able to see the video should played in Following tab");	
						extent.extentLoggerPass("Feed", "User is able to see the video should played in Following tab");
					}else {
						logger.info("User is able to see the video should played in Following tab");	
						extent.extentLoggerFail("Feed", "user is not able to see  videos on For You section");
					}
			 	verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
				navigateToHomePage();
			 }	
	} 
	
	public void userIsAbleToViewNumberOfLikesOnPlayedPausedVideo__T456(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T456 - Logged in User - Check if user is able to view number of likes on played/paused video");
				System.out.println("T456");
				extent.extentLogger("Feed", "T456");
				
				
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(2000);
				String likeCount = getText(HipiHomePage.objLikeCount);
				System.out.println(likeCount);
							
				if (verifyElementPresent(HipiHomePage.objLikeICON, " Like icon")){
					logger.info("User is able to see the Like icon");	
					extent.extentLoggerPass("", "User is able to see the Like icon");	
				}else {
					logger.info("User is not able to see the Like icon");	
					extent.extentLoggerFail("", "User is not able to see the Like icon");
				}
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
				navigateToHomePage();
				}
	}
	
	public void verifyLikeIconWorkingFine() throws Exception {
		String beforeclicklikeIcon  = getText(HipiHomePage.objLikeCount);
		
		System.out.println(beforeclicklikeIcon);
		
		verifyElementPresentAndClick(HipiHomePage.objLikeICON, "Like ICON");
		
		String afterclicklikeIcon = getText(HipiHomePage.objLikeCount);
		
		System.out.println(afterclicklikeIcon);
		
		if (!beforeclicklikeIcon.equals(afterclicklikeIcon)) {
			logger.info("When User click on like icon, like count is increased");	
			extent.extentLoggerPass("", "When User click on like icon, like count is increased");
		}else {
			logger.info("When User click on like icon, like count is dicreased");	
			extent.extentLoggerFail("", "When User click on like icon, like count is dicreased");
		}
		
	}
	
	
	
	public void ShoppableVideo__T420(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T420 - Guest User - Check the Shoppable video");
			System.out.println("T420");
			extent.extentLogger("Feed", "T420");
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You Tab");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objFollowCTAFollowingScreen, "Follow Button");
			loginToApplicatinHasGuestUser(userType);
			waitTime(4000);
			SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
			 if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
					logger.info("User is able to see the video should played in Following tab");	
					extent.extentLoggerPass("Feed", "User is able to see the video should played in Following tab");
				}else {
					logger.info("User is able to see the video should played in Following tab");	
					extent.extentLoggerFail("Feed", "user is not able to see  videos on For You section");
				}
			logOut();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
		}
	}
	

public void loginToApplicatinHasGuestUser(String userType) throws Exception {
		
		
		//click on Profile icon
//		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
//		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
////		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
//		String Username = getParameterFromXML("NonsubscribedUserName");
//		String Password = getParameterFromXML("NonsubscribedPassword");
//		
////		Thread.sleep(5000);
////		hideKeyboard();
//		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
//		
//		click(AMDLoginScreen.objEmailIdField, "Email field");
//		hideKeyboard();
//
//		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
//		hideKeyboard();
//		
//		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//		hideKeyboard();
//
//		type(AMDLoginScreen.objPasswordField, Password, "Password field");
////		hideKeyboard();
//		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
//		waitTime(8000);
//		
//		//click on feed button
//		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
	
	waitUntilElementDisplayed(HipiLoginPage.objSignUpScreenTittle, 2);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
	String Username = getParameterFromXML("NonsubscribedUserName");
	String Password = getParameterFromXML("NonsubscribedPassword");
	type(HipiLoginPage.objEmailIDOrMobileNumberFileld , Username ,"value");
	verifyElementPresentAndClick(HipiLoginPage.objProceedButton, "Proceed CTA");
	waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPHeader, 2);
	verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword,"Login with Password button");
	waitUntilElementDisplayed(AMDLoginScreen.objPasswordField, 2);
		
	verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
	type(AMDLoginScreen.objPasswordField, Password, "Password field");
	hideKeyboard();
	verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
	extent.extentLogger("", "<b>Start Time : " + start+"<b>");
	if (waitUntilElementDisplayed(HipiHomePage.objForYou, 2000)) {
		logger.info("User is able to see Home screen");
		extent.extentLogger("", "User is able to see Home screen");
	}else {
		logger.error("Processing time calculation failed");
		extent.extentLoggerFail("", "Processing time calculation failed");
	}
	waitUntilElementDisplayed(HipiHomePage.objForYou, 5);

	verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");


}

public void logOut1() throws Exception {
	navigateToHomePage();
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
//	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	if (verifyElementExist(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email")) {
		logger.info("User is all ready Logout application");	
		extent.extentLoggerPass("", "User is all ready Logout application");
		navigateToHomePage();
	}else {
	verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
	waitTime(3000);
//	SwipeUntilFindElement(HipiSettingsPage.objLogOut, "Log out Button");
	Swipe("UP", 2);
	verifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out");
	waitTime(3000);
	verifyElementPresentAndClick(HipiHomePage.objYesCTA, "Yes CTA");
	
	
	
	if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home ICON")) {
		logger.info("User is able to Logout application");	
		extent.extentLoggerPass("", "User is able to Logout application");	
  }else {
		logger.info("User is not able to Logout application");	
		extent.extentLoggerFail("", "User is not able to Logout application");
	}
	}
}

public void logOut() throws Exception {
	extent.HeaderChildNode("Logout TC");

	navigateToHomePage();
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
//	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	if (verifyElementExist(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email")) {
		logger.info("User is all ready Logout application");	
		extent.extentLoggerPass("", "User is all ready Logout application");
		navigateToHomePage();
	}else {
	verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
	waitTime(3000);
//	SwipeUntilFindElement(HipiSettingsPage.objLogOut, "Log out Button");
	Swipe("UP", 2);
	verifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out");
	verifyElementPresentAndClick(HipiHomePage.objYesCTA, "Yes CTA");
	Instant start = Instant.now();
	extent.extentLogger("", "clicked on hipi at Time----- "+ start);
	waitUntilElementDisplayed(HipiHomePage.objForYou, 10);		
	screencapture();
	Instant end = Instant.now();
	extent.extentLogger("", "Feed screen seen  at Time----- " + end);
	Duration timeElapsed = Duration.between(start, end);
	extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
	System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
	extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");
	
	
	if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home ICON")) {
		logger.info("User is able to Logout application");	
		extent.extentLoggerPass("", "User is able to Logout application");	
  }else {
		logger.info("User is not able to Logout application");	
		extent.extentLoggerFail("", "User is not able to Logout application");
	}
	}
}
	
//-------------------------------------D(Login/Signup screen)--------------------------------------------------------

public void  userIsAbleToSeeTheSelectCountryRegionScreenAfterTappingOnPlus91InLogInScreen__T806(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T806 - Check if user is able to see the Select country/region screen after tapping on +91 in Log in screen");
		System.out.println("T806");
		extent.extentLogger("Login/Signup screen", "T806");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title");
		
		verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		waitTime(2000);
		
		if (verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region")) {
			logger.info("User is able to see the Select country/region screen on tapping +91");	
			extent.extentLoggerPass("", "User is able to see the Select country/region screen on tapping +91");
		}else {
			logger.info("User is not able to see the Select country region  screen on tapping +91");	
			extent.extentLoggerFail("", "User is not able to see the Select country region screen on tapping +91");	
		}
		navigateToHomePage();
      }
			
}

public void  userIsAbleToCloseTheSelectCountryRegionScreenByTappingOnCrossIcon__T807(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T807 - Check if user is able to close the Select country/region screen by tapping on cross icon");
	System.out.println("T807");
	extent.extentLogger("Login/Signup screen", "T807");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title");
	
	verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
	waitTime(2000);
	
	verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
	verifyElementPresentAndClick(HipiLoginPage.objCrossIcon, "Cross Icon");
	waitTime(2000);
	
	if (verifyElementExist(HipiLoginPage.objSelectCountryRegion,"Select Country Region")) {
		logger.info("User is not able to close the Select country region screen by tapping on cross icon");	
		extent.extentLoggerFail("", "User is not able to close the Select country region screen by tapping on cross icon");	
	}else {
		logger.info("User is able to close the Select country region screen by tapping on cross icon");	
		extent.extentLoggerPass("", "User is able to close the Select country region screen by tapping on cross icon");
	}
	navigateToHomePage();
  }
	
    
}


public void  userIsAbleToEnterThePhoneNumber__T812(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T812 - Check if user is able to enter the Phone Number in Phone Number field in Login screen");
	System.out.println("T812");
	extent.extentLogger("Login/Signup screen", "T812");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 5);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title");

	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
	if (phoneNumber.contains(checkPhoneNumber)) {
		logger.info("User is able to type "  + checkPhoneNumber );	
		extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
	}else {
		logger.info("User is not able to type number");	
		extent.extentLoggerFail("", "User is not able to type number");	
    }
    navigateToHomePage();
}
}
public void  userIsAbleToEnterThePassowrdInPasswordFieldInPhoneLoginScreen__T814(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T814 - Check if user is able to enter the Passowrd in Password field in Phone Login screen");
	System.out.println("T814");
	extent.extentLogger("Login/Signup screen", "T814");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title");
	
    
 verifyElementPresentAndClick(HipiLoginPage.objPasswordTextField, "Password Text Field");
 String password = getParameterFromXML("Password");
 type(HipiLoginPage.objPasswordTextField, password, "Password");
 hideKeyboard(); 

	
	String checkPassword = getText(HipiLoginPage.objPasswordTextField);
	if (checkPassword.contains("••••••")) {
		logger.info("User is able to type "  +  checkPassword);	
		extent.extentLoggerPass("", "User is able to type " + checkPassword );	
	}else {
		logger.info("User is not able to type Password");	
		extent.extentLoggerFail("", "User is not able to type Password");	
    }
    navigateToHomePage();

 }
}

public void  userNavigateToForgotPasswordResetScreenAfterTappingTheForgotPassword__T818(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T818 - user navigate to forgot Password Reset Screen after tapping the Forgot password? in Phone tab screen");
	System.out.println("T818");
	extent.extentLogger("Login/Signup screen", "T818");
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title");

	verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot Password button");
	waitTime(2000);
	
			if(verifyElementPresent(HipiLoginPage.objForgotPasswordResetScreen, "Forgot Password Reset Screen")) {
			logger.info("User is navigate to Forgot Password Reset screen after tapping on Forgot password? in Phone tab screen");	
			extent.extentLoggerPass("", "User is navigate to Forgot Password Reset screen after tapping on Forgot password? in Phone tab screen");	
			}else {
			logger.info("User is not navigate to Forgot Password Reset screen after tapping on Forgot password? in Phone tab screen");	
			extent.extentLoggerFail("", "User is not navigate to Forgot Password Reset screen after tapping on Forgot password? in Phone tab screen");
			}
			navigateToHomePage();
      }
		
}

public void  userIsAbleToResetThePhoneNumberByTappingOnResetCTAInForgotPasswordResetScreen__T820(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T820 - Check user is able to reset the phone number by tapping on Reset CTA in forgot Password Reset Screen");
	System.out.println("T820");
	extent.extentLogger("Login/Signup screen", "T820");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	waitTime(5000);
	verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot Password button");
	waitTime(2000);
		

	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Reset Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	    hideKeyboard();
	
	    String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
	    if (phoneNumber.contains(checkPhoneNumber)) {
			logger.info("User is able to type "  + checkPhoneNumber );	
			extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
		}else {
			logger.info("User is not able to type number");	
			extent.extentLoggerFail("", "User is not able to type number");	
	    }
	    navigateToHomePage();
	
	
    }
 
}
	
public void userIsAbleToEnterTheEmailAddressInEmailAddressFieldInLoginScreen__T849(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T849 - Check if user is able to enter the Email Address in Email Address field in Login screen");
	System.out.println("T849");
	extent.extentLogger("Login/Signup screen", "T849");
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		waitTime(5000);
		verifyElementPresentAndClick(HipiLoginPage.objEmailButton, "Email button");
		waitTime(2000);
		
		verifyElementPresentAndClick(HipiProfilePage.objEmailOption, "Email Adress Text Field");
		
		String EmailAddressField = getParameterFromXML("NonsubscribedUserName");
		type(AMDLoginScreen.objEmailIdField, EmailAddressField, "Email Field");
		hideKeyboard();

		
		String checkEmailAddress = getText(AMDLoginScreen.objEmailIdField);
		  if (EmailAddressField.equals(checkEmailAddress)) {
				logger.info("User is able to type "  + checkEmailAddress );	
				extent.extentLoggerPass("", "User is able to type " + checkEmailAddress );	
			}else {
				logger.info("User is not able to type email");	
				extent.extentLoggerFail("", "User is not able to type email");	
		    }
		  navigateToHomePage();
	    }
	  
	    }
	
public void  userIsAbleToEnterThePasswordInPasswordFieldInEmailScreen__T851(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T849 - Check if user is able to enter the Password in Password field in Email screen");
	System.out.println("T849");
	extent.extentLogger("Login/Signup screen", "T849");
//click on Profile icon
verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");

String Password = getParameterFromXML("NonsubscribedPassword");

//Thread.sleep(5000);
//hideKeyboard();

verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");


type(AMDLoginScreen.objPasswordField, Password, "Password field");
hideKeyboard();

String checkPassword = getText(HipiLoginPage.objPasswordTextField);
if (checkPassword.contains("••••••")) {
	logger.info("User is able to type "  +  checkPassword);	
	extent.extentLoggerPass("", "User is able to type " + checkPassword );	
}else {
	logger.info("User is not able to type Password");	
	extent.extentLoggerFail("", "User is not able to type Password");	
}

navigateToHomePage();
}	    

}

public void userIsAbleToLoginToTheApplicationWhenuserEnterValidDetailsInEmailTab__T853(String userType) throws Exception {
	 if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T853 - Check if user is able to login to the application when user enter valid details in Email tab");
			System.out.println("T853");
			extent.extentLogger("Login/Signup screen", "T853");

		
		
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		waitTime(5000);
		String Username = getParameterFromXML("NonsubscribedUserName");
		String Password = getParameterFromXML("NonsubscribedPassword");
		
//		Thread.sleep(5000);
//		hideKeyboard();
		verifyElementPresentAndClick(HipiProfilePage.objEmailOption, "Email Option");
		
		click(AMDLoginScreen.objEmailIdField, "Email field");
		hideKeyboard();

		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		hideKeyboard();
		
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		hideKeyboard();

		type(AMDLoginScreen.objPasswordField, Password, "Password field");
//		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		waitTime(8000);
		logOut();
		 navigateToHomePage();

 }
  
}
public void  userIsAbleToSeeTheContinueWithFacebookCTA__T862(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T862 - Check if user is able to see the Continue with Facebook CTA in Login in to HiPi pop-up");
	System.out.println("T862");
	extent.extentLogger("Login/Signup screen", "T862");

	
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	if (verifyElementPresent(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA")) {
		logger.info("User is able to see the Continue with Facebook CTA in Login in to HiPI pop-up");	
		extent.extentLoggerPass("", "User is able to see the Continue with Facebook CTA in Login in to HiPI pop-up");	
  }else {
		logger.info("User is not able to see the Continue with Facebook CTA in Login in to HiPI pop-up");	
		extent.extentLoggerFail("", "User is not able to see the Continue with Facebook CTA in Login in to HiPI pop-up");
	}
	navigateToHomePage();
  }
	
	
}

public void userNavigateToFacebookSite__T863(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user navigate to Facebook site in app browser of Hipi app when doesn’t have Facebook app in his mobile");
	System.out.println("T863");
	extent.extentLogger("Login/Signup screen", "T863");

	
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
  //Click on Facebook CTA
	verifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Facebook CTA");
	waitUntilElementDisplayed(HipiLoginPage.objFacebookHeader, 4000);
	
	if (verifyElementPresent(HipiLoginPage.objFacebookHeader, "Facebook Header")) {
		logger.info("User is navigate to Facebook site in app browser of Hipi app");	
		extent.extentLoggerPass("", "User is navigate to Facebook site in app browser of Hipi app");	
  }else {
		logger.info("User is navigate to Facebook site in app browser of Hipi app");	
		extent.extentLoggerFail("", "User is navigate to Facebook site in app browser of Hipi app");
	}
	navigateToHomePage();
	
  }	

}

public void  loginToHiPiAppFacebookSiteOfAppBrowser__(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user is able to login to HiPi app when user tapping on Continue CTA in Facebook site of app browser");
	System.out.println("T865");
	extent.extentLogger("Login/Signup screen", "T865");

	
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
  //Click on Facebook CTA
	verifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Facebook CTA");
//	waitUntilElementDisplayed(HipiLoginPage.objFacebookHeader, 4000);
	waitTime(10000);
	
	if (verifyElementPresent(HipiLoginPage.objFacebookHeader, "Facebook Header")) {
		logger.info("User is navigate to Facebook site in app browser of Hipi app");	
		extent.extentLoggerPass("", "User is navigate to Facebook site in app browser of Hipi app");	
	}else {
		logger.info("User is not navigate to Facebook site in app browser of Hipi app");	
		extent.extentLoggerFail("", "User is not navigate to Facebook site in app browser of Hipi app");
	}
	String FBusername = getParameterFromXML("Validfacebookemail");
	String FBpassword = getParameterFromXML("Validfacebookpassword");
	click(HipiLoginPage.objFacebookEmailTextFieldBrowser, "Email Text Field");
	click(HipiLoginPage.objFacebookEmailTextFieldBrowser, "Email Text Field");
	  type(HipiLoginPage.objFacebookEmailTextFieldBrowser,FBusername , "Email Field");
		waitTime(3000);
		hideKeyboard();
		waitTime(3000);

		click(HipiLoginPage.objFacebookPasswordTextFieldBrowser, "PassWord Field");
		waitTime(3000);

	    type(HipiLoginPage.objFacebookPasswordTextFieldBrowser, FBpassword, "PassWord Field");
		hideKeyboard();
		waitTime(4000);
		click(HipiLoginPage.objFacebookLoginButtonBrowser, "Log In");
		click(HipiLoginPage.objContinuewithFacebookCTA, "Contune Button");
		waitUntilElementDisplayed(HipiHomePage.objHomeIcon, 4000);
		if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
			logger.info("User is navigate to Feed screen by tapping on Contune Button");	
			extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Contune Button");
		}else {
			logger.info("User is navigate to Feed screen by tapping on Contune Button");	
			extent.extentLoggerFail("", "User is navigate to Feed screen by tapping on Contune Button");
		}
	navigateToHomePage();
  }	

}
public void  userIsAbleToSeeTheContinueWithGoogleCTA__T875(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T875 - Check if user is able to see the Continue with Google CTA in Login in to HiPi pop-up");
	System.out.println("T875");
	extent.extentLogger("Login/Signup screen", "T875");

	 
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	if (verifyElementPresent(HipiLoginPage.objContinueWithGoogleCTA, "Continue with Google CTA")) {
		logger.info("User is able to see the Continue with Google CTA in Login in to HiPI pop-up");	
		extent.extentLoggerPass("", "User is able to see the Continue with Google CTA in Login in to HiPI pop-up");	
  }else {
		logger.info("User is not able to see the Continue with Google CTA in Login in to HiPI pop-up");	
		extent.extentLoggerFail("", "User is not able to see the Continue with Google CTA in Login in to HiPI pop-up");
	}
	navigateToHomePage();
  }
	
	
}

public void  userIsAbleToSeeTheSelectSCountryRregion__T943(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T943 - Check if user is able to see the Select country region screen after tapping on +91 in Sign up screen for Phone Number");
	System.out.println("T943");
	extent.extentLogger("Login/Signup screen", "T943");

	 
	//click on Profile icon
	navigateToSignUpScreen();
	
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	
	verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
	waitTime(2000);
	
	if (verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region")) {
		logger.info("User is able to see the Select country/region screen on tapping +91");	
		extent.extentLoggerPass("", "User is able to see the Select country/region screen on tapping +91");
	}else {
		logger.info("User is not able to see the Select country region  screen on tapping +91");	
		extent.extentLoggerFail("", "User is not able to see the Select country region screen on tapping +91");	
	}
	navigateToHomePage();
  }

}
public void userIsAbleToLoginToTheApplicationByTappingOnAnyGoogleAccount__T877(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T877 - Check if user is able to login to the application by tapping on any google account which are present on the device.");
	System.out.println("T877");
	extent.extentLogger("Login/Signup screen", "T877");
	
	
		
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");

		waitUntilElementDisplayed(HipiLoginPage.objGoogleAccount, 20);
	            
	     verifyElementPresentAndClick(HipiLoginPage.objGoogleAccount, "Google Account");
	       
	       
	     if(waitUntilElementDisplayed(HipiLoginPage.objDoneCTASelectGenderPage, 5)) {
	 		verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
	 		 waitTime(4000);
	 		 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
	 		click(HipiLoginPage.objDoneCTASelectGenderPage, "Done CTC");
	 		
	 	}else {
	 		logger.info("User is unable to see select gender screen");
	 	}
//		verifyElementPresentAndClick(HipiLoginPage.objGoogleAccount,"Google Account");
		waitUntilElementDisplayed(HipiHomePage.objHomeIcon, 5);
		verifyElementPresent(HipiHomePage.objHomeIcon, "Home ICON");
//		if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home ICON"))
//			logger.info("User is able to login to the application after selecting any google account");	
//			extent.extentLoggerPass("", "User is able to login to the application after selecting any google account");	
//		}else {
//			logger.info("User is not able to login to the application after selecting any google account");	
//			extent.extentLoggerFail("", "User is not able to login to the application after selecting any google account");
//		}
	  logOut();
		navigateToHomePage();
		
	
}
}


public void userIsAbleToSeeTheSignUpLink__T880(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T880 - Check if user is able to see the Sign up link in Login in to HiPi pop-up");
	System.out.println("T880");
	extent.extentLogger("Login/Signup screen", "T880");

	
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);

	if (verifyElementPresent(HipiLoginPage.objSignUpLink, "Sign Up Link")){
		logger.info("User is able to see the Sign up link in Login in to HiPi pop-up");	
		extent.extentLoggerPass("", "User is able to see the Sign up link in Login in to HiPi pop-up");	
  } else {
		logger.info("User is not able to see the Sign up link in Login in to HiPi pop-up");	
		extent.extentLoggerFail("", "User is not able to see the Sign up link in Login in to HiPi pop-up");
	}
	navigateToHomePage();
  }	


}


public void userIsAbleToSeeTheSignUpForHiPiPopUp__T881(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T881 - Check if user is able to see the Sign up for HiPi pop-up after tapping on Sign up link in Login in to HiPi pop-up");
	System.out.println("T881");
	extent.extentLogger("Login/Signup screen", "T881");

	
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(8000);
	
	if (verifyElementPresent(HipiLoginPage.objSignUpHiPiTitle, "Sign Up Hipi Title")){	
		logger.info("User is navigate to Sign up for HiPi pop-up after tapping on Log in link");	
		extent.extentLoggerPass("", "User is navigate to Sign up for HiPi pop-up after tapping on Log in link");	
  } else {
		logger.info("User is not navigate to Sign up for HiPi pop-up after tapping on Log in link");	
		extent.extentLoggerFail("", "User is not navigate to Sign up for HiPi pop-up after tapping on Log in link");
	}
	navigateToHomePage();
  }	

   }

public void  userIsAbleToRemoveTheEnteredPasswordByTappingOnCrossIconInLoginScreen__T815(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T815 - Check if user is able to remove the entered password by tapping on cross icon in login screen	");
	System.out.println("T815");
	extent.extentLogger("Login/Signup screen", "T815");
//click on Profile icon
verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
waitTime(6000);
String Password = getParameterFromXML("NonsubscribedPassword");

//Thread.sleep(5000);
//hideKeyboard();

verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//hideKeyboard();

type(AMDLoginScreen.objPasswordField, Password, "Password field");
hideKeyboard();

String checkPassword = getText(HipiLoginPage.objPasswordTextField);
System.out.println(checkPassword);
waitTime(4000);
 click(HipiLoginPage.objPasswordRemoveButton, "Remove Button");
	String removePassword = getText(HipiLoginPage.objPasswordTextField);
	System.out.println(removePassword);
 if (checkPassword.equals(removePassword)) {
	 logger.info("User is not able to remove the password " );	
	 extent.extentLoggerFail("", "User is not able to remove the password " );
}else {
	logger.info("User is able to remove the password ");	
	extent.extentLoggerPass("", "User is able to remove the password ");		
}
 navigateToHomePage();
 
}

}
//=================================================Kartheek=================================================================
	public void ableToLikeDislikeAMultipleVideo__T109(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T109 - Logged in User - Check if user is able to Like/Dislike a multiple video");
				System.out.println("T109");
				extent.extentLogger("Feed", "T109");
			
				verifyLikeIconWorkingFine();
				Swipe("UP", 1);
				verifyLikeIconWorkingFine();
				navigateToHomePage();
		 }
	}
	
	public void tappingBackMobileOptionInListOfActionsScreen__T440(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T440 - Logged in User- Check on tapping 'back' mobile option in list of actions screen of a video , user is redirected to \"Feed\" screen");
				System.out.println("T440");
				extent.extentLogger("Feed", "T440");
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(2000);
				longPress(HipiHomePage.objPlayerScreen);
				Thread.sleep(5000);
				Back(1);
				if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
					logger.info("User is navigate to HiPi home screen on tapping 'back' icon on device");	
					extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'back' icon on device");
				}else {
					logger.info("User is not navigate to HiPi home screen on tapping 'back' icon on device");	
					extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'back' icon on device");	
				}
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
				navigateToHomePage();
		 }	
		
	}
	
	public void userIsAbleToRefreshTheListOnContentsInFollowingTab__T426(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T426 - (Logged in User - Check if user is able to refresh the list on contents in \"Following\" tab of HiPi)");
				System.out.println("T426");
				extent.extentLogger("Feed", "T426");
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(4000);
				waitUntilElementDisplayed(HipiHomePage.objHashtagButtonDescription, 10);
				description = getText(HipiHomePage.objHashtagButtonDescription);
				Swipe("DOWN", 1);
				waitTime(7000);
				 description1 = getText(HipiHomePage.objHashtagButtonDescription);
				if (!description.equals(description1)) {
					logger.info("User is able to refresh the list on contents in For You tab of HiPi");	
					extent.extentLoggerPass("For You", "User is able to refresh the list on contents in For You tab of HiPi");
				}else {
					logger.info("User is able to refresh the list on contents in For You tab of HiPi");	
					extent.extentLoggerFail("For You", "User is able to refresh the list on contents in For You tab of HiPi");
				}
				click(HipiHomePage.objForYou, "For you ");
				
				navigateToHomePage();

		 }
	}
	

	public void clicksAndRedirectionOnProductImageFromTheBottomSheetCorousel__T205__T241(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T205 - Guest User- Verify for clicks and redirection on product image from the bottom sheet corousel");
			System.out.println("T205");
			extent.extentLogger("Feed", "T205");
			}else {
				extent.HeaderChildNode("T241 - Logged In user- Verify for clicks and redirection on product image from the bottom sheet corousel");
				System.out.println("T241");
				extent.extentLogger("Feed", "T241");
			}	
//		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
		navigateHomeandClickonShop();
		click(HipiHomePage.objShopButton, "Shop Button");
		click(HipiHomePage.objHomeIcon, "Home Icon");
//		verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		click(HipiHomePage.objProductImage, "Product Image Thumbnail");
		if (verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option")) {
			logger.info("User is able tap on product images from the corousel bottom sheet and on tap it is redirect to Shop Page");	
			extent.extentLoggerPass("", "User is able tap on product images from the corousel bottom sheet and on tap it is redirect to Shop Page");
		}else {
			logger.info("User is not able tap on product images from the corousel bottom sheet and on tap it is not redirect to Shop Page");	
			extent.extentLoggerFail("", "User is not able tap on product images from the corousel bottom sheet and on tap it is not redirect to Shop Page");
		}	
		navigateToHomePage();
	}
	
	public void  verticalScrollingOfFollowingTabSectionIsInfinte__T427(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T427 - Logged in User - Check vertical scrolling of \"Following tab\" section is infinte");
				System.out.println("T427");
				extent.extentLogger("For You", "T427");
				
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(4000);
				 if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
						logger.info("User is able to see the video should played in Following tab");	
						extent.extentLoggerPass("Feed", "User is able to see the video should played in Following tab");
					}else {
						logger.info("User is able to see the video should played in Following tab");	
						extent.extentLoggerFail("Feed", "user is not able to see  videos on For You section");
					}
				 boolean swipecheck=true;
					
					for(int i=0;i<10;i++){
						getDriver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
						description = getText(HipiHomePage.objHashtagButtonDescription);
						System.out.println(description);
					     Swipe("UP", 1);
					     description1 = getText(HipiHomePage.objHashtagButtonDescription);
					     System.out.println(description1);
					     if (!description.equals(description1)) {
								logger.info("Screen Swipe Successfully");	
								extent.extentLoggerPass("", "Screen Swipe Successfully");
							}else {
								logger.info("Screen not Swipe");	
								extent.extentLoggerFail("", "Screen not Swipe");
							}
					    
					     if (swipecheck==false) {
					    	 	extent.extentLoggerFail("Hipi feed screen:", "User is not able to Swipe Screen");
								logger.info("User is not able to Swipe Screen");
						}
					}
					if(swipecheck==true){
						logger.info("User is able to see the videos Unlimited in For You tab");
						extent.extentLoggerPass("Hipi feed screen:", "User is able to see the videos Unlimited in For You tab");
					}
					verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
					navigateToHomePage();
			}		
	
	}
	
	public void savedButtonFunctionality__T217__T253(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T217 - Guest User- Verify for SAVED button functionality");
			System.out.println("T217");
			extent.extentLogger("Feed", "T217");
			}else {
				extent.HeaderChildNode("T253 - Logged In user- Verify for SAVED button functionality");
				System.out.println("T253");
				extent.extentLogger("Feed", "T253");
			}	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresent(HipiHomePage.objProductImage, "Product Image");
			verifyElementPresentAndClick(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
			waitTime(1000);
			if (verifyElementPresentAndClick(HipiHomePage.objSavedCTAText, "Saved CTA")) {
				logger.info("On Tap Save Look CTA it is changed to Saved CTA on video screen");	
				extent.extentLoggerPass("Shoppable Vidoes", "On Tap Save Look CTA it is changed to Saved CTA on video screen");
			}else {
				logger.info("On Tap Save Look CTA it is not changed to Saved CTA on video screen");	
				extent.extentLoggerFail("Shoppable Vidoes", "On Tap Save Look CTA it is not changed to Saved CTA on video screen");
			}
			navigateToHomePage();
		}
	
	public void  shoppableVideoUnderDiscoverPage__T061(String userType ,String userName) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T061 , Logged in User - Check that shoppable video under discover page");
			System.out.println("T061");
			extent.extentLogger("For You", "T061");
		
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
			System.out.println(userName);
			String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
			waitUntilElementDisplayed(HipiDiscoverPage.objVideoTab, 3);
			verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab, "Video Tab");
			waitTime(4000);
			if(verifyElementPresent(HipiDiscoverPage.objBucketIcon, "Bucket Icon")){
				logger.info("shoppable video is display on videos tab");	
				extent.extentLoggerPass("Shop >In app Browser", "shoppable video is display on videos tab");
			}else {
				logger.info("shoppable video is not display on videos tab");	
				extent.extentLoggerFail("Shop >In app Browser", "shoppable video is not display on videos tab");
			}
			String sameSearchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			System.out.println(sameSearchBoXText);
		if (searchBoXText.contains(sameSearchBoXText)) {
			logger.info("video is displays on searched result page for respective searched keyword");	
			extent.extentLoggerPass("Shop >In app Browser", "video is displays on searched result page for respective searched keyword");
		}else {
			logger.info("video is not displays on searched result page for respective searched keyword");	
			extent.extentLoggerFail("Shop >In app Browser", "video is not displays on searched result page for respective searched keyword");
		}
			navigateToHomePage();
		
			

		}	
	}
	public void saveLookButtonFunctionality__T230__T194(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T194 - Guest User- Verify for save look button functionality");
			System.out.println("T194");
			extent.extentLogger("For You", "T194");
			}else {
				extent.HeaderChildNode("T230 - Logged In User- Verify for save look button functionality");
				System.out.println("T230");
				extent.extentLogger("For You", "T230");
			}	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
//		 	 if(verifyElementPresent(HipiHomePage.objSaveLook,"Save look")) {
//			logger.info("User is able to see Save look button");	
//			extent.extentLoggerPass("Feed", "User is able to see Save look button");
//		 	 }else {
//			logger.info("User is not able to see Save look button");	
//			extent.extentLoggerFail("Feed", "User is not able to see Save look button");
//		 	 }	
		 	if (verifyElementPresent(HipiHomePage.objHeartICON, "Heart Icon")) {
				logger.info("User is able to see the heart icon on screen");	
				extent.extentLoggerPass("Feed", "User is able to see the heart icon on screen");
			}else {
				logger.info("User is not able to see the heart icon on screen");	
				extent.extentLoggerFail("Feed", "User is not able to see the heart icon on screen");	
			}			
//		 	verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Lock CTA");
		 	waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresent(HipiHomePage.objProductImage, "Product Image");
			verifyElementPresentAndClick(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
			if (verifyElementPresentAndClick(HipiHomePage.objSavedCTAText, "Saved CTA")) {
				logger.info("On Tap Save Look CTA it is changed to Saved CTA on video screen");	
				extent.extentLoggerPass("Shoppable Vidoes", "On Tap Save Look CTA it is changed to Saved CTA on video screen");
			}else {
				logger.info("On Tap Save Look CTA it is not changed to Saved CTA on video screen");	
				extent.extentLoggerFail("Shoppable Vidoes", "On Tap Save Look CTA it is not changed to Saved CTA on video screen");
			}
			navigateToHomePage();
	}
	

	
	public void saveAndUnSaveTheVideoObjects__T246__T210(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T210 - Guest User - Verify for user can able to save and un-save the video objects.");
			System.out.println("T210");
			extent.extentLogger("For You", "T210");
			}else {
				extent.HeaderChildNode("T246 - Logged In User - Verify for user can able to save and un-save the video objects.");
				System.out.println("T246");
				extent.extentLogger("Feed", "T246");
			}	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
			navigateHomeandClickonShop();
			click(HipiHomePage.objShopButton, "Shop Button");
			click(HipiHomePage.objHomeIcon, "Home Icon");
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			click(HipiHomePage.objProductImage, "Product Image");
			waitTime(2000);
			verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
			deleteTheProductsFromSavedMomentsTab(userType);
			Swipe("DOWN", 1);
//			if (verifyElementExist(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet")) {
//				logger.info("User able to see Close Button Carousel Sheet");	
//				extent.extentLoggerPass("Shoppable Vidoes", "User able to see Close Button Carousel Sheet");
//				click(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
//			}else {
//				logger.info("User not able to see Close Button Carousel Sheet");	
//				extent.extentLoggerFail("Shoppable Vidoes", "User not able to see Close Button Carousel Sheet");
//			}	
//			if (verifyElementExist(HipiHomePage.objSaveLook, "Save Look CTA")) {
//				logger.info("user can able to save and un-save the video objects.");	
//				extent.extentLoggerWarning("SHOP", "user can able to save and un-save the video objects.");	
//			}else {
//				logger.info("user can not able to save and un-save the video objects.");	
//				extent.extentLoggerPass("SHOP button", "user can not able to save and un-save the video objects.");
//			}
			navigateToHomePage();
		}

	
	
//	public void savedProductDeletedFrom__T196__T232(String userType) throws Exception {
//		if(userType.equalsIgnoreCase("Guest")) {
//			extent.HeaderChildNode("T196 - Guest User- Verify for save look icon for the shoppable video once the saved product deleted from  \"Saved moment\" tab from the shop page");
//			System.out.println("T196");
//			extent.extentLogger("For You", "T196");
//			}else {
//				extent.HeaderChildNode("T232 - Logged In User -Verify for save look icon for the shoppable video once the saved product deleted from  \"Saved moment\" tab from the shop page");
//				System.out.println("T232");
//				extent.extentLogger("Feed", "T232");
//			}	
//		
////		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//		navigateHomeandClickonShop();
//		click(HipiHomePage.objShopButton, "Shop Button");
//		String description = getText(HipiHomePage.objDescription);
//		click(HipiHomePage.objHomeIcon, "Home Icon");
//		verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save Look");
//		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
//		click(HipiHomePage.objProductImage, "Product Image");
//		waitTime(2000);
//		verifyElementPresentAndClick(HipiShopPage.objSavedMomentTab, "WISHLIST");
//		deleteTheProductsFromSavedMomentsTab(userType);
////		Swipe("DOWN", 1);
//		Back(1);
////		if (verifyElementExist(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet")) {
////			logger.info("User able to see Close Button Carousel Sheet");	
////			extent.extentLoggerPass("Shoppable Vidoes", "User able to see Close Button Carousel Sheet");
////			click(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
////		}else {
////			logger.info("User not able to see Close Button Carousel Sheet");	
////			extent.extentLoggerFail("Shoppable Vidoes", "User not able to see Close Button Carousel Sheet");
////		}	
//		String description1 = getText(HipiHomePage.objDescription);
//		if (description.equals(description1)) {
//			logger.info("User return back to same shopable video");	
//			extent.extentLoggerPass("SHOP button", "User return back to same shopable video");
//		}else {
//			logger.info("User is not  return back to same shopable video");	
//			extent.extentLoggerFail("SHOP button", "User is not  return back to same shopable video");
//		}
//		navigateToHomePage();
//	} 
	
	public void ableToAddAndPostCommentByEnteringDescriptionInTextField__T146(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T146 - Logged in User - Check if user is able to add and post comment by entering description in text field");
			System.out.println("T146");
			extent.extentLogger("For You", "T146");
		
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			click(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(3000);
			type(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
			hideKeyboard();
			click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			waitTime(8000);
			 String comment = getText(HipiHomePage.objFirstComment);
			 System.out.println(comment);
		if (comment.contains("Hi Few seconds ago")) {
			logger.info("Comment is added with the typed description on the top [with time display as - just now or few seconds ago]");	
			extent.extentLoggerPass("", "Comment is added with the typed description on the top [with time display as - just now or few seconds ago]");
		}else {
			logger.info("Comment is not added with the typed description on the top [with time display as - just now or few seconds ago]");	
			extent.extentLoggerFail("", "Comment is not added with the typed description on the top [with time display as - just now or few seconds ago]");
			}
		navigateToHomePage();
		}
	}
		public void saveVideoObjectsFromMultipleShoppableVideos__T245__T209(String userType) throws Exception {
			
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T209 - Guest User- Verify for able to save video objects from multiple shoppable videos");
				System.out.println("T209");
				extent.extentLogger("For You", "T209");
				}else {
					extent.HeaderChildNode("T245 - Logged In User- Verify for able to save video objects from multiple shoppable videos");
					System.out.println("T245");
					extent.extentLogger("For You", "T245");
				}	
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			click(HipiHomePage.objShopButton, "Shop Button");
//			click(HipiShopPage.objSavedMomentTab, "Save Moment Tab");
//			deleteTheProductsFromSavedMomentsTab(userType);
//			navigateToHomePage();
			for(int i=0; i<8 ; i++)
			{
//				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//				waitTime(4000);
//				click(HipiHomePage.objSaveLook, "Save Look");
			}
			click(HipiHomePage.objShopButton, "Shop Button");
			click(HipiShopPage.objSavedMomentTab, "Save Moment Tab");
			verifyElementPresent(HipiShopPage.objMultipleSavedVideos,"Multiple Saved Videos");
			int	a=getCount(HipiShopPage.objMultipleSavedVideos);
			if(a>=5){
				logger.info("User is to save multiple video objects from different videos and should be saved on Save moments tab in the shop detail page.");	
				extent.extentLoggerPass("", "User is to save multiple video objects from different videos and should be saved on Save moments tab in the shop detail page.");
			}else {
				logger.info("User is not to save multiple video objects from different videos and should be saved on Save moments tab in the shop detail page.");	
				extent.extentLoggerFail("", "User is not to save multiple video objects from different videos and should be saved on Save moments tab in the shop detail page.");
			}
			navigateToHomePage();
		}
		
		

		public void navigateHomeandClickonShop() throws Exception {
			
			if(verifyElementExist(HipiHomePage.objShopButton, "Shop Button")){
				logger.info("User is able to see Shop Button");	
				extent.extentLoggerPass("SHOP button", "User is able to see Shop Button");
//				click(HipiHomePage.objShopButton, "Shop Button");
			}else {
				waitTime(5000);
				SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				//click(HipiHomePage.objShopButton, "Shop Button");
			}		
		}
		
//		public void navigateHomeandSaveMomentTab() throws Exception {
//			if(verifyElementExist(HipiHomePage.objShopButton, "Shop Button")){
////				logger.info("User is able to see shop button");	
//				extent.extentLoggerPass("SHOP button", "User is able to see shop button");
//				click(HipiHomePage.objShopButton, "Shop Button");
//			}else {
//				navigateToSavedMoments();
//			}		
//		
//		}
		
		
//--------------------------------------------Deepa(23-11-2021)-----------------------------------------------------------		

public void  userIsAbleToLoginToTheApplication__T816(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T816 - Check if user is able to login to the application when user enter valid details in Phone tab");
		System.out.println("T816");
		extent.extentLogger("Login/Signup screen", "T816");
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	waitTime(5000);

	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	
	String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
	logger.info("User is able to type "  + checkPhoneNumber );	
	extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
	
	String Password = getParameterFromXML("Password");
	
//	Thread.sleep(5000);
//	hideKeyboard();
	
	verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//	hideKeyboard();

	type(AMDLoginScreen.objPasswordField, Password, "Password field");
	hideKeyboard();

	String checkPassword = getText(HipiLoginPage.objPasswordTextField);
	verifyElementPresentAndClick(HipiLoginPage.objLoginButton, "Login Button");
		waitTime(4000);
		if(waitUntilElementDisplayed(HipiLoginPage.objDoneCTASelectGenderPage, 5)) {
	 		verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
	 		 waitTime(4000);
	 		 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
	 		click(HipiLoginPage.objDoneCTASelectGenderPage, "Done CTC");
	 		
	 	}else {
	 		logger.info("User is unable to see select gender screen");
	 	}
	if (verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon")) {
		 logger.info("User is able to login to the application when he entered valid details" );	
		 extent.extentLoggerPass("", "User is able to login to the application when he entered valid details" );
	 }else {
		logger.info("User is not able to login to the application when he entered valid details");	
		extent.extentLoggerFail("", "User is not able to login to the application when he entered valid details");		
	  }
	}
	logOut();
	 navigateToHomePage();
		
		
	}
		

public void  userIsAbleToLoginToTheApplication__T827(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T827 - Check if user is able to see the Login with OTP in Login with Phone number screen");
	System.out.println("T827");
	extent.extentLogger("Login/Signup screen", "T827");
     //click on Profile icon
       verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
       waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);

        verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
        waitTime(2000);

         if (verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button")) {
    		 logger.info("User is able to see the Login with OTP in Login with Phone Number screen" );	
    		 extent.extentLoggerPass("", "User is able to see theLogin with OTP in Login with Phone Number screen" );
    	 }else {
    		logger.info("User is not able to see the Login with OTP in Login with Phone Number screen");	
    		extent.extentLoggerFail("", "User is able to see the Login with OTP in Login with Phone Number screen");		
    	  }
    	 navigateToHomePage();
    		
    		
    	}

    }
    
public void userIsAbleToNavigateToLoginWithOTPScreen__T828(String userType) throws Exception {
    if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("T828 - Check if user is able to navigate to login with OTP screen after tapping on Login with OTP in Login screen");
	System.out.println("T828");
	extent.extentLogger("Login/Signup screen", "T828");
     //click on Profile icon
       verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
       waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);

        verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
        waitTime(2000);

         verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
         
         if (verifyElementPresent(HipiLoginPage.objLoginWithPassword,"Login Password button")) {
        	 logger.info("User is navigate to Login with OTP screen" );	
    		 extent.extentLoggerPass("", "User is navigate to Login with Password screen" );
    	 }else {
    		logger.info("User is not navigate to Login with OTP screen");	
    		extent.extentLoggerFail("", "User is not navigate to Login with Password screen");		
    	  }
    	 navigateToHomePage();
    		
    		
    	}
        	 
        	 
        	 
         }
 
public static void clearFacebookData() 
{
		String cmd1 = "adb shell pm clear com.facebook.katana";
		try {
			Runtime.getRuntime().exec(cmd1);
		} catch (IOException e) {
			e.printStackTrace();
		}
}
public void loginfacebook() throws Exception {

	
	
	String FBusername = getParameterFromXML("Validfacebookemail");
	waitTime(5000);
	click(HipiLoginPage.objFaceBookEmailTextfield, "Email Text Field");
	clearField(HipiLoginPage.objFaceBookEmailTextfield, "Email Text Field");
	waitTime(3000);
//	Actions a = new Actions(getDriver());
//	a.sendKeys(FBusername);
//	a.perform();
    type(HipiLoginPage.objFaceBookEmailTextfield,FBusername , "Email Field");
	waitTime(3000);
	hideKeyboard();
	waitTime(3000);

	String FBpassword = getParameterFromXML("Validfacebookpassword");
	waitTime(5000);
	click(HipiLoginPage.objPasswordTextfield, "PassWord Field");
	clearField(HipiLoginPage.objPasswordTextfield, "PassWord Field");
	waitTime(3000);
//	Actions ab = new Actions(getDriver());
//	ab.sendKeys(FBpassword);
//	ab.perform();
    type(HipiLoginPage.objPasswordTextfield, FBpassword, "PassWord Field");
	hideKeyboard();
	waitTime(4000);
	click(HipiLoginPage.objFacebookLoginButton, "Log In");
	waitUntilElementDisplayed(HipiHomePage.objHomeIcon, 4000);
	verifyElementPresent(HipiHomePage.objHomeIcon, "Home icon");
	logger.info("User is able to redirect to HiPi once login with Facebook");	
	extent.extentLoggerPass("", "User is able to redirect to HiPi once login with Facebook");	

	
}

	public void  logInWithFacebookRedirectToHipiApp__T872(String userType) throws Exception {
	  if(userType.equalsIgnoreCase("Guest")) {
	  extent.HeaderChildNode("Check if user is able to redirect to Hipi app when successfully login with Facebook");
		System.out.println("T872");
		extent.extentLogger("Login/Signup screen", "T872");
		
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA");
//		relaunch(false);
		waitUntilElementDisplayed(HipiLoginPage.objFaceBookEmailTextfield,20);
		verifyElementPresent(HipiLoginPage.objFaceBookEmailTextfield, "FaceBook Email Text field");
		loginfacebook();
		logOut();

	  }
}
	public void userIsAbletoTCloseTheSignUpForHiPiPopUp__T883(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T883 - Check if user is able to close the \"Sign up for HiPi\"pop-up by tapping on cross icon");
		System.out.println("T883");
		extent.extentLogger("Login/Signup screen", "T883");

		//click on Profile icon
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		
			verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			waitTime(8000);
			verifyElementPresentAndClick(HipiLoginPage.objCrossIconOnLoginPopup, "Cross Icon");
			
			if (verifyElementPresent(HipiHomePage.objHomeIcon, "HOme Icon")){	
				logger.info("User is able to close the Sign up for HiPi pop-up by tapping on cross icon");	
				extent.extentLoggerPass("", "User is able to close the Sign up for HiPi pop-up by tapping on cross icon");	
		  } else {
				logger.info("User is not able to close the Sign up for HiPi pop-up by tapping on cross icon");	
				extent.extentLoggerFail("", "User is not able to close the Sign up for HiPi pop-up by tapping on cross icon");
			}
			navigateToHomePage();
		  }	

		   }   
	public void  userIsAbleToSeeTheContinueWithFacebookCTA__T1004(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T1004 - Check if user is able to see the Continue with Facebook CTA in Login in to HiPi pop-up");
		System.out.println("T1004");
		extent.extentLogger("Login/Signup screen", "T1004");
	
		
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		
		if (verifyElementPresent(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA")) {
			logger.info("User is able to see the \"Continue with Facebook\" CTA in Sign up for HiPi pop-up");	
			extent.extentLoggerPass("", "User is able to see the Continue with Facebook CTA in Sign up for HiPI pop-up");	
	  }else {
			logger.info("User is not able to see the Continue with Facebook CTA in Sign up for HiPI pop-up");	
			extent.extentLoggerFail("", "User is not able to see the Continue with Facebook CTA in Sign up for HiPI pop-up");
		}
		navigateToHomePage();
      }
		
		
}
	
	
	
	public void  userIsNavigateToLoginPageOfFacebook__T1005(String userType) throws Exception {
		  if(userType.equalsIgnoreCase("Guest")) {
		  extent.HeaderChildNode("Check if user is navigate to login page of Facebook by tapping on Continue with Facebbok CTA in Sign up for HiPi pop-up");
			System.out.println("T1005");
			extent.extentLogger("Login/Signup screen", "T1005");
			
			//click on Profile icon
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			clearFacebookData();
			verifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA");
			waitUntilElementDisplayed(HipiLoginPage.objFaceBookEmailTextfield,4000);
			if(verifyElementPresent(HipiLoginPage.objFaceBookEmailTextfield, "FaceBook Email Text field")) {
				logger.info("User is navigate to login page of Facebook by tapping on Continue with Facebbok CTA in Sign up for HiPi pop-up");	
				extent.extentLoggerPass("", "User is navigate to login page of Facebook by tapping on Continue with Facebbok CTA in Sign up for HiPi pop-up");	
		  }else {
				logger.info("User is not navigate to login page of Facebook by tapping on Continue with Facebbok CTA in Sign up for HiPi pop-up");	
				extent.extentLoggerFail("", "User is not able to see the Continue with Facebook CTA in Login in to HiPI pop-up");
			}
			navigateToHomePage();
	      }
			
	}
	public void  userIsAbleToSeeTheContinueWithGoogleCTAInSignUpForHiPiPopUp__T1033(String userType) throws Exception {
		  if(userType.equalsIgnoreCase("Guest")) {
		  extent.HeaderChildNode("T1033 - Check if user is able to see the Continue with Google CTA in Sign up for HiPi pop-up");
			System.out.println("T1033");
			extent.extentLogger("Login/Signup screen", "T1033");

		//click on Profile icon
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			
			verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			
			if (verifyElementPresent(HipiLoginPage.objContinueWithGoogleCTA, "Continue With Google CTA")) {
				logger.info("User is able to see the Continue with Google CTA in Sign up for HiPi pop-up");	
				extent.extentLoggerPass("", "User is able to see the Continue with Google CTA in Sign up for HiPi pop-up");	
		  }else {
				logger.info("User is not navigate to login page of Facebook by tapping on Continue with Facebbok CTA in Sign up for HiPi pop-up");	
				extent.extentLoggerFail("", "User is not able to see the Continue with Facebook CTA in Login in to HiPI pop-up");
			}
			navigateToHomePage();
	  
		  }
	    }
	
	public void   userIsAbleToSeeTheListOfGoogleAccount__T1034(String userType) throws Exception {
		  if(userType.equalsIgnoreCase("Guest")) {
		  extent.HeaderChildNode("T1034 - Check if user is able to see the list of google account pop-up which are present on the device by tapping on Continue with Google CTA");
			System.out.println("T1034");
			extent.extentLogger("Login/Signup screen", "T1034");

		//click on Profile icon
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			
			verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			
			verifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Continue With Google CTA");
			waitUntilElementDisplayed(HipiLoginPage.objGoogleAccount, 5);
			List<WebElement> googleAccounts = getDriver().findElements(HipiLoginPage.objGoogleAccount);
			int size = googleAccounts.size();
			System.out.println(size);
			 logger.info("User is able to see the list of google account and number of google account list is " + size);
	  	   extent.extentLoggerPass("","User is able to see the list of google account and number of google account list is " + size);
	  	 navigateToHomePage();
	}
	}

		
		
		
		
//============================================Discover===========================================================
		
		
		public void  discoverOptionOnApplication__T1324__T1334(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T1324 - Guest User: Verify for discover option on application");
				System.out.println("T1324");
				extent.extentLogger("Discover", "T1324");	
			}else {
				extent.HeaderChildNode("T1334 - Logged In User:Verify for discover option on application");
				System.out.println("T1334");
				extent.extentLogger("Discover", "T1334");
			}
				if(verifyElementPresent(HipiHomePage.objDiscoverButton, "Discover Button ")) {
					logger.info("User is able to see Discover option on the application");	
					extent.extentLoggerPass("Discover", "User is able to see Discover option on the application");
				
				}else {
					logger.info("User is not able to see Discover option on the application");	
					extent.extentLoggerFail("Discover", "User is not able to see Discover option on the application");
				}
				navigateToHomePage();
		  }



	public void userAbleToClickOonTheDiscoverOptionFromTheBottomMenuBar__T1325__T1335(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T1325 - Guest User: Verify if user able to click on the discover option from the bottom menu bar");
				System.out.println("T1325");
				extent.extentLogger("Discover", "T1325");
				}
			    else {
					extent.HeaderChildNode("T1335 - Logged In User: Verify if user able to click on the discover option from the bottom menu bar");
					System.out.println("T1335");
					extent.extentLogger("Discover", "T1335");
			    }

			      verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover button");
			      waitTime(2000);
				
					if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar,"Discover Search Bar")) {
						logger.info("Guest User is able to tap on discover option from the bottom menu bar");	
						extent.extentLoggerPass("Discover", "Guest User is able to tap on discover option from the bottom menu bar");
					}else {
						logger.info("Guest User is not able to tap on discover option from the bottom menu bar");	
						extent.extentLoggerFail("Discover", "Guest User is not able to tap on discover option from the bottom menu bar");
					}
					navigateToHomePage();
				}
		



		
	public void userAbleToSeeSearchFieldInTheTopOfTheDiscoverPage__T1331(String userType) throws Exception{
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T1331 - Guest User: Verify if user able to see search field in the top of the discover page");
				System.out.println("T1331");
				extent.extentLogger("Discover", "T1331");
				 verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover button");
			      waitTime(2000);
			      if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar,"Discover Search Bar")) {
						logger.info("Guest User is able to see the search field at top of the discover page");	
						extent.extentLoggerPass("Discover", "Guest User is able to see the search field at top of the discover page");
					}else {
						logger.info("Guest User is not able to see the search field at top of the discover page");	
						extent.extentLoggerFail("Discover", "Guest User is not able to see the search field at top of the discover page");
					}
				
				navigateToHomePage();
			}
			
		}	
		



	public void  SearchFieldClickAndNavigation__T1343(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T1343 - Logged In User - Verify for Search field click and navigation");
				System.out.println("T1343");
				extent.extentLogger("Discover", "T1343");
			
				 verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover button");
			      waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(3000);
				if(verifyElementPresent(HipiDiscoverPage.objBackButtonSearchBar,"Back Button")) {
					logger.info("User is navigate to search parent page(recent Dicover page)");	
					extent.extentLoggerPass("Discover", "User is navigate to search parent page(recent Dicover page)");
				}else {
					logger.info("User is not navigate to search parent page(recent Dicover page)");	
					extent.extentLoggerFail("Discover", "User is not navigate to search parent page(recent Dicover page)");
				}
				
				navigateToHomePage();
			}
			
			}
		
	public void  userAbleToClickOnTheDisplayedResultsInTheSearchPage__T1355(String userType,String userName) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1355 - Guest user-Verify if user able to click on the displayed results in the search page");
			System.out.println("T1355");
			extent.extentLogger("Discover", "T1355");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
			
			String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
			waitTime(4000);
				
			if(verifyElementPresent(HipiDiscoverPage.objTopButton,"Top Button ")) {
				logger.info("User is able to click on the displayed results from the Dicover page and land on respective page)");	
				extent.extentLoggerPass("Discover", "User is able to click on the displayed results from the Dicover page and land on respective page)");
			}else {
				logger.info("User is not able to click on the displayed results from the Dicover page and user is not land on respective page)");	
				extent.extentLoggerFail("Discover", "User is not able to click on the displayed results from the Dicover page and user is not land on respective page)");
			}
			
			navigateToHomePage();
		}
	
	} 			
	public void  userIsAbleIsSeeAllHashtagRelatedRailsInDiscover__T1488(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1488 - Logged in user - Check if user is able is see all hashtag related rails in discover");
			System.out.println("T1488");
			extent.extentLogger("Discover", "T1488");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			
			if(verifyElementPresent(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video")) {
				logger.info("User is able See related hashtag videos on discover rails");	
				extent.extentLoggerPass("Discover", "User is able See related hashtag videos on discover rails");
			}else {
				logger.info("User is not able See related hashtag videos on discover rails");	
				extent.extentLoggerFail("Discover", "User is not able See related hashtag videos on discover rails");
			}
			
			navigateToHomePage();
		}
	 }
	
	public void  railOnTheDiscoverPage__T1547(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1547 - Guest User: Verify for click on follow button from the user list page");
			System.out.println("T1547");
			extent.extentLogger("Discover", "T1547");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			
			verifyElementPresentAndClick(HipiDiscoverPage.objArrowMarkPresentInfrontTitleName, "Arrow Mark");
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodFollowButton, "Follow Button");
			waitTime(2000);
			VerifyLoginPopUp();
			navigateToHomePage();
	}
	
	}
	
	

	public void userProfileOnRail__T1581(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1581 - Logged In User Verify for Profile Click on rail");
			System.out.println("T1581");
			extent.extentLogger("Discover", "T1581");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			scrolltomiddle(HipiDiscoverPage.objMoreButtonProfile);
//			if (verifyElementExist(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail")) {
//				click(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
//			}else {
//				PartialSwipe("UP", 1);
//			}
			waitTime(2000);
			click(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is able to tap on any profile from rail");	
				extent.extentLoggerPass("", "User is able to tap on any profile from rail");
			}else {
				logger.info("User is not able to tap on any profile from rail");	
				extent.extentLoggerFail("", "User is able to tap on any profile from rail");	
			}
			navigateToHomePage();
			
	}
	
	
	}
	
	public void  backButtonOnTheBannerDetailsPageAndClick__T1520(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User - Verify for back button on the banner details page and click");
			System.out.println("T1520");
			extent.extentLogger("Discover", "T1520");
			click(HipiHomePage.objDiscoverButton, "Discover Button");
			click(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(6000);
		    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objBannerDetailsPageHeader, "Banner Details Page Header");	 

		    verifyElementPresentAndClick(HipiDiscoverPage.objBannerDetailsPageBackButton,"Back Button");
			if(verifyElementPresent(HipiDiscoverPage.objBannersBelowTheSearchField,"Banners Below The Search Field")) {
				logger.info("Guest User is able to tap on back button available on banner details page and on tap it is navigate to previous page");	
				extent.extentLoggerPass("Discover", "Guest User is able to tap on back button available on banner details page and on tap it is navigate to previous page");
			}else {
				logger.info("Guest User is not able to tap on back button available on banner details page and on tap it is not navigate to previous page");	
				extent.extentLoggerFail("Discover", "Guest User is not able to tap on back button available on banner details page and on tap it is not navigate to previous page");
			}
			
			navigateToHomePage();
		}	
	}
	
//=========================================Kartheek(Discover)================================================
	
	
	public void verifyUserprofileonRail__T1541(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1541 - Guest User- Verify User profile on rail");
			System.out.println("T1541");
			extent.extentLogger("", "T1541");
		
			
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
//			if (verifyElementExist(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail")) {
//				click(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
//			}else {
//				PartialSwipe("UP", 1);
//			}
			scrolltomiddle(HipiDiscoverPage.objMoreButtonProfile);

			if(verifyElementPresent(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail")) {
				logger.info("User can see Users profile on the rails");	
				extent.extentLoggerPass("Discover", "User can see Users profile on the rails");
			}else {
				logger.info("User can not see Users profile on the rails");	
				extent.extentLoggerFail("Discover", "User can not see Users profile on the rails");
			}
			navigateToHomePage();
		}
	}
	public void verifyForProfileDetailsPage__T1589(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1589 - Logged In User -Verify for profile details page");
			System.out.println("T1589");
			extent.extentLogger("Discover", "T1589");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			scrolltomiddle(HipiDiscoverPage.objMoreButtonProfile);

			verifyElementPresentAndClick(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
			waitTime(2000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is able to tap on any profile from rail");	
				extent.extentLoggerPass("", "User is able to tap on any profile from rail");
			}else {
				logger.info("User is not able to tap on any profile from rail");	
				extent.extentLoggerFail("", "User is able to tap on any profile from rail");	
			}
			verifyElementPresent(HipiProfilePage.objProfilePicture, "Profile Picture");
			verifyElementPresent(HipiProfilePage.objFollowing, "Following");
			verifyElementPresent(HipiProfilePage.objFollowers, "Followers");
			verifyElementPresent(HipiProfilePage.objLikeSections, "Like Sections");
			verifyElementPresent(HipiProfilePage.objListOfVideoSection, "List Of Video Section");
			verifyElementPresent(HipiProfilePage.objShoppableTab, "Shopable Video Tab");
		
			verifyElementPresent(HipiProfilePage.objBackButton, "Back Button");
			verifyElementPresentAndClick(HipiProfilePage.objThreeDotsOtherUser, "Three dots Other user");
			waitTime(3000);
			verifyElementPresent(HipiProfilePage.objShareButton, "Share Button");
			
			navigateToHomePage();
	}

	}
	
	
	public void   verifyfollowButtonFromListPage__T1586(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1586 - Logged In User: Verify for click on follow button from the user list page");
			System.out.println("T1586");
			extent.extentLogger("Discover", "T1586");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objArrowMarkFirstRailProfile, "More Button ");
			waitForElementAndClickIfPresent(HipiDiscoverPage.objArrowMarkPresentInfrontTitleName, 30, "Arrow Mark");
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodFollowButton, "Follow Button");
			waitTime(4000);
			if(verifyElementPresent(HipiDiscoverPage.objFollowingTab, "Following Tab")){
				logger.info("Taping follow button user gets followed and it displays under following list");	
				extent.extentLoggerPass("", "Taping follow button user gets followed and it displays under following list");
			}else {
				logger.info("Taping follow button user not gets followed and it not displays under following list");	
				extent.extentLoggerFail("", "Taping follow button user not gets followed and it not displays under following list");	
			}
			click(HipiDiscoverPage.objFollowingTab, "Following Tab");
			navigateToHomePage();
		}
		}
		
	public void searchFieldOnTheUserFollowersTab__T1605(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1605 - Logged In User- Verify for search field on the user followers tab");
			System.out.println("T1605");
			extent.extentLogger("Discover", "T1605");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
//			if (verifyElementExist(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail")) {
//				click(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
//			}else {
//				PartialSwipe("UP", 1);
//			}
			scrolltomiddle(HipiDiscoverPage.objMoreButtonProfile);
			verifyElementPresentAndClick(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");

			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is able to tap on any profile from rail");	
				extent.extentLoggerPass("", "User is able to tap on any profile from rail");
			}else {
				logger.info("User is not able to tap on any profile from rail");	
				extent.extentLoggerFail("", "User is able to tap on any profile from rail");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiDiscoverPage.objSearchFieldOnTheFollowingTab, "Search Field On The Following Tab")){
				logger.info("user is get search field on the following tab");	
				extent.extentLoggerPass("", "user is get search field on the following tab");
			}else {
				logger.info("user is not get search field on the following tab");	
				extent.extentLoggerFail("", "user is not get search field on the following tab");	
			}
			navigateToHomePage();
		}
	}
	
	public void verticalScrollInTheDiscoverPage__T1616(String userType) throws Exception {
			extent.HeaderChildNode("T1616 - Verify if user able to do vertical scroll in the discover page");
			System.out.println("T1616");
			extent.extentLogger("Discover", "T1616");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			for(int i=1; i<=1; i++) {	
				waitTime(4000);
			String railTitle = getText(HipiDiscoverPage.objRailsTitle);
			Swipe("UP", 3);
			waitTime(5000);
			Swipe("UP", 3);
			waitTime(5000);
			Swipe("UP", 3);
			waitTime(5000);
			String railTitle1 = getText(HipiDiscoverPage.objRailsTitle);
			if (!railTitle.equals(railTitle1)) {
				logger.info("User is able to scroll vertically of the dicover page in order to see the next configured rails");	
				extent.extentLoggerPass("", "User is able to scroll vertically of the dicover page in order to see the next configured rails");
			}else {
				logger.info("User is not able to scroll vertically of the dicover page in order to not see the next configured rails");	
				extent.extentLoggerFail("", "User is not able to scroll vertically of the dicover page in order to not see the next configured rails");	
			}
			}
			navigateToHomePage();
	}
	
	
public void verifyClickOnTheVideoBanner__T1516(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1516 - Guest User-Verify if user able to see and click on the video banner displayed in the discover page");
			System.out.println("T1516");
			extent.extentLogger("Discover", "T1516");
			click(HipiHomePage.objDiscoverButton, "Discover Button");
//			click(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(5000);
		    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
		    try {
		    for(int i=0;i<=5;i++)
		    {
				if(verifyElementExist(HipiHomePage.objPlayerScreen,"Player Screen"))
				{
				logger.info("User is able to land on player page");	
				extent.extentLoggerPass("", "User is able to land on player page");
				break;
			    }				
				else if(verifyElementExist(HipiDiscoverPage.objGoatPage,"Goat screen"))
				{
				Back(1);
			    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
				}
				else if(verifyElementPresent(HipiDiscoverPage.objModelfaceHeader, "Model face"))
				{
					verifyElementPresentAndClick(HipiDiscoverPage.objModelfaceFirstVideo,"First video");
					if(verifyElementPresent(HipiHomePage.objPlayerScreen,"player screen"))
					{
						logger.info("User is able to land on player page");	
						extent.extentLoggerPass("", "User is able to land on player page");
						break;					
					}
				}
		    }
		    }
		    catch (Exception e)
		    {
		    
					logger.info("User is not able to land on player page");	
					extent.extentLoggerFail("", "User is not able to land on player page");			
		    }

			navigateToHomePage();

		}
	}
	
	public void  clickOnAnyItemInTheEachRail__T1617(String userType) throws Exception {
		
			extent.HeaderChildNode("T1617 - Verify if user able to click on any item in the each rail");
			System.out.println("T1617");
			extent.extentLogger("Discover", "T1617");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
//			if (verifyElementExist(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail")) {
//				click(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
//			}else {
//				PartialSwipe("UP", 1);
//			}
			scrolltomiddle(HipiDiscoverPage.objMoreButtonProfile);

			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objProfileFromRail, "Profilr from Rail");
			waitTime(3000);
			
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is able to tap on any profile from rail");	
				extent.extentLoggerPass("", "User is able to tap on any profile from rail");
			}else {
				logger.info("User is not able to tap on any profile from rail");	
				extent.extentLoggerFail("", "User is able to tap on any profile from rail");	
			}
		
			navigateToHomePage();
		
	}
//==========================================================Kartheek(Login/Signup screen)==================================================

	public void navigateToSignUpScreen() throws Exception {
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
	
	if(verifyElementPresent(HipiLoginPage.objSignUpTitle, "Sign Up Title")){
		logger.info("User is navigate to Sign up screen after tapping on Use Phone or Email CTA");	
		extent.extentLoggerPass("", "User is navigate to Sign up screen after tapping on Use Phone or Email CTA");
	}else {
		logger.info("User is not navigate to Sign up screen after tapping on Use Phone or Email CTA");	
		extent.extentLoggerFail("", "User is not navigate to Sign up screen after tapping on Use Phone or Email CTA");	
	}
	}
	
	public void  navigateToSignUpScreen__T884(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T884 - Check if user is able to navigate to Sign up screen after tapping on Use Phone or Email CTA");
			System.out.println("T884");
			extent.extentLogger("", "T884");
			navigateToSignUpScreen();
		navigateToHomePage();
		}
	} 
	
	public void ageShouldBeAbove18Year__T893(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T893 - Check if the Age should be above 18 year message is displayed when user select less than 18 years");
			System.out.println("T893");
			extent.extentLogger("Discover", "T893");
		
			navigateToSignUpScreen();

			 String year2017= getParameterFromXML("SelectYear2017");
			 type(HipiLoginPage.objSelectYear, year2017, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 
			if(verifyElementPresent(HipiLoginPage.objAgeShouldBeAbove18TosterMessage, "Toster Message")){
				logger.info("User is get the Age should be above 18 year message when selects less than 18 years");	
				extent.extentLoggerPass("", "User is get the Age should be above 18 year message when selects less than 18 years");
			}else {
				logger.info("User is not get the Age should be above 18 year message when selects less than 18 years");	
				extent.extentLoggerFail("", "User is not get the Age should be above 18 year message when selects less than 18 years");	
			}
			navigateToHomePage();
		}
	}
	public void navigateToEmailAddressScreen__T982(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T982 - Check if user is able to navigate to Email Address screen by tapping on Email option in Sign up screen");
			System.out.println("T982");
			extent.extentLogger("", "T982");
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
				
				if(verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email field")){
					logger.info("User is navigate to Email Address screen by tapping on Email option in Sign up screen");	
					extent.extentLoggerPass("", "User is navigate to Email Address screen by tapping on Email option in Sign up screen");
				}else {
					logger.info("User is not navigate to Email Address screen by tapping on Email option in Sign up screen");	
					extent.extentLoggerFail("", "User is not navigate to Email Address screen by tapping on Email option in Sign up screen");	
				}
				navigateToHomePage();
		}
		
	}
	
	public void emailScreenByTappingOnBackButton__T984(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T984 - Check if user naviagte to Sign up for Email screen by tapping on back button");
			System.out.println("T984");
			extent.extentLogger("", "T984");
		
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email field");
		
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			 
			 verifyElementPresentAndClick(HipiLoginPage.objBackButton, "Back button");

				if(verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email field")){
					logger.info("User is navigate to Email Address screen by tapping on Email option in Sign up screen");	
					extent.extentLoggerPass("", "User is navigate to Email Address screen by tapping on Email option in Sign up screen");
				}else {
					logger.info("User is not navigate to Email Address screen by tapping on Email option in Sign up screen");	
					extent.extentLoggerFail("", "User is not navigate to Email Address screen by tapping on Email option in Sign up screen");	
				}
			 navigateToHomePage();
		}
	}
	public void emailAddressInEmailAddressFieldInSignUpScreen__T986(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T986 - Check if user is able to enter the New Email Address in Email Address field in Sign up screen");
			System.out.println("T986");
			extent.extentLogger("", "T986");
		

			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email field");
		
			 String mail = getParameterFromXML("Email");
			 type(AMDLoginScreen.objEmailIdField, mail, "Email Field");
			 hideKeyboard();
			 String text = getText(AMDLoginScreen.objEmailIdField);
			 if (text.contains(mail)) {
				 logger.info("User is able to enter the New Email " + text);	
				 extent.extentLoggerPass("", "User is able to enter the New Email  " + text);
			}else {
				logger.info("User is not able to enter the New Email");	
				extent.extentLoggerFail("", "User is not able to enter the New Email");	
			}
			
			 navigateToHomePage();
		}
	}
	
	public void  fullNameInSignUpScreen__T991(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T991 - Check if user is able to enter Full Name in Sign up screen");
			System.out.println("T991");
			extent.extentLogger("", "T991");
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email field");
		
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitUntilElementDisplayed(HipiLoginPage.objFullNameTextField, 2);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			 String fullNameText = getText(HipiLoginPage.objFullNameTextField);
			 if (fullNameText.contains(fullName)) {
				 logger.info("User is able to enter the Full name " + fullNameText);	
				 extent.extentLoggerPass("", "User is able to enter the Full name  " + fullNameText);
			}else {
				logger.info("User is not able to enter the Full name ");	
				extent.extentLoggerFail("", "User is not able to enter the Full name ");		
			}
			 navigateToHomePage();
			 
		}
		
	}
	
	public void downArrowInSignUpScreen__T994(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T994 - Check if user is able to change the Gender field by tapping on up and down arrow in sign up screen");
			System.out.println("T994");
			extent.extentLogger("", "T994");
		
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			 hideKeyboard();
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
				
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 String genderMale = getText(HipiLoginPage.objGenderDropDown);
			 System.out.println(genderMale);
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objFemale, "Femail Button");
			 
			 String genderFemail = getText(HipiLoginPage.objGenderDropDown);
			 System.out.println(genderFemail);
			
			 if (!genderMale.equals(genderFemail)) {
					logger.info("User is able to change the Gender field by tapping on up and down arrow in sign up screen");	
					extent.extentLoggerPass("", "User is able to change the Gender field by tapping on up and down arrow in sign up screen");
				}else {
					logger.info("User is not able to change the Gender field by tapping on up and down arrow in sign up screen");	
					extent.extentLoggerFail("", "User is not able to change the Gender field by tapping on up and down arrow in sign up screen");	
				}
			 navigateToHomePage();
		}
	}
	
	
	
	//--------------------------------------------Sign up >> Phone Number-------------------------------------------------
	
	
	public void navigatePhoneNumberScreenAfterTappingOnNextCTA__T894(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T894 - Check if user navigate to sign up with phone number screen after tapping on Next CTA");
			System.out.println("T894");
			extent.extentLogger("", "T894");
		
			navigateToSignUpScreen();
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 if(verifyElementPresent(HipiLoginPage.objPhoneNumberTextField, "Phone number field")){
				 logger.info("User is navigate to Sign up with Phone number screen after tapping on Next CTA");	
					extent.extentLoggerPass("", "User is navigate to Sign up with Phone number screen after tapping on Next CTA");
				}else {
					logger.info("User is navigate to Sign up with Phone number screen after tapping on Next CTA");	
					extent.extentLoggerFail("", "User is navigate to Sign up with Phone number screen after tapping on Next CTA");	
				}
			 navigateToHomePage();
	}
	
}
	public void enteringPassowrdInSignUpScreen__T995(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T995 - Check if user is able to enter Passowrd in Sign up screen");
			System.out.println("T995");
			extent.extentLogger("", "T995");
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			 hideKeyboard();
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
				
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 
			 String Password = getParameterFromXML("NonsubscribedPassword");
			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
				type(AMDLoginScreen.objPasswordField, Password, "Password field");
				hideKeyboard();
				 String  password= getText(AMDLoginScreen.objPasswordField);
				 System.out.println(password);
				 if (password.contains("••••••")) {
					 logger.info("User is able to enter the password " + password);	
					 extent.extentLoggerPass("", "User is able to enter the password  " + password);
				}else {
					logger.info("User is not able to enter the Full name ");	
					extent.extentLoggerFail("", "User is not able to enter the Full name ");		
				}
				 navigateToHomePage();
//				 waitTime(4000);
//				 click(HipiLoginPage.objPasswordRemoveButton, "Remove Button");
//				 waitTime(15000);
		}
	}
	public void navigateToCreateUsernamePage__T998(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T998 - Check if user navigate to Create username page by tapping on Complete CTA in Sign up screen");
			System.out.println("T998");
			extent.extentLogger("", "T998");
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			 hideKeyboard();
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
				
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 String Password = getParameterFromXML("NonsubscribedPassword");
			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
				type(AMDLoginScreen.objPasswordField, Password, "Password field");
				hideKeyboard();
				verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
				waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 10);
				if (verifyElementPresent(HipiLoginPage.objCreateUsername, "Create User name")) {
					 logger.info("User is navigate to Create username page by tapping on Complete CTA in Sign up screen");	
					 extent.extentLoggerPass("", "User is navigate to Create username page by tapping on Complete CTA in Sign up screen");
				}else {
					logger.info("User is not navigate to Create username page by tapping on Complete CTA in Sign up screen");	
					extent.extentLoggerFail("", "User is not navigate to Create username page by tapping on Complete CTA in Sign up screen");		
				}
				logOut();
				navigateToHomePage();
		}
	}
	
	public void defaultUserNameIsDisplayedInCreateUsernamePage__T1000(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1000 - Check if by default username is displayed in Create username page");
			System.out.println("T1000");
			extent.extentLogger("", "T1000");
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			 hideKeyboard();
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
				
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 String Password = getParameterFromXML("NonsubscribedPassword");
			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
				type(AMDLoginScreen.objPasswordField, Password, "Password field");
				hideKeyboard();
				verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
				waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 100);
				if (verifyElementPresent(HipiLoginPage.objDefaultUsername, "Default User name")) {
					 logger.info("By default username is displayed in Create username page");	
					 extent.extentLoggerPass("", "By default username is displayed in Create username page");
				}else {
					logger.info("By default username is not displayed in Create username page");	
					extent.extentLoggerFail("","By default username is not displayed in Create username page");		
				}
				logOut();
				navigateToHomePage();
	}
	}
	
	
	public void  verifyResetCTA__T856(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T856 - Check user is able to reset the email address by tapping on Reset CTA in forgot Password Reset Screen for Email");
			System.out.println("T856");
			extent.extentLogger("", "T856");	
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
			
			String mail = getParameterFromXML("NonsubscribedUserName");
			Thread.sleep(5000);
//			hideKeyboard();
			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			
			verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password Button");
			waitTime(3000);
			
			verifyElementPresentAndClick(HipiLoginPage.objEmailTextFeaildForgotPasswordPage, "Email Text Feaild Forgot Password Page");
			 type(HipiLoginPage.objEmailTextFeaildForgotPasswordPage, mail, "Email Field");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objResetButton, "Reset Button");
			 waitTime(10000);
			 if (verifyElementExist(HipiLoginPage.objResetButton, "Reset button")) {
				 logger.info("User is not able to reset the email address by tapping on Reset CTA");	
					extent.extentLoggerFail("","User is not able to reset the email address by tapping on Reset CTA");	
			}else {
				 logger.info("User is able to reset the email address by tapping on Reset CTA");	
				 extent.extentLoggerPass("", "User is able to reset the email address by tapping on Reset CTA");
					
			}
			 navigateToHomePage();
		}
	}
	
	
	public void removeTheEnteredNewPhoneNumber__T950(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T950 - Check if user is able to remove the entered new phone number by tapping on cross icon in Sign up screen for Phone Number");
			System.out.println("T950");
			extent.extentLogger("", "T950");	
		
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String phoneNumber = getParameterFromXML("NewNumber");
			type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			hideKeyboard();
			
			String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
			System.out.println(checkPhoneNumber);
			waitTime(4000);
			 click(HipiLoginPage.objRemovePhoneNumber, "Remove Button");
				String removePhoneNumber= getText(HipiLoginPage.objPhoneNumberTextField);
				System.out.println(removePhoneNumber);
				
			 if (!checkPhoneNumber.equals(removePhoneNumber)) {
				 logger.info("User is able to remove the entered new phone number by tapping on cross icon" );	
				 extent.extentLoggerPass("", "User is able to remove the entered new phone number by tapping on cross icon" );
			}else {
				logger.info("User is not able to remove the entered new phone number by tapping on cross icon");	
				extent.extentLoggerFail("", "User is not able to remove the entered new phone number by tapping on cross icon");		
			}
			 navigateToHomePage();
		}
	}
	
public void VeifySkipCreateUsernamePage__T1002(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1002 - Check if user navigate to Feed screen by tapping on Skip in Create username page");
			System.out.println("T1002");
			extent.extentLogger("", "T1002");
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			 hideKeyboard();
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
				
			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitUntilElementDisplayed(HipiLoginPage.objFullNameTextField, 2);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 String Password = getParameterFromXML("NonsubscribedPassword");
			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
				type(AMDLoginScreen.objPasswordField, Password, "Password field");
				hideKeyboard();
				verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
				waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 5);
				verifyElementPresentAndClick(HipiLoginPage.objSkipCTA, "Skip CTA");
				waitTime(5000);
				 if (verifyElementExist(HipiLoginPage.objDoneButtonLanguage, "Done Button Language")) {
					 click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
				}else {
					logger.info("User not able to see Done CTA");	
					extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Skip in Create username page");
				
				}
				 
				 waitUntilElementDisplayed(HipiHomePage.objForYou, 2);
				 
				if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
					logger.info("User is navigate to Feed screen by tapping on Skip in Create username page");	
					extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Skip in Create username page");
				}else {
					logger.info("User is not navigate to Feed screen by tapping on Skip in Create username page");	
					extent.extentLoggerFail("", "User is not navigate to Feed screen by tapping on Skip in Create username page");
				}
				logOut1();
				navigateToHomePage();
	}
	}
	
	
	public void VerifyRemoveDefaultUserName__T1003(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T1003 Check if User navigate to Feed screen by tapping on Submit CTA in Create Username page");
		System.out.println("T1003");
		extent.extentLogger("", "T1003");
		//			navigateToSignUpScreen();
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");

		verifyElementPresent(HipiLoginPage.objSignUpTitle, "Sign Up Title");
		waitTime(5000);
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			 hideKeyboard();
			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

				
			 type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
				Thread.sleep(5000);
				hideKeyboard();
//			 hideKeyboard();
//			  String text = getText(AMDLoginScreen.objEmailIdField);
				verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
			 String fullName = getParameterFromXML("FullNmae");
			type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 String Password = getParameterFromXML("NonsubscribedPassword");
			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			 type(AMDLoginScreen.objPasswordField, Password, "Password field");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
				waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 10);
				verifyElementPresentAndClick(HipiLoginPage.objSubmitButton, "Submit Button");
				waitTime(3000);
				 if (verifyElementExist(HipiLoginPage.objDoneButtonLanguage, "Done Button Language")) {
					 click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
				}else {
					logger.info("User not able to see Done CTA");	
					extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Skip in Create username page");
				
				}
				 
				 waitUntilElementDisplayed(HipiHomePage.objForYou, 2);
					if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
						logger.info("User is navigate to Feed screen by tapping on Submit CTA in Create username page");	
						Time_ExcelUpdate.TestCaseSummaryNode1("User is able to sign in and navigate to Feed screen");
						extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Submit CTA in Create username page");					
					}else {
						logger.info("User is not navigate to Feed screen by tapping on Submit CTA in Create username page");	
						Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to sign in and navigate to Feed screen");
						extent.extentLoggerFail("", "User is not navigate to Feed screen by tapping on Submit CTA in Create username page");	
					}
					logOut();
					navigateToHomePage();
		}
		}
	
public String GeneratingRandomString(int n) {
	{

		String AlphaNumericString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789" + "abcdefghijklmnopqrstuvxyz";
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = (int) (AlphaNumericString.length() * Math.random());

			sb.append(AlphaNumericString.charAt(index));
		}
		return sb.toString();
	}
}
	public void verifyBirthdayScreenAfterCreatingFacebookAccount__T1008(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user navigate to Sign up with birthday screen after creating and Facebook account");
			System.out.println("T1008");
			extent.extentLogger("", "T1008");
			navigateToSignUpScreen();
			verifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA");
			waitUntilElementDisplayed(HipiLoginPage.objCreateNewFacebookAccount, 4000);
			verifyElementPresentAndClick(HipiLoginPage.objCreateNewFacebookAccount, "Create New Facebook Account");
			if(verifyElementExist(HipiLoginPage.objJoinFacebookNextButton, "Next CTA")) {
				logger.info("Next CTA is displayed when ever user click on Create New Facebook Account");	
				extent.extentLoggerPass("", "Next CTA is displayed when ever user click on Create New Facebook Account");
				click(HipiLoginPage.objJoinFacebookNextButton, "Next CTA");
			}else {
				logger.info("Next CTA is not displayed when ever user click on Create New Facebook Account");	
				extent.extentLoggerFail("", "Next CTA is not displayed when ever user click on Create New Facebook Account");
			}
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
				Thread.sleep(5000);
				}else {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
					
				}
				if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow ZEE5 to access photos, media, and files on your device");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow ZEE5 to access photos, media, and files on your device?");		
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow ZEE5 to access photos, media, and files on your device-"+ "Allow button clicked");
				Thread.sleep(5000);
				}else {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");	
				}
				waitTime(8000);
				if(verifyElementExist(HipiLoginPage.objNoneOfTheAboveButton, "None Of The Above button")){
					logger.info("User is able to see None Of The Above button");	
					extent.extentLoggerPass("", "User is able to see None Of The Above button");
					click(HipiLoginPage.objNoneOfTheAboveButton, "None Of The Above button");
				}else {
					logger.info("User is not able to see None Of The Above button");	
					extent.extentLoggerFail("", "User is not able to see None Of The Above button");
				}
			
				String firstName = getParameterFromXML("FirstName");
				String lastName = getParameterFromXML("LastName");
				verifyElementPresentAndClick(HipiLoginPage.objFirstNameTextFeaildFacebook, "Firs Name Text Feaild");
				type(HipiLoginPage.objFirstNameTextFeaildFacebook, firstName, "First name");
				verifyElementPresentAndClick(HipiLoginPage.objLastNameTextFeaildFacebook, "Last Name Text Feaild");
				type(HipiLoginPage.objLastNameTextFeaildFacebook, lastName, "Last name");
				verifyElementPresentAndClick(HipiLoginPage.objJoinFacebookNextButton, "Next CTA");
				waitTime(2000);
				if(verifyElementPresent(HipiLoginPage.objBirthdayTitle, "Birthday Title")){
					logger.info("User is navigate to Sign up with birthday screen after creating and Facebook account");	
					extent.extentLoggerPass("", "User is navigate to Sign up with birthday screen after creating and Facebook account");
				}else {
					logger.info("User is not navigate to Sign up with birthday screen after creating and Facebook account");	
					extent.extentLoggerFail("", "User is not navigate to Sign up with birthday screen after creating and Facebook account");
				}
				Back(2);
				if(verifyElementExist(HipiLoginPage.objStopCreatingAccount, "Stop Creating Account")){
					logger.info("User is able to see Stop Creating Account");	
					extent.extentLoggerPass("", "User is able to Stop Creating Account");
					click(HipiLoginPage.objStopCreatingAccount, "Stop Creating Account");
				}else {
					logger.info("User is not able to see Stop Creating Account");	
					extent.extentLoggerFail("", "User is not able to see Stop Creating Account");
				}
				navigateToHomePage();
		}
	}
	
public void verifyAgeShouldBeAbove18YearMessage__T1017(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if the Age should be above 18 year message is displayed by tapping on Next CTA when user select less than 18 years");
			System.out.println("T1017");
			extent.extentLogger("", "T1017");
			navigateToSignUpScreen();
			verifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA");
			waitUntilElementDisplayed(HipiLoginPage.objCreateNewFacebookAccount, 4000);
			verifyElementPresentAndClick(HipiLoginPage.objCreateNewFacebookAccount, "Create New Facebook Account");
			if(verifyElementExist(HipiLoginPage.objJoinFacebookNextButton, "Next CTA")) {
				logger.info("Next CTA is displayed when ever user click on Create New Facebook Account");	
				extent.extentLoggerPass("", "Next CTA is displayed when ever user click on Create New Facebook Account");
				click(HipiLoginPage.objJoinFacebookNextButton, "Next CTA");
			}else {
				logger.info("Next CTA is not displayed when ever user click on Create New Facebook Account");	
				extent.extentLoggerFail("", "Next CTA is not displayed when ever user click on Create New Facebook Account");
			}
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
				Thread.sleep(5000);
				}else {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
					
				}
				if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow ZEE5 to access photos, media, and files on your device");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow ZEE5 to access photos, media, and files on your device?");		
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow ZEE5 to access photos, media, and files on your device-"+ "Allow button clicked");
				Thread.sleep(5000);
				}else {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");	
				}
				waitTime(8000);
				if(verifyElementExist(HipiLoginPage.objNoneOfTheAboveButton, "None Of The Above button")){
					logger.info("User is able to see None Of The Above button");	
					extent.extentLoggerPass("", "User is able to see None Of The Above button");
					click(HipiLoginPage.objNoneOfTheAboveButton, "None Of The Above button");
				}else {
					logger.info("User is not able to see None Of The Above button");	
					extent.extentLoggerFail("", "User is not able to see None Of The Above button");
				}
				String firstName = getParameterFromXML("FirstName");
				String lastName = getParameterFromXML("LastName");
				verifyElementPresentAndClick(HipiLoginPage.objFirstNameTextFeaildFacebook, "Firs Name Text Feaild");
				type(HipiLoginPage.objFirstNameTextFeaildFacebook, firstName, "First name");
				verifyElementPresentAndClick(HipiLoginPage.objLastNameTextFeaildFacebook, "Last Name Text Feaild");
				type(HipiLoginPage.objLastNameTextFeaildFacebook, lastName, "Last name");
				verifyElementPresentAndClick(HipiLoginPage.objJoinFacebookNextButton, "Next CTA");
				waitTime(2000);
				if(verifyElementPresent(HipiLoginPage.objBirthdayTitle, "Birthday Title")){
					logger.info("User is navigate to Sign up with birthday screen after creating and Facebook account");	
					extent.extentLoggerPass("", "User is navigate to Sign up with birthday screen after creating and Facebook account");
				}else {
					logger.info("User is not navigate to Sign up with birthday screen after creating and Facebook account");	
					extent.extentLoggerFail("", "User is not navigate to Sign up with birthday screen after creating and Facebook account");
				}
				 String year2020= getParameterFromXML("SelectYear2020");
				 type(HipiLoginPage.objSelectYear, year2020, "Type Year");
				
				 click(HipiLoginPage.objSelectYear, "Select year");
				 click(HipiLoginPage.objSelectYear, "Select year");
				 hideKeyboard();
				 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
				 verifyElementPresentAndClick(HipiLoginPage.objJoinFacebookNextButton, "Next CTA");
					Back(2);
					if(verifyElementExist(HipiLoginPage.objStopCreatingAccount, "Stop Creating Account")){
						logger.info("User is able to see Stop Creating Account");	
						extent.extentLoggerPass("", "User is able to Stop Creating Account");
						click(HipiLoginPage.objStopCreatingAccount, "Stop Creating Account");
					}else {
						logger.info("User is not able to see Stop Creating Account");	
						extent.extentLoggerFail("", "User is not able to see Stop Creating Account");
					}
					allowPermissions();
					navigateToHomePage();
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//-------------------------------------------Muttu-------------------------------------------------------------

	public void checkTheLayoutOfEditProfileScreen_T1074(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1074 - Logged in user- Check layout of 'Edit Profile Screen'");
			System.out.println("T1074");
			extent.extentLogger(" profile Edit", "T1074");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			verifyElementPresent(HipiProfilePage.objEditProfileTitle,"Edit Profile Title");
			verifyElementPresent(HipiProfilePage.objbackbutton,"Back Button");
			verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit profile title");
			verifyElementPresent(HipiProfilePage.objprofilephotoEditProfilePage,"Edit profile photo");
			verifyElementPresent(HipiProfilePage.objNameText,"Name text");
			verifyElementPresent(HipiProfilePage.objUserNameText,"User name text");
			verifyElementPresent(HipiProfilePage.objBioText,"BioText");
		navigateToHomePage();
		}
	}




	public void checkIfUserIsAbleToNaviagateBackToProfileScreenOnTappingBackButtonInEditProfilePage_T1075(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1075 - Logged in user - Check if tapping 'back' button user is redirected back to Profile Screen");
			System.out.println("T1075");
			extent.extentLogger("Profile Edit", "T1075");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile Edit' user is directed to Hipi profile screen");	
				extent.extentLoggerPass("", "Profile Edit' user is directed to Hipi profile screen");
			}else {
				logger.info("user is not directed to Hipi profile screen");	
				extent.extentLoggerFail("", "user is not directed to Hipi profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			verifyElementPresent(HipiProfilePage.objEditProfileTitle,"Edit Profile Title");
			verifyElementPresentAndClick(HipiProfilePage.objbackbutton, "Back Button");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("user is directed to Hipi profile screen");	
				extent.extentLoggerPass("", "user is directed to Hipi profile screen");
			}else {
				logger.info("user is not directed to Hipi profile screen");	
				extent.extentLoggerFail("", "user is not directed to Hipi profile screen");	
			}

	navigateToHomePage();
			
		}
	}


	public void checkUserIsAbleToSeeInviteFriendsIcon_T1203(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1203 - Logged in user - Check user is able to see invite friends icon");
			System.out.println("T1203");
			extent.extentLogger("Profile_Invite Friends","T1203");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile_InviteFriends' User is navigated to profile Screen");	
				extent.extentLoggerPass("", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("", "user is not navigated to profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
			if(verifyElementPresent(HipiProfilePage.objInviteFriendsText, "Invite Friends Text"))
			{
				logger.info("User is  able to see invite Friends Icon at left Corner of the profile Screen");	
				extent.extentLoggerPass("", "Profile_InviteFriends' User is  able to see invite Friends Icon at left Corner of the profile Screen ");
			}else {
				logger.info("User is not able to see invite Friends Icon at left Corner of the profile Screen");	
				extent.extentLoggerFail("", "User is not able to see invite Friends Icon at left Corner of the profile Screen");	
			}
			navigateToHomePage();
			}
		}

	public void checkUserIsAbleToSeeBioOnProfileScreen_T1202(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1202 - Logged in user - Check user is able to see Bio on profile screen");
			System.out.println("T1202");
			extent.extentLogger("Profile_Bio","T1202");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile, "Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objBioDescription, "Bio Description"))
			{
				logger.info("User is able see bio description under Edit profile");	
				extent.extentLoggerPass("", "User is able see bio description under Edit profile");
			}else {
				logger.info("User is not able see bio description under Edit profile");	
				extent.extentLoggerFail("", "User is not able see bio description under Edit profile");	
			}
			navigateToHomePage();
	}
	}

	
	
	
	
	

public void userRedirectedToAccountDetailScreenWhenTappedOnBack_T1142(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1142 - Logged in user - Check if user is redirected to \"Account detail screen\" when tapped on back");
			System.out.println("T1142");
			extent.extentLogger("Profile_Draft","T1142");
			addvideoDraft();
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objDraftVideos, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Video");
			verifyElementPresentAndClick(HipiProfilePage.objDraftPageBackBtn, "Draft Page Back Button");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is redirected to profile Screen");	
				extent.extentLoggerPass("", "User is redirected to profile screen ");
			}else {
				logger.info("User is not directed to profile screen");	
				extent.extentLoggerFail("", "User is not directed to profile screen");	
			}
			navigateToHomePage();
			
		}
	
	
}




public void RedirectToProfileScreenOnTappingBackButton_T1105(String userType) throws InterruptedException, Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1105 - Logged in user - Check if on tapping back button user is re-directed back to Profile Screen");
				System.out.println("T1105");
				extent.extentLogger("Profile_Following","T1105");
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
				verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
				waitUntilElementDisplayed(HipiProfilePage.objFollowingListTab, 2);
				if(verifyElementPresent(HipiProfilePage.objFollowingListTab, "Following list Tab")){	
					logger.info("User is redirected to following list screen");	
					extent.extentLoggerPass("Profile_Following","User is redirected to following list screen");
				} else {
					logger.info("User is not redirected to following list screen");	
					extent.extentLoggerFail("Profile_Following", "User is not redirected to following list screen");	
				}
				waitTime(3000);
				verifyElementPresentAndClick(HipiProfilePage.objFollowingBackButton, "Following Back Button");
				waitTime(3000);
				if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
					logger.info("User is re-direct to profile screen.");	
					extent.extentLoggerPass("Profile_Following", " User is re-direct to profile screen.e");
				}else {
					logger.info(" User is not  re-direct to profile screen.");	
					extent.extentLoggerFail("Profile_Following", " User is not re-direct to profile screen.");	
				}
				navigateToHomePage();
				
	}
}


	
	//------------------------------------------S------------------------------------------
	


	public void verifyFollowingCtaIsProvidedToVerifyUserHasBeenFollowed_T1110(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1110 - Logged in User -Check following cta is provided to verify user is been followed");
		System.out.println("T1110");
		extent.extentLogger("Profile", "T1110");

	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
	waitTime(3000);
	verifyElementPresentAndClick(HipiProfilePage.objFollowing,"Following Profile Screen");
//	verifyElementPresent(HipiProfilePage.objSearchIconFollowingTab,"Following Profile List Screen");

    if(verifyElementPresent(HipiProfilePage.objFollowingListTab,"Following List Tab")) {
    	logger.info("User is able to see following cta  along with user details ");
    	extent.extentLoggerPass("Following List Tab", "User is able to see following cta  along with user details");
    	verifyElementPresent(HipiProfilePage.objFirstFollowingUser,"User Details");
    }else {
    	logger.info("User is not able to see following cta  along with user details ");
    	extent.extentLoggerFail("Following List Tab", "User is not able to see following cta  along with user details ");   		
    } 
    
    navigateToHomePage();
	}
}





	public void verifyUserAbleToUnfollowTheFollowingUserByTappingOnFollowingCta_T1111(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1111 - Logged in user - Check user is able  unfollow the following user by tapping on following cta");
		System.out.println("T1111");
		extent.extentLogger("Profile", "T1111");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
	waitTime(3000);
	verifyElementPresentAndClick(HipiProfilePage.objFollowing,"Following Profile Page");
	waitTime(3000);
	verifyElementPresent(HipiProfilePage.objSearchBar,"Following Profile List Screen");
	waitTime(3000);
	String expectedVerifyunfollowing=getText(HipiProfilePage.objFirstFollowingUser);
	waitTime(3000);
	verifyElementPresentAndClick(HipiProfilePage.objFollowingbutton_followingTab,"Following CTA");
	waitTime(3000);
	String ActualVerifyunfollowing=getText(HipiProfilePage.objFirstFollowingUser);
	if(expectedVerifyunfollowing!=ActualVerifyunfollowing){
		logger.info("User is able to unfollow the following users by tapping on following cta");
    	extent.extentLoggerPass("Following Cta", "User is able to unfollow the following users by tapping on following cta");
    }else {
    	logger.info("User is not able to unfollow the following users by tapping on following cta");
    	extent.extentLoggerFail("Following Cta", "User is not able to unfollow the following users by tapping on following cta");   		
    } navigateToHomePage();
  }
}




	public void postedHashtagVideo_T1178(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user - Check posted hashtag video is displaying under profile screen");
			System.out.println("T1178");
			extent.extentLogger("Profile", "T1178");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			if(verifyElementPresent(HipiProfilePage.objHashTagDescription,"Hashtag description")) {
				logger.info("User is able to see video with hashtag description");
		    	extent.extentLoggerPass("HashTag description", "User is able to see video with hashtag description");
		    }else {
		    	logger.info("User is unable to see video with hashtag description");
		    	extent.extentLoggerFail("HashTag description", "User is unable to see video with hashtag description");   		
		    }
			navigateToHomePage();	
			}
		}



	public void scrollingUpVideoWithIndexfinger_T1183(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1183 - Logged in user - Check user is able to scroll all the videos in All tab");
			System.out.println("T1183");
			extent.extentLogger("Profile", "T1183");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"profile Header ");
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
		    String actualText = getText(HipiHomePage.objMusicButtonBelowLeftSide);		
		    Swipe("UP", 5);
		     String expectedText = getText(HipiHomePage.objMusicButtonBelowLeftSide);
		    if(actualText!=expectedText){
		    	logger.info("User is able to scroll to the video till bottom of the page");
		    	extent.extentLoggerPass("ScrollingBottom", "User is able to scroll to the video till bottom of the page");
		    }else {
		    	logger.info("User is unable to scroll to the video till bottom of the page");
		    	extent.extentLoggerFail("ScrollingBottom", "User is unable to scroll to the video till bottom of the page");   		
		    }
		    navigateToHomePage();
		}
			}




	public void tappingOnAnyPrivateVideo_T1185(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1185 - Logged in user - Check user is able to tap on any private video");
			System.out.println("T1185");
			extent.extentLogger("Profile-PrivateVideo", "T1185");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			if(verifyElementPresent(HipiHomePage.objLikeICON, "Like ICON")) {
				logger.info("By tapping private video user is able to navigate to the player screen");
		    	extent.extentLoggerPass("Tap on privatevideo", "By tapping private video user is able to navigate to the player screen");
		    }else {
		    	logger.info("By tapping private video user is unable to navigate to the player screen");
		    	extent.extentLoggerFail("Tap on privatevideo", "By tapping private video user is unable to navigate to the player screen");   		
			}  navigateToHomePage();
	}
}





	public void verifyUsercanCreateVideoWithoutLoggingIn_T525(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T525 - Guest User - User is not allowed to create a video");
			System.out.println("T525");
			extent.extentLogger("Creator", "T525");	
		
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Plus Icon");
		VerifyLoginPopUp();
		
		navigateToHomePage();
		}
}


	public void verifyVideoCreation_T529(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T529 - Logged in user - Check if user is able to create video");
			System.out.println("T529");
			extent.extentLogger("Creator", "T529");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objRecordIcon,"Camera icon")) {
				logger.info("Video recording screen has been displayed");
		    	extent.extentLoggerPass("Create Video Screen", "Video recording screen has been displayed");
		    }else {
		    	logger.info("Video recording screen failed to displayed");
		    	extent.extentLoggerFail("Create Video Screen", "Video recording screen failed to displayed");   		
			} 
			navigateToHomePage();	
			}
	}




	public void verifyAddMusicScreen_T556(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T556 - Check if on tapping 'Add Music' Icon user is navigated to Add Music screen");
			System.out.println("T556");
			extent.extentLogger("Creator", "T556");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objSoundIcon,"Sound Icon")) {
				logger.info("By default no sound is added to an video");
		    	extent.extentLoggerPass("Sound", "By default no sound is added to an video");
		    }else {
		    	logger.info("By default has been sound is added to an video");
		    	extent.extentLoggerFail("Sound", "By default has been sound is added to an video");  	
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundIcon,"Sound icon");
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundsHeaderScreen,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			navigateToHomePage();
			
}
		}


 public void loginToHipiByTappingOnProfileIcon__T799(String userType) throws Exception {
	   if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T799 - Logged in User - Check if user is able to view Login in to HiPi screen by tapping on Profile icon");
				System.out.println("T799");
				extent.extentLogger("", "T799");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
		VerifyLoginPopUp();
		navigateToHomePage();
	}
}



 public void closeLoginToHipiPopupByTappingOnCrossIcon_T801(String userType) throws Exception {
 if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T801 - Check if user is able to close the \"Login in to HiPi\" pop-up by tapping on cross icon");
		System.out.println("T801");
		extent.extentLogger("", "T801");
		
 verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
 waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 verifyElementPresentAndClick(HipiLoginPage.objCrossIconLoginPopUp, "Cross Icon");
 if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
		logger.info("User is able close the Login in to HiPi screen by tapping on cross icon");	
		extent.extentLoggerPass("For You", "User is able close the Login in to HiPi screen by tapping on cross icon");
		
	}else {
		logger.info("User is not able close the Login in to HiPi screen by tapping on cross icon");	
		extent.extentLoggerFail("For You", "User is not able close the Login in to HiPi screen by tapping on cross icon");	
	}
 navigateToHomePage();
 }
 }
 
 public void checkIfUserIsAbleToFlipCameraAndFlashLightIsDisabledInSelfieMode_T539(String userType) throws Exception
 {
 	if(userType.equalsIgnoreCase("NonSubscribedUser"))
 	{
 		extent.HeaderChildNode("T539 - Logged in user - Check if user is able to flip camera and flash light is disabled in selfie mode [on device supporting Front camera]");
 		System.out.println("T539");
 		extent.extentLogger("Creator_RearCamera","T539");
 		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
 		allowPermissions();
 		verifyElementPresentAndClick(HipiCreateVideoPage.objFlashButton, "Flash Button");
 		if(verifyElementPresent(HipiCreateVideoPage.objFlashDisablePopup, "Flash Disable PopUp"))
 		{
 			
 				logger.info(" Flash light is disabled in selfie mode ");	
 				extent.extentLoggerPass("Creator_RearCamera'","Flash light is disabled in selfie mode ");
 			} 
 			else 
 			{
 				logger.info("Flash light is not disabled in selfie mode");	
 				extent.extentLoggerFail("Creator_RearCamera", "Flash light is not disabled in selfie mode");	
 			}
 			navigateToHomePage();
 		}
 			
 		}
	

 public void checKUserIsAbleToSeeVideoSpeedBarOptionOnTappingVideoSpeedIcon_T542(String userType) throws Exception
 {
 	if(userType.equalsIgnoreCase("NonSubscribedUser"))
 	{
 		extent.HeaderChildNode("T542 - Logged in user - On tapping Video Speed Icon system displays Video Speed bar with options [0.3x,0.5x,1x,2x,3x]");
 		System.out.println("T542");
 		extent.extentLogger("Creator_VideoSpeed","T542");
 		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
 		allowPermissions();
 		verifyElementPresentAndClick(HipiCreateVideoPage.objSpeedButton,"Speed Button");
 		if(verifyElementPresent(HipiCreateVideoPage.objSpeedButtonHighLighted,"Speed Button HighLighted"))
 		{
 			logger.info("Creator_VideoSpeed' Video Speed is selected and highlighted");	
 			extent.extentLoggerPass("", "Creator_VideoSpeed'  Video Speed is selected and highlighted");
 		}else {
 			logger.info("Creator_VideoSpeed' Video Speed is selected but not highlighted");	
 			extent.extentLoggerFail("", "Creator_VideoSpeed' Video Speed is selected but not highlighted");	
 		}	
 		verifyElementPresent(HipiCreateVideoPage.objSpeedZeropointhree, "Speed Zero Point Three");
 		verifyElementPresent(HipiCreateVideoPage.objSpeedZeropointfive, "Speed Zero Point Five");
 		verifyElementPresent(HipiCreateVideoPage.objSpeedOne, "Speed one");
 		verifyElementPresent(HipiCreateVideoPage.objSpeedOnePointFive, "Speed One Point Five");
 		verifyElementPresent(HipiCreateVideoPage.objSpeedTwo, "Speed Two");
 		navigateToHomePage();
 }
 }
	
	
 public void checkIfUserIsAbleToAddTheMusicAfterRecording_T611(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T611 - Logged in user - Check if user is able to add the music after recording");
			System.out.println("T611");
			extent.extentLogger("Creator_Sound","T611");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions(); 
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
			waitUntilElementDisplayed(HipiCreateVideoPage.objSoundInVideoRecord, 10);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundInVideoRecord,"Sound Icon");
			waitTime(4000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundHeaderText, "Sound Header")){
				logger.info("User is navigated to Add Sound Screen");	
				extent.extentLoggerPass("Creator_Sound", "User is navigated to Add Sound Screen");
			}else {
				logger.info("User is not navigated to Add Sound Screen");	
				extent.extentLoggerFail("Creator_Sound", "User is not navigated to Add Sound Screen");	
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundSearchInVideoRecord, "Sound Search In Video Record");
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundSearchInput,"Sound Search Input");
			waitTime(4000);
			type(HipiCreateVideoPage.objSoundSearchInput, "Sunny Leone", "Sound Search On Kamalikannada");
			waitTime(3000);
			click(HipiCreateVideoPage.objFirstSearchResults, "First Search Results");
			waitUntilElementDisplayed(HipiCreateVideoPage.objSelectFirstSound, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSelectFirstSound, "Select First Sound");
			waitUntilElementDisplayed(HipiCreateVideoPage.objSelectMusicButton, 3);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMusicButton, "Select Music Button");
			if(verifyElementPresent(HipiCreateVideoPage.objMusicHeader, "Music Header")){
				logger.info("User is able to add the music after recording ");	
				extent.extentLoggerPass("Creator_Sound", "User is able to add the music after recording ");
			}else {
				logger.info("User is not able to add the music after recording ");	
				extent.extentLoggerFail("Creator_Sound", "User is not able to add the music after recording ");	
			}
		discardPopup();
			
}
	}
 
 
 
	public void addingMusic_T591(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T591 - Check user is able to preview a music and then pause");
			System.out.println("T591");
			extent.extentLogger("Creator", "T591");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			waitTime(5000);
			click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound TextField");
			type(HipiCreateVideoPage.objSoundScreenSearchField,"mahi", "Sound TextField");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"Suggestion")) {
				logger.info("suggested records has been displayed");
		    	extent.extentLoggerPass("Suggestions", "suggested records has been displayed");
		    }else {
		    	logger.info("suggested records has failed to displayed");
		    	extent.extentLoggerFail("Suggestions", "suggested records has failed to displayed"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"Existing record");
			waitTime(3000);
			String expectedText=getText(HipiCreateVideoPage.objSoundsExistingRecord);

			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
			waitTime(10000);
			logger.info(" Expected Text"+expectedText);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"Records");
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
			waitTime(5000);
		    String actualText=getText(HipiCreateVideoPage.objVideoScreenHeader);
		    logger.info(" Actual Text"+actualText);
			waitTime(3000);
		    if(expectedText.equals(actualText)) {
		    	logger.info("User is able to add a music");
		    	extent.extentLoggerPass("Music", "User is able to add a music");
		    }else {
		    	logger.info("User is unable to add a music");
		    	extent.extentLoggerFail("Music", "User is unable to add a music"); 
			}
		    discardPopup();

		}
	}
	public void discardPopup() throws Exception 
	{
		
			boolean homepage;
		while(homepage=true)
		{
			if(verifyElementDisplayed(HipiCreateVideoPage.objDiscardPopupDiscaedEdits))
			{
				click(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard");
			waitTime(2000);
			}else if(verifyElementExist(HipiHomePage.objForYou,"For you"))
			{
				waitTime(2000);
				break;		
			}
			else
			{
				Back(1);
				waitTime(2000);
			}
		}
		
		
	}
	
	public void tapOnDifferentFilterCategories_T628(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T628 -  Check if user is able to flip camera and flash light is disabled in selfie mode on device supporting Front camera");
			System.out.println("T628");
			extent.extentLogger("Creator", "T628");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter, "Filter");
			waitTime(5000);
			logger.info("Tapping on different Filter categories");
	    	extent.extentLoggerPass("Filters", "Tapping on different Filter categories");
	    	waitTime(20000);
	    	String firsttext = getText(HipiCreateVideoPage.objFilterScreenFirstFilter);		    	
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First Filter");
	    	waitTime(5000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objFilterParty,"Party filter");
	    	String firsttext1 = getText(HipiCreateVideoPage.objFilterScreenFirstFilter_party);	
	    	waitTime(3000);			
			verifyElementPresentAndClick(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First filter");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objFilterAction,"Action filter");
		 	String firsttext2 = getText(HipiCreateVideoPage.objFilterScreenFirstFilter_party);	
	    	waitTime(3000);	
	    	waitTime(3000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First filter");
			if(firsttext!=firsttext1&&firsttext1!=firsttext2)
			{
				logger.info("User is able to tap on different filter categories");
		    	extent.extentLoggerPass("Filter Tap", "User is be able to tap on different filter categories");
			}else {
			   	logger.info("User is unable to tap on different filter categories");
		    	extent.extentLoggerPass("Filter Tap", "User is unable to tap on different filter categories");	
			}
			navigateToHomePage();
	}
	}
	
	
	public void verifyUserCanTrimSound_T605(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T605 - Check if user is able to trim sound from trimming screen and able to apply it on a video");
			System.out.println("T605");
			extent.extentLogger("Creator", "T605");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		waitTime(1000);
		allowPermissions();
		if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
			logger.info("User is navigated to Video Creation screen");
	    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
	    }else {
	    	logger.info("User is not navigated to Video Creation screen");
	    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
		waitUntilElementDisplayed(HipiCreateVideoPage.objSoundScreenSearchField, 3);
		if(verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
			logger.info("User is able to navigate to the Sound screen");
	    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
	    }else {
	    	logger.info("User is not able to navigate to the Sound screen");
	    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
		}
		waitTime(5000);
		click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound search Text Field");
		type(HipiCreateVideoPage.objSoundScreenSearchField,"mahi", "Sound TextField");
		waitTime(5000);
		if(verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"Suggestion")) {
			logger.info("suggested records has been displayed");
	    	extent.extentLoggerPass("Suggestions", "suggested records has been displayed");
	    }else {
	    	logger.info("suggested records has failed to displayed");
	    	extent.extentLoggerFail("Suggestions", "suggested records has failed to displayed"); 
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"Existing record");
		waitTime(3000);
		String expectedText=getText(HipiCreateVideoPage.objSoundsExistingRecord);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
		waitTime(10000);
//		logger.info(" Expected Text"+expectedText);
//		WebElement element = getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle);
//	    String xDuration = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
//	    System.out.println(xDuration);
//	    int endX = Integer.parseInt(xDuration) - 50;
//	    SwipeAnElement(element, endX, 0);
//	    Dimension size1= getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle).getSize();
//	    System.out.println(size1);
//	    String xDuration2 = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
//	    System.out.println(xDuration2);
//	    if(xDuration.equals(xDuration2) == false){
//	    	logger.info("User is able to trim sound from trimming screen");
//			extent.extentLoggerPass("AddSoundPreShoot", "User is able to trim sound from trimming screen");
//	    }else {
//	    	logger.error("User is NOT able to trim sound from trimming screen");
//			extent.extentLoggerFail("AddSoundPreShoot", "User is NOT able to trim sound from trimming screen");
//	    }
		String songDuration=getText(HipiCreateVideoPage.objSongDuration);
		System.out.println(songDuration);
		swipeRail(HipiCreateVideoPage.objTrimSong, "Left",3);

		String songDuration1=getText(HipiCreateVideoPage.objSongDuration);
		System.out.println(songDuration1);
		if (!songDuration.equals(songDuration1)) {
			logger.info("User is able to see the selected local music title on video creation screen");
			extent.extentLoggerPass("", "User is able to see the selected local music title on video creation screen");
			}else
			{
			logger.info("User is unable to see the selected local music title on video creation screen");
			extent.extentLoggerFail("", "User is unable to see the selected local music title on video creation screen");			
			}	
		verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundsTrimTick, "Tick icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");	     
//	     Boolean value16 = verifyElementExist(HipiAddMusicPage.objSelectedMusicInRecordingScreen, "Recording Screen with selected Music on Top");
//			if(value16 == true) {
//				logger.info("User is able to trim sound from trimming screen");
//				extent.extentLoggerPass("AddSoundPreShoot", "User is able to trim sound from trimming screeno");
//			}else {
//				logger.error("User is unable to trim sound from trimming screen and unable to apply it on video");
//				extent.extentLoggerFail("AddSoundPreShoot", "User is unable to trim sound from trimming screen ");
//			}
//			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 5);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			
			waitTime(15000);
			
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			
			if(TimeStampverifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				TimeStampclick(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				TimeStampclick(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");	
			
			if(verifyElementDisplayed(HipiCreateVideoPage.objUploadedVideoPopup))
			{
		    	logger.info("User is able to trim sound from trimming screen and should be able to apply it on video");
		    	extent.extentLoggerPass("video posting", "User should be able to trim sound from trimming screen and should be able to apply it on video");
		    }else {
		    	logger.info("User Unable to trim sound from trimming screen and should be able to apply it on video");
		    	extent.extentLoggerFail("video posting", "User is unable to trim sound from trimming screen and should be able to apply it on video");
			}
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			navigateToHomePage();
	}
	}
	
	public void verifyUserCanIncreaseAndDecreaseTheVolume_T622(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T622 - Check if user is able to increase the volume of the Music enabled on original sound");
			System.out.println("T622");
			extent.extentLogger("Creator", "T622");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			 waitTime(20000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenVoulmebtn, "Edit Screen Voulme btton,");
			waitTime(4000);
			verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
			verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
			Boolean a = verifyElementExist(HipiSoundDetailPage.objMicrophoneEnabled,"Microphone with volume bar");
			String Value = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
			System.out.println(Value);
			logger.info(Value);
			if((a == true)) {
				logger.info("Microphone with volume bar is 'enabled' when video is created with original sound");
				extent.extentLoggerPass("AddSoundPostShoot", "Microphone with volume bar is 'enabled' when video is created with original sound");
			}else {
				logger.error("Microphone with volume bar is Not 'enabled' when video is created with original sound");
				extent.extentLoggerFail("AddSoundPostShoot", "Microphone with volume bar is Not'enabled' when video is created with original sound");
					}
			verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
			Boolean v = verifyElementExist(HipiSoundDetailPage.objMicrophoneMinValue,"Microphone with volume bar");
			String Value2 = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
			System.out.println(Value2);
			extent.extentLogger("", Value2);
			logger.info(Value2);
			if((v == true)) {
				logger.info("Microphone  icon is 'disabled' when video is created with  sound with volume 0");
				extent.extentLoggerPass("AddSoundPostShoot", "Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
			}else {
				logger.error("Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
				extent.extentLoggerFail("AddSoundPostShoot", "Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
					}
			
			
//		 verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
			DecreaseMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar);
		    String currentvolume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
		    System.out.println(currentvolume);extent.extentLogger("", "Volume after Decrease : "+currentvolume);
		    int k=Integer.parseInt(currentvolume);
		    IncreasingMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar); 	
		    String volume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
		    System.out.println(volume);extent.extentLogger("", "Volume after Decrease : "+volume);
		    int l=Integer.parseInt(volume);
		    if(l>k) {
		    	logger.info("user is able to increase the volume of the Music enabled on original sound");
				extent.extentLoggerPass("AddSoundPostShoot", "user is able to increase the volume of the Music enabled on original sound");
			}else {
				logger.error("user is Unable to increase the volume of the Music enabled on original sound");
				extent.extentLoggerFail("AddSoundPostShoot", "user is Unable to increase the volume of the Music enabled on original sound");
				}	
	discardPopup();
		}	 
	}
	
	public void verifyUserCanIncreaseAndDecreaseTheVolumeInOriginalsound_T623(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T623 - Check if user is able to increase the volume of the Music enabled on added sound");
			System.out.println("T623");
			extent.extentLogger("Creator", "T623");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			waitUntilElementDisplayed(HipiCreateVideoPage.objSoundScreenSearchField, 2);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			waitTime(5000);
			click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound search Text Field");
			type(HipiCreateVideoPage.objSoundScreenSearchField,"mahi", "Sound TextField");
			waitTime(5000);
			
			if(verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"Suggestion")) {
				logger.info("suggested records has been displayed");
		    	extent.extentLoggerPass("Suggestions", "suggested records has been displayed");
		    }else {
		    	logger.info("suggested records has failed to displayed");
		    	extent.extentLoggerFail("Suggestions", "suggested records has failed to displayed"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"Existing record");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objMusicScreenTickIcon, 3);
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
			waitTime(5000);
		allowPermissions();
		if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
			logger.info("User is navigated to Video Creation screen");
	    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
	    }else {
	    	logger.info("User is not navigated to Video Creation screen");
	    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
		}	 
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
	waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenVoulmebtn, "Edit Screen Voulme button,");
		waitTime(4000);
	 verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		Boolean a = verifyElementExist(HipiSoundDetailPage.objMicrophoneEnabled,"Microphone with volume bar");
		String Value = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
		System.out.println(Value);
		logger.info(Value);
		if((a == true)) {
			logger.info("Microphone with volume bar is 'enabled' when video is created with original sound");
			extent.extentLoggerPass("Add Sound Post Shoot", "Microphone with volume bar is 'enabled' when video is created with original sound");
		}else {
			logger.error("Microphone with volume bar is Not 'enabled' when video is created with original sound");
			extent.extentLoggerFail("Add Sound Post Shoot", "Microphone with volume bar is Not'enabled' when video is created with original sound");
				}
		verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		Boolean v = verifyElementExist(HipiSoundDetailPage.objMicrophoneMinValue,"Microphone with volume bar");
		String Value2 = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
		System.out.println(Value2);extent.extentLogger("", Value2);
		logger.info(Value2);
		if((v == true)) {
			logger.info("Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
			extent.extentLoggerPass("Add Sound Post Shoot", "Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
		}else {
			logger.error("Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
			extent.extentLoggerFail("Add Sound Post Shoot", "Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
				}
		
	// verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		DecreaseMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar);
	    String currentvolume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
	    System.out.println(currentvolume);extent.extentLogger("", "Volume after Decrease : "+currentvolume);
	    int k=Integer.parseInt(currentvolume);
	    IncreasingMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar); 	
	    String volume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
	    System.out.println(volume);extent.extentLogger("", "Volume after Decrease : "+volume);
	    int l=Integer.parseInt(volume);
	    if(l>k) {
	    	logger.info("user is able to increase the volume of the Music enabled on Added sound");
			extent.extentLoggerPass("Add Sound Post Shoot", "user is able to increase the volume of the Music enabled on original sound");
		}else {
			logger.error("user is Unable to increase the volume of the Music enabled on original sound");
			extent.extentLoggerFail("Add Sound Post Shoot", "user is Unable to increase the volume of the Music enabled on added sound");
			}
			discardPopup();
		}
	}
	
	
	public void verifyEffectSCreen_T715(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T715 - By tapping on 'Effect' Icon user is navigated to Effect screen");
			System.out.println("T715");
			extent.extentLogger("Creator", "T715");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objeffect, "Effects Button");
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objEffectsTrending, "Trending"))
			{
		    	logger.info("User is able to navigate to Effects screen on tapping 'Effects' Icon");
		    	extent.extentLoggerPass("Effects", "User is able to navigate to Effects screen on tapping 'Effects' Icon");
		    }else {
		    	logger.info("User is unable to navigate to Effects screen on tapping 'Effects' Icon");
		    	extent.extentLoggerFail("Effects", "User is unable to navigate to Effects screen on tapping 'Effects' Icon"); 
		    	
			}
			navigateToHomePage();			
	}
		}
	public void verifyVideoCreationWithMusic_T607(String userType) throws Exception {
		String expected;
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T607 - Logged in user - Check if user is able to view video newly created by music");
			System.out.println("T607");
			extent.extentLogger("Creator", "T607");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenSoundbtn, 10);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"Sound");
			waitUntilElementDisplayed(HipiCreateVideoPage.objSoundScreenSearchField, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);

			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi, "Trnding on hipi");
			String actual=getText(HipiCreateVideoPage.objSoundsAnySound);
			System.out.println(actual);
			 String[] expect1 = actual.split(" • Original Audio");
				System.out.println(expect1[0]);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Trending Music");
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
	waitTime(3000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
	waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 20);
	String postDescription = "Desc"+GeneratingRandomString(7);
	type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
	waitTime(3000);
	hideKeyboard();
//	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//	waitTime(3000);
	if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
	{
		click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//		click(HipiCreateVideoPage.objDoneCTC, "Done Button");
	}else {
		logger.info("User is unable to See Language Options");
		extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
		
	}
	verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
	waitTime(5000);
	if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
		Back(1);
	}else {
		logger.info("User is unable to See Share Sheet");
		extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
	}
	click(AMDHomePage.objProfileIcon,"profile icon");
	waitTime(3000);
	for (int i = 0; i <= 50; i++) {
		if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
			Thread.sleep(2000);
			Back(1);
			Thread.sleep(2000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
		} else {
		
			click(HipiCreateVideoPage.objselectfirstVideo, "First video");
			waitTime(3000);
		     expected=getText(HipiProfilePage.objMusicVideoName);
		     System.out.println(expected);
		     String[] expect = expected.split("• ");
				System.out.println(expect[1]);
//			verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
			waitTime(8000);
			if(expect[1].equals(expect1[0]))
			{
				logger.info("User is able to view video newly created by music");
				extent.extentLoggerPass("profile screen", "User is able to view video newly created by music");
			}else {
				logger.info("User is unable to view video newly created by music");
				extent.extentLoggerFail("profile screen", "User is unable to view video newly created by music"); 
			}
			break;
		}
	}
	navigateToHomePage();
		}
	}
	public void verifyUserCanUploadVideoFromGallery_T584(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
//			String expected;
			extent.HeaderChildNode("T584 - Check if user is able to upload video from gallery");
			System.out.println("T584");
			extent.extentLogger("Creator", "T584");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup)&&verifyElementPresent(HipiCreateVideoPage.objGalleryFirstVideo,"First video"))
			{
				logger.info("User is able to Navigate to video upload from gallery page and Exisiting video is present");
				extent.extentLoggerPass("Gallery upload screen", "User is able to Navigate to video upload from gallery page and Exisiting video is present");
			}else {
				logger.info("User is unable to Navigate to video upload from gallery page and Exisiting video is not present");
				extent.extentLoggerFail("Gallery upload screen", "User is unable to Navigate to video upload from gallery page and Exisiting video is not present");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First video");
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton,"Edit This Video");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objGalleryVideoTickButton))
			{
				logger.info("User is navigated to Trim screen");
				extent.extentLoggerPass("Trim screen", "User is not navigated to Trim screen");
			}else {
				logger.info("User is navigated to Trim screen");
				extent.extentLoggerFail("Trim screen", "User is not navigated to Trim screen");
			}
			verifyElementPresent(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick button");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objTrimlefthandle, "Video SLider");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objRotatingIcon, "Rotate Icon");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objCrossIcon, "Cross Icon");
			waitTime(3000);
			click(HipiCreateVideoPage.objGalleryVideoTickButton,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next"))
			{
				logger.info("User is able to navigated to Video editing screen");
				extent.extentLoggerPass("Video Edit Screen", "User is able to navigated to Video editing screen");
			}else {
				logger.info("User is unable to navigated to Video editing screen");
				extent.extentLoggerFail("Video Edit Screen", "User is unable to navigated to Video editing screen");
			}
//			waitTime(15000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Screen Header"))
			{
				logger.info("User is able to navigated to Video Posting screen");
				extent.extentLoggerPass("Video post Screen", "User is able to navigated to Video Posting screen");
			}else {
				logger.info("User is unable to navigated to Video post screen");
				extent.extentLoggerFail("Video post Screen", "User is unable to navigated to Video post screen");
			}
			verifyElementPresent(HipiCreateVideoPage.objVideoThumbnail, "Video Thumbnail");
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			click(HipiCreateVideoPage.objPostDescription, "Description");
			type(HipiCreateVideoPage.objPostDescription,"#HiPiTesting", "Hashtag and Description");
			String text="#HiPiTesting";
			waitTime(3000);
			hideKeyboard();

			
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			waitTime(3000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			for (int i = 0; i <= 50; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
				     String expected = getText(HipiProfilePage.objHashTagDescription);
				     System.out.println(expected);
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(expected), "Video");
					waitTime(8000);
					if(expected.contains("#HiPiTestin ..MORE"))
					{
						logger.info("User is able to upload video from gallery.");
						extent.extentLoggerPass("profile screen", "User is able to upload video from gallery.");
					}else {
						logger.info("User is unable to upload video from gallery.");
						extent.extentLoggerFail("profile screen", "User is unable to upload video from gallery."); 
					}
					break;
				}
			}
			navigateToHomePage();
		}
	}
	public void setVisibilityToPublic_T685(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T685 - Logged in user - Check if user is able to set visibilty mode to \"public\"");
			System.out.println("T685");
			extent.extentLogger("Creator", "T685");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 100);
			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Screen Header")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitTime(10000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoPostPrivacyBtn,"Privacy Button");
			verifyElementPresent(HipiCreateVideoPage.objVideoPostPublicBtn,"Public");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoPostFriendsBtn,"Friends");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoPostPrivateBtn,"Private");
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoPostPrivacyTick,"Public"))
            {
		    	logger.info("By default Visiblity mode is public");
		    	extent.extentLoggerPass("Public Mode", "By default Visiblity mode is public");
		    }else {
		    	logger.info("By default Visiblity mode is not public");
		    	extent.extentLoggerFail("Public Mode", "By default Visiblity mode is not public");
			}
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoPostFriendsBtn,"Friends");
//			waitTime(2000);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoPostPrivacyBtn,"Privacy Button");
//			waitTime(2000);
//			if(verifyElementPresent(HipiCreateVideoPage.objVideoPostPublicBtn,"Public")) {
//		    	logger.info("User is able to set visibilty mode to public");
//		    	extent.extentLoggerPass("Public Mode", "User is able to set visibilty mode to public");
//		    }else {
//		    	logger.info("User is Unable to set visibilty mode to public");
//		    	extent.extentLoggerFail("Public Mode", "User is Unable to set visibilty mode to public");	
//			}
			discardPopup();
			}
}
	
	public void addTextToVideo_T649(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Check user is able to add text on the video");
			System.out.println("T649");
			extent.extentLogger("Creator", "T649");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittext,"Edit Text");
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittextplusicon,"Plus icon");
			String text = getParameterFromXML("FullNmae");
			type(HipiCreateVideoPage.objVideoEditTextfield,text, "Enter text");
			String enterTxet = getText(HipiCreateVideoPage.objVideoEditTextfield);
			if (enterTxet.equals(text)) {
				logger.info("User is able to add text on video");
		    	extent.extentLoggerPass("Textfield", "User is able to add text on video");
			} }else {
		    	logger.info("User is unable to add text on video");
		    	extent.extentLoggerFail("Textfield", "User is unable to add text on video"); 
		    	
			}
		BackCreatorScreenToHomeScreen();
			navigateToHomePage();
		}
	
	
	public void verifyUserCanShareVideo_T700(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("By tapping on 'Effect' Icon user is navigated to Effect screen");
			System.out.println("T700");
			extent.extentLogger("Creator", "T700");	
			if(verifyElementPresent(HipiHomePage.objHomeIcon,"Home page")) {
			  	logger.info("Feed screen is visible");
		    	extent.extentLoggerPass("Home page", "Feed screen is  visible");
		    }else {
		    	logger.info("Feed screen is not visible");
		   	    extent.extentLoggerFail("Home page", "Feed screen is not visible"); 			
			}
			if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Video Player Screen")) {
			  	logger.info("User is able to view the video ");
		    	extent.extentLoggerPass("Video screen", "User is not able to view the video ");
		    }else {
		    	logger.info("User is able to view the video ");
		   	    extent.extentLoggerFail("Video screen", "User is not able to view the video "); 			
			}
			clearFacebookData();
			verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share icon");
			verifyElementPresentAndClick(HipiHomePage.objSharetofacebook, "share to facebook");
			
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
				Thread.sleep(5000);
				}else {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
					
				}
			waitUntilElementDisplayed(HipiHomePage.objShareWithNewsFeed, 3000);
			verifyElementExist(HipiHomePage.objShareIcon,"Share icon");
//			if(verifyElementPresentAndClick(HipiHomePage.objSharetofacebook, "share to facebook")) {
//		    	logger.info("User is able to see different social networking widgets ");
//		    	extent.extentLoggerPass("Share to facebook", "User is able navigate to Effects screen on tapping 'Effects' Icon");
//		    }else {
//		    	logger.info("User is unable to see different social networking widgets ");
//		    	extent.extentLoggerFail("Share to facebook", "User is unable navigate to Effects screen on tapping 'Effects' Icon"); 	
//			}
			waitTime(4000);
			if(verifyElementExist(HipiHomePage.objShareWithNewsFeed, "Share With News Feed")){
				logger.info("User is able to see Share With News Feed");
		    	extent.extentLoggerPass("", "User is able to see Share With News Feed");
		    	click(HipiHomePage.objShareWithNewsFeed, "Share With News Feed");
		    }else {
		    	logger.info("User is not able to see Share With News Feed");
		    	extent.extentLoggerFail("Share to facebook", "User is not able to see Share With News Feed"); 
			}
			waitTime(5000);
			
			waitTime(4000);
//			if(verifyElementExist(HipiHomePage.objShareWithNewsFeed, "Share With News Feed")){
//				logger.info("User is able to see Share With News Feed");
//		    	extent.extentLoggerPass("", "User is able to see Share With News Feed");
//		    	click(HipiHomePage.objShareWithNewsFeed, "Share With News Feed");
//		    }else {
//		    	logger.info("User is not able to see Share With News Feed");
//		    	extent.extentLoggerFail("Share to facebook", "User is not able to see Share With News Feed"); 
//			}
			waitTime(5000);
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
				Thread.sleep(5000);
				}else {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
					
				}
			waitTime(5000);
			type(HipiHomePage.objShareFbUsername,"9080431369", "Username Text Field");
			waitTime(3000);
			type(HipiHomePage.objShareFbPassword,"Hipi@123", "Password Text Field");
			verifyElementPresentAndClick(HipiHomePage.objShareFbLoginBtn,"Login button");
			waitTime(5000);
			if(verifyElementPresent(HipiHomePage.objFbnewsfeedHeader,"facebook News Feed")) {
		    	logger.info("User is able to Share video in social media");
		    	extent.extentLoggerPass("Share to facebook", "User is able to Share video in social media");
		    }else {
		    	logger.info("User is unable to Share video in social media");
		    	extent.extentLoggerFail("Share to facebook", "User is unable to Share video in social media"); 
			}
			verifyElementPresentAndClick(HipiHomePage.objPostButton, "Post Button");
			waitTime(4000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			 if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
					logger.info("User is able close the Login in to HiPi screen by tapping on cross icon");	
					extent.extentLoggerPass("For You", "User is able close the Login in to HiPi screen by tapping on cross icon");	
				}else {
					logger.info("User is not able close the Login in to HiPi screen by tapping on cross icon");	
					extent.extentLoggerFail("For You", "User is not able close the Login in to HiPi screen by tapping on cross icon");	
				}
			navigateToHomePage();

}
}
	
	
	public void downlaodVideo_T704(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T704 - Check if another user is able to Download video");
			System.out.println("T704");
			extent.extentLogger("Creator", "T704");
			tapiOS_Middlepoint(1);
			verifyElementPresentAndClick(HipiHomePage.objSaveVideo, "Save Video");
			waitTime(2000);
			if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow")) {
			logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
			
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
			}else {
				logger.info("Permission dialog popup not displayed");
			}
			
			
//			click(HipiHomePage.objSaveVideo, "Save Video");
			if(verifyElementPresent(HipiHomePage.objVideoSaved,"Save video popup")){
				logger.info("User is able to saved Video");	
				extent.extentLoggerPass("", "User is able to saved Video");
			}else {
				logger.info("User is not able to saved Video");	
				extent.extentLoggerFail("", "User is not able to saved Video");
			}
			navigateToHomePage();
		}
		}
	
	
	
	
	
	public void BackCreatorScreenToHomeScreen() throws Exception {
		
		for(int i=1; i<=4; i++) {	
			Back(1);
			if(verifyElementExist(HipiCreateVideoPage.objDiscardEdits, "Discard Edits")){
			click(HipiCreateVideoPage.objDiscardEdits, "Discard Edits");
		
			}else {
			
				break;
			}
			
		}
	}
	//----------------------------------------si---------------------------------------------------------
 
 
 public void verifyLoginSignUpPopupDisplaysOnProfileTab__T1072(String userType) throws Exception
 {

 	if(userType.equalsIgnoreCase("Guest"))
 	{
 	extent.HeaderChildNode("T1072 - Guest user- Check whether login /signup popup displays when user taps on profile tab");
 	System.out.println("T1072");
 	extent.extentLogger("Profile", "T1072");
 	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
 	VerifyLoginPopUp();
 	}
 	navigateToHomePage();
 }



 //2.Logged in user - Check if on tapping 'Edit Profile' user is directed to Edit Profile Screen
 public void TappingEditProfileUserIsDirectedToEditProfileScreen__T1073(String userType) throws Exception
 {
 	if(userType.equalsIgnoreCase("NonSubscribedUser"))
 	{
 		extent.HeaderChildNode("T1073 - Logged in user- Check if on tapping Edit Profile user is directed to Edit Profile Screen ");
 		System.out.println("T1073");
 		extent.extentLogger("Profile", "T1073");
 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		waitTime(3000);
 		verifyElementPresentAndClick(HipiProfilePage.objEditProfile, "Edit Profile");
 		waitTime(3000);
 		
 			if(verifyElementPresent(HipiProfilePage.objEditprofilepage, "Edit Profile page")){
 			logger.info("User is redirect to Edit Profile Screen.");
 			extent.extentLoggerPass("Edit Profile","User should is to Edit Profile Screen.");
 			}else{
 			logger.info("User is not able to redirect to Edit Profile Screen");
 			extent.extentLoggerFail("Edit Profile","User is not able to redirect to Edit Profile Screen");
 			}
 		navigateToHomePage();	
 }	
 }



 //************************************4daY***********************************************
 //TC1112_1_Logged in user -Check the video saved as draft is displayed in profile/account detail screen
 public void verifyVideoSavedAsDraftIsDisplayedInProfileScreen__T1112(String userType) throws Exception
 {
 	if(userType.equalsIgnoreCase("NonSubscribedUser"))
 	{
 		extent.HeaderChildNode("T1112 - Logged in user -Check the Video Saved as Draft is Displayed in Profile/account Detail Screen");
 		System.out.println("T1112");
 		extent.extentLogger("Profile", "T1112");
 		
 		addvideoDraft();
 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		if(verifyElementPresent(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page"))
 		{
 			logger.info("Video saved and displayed in profile/account page");
 			extent.extentLoggerPass("Draft","Video saved and displayed in profile/account page");
 			}else
 			{
 			logger.info("Video not saved and displayed in profile/account page");
 			extent.extentLoggerFail("Draft","Video not saved and displayed in profile/account page");
 			}
 		navigateToHomePage();	
 }	
 		}
 		
 public void verifyDraftedVideoIsDeletedWhenUserTapsOnYesOnTheDeletePopup__T1140(String userType) throws Exception
 {
 	if(userType.equalsIgnoreCase("NonSubscribedUser"))
 	{
 		extent.HeaderChildNode("T1140 - Logged in user - Check if user is able to delete a selected video saved in \"draft\"");
 		System.out.println("T1140");
 		extent.extentLogger("Profile", "T1140");
 		addvideoDraft();
 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
 		
 		verifyElementPresent(HipiProfilePage.objDraftpage, "Draft Page");
 		
// 		longPress(HipiProfilePage.objVideoDraftPage);
// 		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup icon");
// 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
 		deleteDraftVideo(userType);
 		
 		if(verifyElementPresent(HipiProfilePage.objnotPublishedDraftVideo, "Not Published Draft Video"))
 		{
 			logger.info("Drafted video is deleted when tap on yes button, and shouldnt be visible in draft tab or local memory");
 			extent.extentLoggerPass("Draft","Drafted video is deleted when tap on yes button, and shouldnt be visible in draft tab or local memory");
 			}else
 			{
 			logger.info("Drafted video is not deleted when tap on yes button, and shouldnt be visible in draft tab or local memory");
 			extent.extentLoggerFail("Draft","Drafted video is not deleted when tap on yes button, and shouldnt be visible in draft tab or local memory");
 			}
 		navigateToHomePage();	
 		 }	
 		}
 		

 public void verifyDraftedVideoIsNotDeletedWhenUserTapOnNoButton__T1144(String userType) throws Exception
 {
 	if(userType.equalsIgnoreCase("NonSubscribedUser"))
 	{
 		extent.HeaderChildNode("Logged in user- Check if drafted video is not deleted when he tap on No");
 		System.out.println("T1144");
 		extent.extentLogger("Profile", "T1144");
 		addvideoDraft();
 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
 		verifyElementPresent(HipiProfilePage.objDraftpage, "Draft Page");
 		String videodes = getText(HipiProfilePage.objVideoDraftPage);
 		System.out.println(videodes);
 		longPress(HipiProfilePage.objVideoDraftPage);
 		verifyElementPresent(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup ");
 		verifyElementPresentAndClick(HipiProfilePage.objDeleteNoButton, "Delete No Button");
 		String videodesAfterClickOnNo = getText(HipiProfilePage.objVideoDraftPage);
 		if (videodes.equals(videodesAfterClickOnNo)) {
 			logger.info("Drafted video is not able to deleted when user tap on No");
 			extent.extentLoggerPass("Draft","Drafted video is not able to deleted when user tap on No");
 			}else{
 			logger.info("Drafted video is to be deleted when user tap on No ");
 			extent.extentLoggerPass("Draft","Drafted video is to be deleted when user tap on No ");
 			}
 			navigateToHomePage();	
 			}	
 		}
 
 
 
 
//=========================================N========================================================


//------------------------------------------Hold-------------------------------------------
public void verifyUserIsAbleToEditTheDOBOfTheLoggedInUser_T1087(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("Nonsubscribeduser"))
	{
		extent.HeaderChildNode("Logged in user - Check if user can edit the DOB of the logged in user [if DOB entered while creation]");
		System.out.println("T1087");
		extent.extentLogger("Profile_Edit", "T1087");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitTime(3000);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objEditProfile, "Edit Profile");
		waitTime(3000);
		if(verifyElementPresent(HipiProfilePage.objEditprofilepage, "Edit profile page"))
		{
			logger.info("user Is able To see edit profile page");
			extent.extentLoggerPass("Edit profile page", "user is able To see edit profile page");
		}else
		{
			logger.info("user Is not able To see edit profile page");
			extent.extentLoggerFail("Edit profile page", "user is not able To see edit profile page");
		}
		navigateToHomePage();
	}
}
//*************************************************************************************************************************
//2.Logged in user -Check user is able to enter characters in Bio
public void verifyUserIsAbleToEnterCharactersInBio_T1089(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("Nonsubscribeduser"))
	{
		extent.HeaderChildNode("T1089 - Logged in user -Check user is able to enter characters in Bio");
		System.out.println("T1089");
		extent.extentLogger("Bio", "T1089");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitTime(3000);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objEditProfile, "Edit Profile");
		waitTime(3000);
		verifyElementPresent(HipiProfilePage.objEditprofilepage, "Edit profile page");
		verifyElementPresentAndClick(HipiProfilePage.objBiotab, "Bio tab");
		waitTime(3000);
	    verifyElementPresent(HipiProfilePage.objBiopage, "Bio page");
	    waitTime(3000);
	    verifyElementPresentAndClick(HipiProfilePage.objBioNametextfield, "Name textfield");
	      String text = getParameterFromXML("BioText");
        type(HipiProfilePage.objBioNametextfield, text, "Name textfield");
        hideKeyboard();	
        String Sendedvalue = getText(HipiProfilePage.objBioNametextfield);
        System.out.println(Sendedvalue); 
        if(text.equals(Sendedvalue))
        {
        	logger.info("User is able to add bio "  +"" + Sendedvalue);
        	extent.extentLoggerPass("Profile_Edit", "user is able to add bio "  + ""+ Sendedvalue);
        }else{
        	logger.info("User is not able to add bio ");
        	
        	extent.extentLoggerFail("Profile_Edit", "User is not able to add bio ");
        }

navigateToHomePage();
}
}
//------------------------------------------------------------------------------------------------------------------
                                               //4day
//-------------------------------------------------------------------------------------------------------------------
//1.Logged in user  - Check if follow cta is provided to enable the user to follow the followers and on Tapping 'Follow' 

public void ToVerifyUserIsEnableTheFollowTheFollowersOnTapingOnFollowCta_T1102(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("Nonsubscribeduser"))
	{
		extent.HeaderChildNode("1102 - Check if follow cta is provided to enable the user to follow the followers and on Tapping Follow_T1102");
		System.out.println("1102");
		extent.extentLogger("Profile_Followers", "1102");
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");	
	waitTime(4000);
	verifyElementPresent(HipiProfilePage.objFollowerstab,"Followers page" );
	waitTime(4000);
	verifyElementPresentAndClick(HipiProfilePage.objFollowingbutton_followingTab, "Follow button");
	waitUntilElementDisplayed(HipiProfilePage.objFollowingbutton, 2);
	if(verifyElementPresent(HipiProfilePage.objFollowingbutton, "Following button"))
	{
			logger.info("User should be able to see follow cta along with user details and by tap on follow cta,user should be following the follower");
			extent.extentLoggerPass("Followers", "User should be able to see follow cta along with user details and by tap on follow cta,user should be following the follower");
		}else
		{
			logger.info("User is not be able to see follow cta along with user details and by tap on follow cta,user should be following the follower");
			extent.extentLoggerFail("Followers", "User is not be able to see follow cta along with user details and by tap on follow cta,user should be following the follower");
		}
		navigateToHomePage();
	}
	}


 
//---------------------------------------------------K--------------------------------------------------
 
 public void installHipimarketBuild() throws Exception {
		extent.HeaderChildNode("Install market build");
		logger.info("Install market build");
		logger.info("Uninstalling zee5");
		extent.extentLogger("", "Uninstalling zee5");
		Runtime.getRuntime().exec("adb uninstall com.zee5.hipi");
		waitTime(3000);
		logger.info("Clearing play store app data");
		extent.extentLogger("", "Clearing play store app data");
		Runtime.getRuntime().exec("adb shell pm clear -n com.android.vending");
		waitTime(3000);
		logger.info("Launching Play store");
		extent.extentLogger("", "Launching Play store");
		Runtime.getRuntime().exec("adb shell am start -n com.android.vending/com.android.vending.AssetBrowserActivity");
		waitTime(3000);
		installHipiApp();
	}
 
 
 public void installHipiApp() throws Exception {
		logger.info("Install Hipi");
		extent.HeaderChildNode("Install Hipi");
		waitTime(4000);
		click(HipiAppUpgrade.objplaystoreSearch, "Edit field");
		type(HipiAppUpgrade.objplaystoreSearch, "Hipi", "Edit field");
		hideKeyboard();
		verifyElementPresentAndClick(HipiAppUpgrade.objInstallButton, "Install button");
		waitForElementAndClickIfPresent(HipiAppUpgrade.objOpenButton, 100, "Open CTA");
	}
 
 	public void addVideoPrivate(String userType) throws Exception {
 		
 		 verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
 		allowPermissions(); 
 		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon");
 		waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton, 30);
 		verifyElementPresentAndClick(HipiCreateVideoPage.objNextButton, "Next Button");
 		waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 30);
 		verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription, "Description input");
 		String postDescription = "Description";
 		type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
 		waitTime(3000);
 		hideKeyboard();
 		verifyElementPresentAndClick(HipiCreateVideoPage.objPublicButton, "Public Button");
 		waitTime(2000);
 		verifyElementPresentAndClick(HipiCreateVideoPage.objPrivateButton, "Private Button");
 		waitTime(2000);
 		click(HipiCreateVideoPage.objpostbtn, "Post Button");
 		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
 		waitUntilElementDisplayed(HipiHomePage.objForYou, 30);
 	}
 
 public void addvideoDraft() throws Exception {
	
	 verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
	allowPermissions(); 
	verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton, 4000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objNextButton, "Next Button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 4000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription, "Description input");
	String postDescription = "Description";
	type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
	waitTime(3000);
	hideKeyboard();
	waitTime(3000);
//	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//	waitTime(3000);
	if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
	{
		click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//		click(HipiCreateVideoPage.objDoneCTC, "Done Button");
	}else {
		logger.info("User is unable to See Language Options");
		extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
		
	}
	verifyElementPresentAndClick(HipiCreateVideoPage.objsaveasdraft, postDescription);
	waitUntilElementDisplayed(HipiHomePage.objForYou, 5);
	verifyElementPresent(HipiHomePage.objForYou, "For you");
	
	 
 }
 public void deleteDraftVideo(String userType) throws Exception {
	
	
	 for(int i=1; i<=30; i++) {	
		 if (verifyElementExist(HipiProfilePage.objVideoDraftPage,"Video Draft Page")) {
			 longPress(HipiProfilePage.objVideoDraftPage);
		 		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup icon");
		 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
//				logger.info("user is able to delete the Draft Video");
//				extent.extentLoggerPass("", "user is able to delete the Draft Video");
		 		
		 }	else {
			if (verifyElementExist(HipiProfilePage.objnotPublishedDraftVideo, "Not Published Draft Video")) {
				logger.info("user is able to delete the Draft Video");
				extent.extentLoggerPass("", "user is able to delete the Draft Video"); 
				break;
			}
				
			
			 
		
		}
	 	} 
	 
	 
	 
 }
 //-----------------------------------K(Profile)-----------------------------------------------------------
 
 
 public void ableToUpdateName__T1079(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("Nonsubscribeduser")){
			extent.HeaderChildNode("T1079 - Logged in user - Check if user is able to update name");
			System.out.println("T1079");
			extent.extentLogger("Profile_Followers", "T1079");
	 
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			
			verifyElementPresent(HipiProfilePage.objEditProfileTitle,"Edit Profile Title");
			verifyElementPresentAndClick(HipiProfilePage.objNameValue, "Name Value");
			waitTime(2000);
			clearField(HipiProfilePage.objNameTextFeald, "Cleare data");
			
			String name = getParameterFromXML("FullNmae");
			type(HipiProfilePage.objNameTextFeald, name, "Enter name");
			String  enterName= getText(HipiProfilePage.objNameTextFeald);
			 System.out.println(enterName);
			 if (enterName.contains(name)) {
				 logger.info("User is able to update name." + enterName);	
				 extent.extentLoggerPass("", "User is able to update name." + enterName);
			}else {
				logger.info("User is not able to update name.");	
				extent.extentLoggerFail("", "User is not able to update name.");		
			}
			navigateToHomePage();
	 }
 }
 
 
//----------------------------------------Settings-------------------------------------------------------
 
 
 public void verifyEnterEmailAddressScreen(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("Guest")){
			extent.HeaderChildNode("Check if tapping on Use Email is taking user to Enter email address screen ");
			System.out.println("T733");
			extent.extentLogger("Profile_Followers", "T733");
			
			
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(5000);
			
	 }
 } 
 
//---------------------------------------------------
 
 public void trim() throws Exception {
	 
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
			logger.info("User is navigated to Video Creation screen");
	    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
	    }else {
	    	logger.info("User is not navigated to Video Creation screen");
	    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
		if(verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
			logger.info("User is able to navigate to the Sound screen");
	    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
	    }else {
	    	logger.info("User is not able to navigate to the Sound screen");
	    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
		}
		waitTime(5000);
		click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound search Text Field");
		type(HipiCreateVideoPage.objSoundScreenSearchField,"mahi", "Sound TextField");
		if(verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"Suggestion")) {
			logger.info("suggested records has been displayed");
	    	extent.extentLoggerPass("Suggestions", "suggested records has been displayed");
	    }else {
	    	logger.info("suggested records has failed to displayed");
	    	extent.extentLoggerFail("Suggestions", "suggested records has failed to displayed"); 
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"Existing record");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
		waitTime(10000);
		String expectedText=getText(HipiCreateVideoPage.objMusicScreenHeader);
		logger.info(" Expected Text"+expectedText);
	 
	 
	  WebElement element = getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle);
	    String xDuration = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
	    System.out.println(xDuration);
	    int endX = Integer.parseInt(xDuration) - 50;
	    SwipeAnElement(element, endX, 0);
	    Dimension size1= getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle).getSize();
	    System.out.println(size1);
	    String xDuration2 = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
	    System.out.println(xDuration2);
	    if(xDuration.equals(xDuration2) == false){
	    	logger.info("User is able to trim sound from trimming screen");
			extent.extentLoggerPass("AddSoundPreShoot", "User is able to trim sound from trimming screen");
	    }else {
	    	logger.error("User is NOT able to trim sound from trimming screen");
			extent.extentLoggerFail("AddSoundPreShoot", "User is NOT able to trim sound from trimming screen");
	    }
	     click(HipiAddMusicPage.objSelectMusicBtn,"Select music icon");
	     Boolean value16 = verifyElementExist(HipiAddMusicPage.objSelectedMusicInRecordingScreen, "Recording Screen with selected Music on Top");
			if(value16 == true) {
				logger.info("User is be able to trim sound from trimming screen and able to apply it on video");
				extent.extentLoggerPass("AddSoundPreShoot", "User is be able to trim sound from trimming screen and able to apply it on video");
			}else {
				logger.error("User is be unable to trim sound from trimming screen and unable to apply it on video");
				extent.extentLoggerFail("AddSoundPreShoot", "User is be unable to trim sound from trimming screen and unable to apply it on video");
			}
 }

 
 public void trimVolume() throws Exception {
	 
	 verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
			logger.info("User is navigated to Video Creation screen");
	    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
	    }else {
	    	logger.info("User is not navigated to Video Creation screen");
	    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		 waitTime(20000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenVoulmebtn, "Edit Screen Voulme btton,");
		waitTime(4000);
	 verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		Boolean a = verifyElementExist(HipiSoundDetailPage.objMicrophoneEnabled,"Microphone with volume bar");
		String Value = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
		System.out.println(Value);
		logger.info(Value);
		if((a == true)) {
			logger.info("Microphone with volume bar is 'enabled' when video is created with original sound");
			extent.extentLoggerPass("AddSoundPostShoot", "Microphone with volume bar is 'enabled' when video is created with original sound");
		}else {
			logger.error("Microphone with volume bar is Not 'enabled' when video is created with original sound");
			extent.extentLoggerFail("AddSoundPostShoot", "Microphone with volume bar is Not'enabled' when video is created with original sound");
				}
		verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		Boolean v = verifyElementExist(HipiSoundDetailPage.objMicrophoneMinValue,"Microphone with volume bar");
		String Value2 = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
		System.out.println(Value2);extent.extentLogger("", Value2);
		logger.info(Value2);
		if((v == true)) {
			logger.info("Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
			extent.extentLoggerPass("AddSoundPostShoot", "Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
		}else {
			logger.error("Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
			extent.extentLoggerFail("AddSoundPostShoot", "Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
				}
		
//	 verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
		DecreaseMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar);
	    String currentvolume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
	    System.out.println(currentvolume);extent.extentLogger("", "Volume after Decrease : "+currentvolume);
	    int k=Integer.parseInt(currentvolume);
	    IncreasingMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar); 	
	    String volume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
	    System.out.println(volume);extent.extentLogger("", "Volume after Decrease : "+volume);
	    int l=Integer.parseInt(volume);
	    if(l>k) {
	    	logger.info("user is able to increase the volume of the Music enabled on original sound");
			extent.extentLoggerPass("AddSoundPostShoot", "user is able to increase the volume of the Music enabled on original sound");
		}else {
			logger.error("user is Unable to increase the volume of the Music enabled on original sound");
			extent.extentLoggerFail("AddSoundPostShoot", "user is Unable to increase the volume of the Music enabled on original sound");
			}	
	    
	

	 
 }
 //-------------------------------------------k(FeedP1TCs)------------------------------------------------------
 
 
 public void userPauseAndPlayVideoFollowingTab__T429(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T429 - Logged in User - Check if user is able to pause and play the video in Following tab");
			System.out.println("T429");
			extent.extentLogger("", "T429");
	 
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
	 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}
			PausePlayer();
			pauseVideo();
		//	logger.info("Hipi feed screen:" + "ClickCoodinate() used to pause the video of feed screen");
			if (verifyElementExist(HipiHomePage.objplaybutton, "Play button")) {
				logger.info("Hipi feed screen:" + "Paused the Player");
				extent.extentLoggerPass("Hipi feed screen:", "Paused the Player");
				click(HipiHomePage.objplaybutton, "Play button");
			} else {
				extent.extentLoggerFail("Hipi feed screen:", "Dint pause the player");
				logger.info("Hipi feed screen:" + "Dint pause the player");
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	 
	 }
 }
 
 public void userAbleToSeeTheListOfActionableItems__T432(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T432 - Logged in User - Check if user is able to see the list of actionable items for a video");
			System.out.println("T432");
			extent.extentLogger("", "T432");
			
			 
					verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
					if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
						logger.info("User is able to switch Following the section");	
						extent.extentLoggerPass("", "User is able to switch Following the section");
					}else {
						logger.info("User is able to switch Following section");	
						extent.extentLoggerFail("", "User is able to switch Following section");	
					}
					verifyElementPresent(HipiHomePage.objProfilePicture, "Profile Picture");
//					verifyElementPresent(HipiHomePage.objPlusFollowICON, "Plus Follow Icon");
					verifyElementPresent(HipiHomePage.objLikeICON, "Like Icon");
					verifyElementPresent(HipiHomePage.objShareICON, "Share Icon");
					SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
					waitTime(3000);
//					verifyElementPresent(HipiHomePage.objSaveLook, "Save look CTA");
					verifyElementPresent(HipiHomePage.objShopButton, "Shop CTA");
					verifyElementPresent(HipiHomePage.objDescription, "User name");
//					verifyElementPresent(HipiHomePage.objHeartICON, "Heart Icon");
					SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
					verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
					verifyElementPresent(HipiHomePage.objHashtagButtonDescription, "Hashtag Description ");
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	 
			 }

	 }

 
 public void  resumePausedVideoByTappinG__T434(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T434 - Logged in User - Check if user is able to resume a paused video by tapping on it");
			System.out.println("T434");
			extent.extentLogger("", "T434");
	 
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}
			verifyElementPresentAndClick(HipiHomePage.objPlayerScreen, "Player Screen");
			if (verifyElementPresent(HipiHomePage.objplaybutton,"Paused Button")) {
				logger.info("Default played video is paused with a paused icon displayed over the video.");	
				extent.extentLoggerPass("For You", "Default played video is paused with a paused icon displayed over the video.");
			}else {
				logger.info("Default played video is not paused with a paused icon displayed over the video.");	
				extent.extentLoggerFail("For You", "Default played video is not paused with a paused icon displayed over the video.");
			}
			click(HipiHomePage.objPlayerScreen, "Player Screen");
			waitTime(4000);
			if (verifyElementExist(HipiHomePage.objplaybutton,"Paused Button")) {
				logger.info("Taping on paused icon video not starts playing.");	
				extent.extentLoggerFail("For You", "Taping on paused icon video not starts playing.");
			}else {
				logger.info("Taping on paused icon video starts playing.");	
				extent.extentLoggerPass("For You", "Taping on paused icon video starts playing.");
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	 }
 }

 public void followUser() throws Exception
 {
	 for(int i=1;i<3;i++)
		{
		 SwipeUntilFindElement(HipiHomePage.objPlusFollowICON, "UP");
			if(verifyElementPresent(HipiHomePage.objPlusFollowICON, "Plus icon"))
			{
				
				click(HipiHomePage.objPlusFollowICON, "Plus icon");
				Swipe("UP", 1);
			}
			else
			{
				break;
			}
		}
 }
 
 public void  actionsPresentOnLongPressPopup__T437(String userType) throws Exception {
	 
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T437 - Logged in User - Check the list of actions present on long press popup of a video");
			System.out.println("T437");
			extent.extentLogger("", "T437");
			
			followUser();
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(5000);
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}
	 
			longPress(HipiHomePage.objPlayerScreen);
			Thread.sleep(5000);
			verifyElementPresent(HipiHomePage.objSaveVideo, "Save Video");
			verifyElementPresent(HipiHomePage.objAddToFavourites, "Add To Favourites");
			verifyElementPresent(HipiHomePage.objReport, "Report");
			verifyElementPresent(HipiHomePage.objNotInterested, "Not Interested");
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	 
	 }
 }
 

	
 public void redirectedFeedScreenTappingBackSoundDetailScreen__T454(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T454 - Logged in user - Check if user is able is redirected to 'Feed' screen on tapping on 'back' in Sound Detail Screen");
			System.out.println("T454");
			extent.extentLogger("", "T454");
	 
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			} 
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			if(verifyElementExist(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
//				logger.info("User is able to see shop button");	
				extent.extentLoggerPass("", "User is able to see sound button");
//				click(HipiHomePage.objShopButton, "Shop Button");
			}else {
				waitTime(5000);
				SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
				//click(HipiHomePage.objShopButton, "Shop Button");
			}		
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
			
			if(verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title")){
				logger.info("User is able to navigate to Sound details page");	
				extent.extentLoggerPass("", "User is able to navigate to Sound details page");
			}else {
				logger.info("User is not able to navigate to Sound details page");	
				extent.extentLoggerFail("", "User is not able to navigate to Sound details page");	
			}
			Back(1);
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is navigate to HiPi home screen on tapping 'Back ' icon on device");	
				extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'Back ' icon on device");
			}else {
				logger.info("User is not navigate to HiPi home screen on tapping 'Back ' icon on device");	
				extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'Back ' icon on device");	
			}
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	 
	 }
 	}
 
 public void saveVideoActionByTapping__T472(String userType) throws Exception {
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T472 - Logged in User - Check if user is able to perform \"Save Video\" action by tapping on it");
			System.out.println("T472");
			extent.extentLogger("", "T472");
	 
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
	 
			longPress(HipiHomePage.objPlayerScreen);
			Thread.sleep(5000);
			verifyElementPresent(HipiHomePage.objSaveVideo, "Save Video");
			Back(1);
			if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
				logger.info("User is navigate to HiPi home screen on tapping 'back' icon on device");	
				extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'back' icon on device");
			}else {
				logger.info("User is not navigate to HiPi home screen on tapping 'back' icon on device");	
				extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'back' icon on device");	
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
	 }
 }
 
 public void verifyShareScreen__T474(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T474 - Logged in User- Check if 'Share' screen is displayed when tapped on Share video [-> Icon]");
			System.out.println("T474");
			extent.extentLogger("", "T474");
			followUser();
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
			SwipeUntilFindElement(HipiHomePage.objShareICON, "UP");
			verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon");
			boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
			if (isShareOption) {
				logger.info("User is navigated share options screen");
				extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
				int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
				if (shareOptions == 0) {
					extent.extentLoggerFail("Verify share options", "Share Options are not available");
					logger.info("Share Options are not available");
				} else {
					for (int i = 2; i <= shareOptions; i++) {
						String shareOptionName = getText(HipiHomePage.objShareoptions(i));
						logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
						extent.extentLoggerPass("Share Option ",
								"Share Option : \"" + shareOptionName + "\" is available to share");
					}
				}
			} else {
				logger.info("Share Options are not displayed after clicking on Share CTA");
				extent.extentLoggerFail("Share through options screen",
						"Share Options are not displayed after clicking on Share CTA");
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
		}
			
	 
	 
	 } 
 
 
 
 public void verifyProfileDetailsScreen__T486(String userType) throws Exception {
	 
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T486 - Logged in User - Check if 'Profile details' screen is displayed when tapped on Profile picture of a video");
			System.out.println("T486");
			extent.extentLogger("", "T486");
	 
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
	 
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is re-direct to profile screen.");	
				extent.extentLoggerPass("Profile_Following", " User is re-direct to profile screen.e");
			}else {
				logger.info(" User is not  re-direct to profile screen.");	
				extent.extentLoggerFail("Profile_Following", " User is not re-direct to profile screen.");	
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
			
	 }
 }
 
 
 public void ShareValidationConsumptionScreen(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("Verify Share CTA functionality");
		System.out.println("\nVerify Share CTA functionality");

		verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon");
		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
		if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
			if (shareOptions == 0) {
				extent.extentLoggerFail("Verify share options", "Share Options are not available");
				logger.info("Share Options are not available");
			} else {
				for (int i = 2; i <= shareOptions; i++) {
					String shareOptionName = getText(HipiHomePage.objShareoptions(i));
					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName + "\" is available to share");
				}
			}
		} else {
			logger.info("Share Options are not displayed after clicking on Share CTA");
			extent.extentLoggerFail("Share through options screen",
					"Share Options are not displayed after clicking on Share CTA");
		}
		Back(1);
		
	}

 		public void  verifyOtherUserComments(String comment) throws Exception {
// 			int  c= ;
//			int count = count;
// 			int count;
 		 for(int i=1; i<=25; i++) {
 			 
 		if(verifyElementExist(HipiHomePage.objFirstCommentUserName, "First Comment user name")){
 			logger.info("First Comment user name is displayed when user click on comment");
			extent.extentLoggerPass("","First Comment user name is displayed when user click on comment");
			
			break ;
 		}else {
			Back(1);
			Swipe("UP", 1);
			String cout = getText(HipiHomePage.objCommentCount);
//			String count=Integer.parseInt(cout);
			verifyElementExist(HipiHomePage.objCommentICON, "Comment icon");
			click(HipiHomePage.objCommentICON, "Comment icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
//			return count;
		}
 		
 		 }
//		return count;
		
		
		
		
	}
	
 		
 		
 		
 	public void verifyProfilePicture__T514(String userType) throws Exception {
 		
 		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
 			extent.HeaderChildNode("T514 - Logged in User - Check if user is able to view profile picture if user uploaded the picture");
 			System.out.println("T514");
 			extent.extentLogger("", "T514");	
 			followUser();
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 10);
 			verifyOtherUserComments(userType);
 			click(HipiHomePage.objFirstCommentUserName, "First Comment user name");
 			waitUntilElementDisplayed(HipiProfilePage.objProfilePicture, 10);
 			if(verifyElementPresent(HipiProfilePage.objProfilePicture, "Profile Header")){
				logger.info("User is able to view profile picture if user uploaded the picture");	
				extent.extentLoggerPass("", "User is able to view profile picture if user uploaded the picture");
			}else {
				logger.info("User is able to view profile picture if user uploaded the picture");	
				extent.extentLoggerFail("", "User is able to view profile picture if user uploaded the picture");	
			}
 			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
 	
 		 }
 	}	
 		
 		
 	public void verifyProfilePictureOfAnotherViewer__T504(String userType) throws Exception {
 		
 		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
  			extent.HeaderChildNode("T504 - Logged in User - On existing comments check 'profile picture' of another viewer is displayed , who has commented on the video");
  			System.out.println("T504");
  			extent.extentLogger("", "T504");	

			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
			 verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
			 waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			 verifyOtherUserComments(userType);
			if(verifyElementPresent(HipiHomePage.objOtherUserProfilePicture, "Another viewer Profile Picture")){
				logger.info("User is able to view profile picture of another viewer, who has commented on the video");	
				extent.extentLoggerPass("", "User is able to view profile picture of another viewer, who has commented on the video");
			}else {
				logger.info("User is not able to view profile picture of another viewer, who has commented on the video");	
				extent.extentLoggerFail("", "User is not able to view profile picture of another viewer, who has commented on the video");	
			}  
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
 		 }
 	}	
 		
 		
 	public void  verifyTagUserInComment__T512(String userType) throws Exception {
 		
 		
 		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("T512 - Logged in User - Check if user is able to tag user in comment and then post comment");
   			System.out.println("T512");
   			extent.extentLogger("", "T512");	
   			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
 		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
 		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 		click(HipiHomePage.objAddAComment, "Add A Comment");
 		waitTime(3000);
 		type(HipiHomePage.objAddAComment, "@Shraddhaarya ", "Add A Comment");
 		hideKeyboard();
 		String tagComment = getText(HipiHomePage.objAddAComment);
 		
 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
 		waitTime(8000);
 		 String comment = getText(HipiHomePage.objFirstComment);
		 System.out.println(comment);
	if (comment.contains("@Shraddhaarya Few seconds ago")) {
		logger.info("User is able to tag user in comment and then post comment");	
		extent.extentLoggerPass("", "User is able to tag user in comment and then post comment");
		}else {
		logger.info("User is not able to tag user in comment and then post comment");	
		extent.extentLoggerFail("", "User is not able to tag user in comment and then post comment");
		}
	navigateToHomePage();
	verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
	navigateToHomePage();
 		
 		 }
 	}	
 		
 	public void verifylikeCountOfComment__T517(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
  			extent.HeaderChildNode("Logged in User - Check if user is able to see like count of a comment");
  			System.out.println("T517");
  			extent.extentLogger("", "T517");	
  			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			 verifyOtherUserComments(userType);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			String likeCountCommentScreen = getText(HipiHomePage.objLikeCountCommentScreen);
			
			if (verifyElementPresent(HipiHomePage.objLikeCountCommentScreen, "Like Icon")) {
				logger.info("Like count is " + likeCountCommentScreen);	
				extent.extentLoggerPass("", "Like count is " + likeCountCommentScreen);
			}else {
				logger.info("Like count is not displayed");	
				extent.extentLoggerFail("", "Like count is not displayed");	
			}  
			
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();

			
		 }
 	}	
 	
 	public void  viewerCreatorIsAbleToLike__T515(String userType) throws Exception {
 		
 		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("Logged in User - Check if viewer/creator is able to like a existing/new comment by tapping heart Icon next to comment description");
   			System.out.println("T515");
   			extent.extentLogger("", "T515");	
   			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			verifyOtherUserComments(userType);
			String likeCountCommentScreenBefore = getText(HipiHomePage.objLikeCountCommentScreen);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			String likeCountCommentScreenAfter = getText(HipiHomePage.objLikeCountCommentScreen);
   			
			if (!likeCountCommentScreenBefore.equals(likeCountCommentScreenAfter)) {
				logger.info("User is  able to like the video");	
				extent.extentLoggerPass("", "User should  able to like the video");
			}else {
				logger.info("User is not able to like the video");	
				extent.extentLoggerFail("", "User is not able to like the video");
			}	
			navigateToHomePage();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			String likeCountCommentScreenBefore1 = getText(HipiHomePage.objLikeCountCommentScreen);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			String likeCountCommentScreenAfter1 = getText(HipiHomePage.objLikeCountCommentScreen);
   			
			if (!likeCountCommentScreenBefore1.equals(likeCountCommentScreenAfter1)) {
				logger.info("User is  able to like the video");	
				extent.extentLoggerPass("", "User should  able to like the video");
			}else {
				logger.info("User is not able to like the video");	
				extent.extentLoggerFail("", "User is not able to like the video");
			}	
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
			navigateToHomePage();
 		 }
 	}
 	
 	
 	
 	public void  performReportActionByTapping__T470(String userType) throws Exception {
 		
 		
 		extent.HeaderChildNode("Logged in User - Check is user is able to perform \"Report\" action by tapping on it");
			System.out.println("T470");
			extent.extentLogger("", "T470");	
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		 
		if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
			logger.info("User is able to switch Following the section");	
			extent.extentLoggerPass("", "User is able to switch Following the section");
		}else {
			logger.info("User is able to switch Following section");	
			extent.extentLoggerFail("", "User is able to switch Following section");	
		}  	
		
		longPress(HipiHomePage.objPlayerScreen);
		Thread.sleep(5000);
 		verifyElementPresentAndClick(HipiHomePage.objReport, "Report Button");
 		verifyElementPresent(HipiHomePage.objReportVideoTitle, "Report Video Title");
 		verifyElementPresentAndClick(HipiHomePage.objFirstReason, "Reason");
 		verifyElementPresentAndClick(HipiHomePage.objFirstReason, "Select Category");
 		verifyElementPresentAndClick(HipiHomePage.objReportDescription, "Report Description");
 		type(HipiHomePage.objReportDescription, "ummmmm", "Type Description");
 		hideKeyboard();
 		verifyElementPresentAndClick(HipiHomePage.objAttachmentOption, "Attachment Option");
 		waitTime(4000);
 		allowPermissions();
 		verifyElementPresentAndClick(HipiHomePage.objDoneOptionGalleryPage, "Done option");
 		waitTime(3000);
 		verifyElementPresentAndClick(HipiHomePage.objSubmitButtonReportVideoPage, "Submit button");
 		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
		navigateToHomePage();
 		
 	} 
 	public void checkIfUserIsAbleToViewProfilePictureIfUserUploadedThePicture_T165(String userType) throws InterruptedException, Exception
 	{
 		if(userType.equalsIgnoreCase("NonSubscribedUser"))
 		{
 			extent.HeaderChildNode("T165 - Logged in User - Check if user is able to view profile picture if user uploaded the picture_T165");
 			System.out.println("T165");
 			extent.extentLogger("Feed-ForYou_Comment","T165");
 			//verifyElementPresent(HipiHomePage.objForYou, "For You")
 			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
 			
 			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
 			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 			 verifyOtherUserComments(userType);
 			if(verifyElementPresent(HipiHomePage.objOtherUserProfilePicture, "Another viewer Profile Picture")){
 				logger.info("User is able to view profile picture of another viewer, who has commented on the video");	
 				extent.extentLoggerPass("", "User is able to view profile picture of another viewer, who has commented on the video");
 			}else {
 				logger.info("User is not able to view profile picture of another viewer, who has commented on the video");	
 				extent.extentLoggerFail("", "User is not able to view profile picture of another viewer, who has commented on the video");	
 			}  
 			navigateToHomePage();
 			
 	}
 	}
 	
 	public void viewNumberOfCommentsOnPlayedPausedVideo__T144(String userType) throws Exception {
 		
 		if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("Logged in User - Check if user is able to view number of comments on played/paused video");
   			System.out.println("T144");
   			extent.extentLogger("", "T144");	
   			
   			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
   			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
   			
   			verifyOtherUserComments(userType);
   			verifyElementPresent(HipiHomePage.objLikeCountCommentScreen, "Like count");
   			String likeCount = getText(HipiHomePage.objLikeCountCommentScreen);
   			
   			System.out.println(likeCount);
   			if (verifyElementPresent(HipiHomePage.objLikeCountCommentScreen, "Like count")) {
   				logger.info("User is able to view number of comments for played video and like count is " + likeCount);	
 				extent.extentLoggerPass("", "User is able to view number of comments for played video and like count is " + likeCount);
 			}else {
 				logger.info("User is not able to view number of comments for played video");	
 				extent.extentLoggerFail("", "User is not able to view number of comments for played video");	
 			}  
   			navigateToHomePage();
 		}
 	}
 	
 	public void addMultipleComments(int text) throws Exception {
 		 for(int i=1; i<=text; i++) {	
 		
 		verifyElementPresentAndClick(HipiHomePage.objAddAComment, "Add a comment");
 		waitTime(3000);
 		String postDescription = "Desc"+GeneratingRandomString(7);
 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
 		hideKeyboard();
 		 }
 	}
 	
 	public void  verifyPerformverticalScrollCommentScreen_T148(String userType) throws Exception {
 		
 		
 		if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("T148 - Logged in User - Check if user is able to perform vertical scroll");
   			System.out.println("T148");
   			extent.extentLogger("", "T148");	
 		
   			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
   			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
//   			verifyOtherUserComments(userType);
   			addMultipleComments(10);
   		 String comment = getText(HipiHomePage.objFirstComment);
		 System.out.println(comment);
		 PartialSwipe("UP", 5);
		 String comment1 = getText(HipiHomePage.objFirstComment);
		 System.out.println(comment1);
		 if (!comment.equals(comment1)) {
				logger.info("User is allowed to perform vertical scroll.");	
				extent.extentLoggerPass("", "User is allowed to perform vertical scroll.");
				}else {
				logger.info("User is not allowed to perform vertical scroll.");	
				extent.extentLoggerFail("", "User is not allowed to perform vertical scroll.");
				}

		 navigateToHomePage();
 		
 		
 		}
 	}
 	
 	
 	public void userIsAbleToAddMultipleComments__T149(String userType) throws Exception {
 		
 		
 		if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("T149 - Logged in User - Check if user is able to add multiple comments");
   			System.out.println("T149");
   			extent.extentLogger("", "T149");	
   			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
   			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
//   			verifyOtherUserComments(userType);
   			addMultipleComments(10);
   			logger.info("User is able to add multiple comments");	
			extent.extentLoggerPass("", "User is able to add multiple comments");
			navigateToHomePage();
 		
 		}
 	}
 	
 	public void viewerCreatorAbleToLikeExistingNewComment__T166(String userType) throws Exception {
 		

 		if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("Logged in User - Check if viewer/creator is able to like a existing/new comment by tapping heart Icon next to comment description");
   			System.out.println("T166");
   			extent.extentLogger("", "T166");	
 		
 		
 		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
 		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
		verifyOtherUserComments(userType);
		String likeCountCommentScreenBefore = getText(HipiHomePage.objLikeCountCommentScreen);
		verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
		String likeCountCommentScreenAfter = getText(HipiHomePage.objLikeCountCommentScreen);
			
		if (!likeCountCommentScreenBefore.equals(likeCountCommentScreenAfter)) {
			logger.info("User is  able to like the video");	
			extent.extentLoggerPass("", "User should  able to like the video");
		}else {
			logger.info("User is not able to like the video");	
			extent.extentLoggerFail("", "User is not able to like the video");
		}	
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("Profile details' screen is displayed when tapped on name of a video description");	
			extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
		}else {
			logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
			extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
		}
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
		
		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
		verifyElementPresentAndClick(HipiHomePage.objAddAComment, "Add a comment");
 		waitTime(3000);
 		String postDescription = "Desc"+GeneratingRandomString(7);
 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
 		hideKeyboard();
		String likeCountCommentScreenBefore1 = getText(HipiHomePage.objLikeCountCommentScreen);
		verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
		String likeCountCommentScreenAfter1 = getText(HipiHomePage.objLikeCountCommentScreen);
			
		if (!likeCountCommentScreenBefore1.equals(likeCountCommentScreenAfter1)) {
			logger.info("User is  able to like the video");	
			extent.extentLoggerPass("", "User should  able to like the video");
		}else {
			logger.info("User is not able to like the video");	
			extent.extentLoggerFail("", "User is not able to like the video");
		}	
		navigateToHomePage();
 	}
 	
 		
 	}
 		public void verifyLikeCountofComment__T168(String userType) throws Exception {
 			if(userType.equalsIgnoreCase("NonSubscribedUser")){
 	   			extent.HeaderChildNode("Logged in User - Check if user is able to see like count of a comment");
 	   			System.out.println("T168");
 	   			extent.extentLogger("", "T168");	
 			
 	   			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
 	   		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			String likeCountCommentScreen = getText(HipiHomePage.objLikeCountCommentScreen);
			
			if (verifyElementPresent(HipiHomePage.objLikeCountCommentScreen, "Like Icon")) {
				logger.info("Like count is " + likeCountCommentScreen);	
				extent.extentLoggerPass("", "Like count is " + likeCountCommentScreen);
			}else {
				logger.info("Like count is not displayed");	
				extent.extentLoggerFail("", "Like count is not displayed");	
			}  
			navigateToHomePage();
 			}
 		}
 	
 		public void verifyForCloseIconCorouselSheet__T243(String userType) throws Exception {
 			if(userType.equalsIgnoreCase("NonSubscribedUser")){
 	   			extent.HeaderChildNode("T243 - Logged In user-Verify for Close icon on the bottom sheet corousel and its click");
 	   			System.out.println("T243");
 	   			extent.extentLogger("", "T243");	
 			
 	   			
// 	   		SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
// 	   		waitUntilElementDisplayed(HipiHomePage.objSaveLook, 1000);
//			click(HipiHomePage.objSaveLook, "Save Look");
			if (verifyElementExist(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet")) {
				logger.info("User able to see Close Button Carousel Sheet");	
				extent.extentLoggerPass("Shoppable Vidoes", "User able to see Close Button Carousel Sheet");
				click(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet");
			}else {
				logger.info("User not able to see Close Button Carousel Sheet");	
				extent.extentLoggerFail("Shoppable Vidoes", "User not able to see Close Button Carousel Sheet");
			}	
			if (verifyElementExist(HipiHomePage.objCloseButtonCarouselSheet, "Close Button Carousel Sheet")) {
				logger.info("User not able to see Close Button Carousel Sheet");	
				extent.extentLoggerFail("", "User not able to see Close Button Carousel Sheet");
		}else {
			logger.info("User not able to see Close Button Carousel Sheet");	
			extent.extentLoggerPass("", "User not able to see Close Button Carousel Sheet");
		}	
			navigateToHomePage();
		
 			}	
 			
 			
 		}
 		
 //----------------------------------------Login/Signup screen----------------------------------------------------
 		
 		public void verifyPleaseProvideValidPhoneNumber__T825(String userType) throws Exception {
 			
 			if(userType.equalsIgnoreCase("Guest")){
 	   			extent.HeaderChildNode("T825 - Check the error message as \"Please provide valid phone number\" when user enter invalid phone number");
 	   			System.out.println("T825");
 	   			extent.extentLogger("", "T825");	
 	   			
 	   		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 			
 		
 			
 			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String lessPhoneNumber = getParameterFromXML("LessPhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField, lessPhoneNumber, "Phone Number");	
			hideKeyboard();
			 String Password = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			
			if(verifyElementPresent(HipiLoginPage.objPleaseProvideValidPhoneNumberTosterMessage, "Please Provide Valid Phone Number Toster Message")){
				logger.info("User is get the error message as Please provide valid phone number when entered invalid phone number");	
				extent.extentLoggerPass("", "User is get the error message as Please provide valid phone number when entered invalid phone number");
			}else {
			logger.info("User is not get the error message as Please provide valid phone number when entered invalid phone number");	
			extent.extentLoggerFail("", "User is not get the error message as Please provide valid phone number when entered invalid phone number");
			}	
			navigateToHomePage();
 			}
 		}
 		
 		public void  enterLessThan10Digits__T824(String userType) throws Exception {
 			
 			if(userType.equalsIgnoreCase("Guest")){
 	   			extent.HeaderChildNode("T824 - Check the error message as \"Please provide valid phone number\" is displayed when user enter less than 10 digits in the Phone number field");
 	   			System.out.println("T824");
 	   			extent.extentLogger("", "T824");	
 	   			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 			
 		
 			
 			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 			waitTime(3000);
 			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String lessPhoneNumber = getParameterFromXML("LessPhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField, lessPhoneNumber, "Phone Number");	
			hideKeyboard();
			 String Password = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			
			if(verifyElementPresent(HipiLoginPage.objPleaseProvideValidPhoneNumberTosterMessage, "Please Provide Valid Phone Number Toster Message")){
				logger.info("Please provide valid phone number error message is get when entered less than 10 digits in phone number field");	
				extent.extentLoggerPass("", "Please provide valid phone number error message is get when entered less than 10 digits in phone number field");
			}else {
			logger.info("Please provide valid phone number error message is not get when entered less than 10 digits in phone number field");	
			extent.extentLoggerFail("", "Please provide valid phone number error message is not get when entered less than 10 digits in phone number field");
			}	
			navigateToHomePage();
 			
 			
 			
 			}	
 		}
 		
 		public void veryScrollUpTheMonth__T887(String userType) throws Exception
 	 	{
 	 		if(userType.equalsIgnoreCase("Guest")){
 	 		extent.HeaderChildNode("Guest user : Check if user is able to scroll up the month in Sign up screen for Phone Number ( T887 )");
 	 		System.out.println("T887");
	   		extent.extentLogger("", "T887");	
 	 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 	 		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 	 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
 			
 			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 			verifyElementPresent(HipiLoginPage.objDateField,"Date Field");
 			String DateText=getText(HipiLoginPage.objDateField);
 			VerifyScrollOfDatePickerDown();
 			VerifyScrollOfDatePickerDown();
 			VerifyScrollOfDatePickerUp();
 		String DateTextnew=getText(HipiLoginPage.objDateField);
 			if(DateText.equals(DateTextnew))
 			{
 				logger.info("User is not able to scroll the date");	
 				extent.extentLoggerFail("", "User is not able to scroll the date");
 			}else {
 				logger.info("User is able to Scroll the date");	
 				extent.extentLoggerPass("", "User is able to Scroll the date");	
 			}  	
 			navigateToHomePage();
 	 		
 	 		}
 	 		
 	 	}
 	
 		public void  enterInvalidPhoneNumber(String userType) throws Exception {
 			

 	 		if(userType.equalsIgnoreCase("Guest")){
 	 		extent.HeaderChildNode("Guest user : Check if user is able to scroll up the month in Sign up screen for Phone Number ( T887 )");
 	 		System.out.println("T887");
	   		extent.extentLogger("", "T887");	
	   		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	   		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String invaledPhoneNumber = getParameterFromXML("InvalideNumber");
			type(HipiLoginPage.objPhoneNumberTextField, invaledPhoneNumber, "Phone Number");	
			hideKeyboard();
			 String Password = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			if(verifyElementPresent(HipiLoginPage.objPleaseProvideValidPhoneNumberTosterMessage, "Please Provide Valid Phone Number Toster Message")){
				logger.info("User is get the error message as Please provide valid phone number when entered invalid phone number");	
				extent.extentLoggerPass("", "User is get the error message as Please provide valid phone number when entered invalid phone number");
			}else {
			logger.info("User is not get the error message as Please provide valid phone number when entered invalid phone number");	
			extent.extentLoggerFail("", "User is not get the error message as Please provide valid phone number when entered invalid phone number");
			}	
			navigateToHomePage();
 	 		}
 		}
 		
 		
 		public void verifyPleaseProvideYourFullName__T992(String userType) throws Exception {
 			if(userType.equalsIgnoreCase("Guest")){
 	 	 		extent.HeaderChildNode("T992 - Check if \"Please provide your Full Name\" message is displayed when user not enter Full name in Sign up screen");
 	 	 		System.out.println("T992");
 		   		extent.extentLogger("", "T992");		
 		   	navigateToSignUpScreen();
 			waitTime(5000);
 			 String year1995= getParameterFromXML("SelectYear1995");
 			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
 			
 			 click(HipiLoginPage.objSelectYear, "Select year");
 			 click(HipiLoginPage.objSelectYear, "Select year");
 			 hideKeyboard();
 			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
 			 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
 			 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
 			 hideKeyboard();
 			 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

 				
 				type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
 				Thread.sleep(5000);
 				hideKeyboard();
// 			 hideKeyboard();
// 			  String text = getText(AMDLoginScreen.objEmailIdField);
 			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
 			waitTime(2000);
 			verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
 			 String surName = getParameterFromXML("Surname");
 			 type(HipiLoginPage.objFullNameTextField, surName, "Enter Name");
 			 waitTime(4000);
 			 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 waitTime(2000);
 			 String Password = getParameterFromXML("NonsubscribedPassword");
 			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
 				type(AMDLoginScreen.objPasswordField, Password, "Password field");
 				hideKeyboard();
 				verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
 				
 				if(verifyElementPresent(HipiLoginPage.objPleaseProvideValidPhoneNumberTosterMessage, "Last name cannot be left empty")){
 					logger.info("Please provide your Full Name message is  displayed when user not enter Full name in Sign up screen");	
 					extent.extentLoggerPass("", "Please provide your Full Name message is  displayed when user not enter Full name in Sign up screen");
 				}else {
 				logger.info("Please provide your Full Name message is not displayed when user not enter Full name in Sign up screen");	
 				extent.extentLoggerFail("", "Please provide your Full Name message is not displayed when user not enter Full name in Sign up screen");
 				}	
 				navigateToHomePage();
 				
 			
 			}
 			
 		}
 		public void verifyUISignUpScreenForPhoneNumber__T895(String userType) throws Exception {
 			if(userType.equalsIgnoreCase("Guest")){
 	 	 		extent.HeaderChildNode("T895 - Check the UI of the Sign up screen for Phone Number");
 	 	 		System.out.println("T895");
 		   		extent.extentLogger("", "T895");		
 		     	navigateToSignUpScreen();
 	 			waitTime(5000);
 	 			 String year1995= getParameterFromXML("SelectYear1995");
 	 			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
 	 			
 	 			 click(HipiLoginPage.objSelectYear, "Select year");
 	 			 click(HipiLoginPage.objSelectYear, "Select year");
 	 			 hideKeyboard();
 	 			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
 	 			
 	 			 verifyElementPresent(HipiLoginPage.objSignUpTitle, "Sign Up Title");
 	 			 String signUpText = getText(HipiLoginPage.objSignUpTitle);
 	 			logger.info(signUpText + " is displayed");	
				extent.extentLoggerPass("", signUpText + " is displayed");
		
 				 verifyElementPresent(HipiLoginPage.objBackButton, "Back button");
 				verifyElementPresent(HipiLoginPage.objPhoneNumberTAB, "Phone Number TAB");
 				verifyElementPresent(HipiLoginPage.objEmaileNumberTAB, "Emaile Number TAB");
 				verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
 				verifyElementPresent(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
 				verifyElementPresent(HipiLoginPage.objSendOTP, "Send OTP");
 				

 				navigateToHomePage();


 			
 			
 			}	
 		}
 		
 		public void verifyPhoneNumberIsAcceptOnly10Digits__T823(String userType) throws Exception {
 			if(userType.equalsIgnoreCase("Guest")){
 	 	 		extent.HeaderChildNode("T823 - Check the Phone number is accept only 10 digits in Phone number field");
 	 	 		System.out.println("T823");
 		   		extent.extentLogger("", "T823");		
 			
 			
 		   	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		   waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 	 		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 	 		String phoneNumber = getParameterFromXML("MorePhoneNumber");
 	 		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
 	 		hideKeyboard();
 	 		
 			String PhoneNumberField = findElement(HipiLoginPage.objPhoneNumberAfterText).getAttribute("text");
 			System.out.println(PhoneNumberField);
 			try {
 				int phonenumberSize=PhoneNumberField.length();
 				extent.extentLogger("", " Phone Number Field  : " + phonenumberSize);
 				if (phonenumberSize == 10) {
 					logger.info("Phone number should take only 10 digits.,expected behaviour.");
 					extent.extentLoggerPass("", "Phone number should take only 10 digits., expected behaviour.");
 				} else {
 					logger.info("phone number taking more or less than 10 digits");
 					extent.extentLoggerFail(" ", "phone number taking more or less than 10 digits");

 				}
 			} catch (NumberFormatException ex) {

 			}
 			navigateToHomePage();
 			}
 		}
 		
 		
 		
 		
 		
 		
 	public void verifyUIOfTheLoginWithPhoneNumber(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
	 	 		extent.HeaderChildNode("Check the UI of the Login with Phone Number");
	 	 		System.out.println("T906");
		   		extent.extentLogger("", "T906");		
		   		waitTime(5000);
	 			 String year1995= getParameterFromXML("SelectYear1995");
	 			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	 			
	 			 click(HipiLoginPage.objSelectYear, "Select year");
	 			 click(HipiLoginPage.objSelectYear, "Select year");
	 			 hideKeyboard();
	 			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
				String phoneNumber = getParameterFromXML("NewNumber");
				type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
				hideKeyboard();
				verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
				waitTime(3000);
				
 		}
 	}	
 		
 	
 	
 	public void ScrollUPTheMonth__T887(String userType) throws Exception
 	{
 		if(userType.equalsIgnoreCase("Guest"))
 		{
	 	 		extent.HeaderChildNode("T887 - User should able to scroll up the month field in Sign up screen");
	 	 		System.out.println("T887");
		   		extent.extentLogger("", "T887");
		   		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		   		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
				
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
//				verifyElementPresentAndClick(HipiLoginPage.objMonthField,"Month Field");
				VerifyScrollOfMonthPickerDown();
				VerifyScrollOfMonthPickerDown();
				String MonthText=getText(HipiLoginPage.objMonthField);
				//swipeup method to add
				VerifyScrollOfMonthPickerUp();
				
				String MonthTextnew=getText(HipiLoginPage.objMonthField);
					if(!MonthText.equals(MonthTextnew))
					{
						logger.info("User is able to scroll up the month field in Sign up screen");	
						extent.extentLoggerPass("", "User is able to scroll up the month field in Sign up screen");
					}else {
						logger.info("User is not able to scroll up the month field in Sign up screen");	
						extent.extentLoggerFail("", "User is not able to scroll up the month field in Sign up screen");	
					}  	
					navigateToHomePage();
 		}
 		
 	}
 	
 	public void scrollUpTheYear__T888(String userType) throws Exception {
 		{
 	 		if(userType.equalsIgnoreCase("Guest"))
 	 		{
 		 	 		extent.HeaderChildNode("T888 - Check if user is able to scroll up the year in Sign up screen for Phone Number");
 		 	 		System.out.println("T888");
 			   		extent.extentLogger("", "T888");
 		
 			   	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 			   waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
				
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
				VerifyScrollOfYearPickerDown();
				VerifyScrollOfYearPickerDown();
				String yearText=getText(HipiLoginPage.objYearField);
				//swipeup method to add
				VerifyScrollOfYearPickerUp();
				String yearTextnew=getText(HipiLoginPage.objYearField);
					if(!yearText.equals(yearTextnew))
					{
						logger.info("User is able to scroll up the year field in Sign up screen");	
						extent.extentLoggerPass("", "User is able to scroll up the year field in Sign up screen");	
						
					}else {
						logger.info("User is  not able to scroll up the year field in Sign up screen");	
						extent.extentLoggerFail("", "User is  not able to scroll up the year field in Sign up screen");
					}  	
					navigateToHomePage();
 		}
 		
 		
 	 		}
 	
 	
 	}
 	
 	
 	public void scrollDownTheDate__T889(String userType) throws Exception {
 		
 		if(userType.equalsIgnoreCase("Guest"))
	 		{
		 	 		extent.HeaderChildNode("T889 - Check if user is able to scroll down the date in Sign up screen for Phone Number");
		 	 		System.out.println("T889");
			   		extent.extentLogger("", "T889");
		
			   	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			   	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
//			VerifyScrollOfDatePickerDown();
//			VerifyScrollOfDatePickerDown();
			String dateText=getText(HipiLoginPage.objDateField);
			//swipeup method to add
			VerifyScrollOfDatePickerDown();
			String dateTextnew=getText(HipiLoginPage.objDateField);
				if(!dateText.equals(dateTextnew))
				{
					logger.info("User is able to scroll down the date field in Sign up screen");	
					extent.extentLoggerPass("", "User is able to scroll down the date field in Sign up screen");
				}else {
					logger.info("User is not able to scroll down the date field in Sign up screen");	
					extent.extentLoggerFail("", "User is not able to scroll down the date field in Sign up screen");	
				}  	
				navigateToHomePage();
		}
		
 	}
 	
 	
 	public void scrollDownTheMonth__T890(String userType) throws Exception {
 		
 		if(userType.equalsIgnoreCase("Guest"))
 		{
	 	 		extent.HeaderChildNode("T890 - Check if user is able to scroll down the month in Sign up screen for Phone Number");
	 	 		System.out.println("T890");
		   		extent.extentLogger("", "T890");	
 		
 		
		   	 	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		   	 waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
				
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 		
				String MonthText=getText(HipiLoginPage.objMonthField);
				//swipeup method to add
				VerifyScrollOfMonthPickerDown();
				String MonthTextnew=getText(HipiLoginPage.objMonthField);
					if(!MonthText.equals(MonthTextnew))
					{
						logger.info("User is able to scroll down the month field in Sign up screen");	
						extent.extentLoggerPass("", "User is able to scroll down the month field in Sign up screen");
					}else {
						logger.info("User is not able to scroll down the month field in Sign up screen");	
						extent.extentLoggerFail("", "User is not able to scroll down the month field in Sign up screen");	
					}  	
					navigateToHomePage();
 		}
 	
 }
 	
 	public void scrollDownTheYear__T891(String userType) throws Exception {
 		
 		if(userType.equalsIgnoreCase("Guest"))
 		{
	 	 		extent.HeaderChildNode("T891 - Check if user is able to scroll down the year in Sign up screen for Phone Number");
	 	 		System.out.println("T891");
		   		extent.extentLogger("", "T891");	
		   		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		   		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
				
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
 		
				String yearText=getText(HipiLoginPage.objYearField);
				//swipeup method to add
				VerifyScrollOfYearPickerDown();
				String yearTextnew=getText(HipiLoginPage.objYearField);
					if(!yearText.equals(yearTextnew))
					{
						logger.info("user is able to scroll down the year in Sign up screen for Phone Number");	
						extent.extentLoggerPass("", "user is able to scroll down the year in Sign up screen for Phone Number");
					}else {
						logger.info("user is not able to scroll down the year in Sign up screen for Phone Number");	
						extent.extentLoggerFail("", "user is not able to scroll down the year in Sign up screen for Phone Number");	
					}  	
					navigateToHomePage();
 		
 		}
 	}
 	
 	
 	
 	public void scrollUpTheDate__T933(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest"))
 		{
	 	 		extent.HeaderChildNode("T933 - Check if user is able to scroll up the date in Sign up screen for Phone Number");
	 	 		System.out.println("T933");
		   		extent.extentLogger("", "T933");	
		   		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		   		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
				
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
				
				String dateText=getText(HipiLoginPage.objDateField);
				VerifyScrollOfDatePickerDown();
				VerifyScrollOfDatePickerDown();
				VerifyScrollOfDatePickerUp();
				String dateTextnew=getText(HipiLoginPage.objDateField);
					if(!dateText.equals(dateTextnew))
					{
						logger.info("User is able to scroll down the date field in Sign up screen");	
						extent.extentLoggerPass("", "User is able to scroll down the date field in Sign up screen");
					}else {
						logger.info("User is not able to scroll down the date field in Sign up screen");	
						extent.extentLoggerFail("", "User is not able to scroll down the date field in Sign up screen");	
					}  	
					navigateToHomePage();
 			}
 		
 	}
 	
 	public void scrollUpTheMonth__T934(String userType) throws Exception {
 		
 		
 		if(userType.equalsIgnoreCase("Guest"))
 		{
	 	 		extent.HeaderChildNode("T934 - Check if user is able to scroll up the month in Sign up screen for Phone Number");
	 	 		System.out.println("T934");
		   		extent.extentLogger("", "T934");	
		   		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		   		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
				
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
				VerifyScrollOfMonthPickerDown();
				VerifyScrollOfMonthPickerDown();

				String MonthText=getText(HipiLoginPage.objMonthField);
				
				VerifyScrollOfMonthPickerUp();
				String MonthTextnew=getText(HipiLoginPage.objMonthField);
					if(!MonthText.equals(MonthTextnew))
					{
						logger.info("User is able to scroll up the month field in Sign up screen");	
						extent.extentLoggerPass("", "User is able to scroll up the month field in Sign up screen");
					}else {
						logger.info("User is not able to scroll up the month field in Sign up screen");	
						extent.extentLoggerFail("", "User is not able to scroll up the month field in Sign up screen");	
					}  	
					navigateToHomePage();
 		
 		
 		
 		}
 		
 	}
 	
 //--------------------------------------------------D------------------------------------------
 	public void userIsAbleToNavigateToLoginInScreenAfterTappingOnUsePhoneOrEmailCTA__T802(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T802 - Check if user is able to navigate to login in screen after tapping on Use Phone or Email CTA");
		System.out.println("T802");
		extent.extentLogger("Login/Signup screen", "T802");
		
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		
		VerifyLoginPopUp();
		
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		if (verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title")){
			logger.info("User is navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerPass("", "User is navigate to Log In screen on tapping Login in to HiPi CTA");
		}else {
			logger.info("User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerFail("", "User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
		
		
		}
		
		navigateToHomePage();
}
		}
 	
 	public void  performReportActionByTapping__T804(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("Guest")){
		 extent.HeaderChildNode("T804 - Check if user is able to view Phone tab is selected by default after tapping on Use Phone or Email CTA");
		 System.out.println("T804");
		 extent.extentLogger("", "T804");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
        waitTime(2000);
		if (verifyElementPresentAndClick(HipiLoginPage.objPhoneTabIsSelectedByDefault, "Phone Tab Is Selected By Default")) {
		logger.info("User is able to view Phone tab is selected by default");	
		extent.extentLoggerPass("", "User is able to view Phone tab is selected by default");
	    }else {
		logger.info("User is not able to view Phone tab is selected by default");	
		extent.extentLoggerFail("", "User is not able to view Phone tab is selected by default");	
	}  	
		navigateToHomePage();
	}
	}
	
 	public void  selectCountryRegionScreenByTappingOn91__T808(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("Guest")){
		extent.HeaderChildNode("T808 - Check the UI of the Select country region screen by tapping on +91 in Log in screen for Phone Number");
		System.out.println("T808");
		extent.extentLogger("", "T808");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
       waitTime(2000);
       verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		waitTime(2000);
		hideKeyboard();
		verifyElementPresent(HipiLoginPage.objCrossIcon, "Cross Icon");
		verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
		verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
		verifyElementPresent(HipiLoginPage.objSearchCTA, "Search CTA");
		List<WebElement> listOfCountrys = getDriver().findElements(HipiLoginPage.objcountryOrRegionList);
		int size = listOfCountrys.size();
		System.out.println(size);
		logger.info("Countrys list is " + size);	
		extent.extentLoggerPass("", "Countrys list is " + size);
}
	navigateToHomePage();

}
 	public void uIOfTheSignUpScreenFOrPhoneNumbern__T932(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T932 - Check the UI of the Sign up screen for Phone Number");
 		System.out.println("T932");
 		extent.extentLogger("", "T932");

 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
 		waitTime(2000);
 		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");

		 verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
		 String SignupTitle = getText(HipiLoginPage.objSignUpTitle);
		 if (SignupTitle.equals("Sign up")) {
		logger.info(SignupTitle + " is displayed");
		extent.extentLoggerPass("", SignupTitle + " is displayed" );
		}
		else {
		logger.info(SignupTitle + " is not displayed");
		extent.extentLoggerPass("", SignupTitle + " is not displayed" );
		}
		 
		verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
		verifyElementPresent(HipiLoginPage.objWhensYourBirthDay, "Whens Your BirthDay Text");
		 String whenYourBirthday  = getText(HipiLoginPage.objWhensYourBirthDay);
		 if (whenYourBirthday.equals("When's your birthday?")) {
		logger.info(whenYourBirthday + " is displayed");
		extent.extentLoggerPass("", whenYourBirthday + " is displayed" );
		}
		else {
		logger.info(whenYourBirthday + " is not displayed");
		extent.extentLoggerPass("", whenYourBirthday + " is not displayed" );
		}
		
		
		verifyElementPresent(HipiLoginPage.objYourBirthdayWontBeShownPublicly, "Your Birthday Won't Be Shown Publicly Text");

	
		verifyElementPresent(HipiLoginPage.objNextButtonSignUpPage, "Next CTA");
		 String  yourBirthdaywont = getText(HipiLoginPage.objYourBirthdayWontBeShownPublicly);
		 System.out.println(yourBirthdaywont);
		 
		 if (yourBirthdaywont.equals("Your birthday won't be shown publicly.")) {
		logger.info(yourBirthdaywont + " is displayed");
		extent.extentLoggerPass("", yourBirthdaywont + " is displayed" );
		}
		else {
		logger.info(yourBirthdaywont + " is not displayed");
		extent.extentLoggerPass("", yourBirthdaywont + " is not displayed" );
		}
		navigateToHomePage();

 			}
 		}
 	public void userIsNavigateToLoginWithPhoneNumberScreenByTappingOnCrossIconInSelectCountryRegionScreen__T811(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T811 - Check if user is navigate to Login with Phone Number screen by tapping on cross icon in Select country/region screen");
		System.out.println("T811");
		extent.extentLogger("Login/Signup screen", "T811");
		
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		if (verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title")){
			logger.info("User is navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerPass("", "User is navigate to Log In screen on tapping Login in to HiPi CTA");
		}else {
			logger.info("User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerFail("", "User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			
		}

		verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		waitTime(2000);
		
		if (verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region")) {
			logger.info("User is able to see the \"Select country/region\" screen on tapping +91");	
			extent.extentLoggerPass("", "User is able to see the \"Select country/region\" screen on tapping +91");
		}else {
			logger.info("User is not able to see the Select country region  screen on tapping +91");	
			extent.extentLoggerFail("", "User is not able to see the Select country region screen on tapping +91");	
		}
		verifyElementPresentAndClick(HipiLoginPage.objCrossIcon, "Cross Icon");
		if (verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title")){
			logger.info("User is navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerPass("", "User is navigate to Log In screen on tapping Login in to HiPi CTA");
		}else {
			logger.info("User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerFail("", "User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			
		}
	navigateToHomePage();		
}
	}
	
 	public void  removeTheEnteredPhoneNumberByTappingOnCrossIcon__T821(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("Guest")){
		extent.HeaderChildNode("T821 - Check if user is able to remove the entered phone number by tapping on cross icon in forgot Password Reset Screen for Phone number");
		System.out.println("T821");
		extent.extentLogger("", "T821");
		

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
       waitTime(2000);
       
       verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password Button");
       
		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();
		
		String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
		System.out.println(checkPhoneNumber);
		waitTime(4000);
		click(HipiLoginPage.objRemovePhoneNumber, "Remove Button");
		String removePhoneNumber= getText(HipiLoginPage.objPhoneNumberTextField);
		System.out.println(removePhoneNumber);
			
		 if (!checkPhoneNumber.equals(removePhoneNumber)) {
			 logger.info("User is able to remove the entered phone number by tapping on cross icon in Reset screen" );	
			 extent.extentLoggerPass("", "User is able to remove the entered phone number by tapping on cross icon in Reset screen" );
		}else {
			logger.info("User is not able to remove the entered phone number by tapping on cross icon in Reset screen");	
			extent.extentLoggerFail("", "User is not able to remove the entered phone number by tapping on cross icon in Reset screen");		
		}
		 navigateToHomePage();
		 }
		 
	}
 	 public void   userIsAbleToEnterThePhoneNumberInPhoneNumberFieldInLoginWithOTPScreen__T829(String userType) throws Exception {
 	    if(userType.equalsIgnoreCase("Guest")) {
 		extent.HeaderChildNode("T829 - Check if user is able to enter the Phone Number in Phone Number field in Login with OTP screen");
 		System.out.println("T829");
 		extent.extentLogger("Login/Signup screen", "T829");
 	     //click on Profile icon
 	       verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");

 	      waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 	        verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
 	        waitTime(2000);
 	        verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
 	         if (verifyElementPresent(HipiLoginPage.objLoginWithPassword, "Login With Password")) {
 	    		 logger.info("User is able to see the Login with OTP in Login with Phone Number screen" );	
 	    		 extent.extentLoggerPass("", "User is able to see theLogin with passwoed in Login with Phone Number screen" );
 	    	 }else {
 	    		logger.info("User is not able to see the Login with OTP in Login with Phone Number screen");	
 	    		extent.extentLoggerFail("", "User is able to see the Login with OTP in Login with Phone Number screen");		
 	    	  }
 	         
 	     	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
 			String phoneNumber = getParameterFromXML("PhoneNumber");
 	    	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
 	    	hideKeyboard();
 			
 	    	String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
 	    	logger.info("User is able to type "  + checkPhoneNumber );	
 			extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
 			
 			
 		}
 	    	 navigateToHomePage();
 		
 	}

 	public void  userIsAbleToGetOTPForUnregisteredPhoneNumbe__T834(String userType) throws Exception {
 	    if(userType.equalsIgnoreCase("Guest")) {
 		extent.HeaderChildNode("T834 - Check if user is able to get OTP for unregistered phone number");
 		System.out.println("T834");
 		extent.extentLogger("Login/Signup screen", "T834");
 		
 	     //click on Profile icon
 	       verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 	      waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 	       VerifyLoginPopUp();

 	        verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
 	        waitTime(2000);
 	        
 	        verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
 	        waitTime(2000);
 	        
 	    	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
 			String newNumber = getParameterFromXML("NewNumber");
 	    	type(HipiLoginPage.objPhoneNumberTextField, newNumber, "Phone Number");	
 	    	hideKeyboard();
 			
 	    	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
 			
 	    	if (verifyElementPresent(HipiLoginPage.objNotRegisterMobileNumberTosterMessage, "Not Registerd Toster Message")) {
 	    		logger.info("User get an error message highlighting that the number for what OTP is requested is not registered with application");	
 	    		extent.extentLoggerPass("", "User get an error message highlighting that the number for what OTP is requested is not registered with application");
 	    	}else {
 	    		logger.info("User is not get an error message highlighting that the number for what OTP is requested is not registered with application");	
 	    		extent.extentLoggerFail("", "User is not get an error message highlighting that the number for what OTP is requested is not registered with application");	
 	    	}
 	    	navigateToHomePage();
 	    		
 	    	}
 			
 		}
 	

    public void  userNavigateToVerificationScreenAfterTappingOnSendOTPCTA__T836(String userType) throws Exception {
     if(userType.equalsIgnoreCase("Guest")) {
 	extent.HeaderChildNode("T836 - Check if user navigate to Verification screen after tapping on Send OTP CTA in Login with OTP");
 	System.out.println("T836");
 	extent.extentLogger("Login/Signup screen", "T836");
 	
      //click on Profile icon
        verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
        waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
        VerifyLoginPopUp();

         verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
         waitTime(2000);
         

         verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
         waitTime(2000);
    
         verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
 		String phoneNumber = getParameterFromXML("PhoneNumber");
     	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
     	hideKeyboard();
 	
 		
 		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
 		
 		if (verifyElementPresent(HipiLoginPage.objOtpVerificationScreen, "Verification Screen")) {
 			logger.info("User is navigate to verification screen after tapping on Send OTP CTA");	
     		extent.extentLoggerPass("", "User is navigate to verification screen after tapping on Send OTP CTA");
     	}else {
     		logger.info("User is not navigate to verification screen after tapping on Send OTP CTA");	
     		extent.extentLoggerFail("", "User is not navigate to verification screen after tapping on Send OTP CTA");	
     	}
     	navigateToHomePage();
     		
     	}
 		
 		
 		   }
    
    public void  invalidCodeMessageIsDisplayedWhenUserTappingOnVerfyOTPCTAWithoutEnteringOTP__T838(String userType) throws Exception {
        if(userType.equalsIgnoreCase("Guest")) {
    	extent.HeaderChildNode("T838 - Check the Invalid Code message is displayed when user tapping on Verfy OTP CTA without entering OTP");
    	System.out.println("T838");
    	extent.extentLogger("Login/Signup screen", "T838");
    	
         //click on Profile icon
           verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
           waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
           VerifyLoginPopUp();

            verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
            waitTime(2000);
            

            verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
            waitTime(2000);
       
            verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
    		String phoneNumber = getParameterFromXML("PhoneNumber");
        	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
        	hideKeyboard();
        	
        	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
        	waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 1);
        	verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Vrify OTP CTA");


    		if (verifyElementPresent(HipiLoginPage.objInvalidCode, "Invalid Code")) {
    			logger.info("User get the Invalid code\" message after tapping on Verify OTP CTA in Verification screen");	
        		extent.extentLoggerPass("", "User get the Invalid code message after tapping on Verify OTP CTA in Verification screen");
        	}else {
        		logger.info("User not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
        		extent.extentLoggerFail("", "User not get the Invalid code  message after tapping on Verify OTP CTA in Verification screen");	
        	}
        	navigateToHomePage();
        		
        	}
        	
    }
    public void  checkIfUserIsAbleToNavigateToEmailTabScreenByTappingOnEmailTabInLoginInScreen__T847(String userType) throws Exception {
        if(userType.equalsIgnoreCase("Guest")) {
    	extent.HeaderChildNode("T847 - Check if user is able to navigate to Email tab screen by tapping on Email tab in Login In screen");
    	System.out.println("T847");
    	extent.extentLogger("Login/Signup screen", "T847");
    	
    	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
    	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
    	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
    	
    	verifyElementPresentAndClick(HipiProfilePage.objEmailOption, "Email Option");


    	if (verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email field")) {
    		logger.info("User is navigate to Email screen on tapping on Email tab in Log In screen");	
    		extent.extentLoggerPass("", "User is navigate to Email screen on tapping on Email tab in Log In screen");
    	}else {
    		logger.info("User is not navigate to Email screen on tapping on Email tab in Log In screen");	
    		extent.extentLoggerFail("", "User is not navigate to Email screen on tapping on Email tab in Log In screen");	
    	}
    	navigateToHomePage();
    		
    	}
    }
 	
    public void  checkIfUserIsAbleToScrollUpTheDateInSignUpScreenForPhoneNumber__T886(String userType) throws Exception {
        if(userType.equalsIgnoreCase("Guest")) {
    	extent.HeaderChildNode("Check if user is able to scroll up the date in Sign up screen for Phone Number");
    	System.out.println("T886");
    	extent.extentLogger("Login/Signup screen", "T886");
    	
    	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
    	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
    	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
    	
    	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
    	
    	verifyElementPresent(HipiLoginPage.objSignUpTitle, "Sign Up Title");
    	String beforeScroll = getText(HipiLoginPage.objDateField);
    	String date = getParameterFromXML("SelectDate");
    	type(HipiLoginPage.objDateField, date, "Date Field");
    	String afterScroll = getText(HipiLoginPage.objDateField);
    	if (!beforeScroll.equals(afterScroll)) {
    		logger.info("User is able to scroll up the date field in Sign up screen");	
    		extent.extentLoggerPass("", "User is able to scroll up the date field in Sign up screen");
    	}else {
    		logger.info("User is not able to scroll up the date field in Sign up screen");	
    		extent.extentLoggerFail("", "User is not able to scroll up the date field in Sign up screen");	
    	}
    	navigateToHomePage();
    }

       }
    public void checkTheUIOfTheLoginWithPhoneNumber__T906(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T906 - Check the UI of the Login with Phone Number");
		System.out.println("T906");
		extent.extentLogger("", "T906");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next button CTA");
		 waitTime(10000);
		
		 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		 String phoneNumber = getParameterFromXML("PhoneNumber");
		 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		 hideKeyboard();
		 
		 
		 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		 waitTime(2000);
		 
		 verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
		     String loginText = getText(HipiLoginPage.objLoginTitle);
		     logger.info(loginText + " is displayed");	
			 extent.extentLoggerPass("", loginText + " is displayed" );

		 verifyElementPresent(HipiLoginPage.objPhoneTabIsSelectedByDefault, "Phone Tab Is Selected By Default");
		 verifyElementPresent(HipiProfilePage.objEmailOption, "Email Option");
		 verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		 String phoneNumber1 = getParameterFromXML("PhoneNumber");
		 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber1, "Phone Number");	
		 hideKeyboard();
		 verifyElementPresent(HipiLoginPage.objLoginWithPassword,"Login with Password button");
		 verifyElementPresent(HipiLoginPage.objSendOTP, "Send OTP");
		 waitTime(2000);
		
 		}
 		navigateToHomePage();
 	}
    public void  navigateToVerificationScreenAfterTappingOnSendOTPCTAInLoginWithPhoneNumberScreen__T908(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T908 - Check if user navigate to Verification screen after tapping on Send OTP CTA in Login with Phone number screen");
		System.out.println("T908");
		extent.extentLogger("", "T908");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 
		 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		 String phoneNumber = getParameterFromXML("NewNumber");
		 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		 hideKeyboard();
		
			
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);
		if(verifyElementPresent(HipiLoginPage.objOtpVerificationScreen,"OTP Verification Screen")) {
			logger.info("User is navigate to verification screen after tapping on Send OTP CTA" );	
		 extent.extentLoggerPass("", "User is navigate to verification screen after tapping on Send OTP CTA" );
	}else {
		logger.info("User is not navigate to verification screen after tapping on Send OTP CTA");	
		extent.extentLoggerFail("", "User is not  navigate to verification screen after tapping on Send OTP CTA");		
			}
	    	navigateToHomePage();
	    }
	   
		
		    }
    
	public void userIsAbleToResetThePhoneNumberByTappingOnResetCTA__T920(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T920 - Check user is able to reset the phone number by tapping on Reset CTA in forgot Password Reset Screen");
		System.out.println("T920");
		extent.extentLogger("", "T920");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 
		 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		 String phoneNumber = getParameterFromXML("PhoneNumber");
		 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		 hideKeyboard();
		 
		 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		 waitTime(2000);
		 
		 verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword, "Login With password");
		 
		 verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
	
		 if(verifyElementPresent(HipiLoginPage.objResetButton, "Reset CTA")) {
		logger.info("User is able to reset the phone number by tapping on Reset CTA" );	
		extent.extentLoggerPass("", "User is able to reset the phone number by tapping on Reset CTA" );
		}else {
		logger.info("User is not able to reset the phone number by tapping on Reset CTA");	
		extent.extentLoggerFail("", "User is not able to reset the phone number by tapping on Reset CTA");		
		}
		navigateToHomePage();
		    }    
			 
			 
 	}
	public void userIsAbleToremoveTheEnteredPhoneNnumberByTappingOnCrossIconInForgotPasswordResetScreen__T922(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T922 - Check if user is able to remove the entered phone number by tapping on cross icon in forgot Password Reset Screen for Phone number");
		System.out.println("T922");
		extent.extentLogger("", "T922");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 
		 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		 String phoneNumber = getParameterFromXML("PhoneNumber");
		 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		 hideKeyboard();
		 
		 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		 waitTime(2000);
		 
		 verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword, "Login With password");
		 
		 verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
		 
		 String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
			System.out.println(checkPhoneNumber);
			waitTime(4000);
			click(HipiLoginPage.objRemovePhoneNumber, "Remove Button");
			String removePhoneNumber= getText(HipiLoginPage.objPhoneNumberTextField);
			System.out.println(removePhoneNumber);
				
			 if (!checkPhoneNumber.equals(removePhoneNumber)) {
				 logger.info("User is able to remove the entered phone number by tapping on cross icon in Reset screen" );	
				 extent.extentLoggerPass("", "User is able to remove the entered phone number by tapping on cross icon in Reset screen" );
			}else {
				logger.info("User is not able to remove the entered phone number by tapping on cross icon in Reset screen");	
				extent.extentLoggerFail("", "User is not able to remove the entered phone number by tapping on cross icon in Reset screen");		
			}
			 navigateToHomePage();
	 		 } 	
 	}
    
	public void  removeTheEnteredPhoneNumberByTappingOnCrossIcon__T993(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T993 - Check if user is able to remove entered Full Name by tapping on cross icon in Sign up screen");
		System.out.println("T993");
		extent.extentLogger("", "T993");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		
		 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		 hideKeyboard();
		 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

			
			type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
			Thread.sleep(5000);
			hideKeyboard();
	        verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
		    waitTime(2000);
		    verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
		    String fullName = getParameterFromXML("FullNmae");
		    type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
		    verifyElementPresentAndClick(HipiLoginPage.objRemovePhoneNumber, "cross ICON");
		    String removePFiestName= getText(HipiLoginPage.objFullNameTextField);
			System.out.println(removePFiestName);
				
			 if (!fullName.equals(removePFiestName)) {
				 logger.info("User is able to remove the entered full name by tapping on cross icon in Reset screen" );	
				 extent.extentLoggerPass("", "User is able to remove the entered full name by tapping on cross icon in Reset screen" );
			}else {
				logger.info("User is not able to remove the entered full name by tapping on cross icon in Reset screen");	
				extent.extentLoggerFail("", "User is not able to remove the entered full name by tapping on cross icon in Reset screen");		
			}
			 navigateToHomePage();
		    }
		    
}
	
	public void  userIsAbleToRemoveRnteredPassworByTappingOnCrossIcon__T996(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T996 - Check if user is able to remove entered Password by tapping on cross icon in Sign up screen");
		System.out.println("T996");
		extent.extentLogger("", "T996");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		
		 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		 hideKeyboard();
		 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

			
			type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
			Thread.sleep(5000);
			hideKeyboard();
	        verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
		    waitTime(2000);
//		    verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
//		    String fullName = getParameterFromXML("FullNmae");
//		    type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
		    
		    verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
			 waitTime(4000);
			 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
			 waitTime(2000);
		    String Password = getParameterFromXML("NonsubscribedPassword");
			 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
				type(AMDLoginScreen.objPasswordField, Password, "Password field");
				hideKeyboard();
				 verifyElementPresentAndClick(HipiLoginPage.objRemovePhoneNumber, "cross ICON");
				    String removePFiestName= getText(AMDLoginScreen.objPasswordField);
					System.out.println(removePFiestName);
						
					 if (!Password.equals(removePFiestName)) {
						 logger.info("User is able to remove the entered full name by tapping on cross icon in Reset screen" );	
						 extent.extentLoggerPass("", "User is able to remove the entered full name by tapping on cross icon in Reset screen" );
					}else {
						logger.info("User is not able to remove the entered full name by tapping on cross icon in Reset screen");	
						extent.extentLoggerFail("", "User is not able to remove the entered full name by tapping on cross icon in Reset screen");		
					}
					 navigateToHomePage();
		    }
		    
   }
	public void userIsAbleToLoginWithPasswordByTappingOnLoginWithPasswordLink__T917(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T917 - Check if user is able to login with password by tapping on Login with password link in Login with phone number");
		System.out.println("T917");
		extent.extentLogger("", "T917");
		
        verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
        waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");

		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next button CTA");
		 waitTime(5000);
		 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		 String phoneNumber = getParameterFromXML("PhoneNumber");
		 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		 waitTime(2000);
		 verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword,"Login with Password button");
		 waitTime(1000);
		 

		    String Password = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			
			if (verifyElementPresentAndClick(HipiLoginPage.objLoginButton, "Login CTA")) {
			logger.info("User is  able to login with passowrd by tapping on Login with password link in Login with phone number" );	
			extent.extentLoggerPass("", "User is able to login with passowrd by tapping on Login with password link in Login with phone number" );
			}else {
			logger.info("User is not able to login with passowrd by tapping on Login with password link in Login with phone number");	
			extent.extentLoggerFail("", "User is not able to login with passowrd by tapping on Login with password link in Login with phone number");		
			}
			logOut();
			 navigateToHomePage();
	 		 } 	
			
 	 }
	
	public void userIsAbleToLoginWithPasswordByTappingOnLoginWithPasswordLink__T918(String userType) throws Exception {
 		if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("T918 - Check if user navigate to forgot Password Reset Screen after tapping the \"Forgot password? in Phone tab screen");
		System.out.println("T918");
		extent.extentLogger("", "T918");
 	
	      verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	      waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
			
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");

			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next button CTA");
			 waitTime(5000);
			 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			 String phoneNumber = getParameterFromXML("PhoneNumber");
			 type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
			 waitTime(2000);
			 verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword,"Login with Password button");
			 waitTime(5000);
			 
			 verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot Password Link");
			 waitTime(8000);
				
			if(verifyElementPresent(HipiLoginPage.objResetHeader, "Reset Header")) {
			logger.info("User is navigate to Reset screen after tapping on Forgot password? in login with Phone number");	
			extent.extentLoggerPass("", "User is navigate to Reset screen after tapping on Forgot password? in login with Phone number");	
			}else {
			logger.info("User is not navigate to Reset screen after tapping on Forgot password? in login with Phone number");	
			extent.extentLoggerFail("", "User is not navigate to Reset screen after tapping on Forgot password? in login with Phone number");
			}
			navigateToHomePage();
 		}
					
			 
	}
	
//------------------------------------------Profile P1TCS-----------------------------------------------
	
	public void checkOnTappingFollowersUserIsNavigatedTOFollowersListScreen_T1094(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1094 - Logged in user -Check  on tapping Followers user is navigated to followers list screen");
			System.out.println("T1094");
			extent.extentLogger("Profile_Followers","T1094");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
			}else {
				logger.info(" User is not  navigated to profile screen.");	
				extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiProfilePage.objFollowersSearch,"Followers Search"))
			{
				logger.info("User is redirected to followers list screen");	
				extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
			}else {
				logger.info("User is not redirected to followers list screen");	
				extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
			}
			navigateToHomePage();
			}
				
			}
	
	
	public void checkIfOnTappingBackButtonUserIsRedirectedBackToProfileScreen_T1096(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1096 - Logged in user -  Check if on tapping 'back' button user is re-directed back to Profile Screen");
			System.out.println("T1096");
			extent.extentLogger("Profile_Followers","T1096");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
			}else {
				logger.info(" User is not  navigated to profile screen.");	
				extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiProfilePage.objFollowersSearch,"Followers Search"))
			{
				logger.info("User is redirected to followers list screen");	
				extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
			}else {
				logger.info("User is not redirected to followers list screen");	
				extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowersBackButton, "Followers Back Button");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is re-directed back to profile screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is re-directed back to profile screen.");
			}else {
				logger.info(" User is not re-directed back to profile screen");	
				extent.extentLoggerFail("Profile_Followers", "User is not re-directed back to profile screen.");	
			}
			navigateToHomePage();
			}
				
			}
	
	public void checkByTappingFollowingUserIsNavigatedToFollowingListScreen_T1103(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1103 - Logged in user - Check  by  tapping Following user is navigated to Following list screen");
			System.out.println("T1103");
			extent.extentLogger("Profile_Following","T1103");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile screen.");	
				extent.extentLoggerPass("Profile_Following", "User is navigated to profile screen.");
			}else {
				logger.info(" User is not  navigated to profile screen.");	
				extent.extentLoggerFail("Profile_Following", " User is not navigated to profile screen.");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			if(verifyElementPresent(HipiProfilePage.objFollowingSearch,"Following Search"))
			{
				logger.info("User is navigated to Following list screen");	
				extent.extentLoggerPass("Profile_Following", "User is navigated to Following list screen");
			}else {
				logger.info("User is not navigated to Following list screen");	
				extent.extentLoggerFail("Profile_Following", "User is not navigated to Following list screen");	
			}
			navigateToHomePage();
		}
	}
	
	public void checkUserIsAbleToTapOnInviteFriendsIcon_T1204(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1204 - Logged in user - Check user is able to tap on invite friends icon ");
			System.out.println("T1204");
			extent.extentLogger("Profile_Invite Friends","T1204");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find friends icon");
			if(verifyElementPresent(HipiProfilePage.objFindFriendsScreen, "Find Friends Screen"))
			{
				logger.info("User is navigated to find friends screen by tapping on invite friends icon ");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is navigated to find friends screen by tapping on invite friends icon '");
			}else {
				logger.info("User is not navigated to find friends screen by tapping on invite friends icon '");	
				extent.extentLoggerFail("profile_InviteFriends", "User is not navigated to find friends screen by tapping on invite friends icon '");	
			}
			navigateToHomePage();
			}
		}
	public void checkWhetherPermissionPopUpGetsDisplayedOrNot_T1206(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1206 - Logged in user - Check whether permission pop-up gets displayed or not");
			System.out.println("T1206");
			extent.extentLogger("Profile_Invite Friends","T1206");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find friends icon");
			verifyElementPresentAndClick(HipiProfilePage.objInviteFriendsText, "Invite Friends");
			
			if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hipi to take pictures and record video?"))
			{
				logger.info("Permission dialog:"+ "Allow hipi to take pictures and record video?");
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow hipi to take pictures and record video-"+ "Allow button clicked");
				extent.extentLoggerPass("Profile_InviteFriends", "user is getting permission pop-up  ");

				Thread.sleep(5000);
			}else {
				logger.info("User is not getting permission pop-up  ");	
				extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
		
			}	
				if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hiPi access your contacts?")) {
				verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");		
				click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
				logger.info("Allow hiPi access your contacts?"+ "Allow button clicked");
				extent.extentLoggerPass("Profile_InviteFriends", "user is getting permission pop-up  ");

				Thread.sleep(5000);
				}else {
					logger.info("User is not getting permission pop-up  ");	
					extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
				
				}
			
			navigateToHomePage();
		}
	}
	
	
	
	
	public void checkIfUserIsAbleToClickOnCTAOnAllowAllRequiredPermissionPopup_T1212(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1212 - Logged in user - Check user is able to click on OK CTA on allow all required permission pop up ");
			System.out.println("T1212");
			extent.extentLogger("Profile_Invite Friends","T1212");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find friends icon");
			waitUntilElementDisplayed(HipiProfilePage.objInviteFriendsText, 2);
			verifyElementPresentAndClick(HipiProfilePage.objInviteFriendsText, "Invite Friends");
			verifyElementPresent(HipiProfilePage.objAllowHipiTakePictures,"Allow Hipi Take Pictures");
			click(HipiProfilePage.objDenyButton, "Deny Button");
			verifyElementPresent(HipiProfilePage.objAllowHipiAccessContacts, "Allow Hipi Access Contacts");
			click(HipiProfilePage.objDenyButton,"Deny Button");
			verifyElementPresentAndClick(HipiProfilePage.objPermissionsOkButton, "Permissions Ok Button");
			if(verifyElementPresent(HipiProfilePage.objAppInfo, "AppInfo Header")){
				logger.info("User is navigated to app info screen");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is navigated to app info screen");
			}else {
				logger.info("User is not navigated to app info screen");	
				extent.extentLoggerFail("Profile_InviteFriends", "User is not navigated to app info screen");	
			}
			navigateToHomePage();
		}
	}
	public void checkUserNavigatedToFacebookIfThereIsNoFacebookApp_T1237(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user navigated to  Facebook webpage if there is no Facebook app ");
			System.out.println("T1237");
			extent.extentLogger("Profile_Invite Friends","T1237");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find friends icon");
						
			verifyElementPresentAndClick(HipiProfilePage.objFindFacebbokFriendsButton, "Find Facebook Friends Button");
			if(verifyElementPresent(HipiProfilePage.objLogInHeader, "Log In Header")){
				logger.info("User is navigated to  webpage of facebook");	
				extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to webpage of facebook");
			}else {
				logger.info("user is not navigated to webpage of facebook");	
				extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to webpage of facebook");	
			}
			navigateToHomePage();
		}
	}
	//-----------------------------------------------------------------------------------------------------------
	public void checkIfOnTappingAnyUserFromFollowersListUserIsRedirectedToSelectedUserProfileDetailScreen_T1100(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1100 - Logged  in user - Check if on tapping any user from followers list user is redirected to selected user profile detail screen");
			System.out.println("T1100");
			extent.extentLogger("Profile_Followers","T1100");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
			}else {
				logger.info(" User is not  navigated to profile screen.");	
				extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiProfilePage.objFollowersSearch,"Followers Search"))
			{
				logger.info("User is redirected to followers list screen");	
				extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
			}else {
				logger.info("User is not redirected to followers list screen");	
				extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowersProfile,"Followers Profile");
			if(verifyElementPresent(HipiProfilePage.objFollowersProfileHeader, "Followers Profile Header")){
				logger.info("User is redirected to selected user profile detail screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is redirected to selected user profile detail screen.");
			}else {
				logger.info("User is not redirected to selected user profile detail screen.");	
				extent.extentLoggerFail("Profile_Followers", "User is not redirected to selected user profile detail screen.");	
			
}
			navigateToHomePage();
		}
	}
	
	public void checkUserIsAbleToSharePrivateVideo_T1198(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1198 - Logged in user - Check user is able to share his private video");
			System.out.println("T1198");
			extent.extentLogger("Profile_Private-Video","T1198");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(5000);
			verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab, "Private video Tab");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objPrivateTabVideoSelect, "Select Private Tab Video");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objPrivateTabShareButton, "Private Tab Share Button");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objprivateTabShareToTitle, "Private Tab Share To Title")){
				logger.info("User is able to  get pop-up display with option Facebook, instagram etc");	
				extent.extentLoggerPass("Profile_Private-Video", "User is able to  get pop-up display with option Facebook, instagram etc");
			}else {
				logger.info("User is not able to  get pop-up display with option Facebook, instagram etc");	
				extent.extentLoggerFail("Profile_Private-Video", "User is not able to  get pop-up display with option Facebook, instagram etc");	
			
}
			
			navigateToHomePage();
		}
	}
	
//---------------------------------------------Settings P1TCs------------------------------------------------------------------
	public void checkIfAfterTappingOn3DotsOnTopRightCornerUnderProfileUserIsDirectingUserToSettingsAndPrivacyScreen_T729(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T729 - Logged  in user - Check if after tapping on 3 dots on top right corner under Profile user is directing user to Settings and Privacy screen.");
			System.out.println("T729");
			extent.extentLogger("Settings & privacy","T729");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(5000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(5000);
			if(verifyElementPresent(HipiSettingsPage.objSettingAndPrivacy, "Settings & privacy Profile Header")){
				logger.info("User is directed to Settings and Privacy screen");	
				extent.extentLoggerPass("Settings & privacy", "User is directed to Settings and Privacy screen");
			}else {
				logger.info("User is not  directed to Settings and Privacy screen");	
				extent.extentLoggerFail("Settings & privacy", "User is not directed to Settings and Privacy screen");	
}
			navigateToHomePage();
		}
	}
	//-------------------------------------------------------------------------------------------------------
	 public void checkIfSearchingForASpecificKeywordIsLandingUserToRelevantInformation_T779(String userType) throws InterruptedException, Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T779 - Logged  in user -Check if searching for a specific keyword is landing user to relevant information");
				System.out.println("T779");
				extent.extentLogger("Settings & privacy_Support-Helpcentre","T779");
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
				waitTime(2000);
				verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
				waitTime(1000);
				verifyElementPresentAndClick(HipiSettingsPage.objHelpCenter, "Help center");
				waitTime(3000);
				waitUntilElementDisplayed(HipiSettingsPage.objSearchFieldInHelpCenter,15);
				verifyElementPresentAndClick(HipiSettingsPage.objSearchFieldInHelpCenter, "Search Field");
				String val =getParameterFromXML("SearchName");
				type(HipiSettingsPage.objSearchFieldInHelpCenter, val, "Help center search field");
				click(HipiSettingsPage.objSearchButton, "Search Button");
				hideKeyboard();
				waitTime(3000);
				if(verifyElementPresent(HipiSettingsPage.objSearchResultHelpCenter, "Search Result Help Center")){
					logger.info("User is able to make search using keywords in search bar");	
					extent.extentLoggerPass("Settings & privacy_Support-HelpCentre", "User is able to make search using keywords in search bar");
				}else {
					logger.info("User is not able to make search using keywords in search bar");	
					extent.extentLoggerFail("Settings & privacy_Support-HelpCentre", "User is not able to make search using keywords in search bar");
				}
				navigateToHomePage();
			}
		}
		//---------------------------------------------------------------------------------------------------
	/*public void checkIfUserIsAbleToMoveToTopOfTheScreenAfterTappingOnUpArrow_T781(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged  in user -Check if user is able to move to top of the screen after tapping on up arrow CTA");
			System.out.println("T781");
			extent.extentLogger("Settings & privacy_Support-Helpcentre","T7");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			verifyElementPresentAndClick(HipiSettingsPage.objHelpCenter, "Help center");
			waitTime(3000);
			Swipe("DOWN",3);*/
	//-------------------------------------------------------------------------------
	public void checkIfBackButtonAvailableOnTopLeftCornerIsFunctionalForUser_T782(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged  in user -Check if back button available on top left corner is functional for user");
			System.out.println("T782");
			extent.extentLogger("Settings & privacy_Support-Helpcentre","T782");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSettingsPage.objHelpCenter, "Help center");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSettingsPage.objHelpcenterBackButton, "Help Center Back Button");
			waitTime(3000);
			if(verifyElementPresent(HipiSettingsPage.objSettingAndPrivacy, "Settings & privacy Profile Header")){
				logger.info("User is able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen");	
				extent.extentLoggerPass("Settings & privacy_Support-HelpCentre", "User is able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");
			}else {
				logger.info("User is not able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");	
				extent.extentLoggerFail("Settings & privacy_Support-HelpCentre", "User is not able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");	
}
			navigateToHomePage();
			
}
	}
	//-------------------------------------------------------------------------------------------------
	public void checkIfTappingOnCommunityGuidelinesIsTakingUserToSpecificScreenWithRelevantInformation_T783(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T783 - Logged  in user -Check if tapping on Community Guidelines is taking user to specific screen with relevant information");
			System.out.println("T783");
			extent.extentLogger("Settings & privacy_About-Community Guidelines","T783");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSettingsPage.objCommunityGuidelines, "Community Guidelines");
			waitTime(3000);
			if(verifyElementPresent(HipiSettingsPage.objCommunityGuidelinesHeader, "Community Guidelines Header")){
				logger.info("User is navigated to community guidelines details on tapping Community Guidelines");	
				extent.extentLoggerPass("Settings & privacy_About-Community Guidelines", "User is navigated to community guidelines details on tapping Community Guidelines");
			}else {
				logger.info("User is navigated to community guidelines details on tapping Community Guidelines");	
				extent.extentLoggerFail("Settings & privacy_About-Community Guidelines", "User is navigated to community guidelines details on tapping Community Guidelines");	
}
			navigateToHomePage();
			
}
	}
	//-----------------------------------------------------------------------------------------------------
	public void checkIfBackButtonAvailableOnTopLeftCornerIsFunctionalForUser_T786(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T786 - Logged  in user -Check if back button available on top left corner is functional for user");
			System.out.println("T786");
			extent.extentLogger("Settings & privacy_About-Community Guidelines","T786");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(2000);
			verifyElementPresentAndClick(HipiSettingsPage.objCommunityGuidelines, "Community Guidelines");
			waitTime(2000);
			verifyElementPresentAndClick(HipiSettingsPage.objCommunityGuidelinesBackButton, "Community Guidelines Back Button");
			waitTime(2000);
			if(verifyElementPresent(HipiSettingsPage.objSettingAndPrivacy, "Settings & privacy Profile Header")){
				logger.info("User is able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");	
				extent.extentLoggerPass("Settings & privacy_About-Community Guidelines", "User is able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");
			}else {
				logger.info("User is not able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");	
				extent.extentLoggerFail("Settings & privacy_About-Community Guidelines", "User is not able to move  back to Setting and Privacy screen after tapping on back button icon on top left corner of the screen.");	
}
			navigateToHomePage();
}
	}
//----------------------------------------------Discover P1(TCs)-----------------------------------------------------------
	
	
	public void  verifyForDiscoverOptionClick_T1328_T1338(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))

	{
		extent.HeaderChildNode("T1328 - Guest-Verify for discover option click_T1328");
		System.out.println("T1328");
		extent.extentLogger("Discover", "T1328");
	}else {
		extent.HeaderChildNode("T1338 - Logged In User -Verify for discover option click_T1338");
		System.out.println("T1338");
		extent.extentLogger("Discover", "T1338");
	}	

		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitUntilElementDisplayed(HipiDiscoverPage.objDiscoverSearchBar, 2);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen"))
		{
				logger.info("User is be able to tap on discover option and on tap it should navigate to Discover page");
				extent.extentLoggerPass("Discover Screen", " User is be able to tap on discover option and on tap it is navigate to Discover page");
		}else
			{
				logger.info("User is not be able to tap on discover option and on tap it should navigate to Discover page");
				extent.extentLoggerFail("Discover Screen", "User is not be able to tap on discover option and on tap it is not navigate to Discover page");
			}
			navigateToHomePage();
	}	
	
	
	
	
	public void  verifyForSearchFieldClickAndNavigation_T1333_T1342(String userType) throws Exception

	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1333 - Verify for Search field click and navigation_T1333");
		System.out.println("T1333");
		extent.extentLogger("Discover", "T1333");
	}else {
		extent.HeaderChildNode("T1342 - Logged In User- Verify for Search field click_T1342");
		System.out.println("T1342");
		extent.extentLogger("Discover", "T1342");
	}	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitUntilElementDisplayed(HipiDiscoverPage.objDiscoverSearchBar, 2);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Search Bar"))
		{
				logger.info(" User is be able to tap on discover option and on tap it should navigate to Discover page");
				extent.extentLoggerPass("Discover Screen", "User is be able to tap on discover option and on tap it is navigate to Discover page");
		}else
			{
				logger.info(" User is not be able to tap on discover option and on tap it should navigate to Discover page");
				extent.extentLoggerFail("Discover Screen", "User is not be able to tap on discover option and on tap it is not navigate to Discover page");
			}
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Discover Search Bar");
		waitTime(4000);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox,"Search bar Inbox"))
		{
			logger.info("On taping secrh field guest user is navigate to search parent page(recent Dicover page)");
			extent.extentLoggerPass("search parentpage", "On taping secrh field guest user is navigate to search parent page(recent Dicover page)");
	}else
		{
			logger.info("On tap secrh field guest user is not navigate to search parent page(recent Dicover page)");
			extent.extentLoggerFail("search parentpage", "On taping secrh field guest user is not  navigate to search parent page(recent Dicover page)");
		}
			navigateToHomePage();
	}
	
	
	public void  verifyForSearchFieldPosition_T1344(String userType) throws Exception

	{

		extent.HeaderChildNode("T1344 - Verify for Search field position_T1344");
		System.out.println("T1344");
		extent.extentLogger("Discover", "T1344");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitUntilElementDisplayed(HipiDiscoverPage.objDiscoverSearchBar, 3);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen"))
		{
				logger.info("The secrh field is at top above banner rail");
				extent.extentLoggerPass("Discover Screen", "The secrh field is  at top above banner rail");
		}else
			{
				logger.info("The secrh field is not at top above banner rail");
				extent.extentLoggerFail("Discover Screen", "The secrh field is not at top above banner rail");
			}
				navigateToHomePage();
	}
	public void  verifyForSearchParentPageRecentSearchPageKeyboard_T1346(String userType) throws Exception
	{

		extent.HeaderChildNode("Verify for Search parent page (recent search page) keyboard_T1346");
		System.out.println("T1346");
		extent.extentLogger("Discover_Search", "T1346");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Parentpage ");
		if(verifyElementPresent(HipiDiscoverPage.objkeyboard, "keyboard"))
		{
				logger.info("User is able to get keyboard on search parent page");
				extent.extentLoggerPass("Discover Screen", "User is be able to get keyboard on search parent page");
		}else
			{
				logger.info("User is not  able to get keyboard on search parent page");
				extent.extentLoggerFail("Discover Screen", "User is not able to get keyboard on search parent page");
			}
		navigateToHomePage();
	}
	public void verifyForSearchParentPageRecentSearchPageField_T1348(String userType) throws Exception
	{
	if(userType.equalsIgnoreCase("Guest"))
	{
	extent.HeaderChildNode("T1348 - Verify for Search parent page (recent search page) field_T1348");
	System.out.println("T1348");
	extent.extentLogger("Discover_Search", "T1348");
	
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
	waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
	waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
	String value1=getText(HipiDiscoverPage.objDiscoverSearchInbox);
	System.out.println(value1);
	if(value1.contains("Search"))
	{
		logger.info("Search field is display on the top of the page and search text is written over it");
		extent.extentLoggerPass("Search Inbox", "Search field is display on the top of the page and search text is written over it");	
	}else
	{
		logger.info("Search field is not display on the top of the page and search text is not written over it");
		extent.extentLoggerFail("Search Inbox", "Search field is not display on the top of the page and search text is not written over it");
	}
	navigateToHomePage();
	}
	}
	
	public void verifyForSearchParentPageRecentSearchPageSearchField_T1350_T1357(String userType) throws Exception
	{
	if(userType.equalsIgnoreCase("Guest"))
	{
	extent.HeaderChildNode("T1350 - Verify for Search parent page (recent search page)search field_T1350");
	System.out.println("T1350");
	extent.extentLogger("Discover_Search", "T1350");
	}else {
	extent.HeaderChildNode("T1357 - Verify for Search parent page (recent search page)search field_T1357");
	System.out.println("T1357");
	extent.extentLogger("Discover_Search", "T1357");
	}	
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
	waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
	waitTime(4000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
	waitTime(4000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
	String val = getParameterFromXML("Himanshi");
	type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
	String sendedValue = getText(HipiDiscoverPage.objDiscoverSearchInbox);
	if(sendedValue.contains(val))
	{
		logger.info("Whtever user is typing on keyboard it is print on search field");
		extent.extentLoggerPass("Search Inbox", "Whtever user is typing on keyboard it is print on search field");
	}else{
		logger.info("Whtever user is typing on keyboard it is not print on search field");
		extent.extentLoggerFail("Search Inbox", "Whtever guest user is typing on keyboard it is not print on search field");
	}	
	navigateToHomePage();

	}
	public void  verifyIfUserGetsTheAutoSuggestionsUponEnteringThreeCharacters_T1352(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1352 - verifyIfUserGetsTheAutoSuggestionsUponEnteringThreeCharacters_T1352");
		System.out.println("T1352");
		extent.extentLogger("Discover_Search", "T1352");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
		String value = getParameterFromXML("ThreeLetters");
		type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
		hideKeyboard();
		waitTime(6000);	
		if(verifyElementPresent(HipiDiscoverPage.objautoSuggest, "Auto Suggest"))
		{
				logger.info("After user giving input of three character user is get suggestions on the screen");
				extent.extentLoggerPass("Auto Suggest", "After user giving input of three character user is get suggestions on the screen");
		}else
		{
				logger.info("After user giving input of three character user is not get suggestions on the screen");
				extent.extentLoggerFail("Auto Suggest", "After user giving input of three character user is not get suggestions on the screen");
		}
		navigateToHomePage();
	}
	}
	
	public void   verifyTheSearchedResultPage_T1356_T1363(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1356 - verifyTheSearchedResultPage_T1356");
		System.out.println("T1356");
		extent.extentLogger("Discover_Search", "T1356");
	}else{
	
		extent.HeaderChildNode("T1363 - verifyTheSearchedResultPage_T1363");
		System.out.println("T1363");
		extent.extentLogger("Discover_Search", "T1363");
	
	}
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
//		verifyElementPresentAndClick(HipiDiscoverPage.objkeyboardSearchbutton, "Search button");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
		hideKeyboard();
		waitTime(5000);	
		if(verifyElementPresent(HipiDiscoverPage.objBackButton, "Back Button")|	
	    verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox,"Search Inbox")|
	    verifyElementPresent(HipiDiscoverPage.objcrossicone,"Search Inbox")|
	    verifyElementPresent(HipiDiscoverPage.objToptabinSearchresultpage, "Top tab")|
	    verifyElementPresent(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab")|
	    verifyElementPresent(HipiDiscoverPage.objVideostabinSearchresultpage, "Videos tab")|
	    verifyElementPresent(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab")|
	   verifyElementPresent(HipiDiscoverPage.objHashtagsTab, "Hashtags tab"))
		{
			logger.info("User is able to see all options after searching of the results displayed ");
			extent.extentLoggerPass("Search resultpage", "User is able to see all options after searching of the results displayed ");
		}else
		{
			logger.info("User is not able to see all options after searching of the results displayed ");
			extent.extentLoggerFail("Search resultpage", "User is no able to see all options after searching of the results displayed ");
		}
		navigateToHomePage();
		}
	
	public void  verifyIfUserAbleToClickOnTheOtherTabsFromTheDisplayedResults_T1368 (String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1368 - Verify if user able to click on the other tabs from the displayed results_T1368");
		System.out.println("T1368");
		extent.extentLogger("Discover_Search", "T1368");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage. objToptabinSearchresultpage, "Top tab");
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objTopPageSelected, "Top page"))
		{
			logger.info("User is able to Tap on Top tab ");
			extent.extentLoggerPass("Top tab", "User is able to Tap on Top tab ");
		}else
		{
			logger.info("User is not able to Tap on Top tab ");
			extent.extentLoggerFail("Top tab", "User is not able to Tap on Top tab ");
		}
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "Users tab");
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objUserPageSelected, "Users tab Selected"))
		{
			logger.info("User is able to Tap on User tab ");
			extent.extentLoggerPass("USer tab", "User is able to Tap on Users tab ");
		}else
		{
			logger.info("User is not able to Tap on User tab ");
			extent.extentLoggerFail("Users tab", "User is not able to Tap on Users tab ");
		}
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objVideostabinSearchresultpage, "Videos tab");
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objVideosPageSelected, "Videos tab Selected"))
		{
			logger.info("User is able to Tap on Videos tab ");
			extent.extentLoggerPass("Videos tab", "User is able to Tap on Videos tab ");
		}else
		{
			logger.info("User is not able to Tap on Videos tab ");
			extent.extentLoggerFail("Videos tab", "User is not able to Tap on Videos tab ");
		}	
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objSoundsPageSelected, "Sounds tab Selected"))
		{
			logger.info("User is able to Tap on Sounds tab ");
			extent.extentLoggerPass("Sounds tab", "User is able to Tap on Sounds tab ");
		}else
		{
			logger.info("User is not able to Tap on Sounds tab ");
			extent.extentLoggerFail("Sounds tab", "User is not able to Tap on Sounds tab ");
		}
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtags tab");
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objHashtagsPageSelected, "Hashtags tab Selected"))
		{
			logger.info("User is able to Tap on Hashtags tab ");
			extent.extentLoggerPass("Hashtags tab", "User is able to Tap on Hashtags tab ");
		}else
		{
			logger.info("User is not able to Tap on Hashtags tab ");
			extent.extentLoggerFail("Hashtags tab", "User is not able to Tap on Hashtags tab ");
		}
	  
		navigateToHomePage();
		}
	
	
	}
	public void checkUserIsAbleToViewFullPlayerOfHashTagVideos_T1490(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1490 - Logged in user - Check user is able to view full player of hashtag videos_T1490 ");
			System.out.println("T1490");
			extent.extentLogger("Discover_Search-HashtagDetailPage","T1490");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(2000);
			SwipeUntilFindElement(HipiDiscoverPage.objAnyHipiVideo, "Hipi Video");
			verifyElementPresentAndClick(HipiDiscoverPage.objAnyHipiVideo, "Any hipi video");
			waitTime(4000);
			if(verifyElementPresent(HipiDiscoverPage.objLikeIcon, "Like Icon")){
				logger.info("User is navigated to full player view");	
				extent.extentLoggerPass("Discover_Banners", "User is navigated to full player view");
				
			}else {
				logger.info("User is not navigated to full player view");	
				extent.extentLoggerFail("Discover_Banners", "User is not navigated to full player view");	
			}
			navigateToHomePage();
			
}
		}
	
	
	public void checkUserIsAbleToNavigateBackToDiscoverPageByTappingBackFromVideo_T1491(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1491 - Logged in user - Check user is able to navigate back to discover page by tapping back button from video_T1491 ");
			System.out.println("T1491");
			extent.extentLogger("Discover_Search-HashtagDetailPage","T1491");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(2000);
			SwipeUntilFindElement(HipiDiscoverPage.objAnyHipiVideo, "Hipi Video");
			verifyElementPresentAndClick(HipiDiscoverPage.objAnyHipiVideo, "Any hipi video");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objBackButtonInVideo,"Back Button in video");
			waitTime(4000);
			if(verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button")){
				logger.info("User is navigated back to discover screen");	
				extent.extentLoggerPass("Discover_Search-HashtagDetailPage", "User is navigated back to discover screen");
			}else {
				logger.info("User is not navigated back to discover screen");	
				extent.extentLoggerFail("Discover_Search-HashtagDetailPage", "User is not navigated back to discover screen");	
			}
			navigateToHomePage();
		}
	}
	public void verifyIfBannersAreAutoSlidedInTheDiscoverPage_T1514__T1526(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify if banners are auto slided in the discover page_T1514_N");
			System.out.println("T1514");
			extent.extentLogger("Discover_Banners","T1514");
		}else {
			extent.HeaderChildNode("Logged In User: Verif if banners are auto slided in the discover page");
			System.out.println("T1526");
			extent.extentLogger("Discover_Banners","T1526");
		}
			waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(5000);
			 verifyElementPresent(HipiDiscoverPage.objBannersRail, "Banners Rail");
		String index =	getAttributValue("index", HipiDiscoverPage.objSwipconformation);
		System.out.println(index);
			waitTime(8000);
			String index1 =	getAttributValue("index", HipiDiscoverPage.objSwipconformation);
			System.out.println(index1);
			if(!index1.equals(index)) {
				logger.info("Banner is auto slided in the discover page ");
				extent.extentLoggerPass("Discover_Banners", "Banner is auto slided in the discover page ");
			}else {
				logger.info("Banner is not auto slided in the discover page ");
				extent.extentLoggerFail("Discover_Banners", "Banner is not auto slided in the discover page ");
			}		
			navigateToHomePage();
			}
	
	
	
	
	






	public void   verifyIfUserAbleToSeeAllCategoriesResultsInTheTopTab_T1369(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1369 - verifyIfUserAbleToSeeAllCategoriesResultsInTheTopTab_T1369");
		System.out.println("T1369");
		extent.extentLogger("Discover_Search", "T1369");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Kundali");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage. objToptabinSearchresultpage, "Top tab");
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objTopPageSelected, "Top page"))
		{
			logger.info("User is land on Top tab");
			extent.extentLoggerPass("", "User is land on Top tab");
		}else
		{
			logger.info("User is land on Top tab");
			extent.extentLoggerFail("", "User is land on Top tab");
		}
		verifyElementPresent(HipiDiscoverPage.objUsersTopPage, "User");
		verifyElementPresent(HipiDiscoverPage.objHashtagsTapPage, "Hashtags");
		verifyElementPresent(HipiDiscoverPage.objSoundesTapPage, "Sounds");
		navigateToHomePage();
		}       
	}
	
	public void   verifyForUserShouldBeAbleToSeeAllCategoriesResultsInTheTopTab_T1370(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1370 - verifyForUserShouldBeAbleToSeeAllCategoriesResultsInTheTopTab_T1370");
		System.out.println("T1370");
		extent.extentLogger("Discover_Search", "T1370");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/imageView']"));
	    int size = count.size();
		System.out.println(size);
      
        	  logger.info("User is able to see all the other user profiles respective to the searched keyword under the User tab"+size);
  			extent.extentLoggerPass("User Tab", "User is able to see all the other user profiles respective to the searched keyword under the User tab "+" "+size);
         
        navigateToHomePage();
}
}
	
	public void   verifyUsersTabOnTheSearchResultPage_T1372(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1372 - Verify Users Tab on the search result page_T1372");
		System.out.println("T1372");
		extent.extentLogger("Discover_Search", "T1372");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
	    int size = count.size();
		System.out.println(size);
        	  logger.info("User is able to see list of user"+size);
  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
         
        waitTime(3000);	
	    if(verifyElementPresent(HipiDiscoverPage.objimage_USertab, "user image"))
	    {
      	  logger.info("User is able to see user image");
			extent.extentLoggerPass("User image", "User is able to see user image");
        }else
         {
      	  logger.info("User is not able to see user image");
			extent.extentLoggerFail("User image", "User is not able to see user image");
	      }
	    waitTime(3000);	
	    if(verifyElementPresent(HipiDiscoverPage.objFollowersCount, "Followers"))
	    {
      	  logger.info("User is able to see  Followers Count ");
			extent.extentLoggerPass("Followers", "User is able to see  Followers Count ");
        }else
         {
      	  logger.info("User is not able to see  Followers Count ");
			extent.extentLoggerFail("Followers", "User is not able to see  Followers Count ");
	      }
	    waitTime(3000);	
	    if(verifyElementPresent(HipiDiscoverPage.objname_USertab, "User name"))
	    {
      	  logger.info("User is able to see User name ");
			extent.extentLoggerPass("User name", "User is able to see User name ");
        }else
         {
      	  logger.info("User is not able to see User name ");
			extent.extentLoggerFail("User name", "User is not able to see User name ");
	      }
	    navigateToHomePage();
	}
	}	
	public void  verifyUserProfilePage_T1374(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1374 - Guest User: Verify user profile page_T1374");
		System.out.println("T1374");
		extent.extentLogger("Discover_Search", "T1374");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresent(HipiProfilePage.objFollowers, " respective profile detail page");
	verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers tap");	
	VerifyLoginPopUp();
	Back(1);
//	verifyElementPresentAndClick(HipiLoginPage.objCrossIcon, "Cross icon");
	verifyElementPresentAndClick(HipiProfilePage.objFollowCTA, "Follow CTA");
	VerifyLoginPopUp();
//	verifyElementPresentAndClick(HipiLoginPage.objCrossIcon, "Cross icon");
	Back(1);
	verifyElementPresent(HipiProfilePage.objListOfFollowing, "List of Following");
	String following = getText(HipiProfilePage.objListOfFollowing);
	System.out.println(following);
	  logger.info("List Of following " + following);
		extent.extentLoggerPass("", "List Of following " + following);
	verifyElementPresent(HipiProfilePage.objListOfLikes, "List of Likes");
	String Likes = getText(HipiProfilePage.objListOfLikes);
	System.out.println(Likes);
	  logger.info("List Of likes " + Likes);
	extent.extentLoggerPass("", "List Of likes " + Likes);
	verifyElementPresent(HipiProfilePage.objListOfVideos, "List of Videos");
	int videos = getCount(HipiProfilePage.objListOfVideos);
	System.out.println(videos);
	  logger.info("List Of Videos " + videos);
		extent.extentLoggerPass("", "List Of Videos " + videos);
	
	}
		navigateToHomePage();	
	}
	
	
	
	
	
	public void   verifyFollowButtonAndItsClickOnTheUserProfilePage_T1375(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1375 - Verify follow button and its click on the user profile page_T1375");
		System.out.println("T1375");
		extent.extentLogger("Discover_Search", "T1375");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresentAndClick(HipiProfilePage.objFollowCTA, "Follow button");
	VerifyLoginPopUp();
  navigateToHomePage();
	}
	}
	
	public void  verifyFollowingTabAndItsClickOnTheUserProfilePage_T1376(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1376 - Verify Following tab and its click on the user profile page_T1376");
		System.out.println("T1376");
		extent.extentLogger("Discover_Search", "T1376");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String value = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following tap");
	VerifyLoginPopUp();
  navigateToHomePage();
	}
	}
	
	
	public void  verifyFollowingTabAndItsClickOnTheUserProfilePage_T1377(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1377 - Verify Followers tab and its click on the user profile page_T1377");
		System.out.println("T1377");
		extent.extentLogger("Discover_Search", "T1377");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String value = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
		verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers tap");
		VerifyLoginPopUp();
		navigateToHomePage();
	}
	}
	
	
	public void  userCanSearchAnyFollowingUserFromTheList_T1380(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1380 - User can search any following user from the list_T1380");
		System.out.println("T1380");
		extent.extentLogger("Discover_Search", "T1380");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String value = getParameterFromXML("KundaliBhagya");
		type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following tap");
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
	String val1 = getParameterFromXML("SearchAnyFollowing");
	type(HipiDiscoverPage.objDiscoverSearchInbox,val1 , "Search Inbox");
//	verifyElementPresentAndClick(HipiDiscoverPage.objkeyboardSearchbutton, "Search button");
	hideKeyboard();
	waitTime(5000);
	if(verifyElementPresent(HipiDiscoverPage.objfirstuserfromlist_USertab, "First SearchedResult"))
	 {
  	  logger.info("user can search any following user from the list");
		extent.extentLoggerPass("user from list", "user can search any following user from the list");
    }else
    {
  	  logger.info("user can not search any following user from the list");
		extent.extentLoggerFail("user from list", "user can not search any following user from the list");
    }
  navigateToHomePage();
	}
}	
	public void  validateTheAutoSuggestionListUnderFollowingTabRespectiveToSearchInput_T1384(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1384 - validate the auto suggestion list under following tab respective to search input_T1384");
		System.out.println("T1384");
		extent.extentLogger("Discover_Search", "T1384");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "Sunny Leone";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
		waitTime(4000);
		verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following tap");
		waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
	
	waitTime(4000);
	String value = "Comedy Shots";
	type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
	hideKeyboard();
	waitTime(5000);
	String searchBar = getText(HipiDiscoverPage.objDiscoverSearchInbox);
	String reasult = getText(HipiDiscoverPage.objfirstuserfromlist_USertab);
	if (reasult.contains(searchBar)) {
	  	  logger.info("user can type on search field under following tab and autosuggestion result is display");
			extent.extentLoggerPass("", "user can type on search field under following tab and autosuggestion result is display");
	    }else {
	  	  logger.info("user can not type on search field under following tab and autosuggestion result is not display");
			extent.extentLoggerFail("Auto Suggestion", "user can not type on search field under following tab and autosuggestion result is not display");
	    }
  navigateToHomePage();
	}
	}
	
	public void  verifyForUserCanSearchAnyFollowingUserFromTheList_T1385(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1385 - Verify for User can search any following user from the list_T1385");
		System.out.println("T1385");
		extent.extentLogger("Discover_Search", "T1385");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "Sunny Leone";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
		waitTime(4000);
	verifyElementPresentAndClick(HipiDiscoverPage.objFollowingtab_USertab, "Following tap");
	waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
//	String val1 = getParameterFromXML("RamPyaare");
	String value ="Comedy Shots";
	waitTime(4000);
	type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
	hideKeyboard();
	waitTime(5000);
	String searchBar = getText(HipiDiscoverPage.objDiscoverSearchInbox);
	String reasult = getText(HipiDiscoverPage.objfirstuserfromlist_USertab);
	if (reasult.contains(searchBar)) {
	  	  logger.info("user can type on search field under following tab and autosuggestion result is display");
			extent.extentLoggerPass("Auto Suggestion", "user can type on search field under following tab and autosuggestion result is display");
	    }else
	    {
	  	  logger.info("user can not type on search field under following tab and autosuggestion result is not display");
			extent.extentLoggerFail("Auto Suggestion", "user can not type on search field under following tab and autosuggestion result is not display");
	    }
  navigateToHomePage();

	}
	}
	public void  verifyForClickOnDisplayedUserNameFromTheSearchResultAndNavigation_T1386(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1386 - Verify for click on displayed user name from the search result and navigation_T1386");
		System.out.println("T1386");
		extent.extentLogger("Discover_Search", "T1386");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Kundali");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresentAndClick(HipiDiscoverPage.objFollowingtab_USertab, "Following tap");
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
	String val1 = getParameterFromXML("SearchAnyFollowing");
	type(HipiDiscoverPage.objDiscoverSearchInbox,val1 , "Search Inbox");
//		verifyElementPresentAndClick(HipiDiscoverPage.objkeyboardSearchbutton, "Search button");
	hideKeyboard();
	waitTime(5000);
	verifyElementPresentAndClick(HipiDiscoverPage.objfirstuserfromlist_USertab, "First Searched Result");

	if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
		logger.info("User is navigated to profile screen.");	
		extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
	}else {
		logger.info(" User is not  navigated to profile screen.");	
		extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
	}
  navigateToHomePage();
	}
	}
	
	

		
		
	
//--------------------------------------------Creator(P1TCS)-------------------------------------------------------------
	public void VerifyloginPopupOntappingPlusicon_T524(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T524 - Guest User - Check if user is able to see the login pop-up is displayed by tapping on + icon (Creator icon)");
			System.out.println("T524");
			extent.extentLogger("Creator", "T524");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			VerifyLoginPopUp();
		}
		navigateToHomePage();
		}
	
	public void VerifyloginPopupOntappingPlusicon_T530(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T530 - Check if user is able to flip camera and flash light is disabled in selfie mode on device supporting Front camera");
			System.out.println("T530");
			extent.extentLogger("Creator", "T530");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");	
			boolean verify = verifyElementExist(HipiCreateVideoPage.objCreateAllow,"allow permission Popup");
	if(verify==false)
	{
		logger.info("System is unable to promt to provide needed permission to use device hardware microphone, Camera and storage");
		extent.extentLoggerPass("Permisspon Popup", "System is unable to promt to provide needed permission to use device hardware microphone, Camera and storage");	
		
		}else {
			logger.info("System is promting to provide needed permission to use device hardware microphone, Camera and storage");
			extent.extentLoggerFail("Permisspon Popup", "System is promting to provide needed permission to use device hardware microphone, Camera and storage");
		
	   	
	}
	allowPermissions();
	navigateToHomePage();
	}
	}
	
	public void VerifyloginPopupOntappingPlusicon_T552(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T552 - Check if the user is able to resume a paused video");
			System.out.println("T552");
			extent.extentLogger("Creator", "Check if the user is able to resume a paused video");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(1000);
			click(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(1000);
			String actualtime = getText(HipiCreateVideoPage.objactualRecoredTime);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			String Expectedtime = getText(HipiCreateVideoPage.objactualRecoredTime);
			if(actualtime==Expectedtime) {
				logger.info("User is unable to resume a paused video recording and recording is not started again.");
				extent.extentLoggerPass("Video Recording Screen", "User is unable to resume a paused video recording and recording is not started again.");
			}else {
				logger.info("User is able to resume a paused video recording and recording is started again.");
				extent.extentLoggerPass("Video Recording Screen", "User is able to resume a paused video recording and recording is started again.");		
				}
		discardPopup();		
			}
		}
	
	public void verifyByTappingOnDeviceBackButton_T563(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T563 - Check if on tapping device 'back' Icon user is navigated to HiPi home screen");
			System.out.println("T563");
			extent.extentLogger("Creator", "T563");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			waitTime(3000);
			allowPermissions();
			Back(1);
			if(verifyElementPresent(HipiHomePage.objForYou, "For You")){
				logger.info("User is redirect to HiPi Home Screen");	
				extent.extentLoggerPass("", "User is redirect to HiPi Home Screen");
			}else {
				logger.info("User is not redirect to HiPi Home Screen");	
				extent.extentLoggerFail("", "User is not redirect to HiPi Home Screen");
			}
			navigateToHomePage();
		}
	}
	
	public void verifyPauseAndPlay_T599(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user- Check if user is able to preview a music and then pause");
			System.out.println("T599");
			extent.extentLogger("Creator", "T599");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			Swipe("UP", 1);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound, "Suggested music page");
			waitTime(5000);
//			verifyElementPresent(HipiCreateVideoPage.objMusicScreenHeader,"music screen");
			String actualtime = getText(HipiCreateVideoPage.objMusicTime);
			verifyElementPresentAndClick(HipiCreateVideoPage.objmusicplaypause,"Play/Pause");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objmusicplaypause,"Play/Pause");
			String recordedtime = getText(HipiCreateVideoPage.objMusicTime);
			if(actualtime!=recordedtime) {
				logger.info("User is able to play a music and then pause");
		    	extent.extentLoggerPass("Play/Pause", "User is able to play a music and then pause");
		    }else {
		    	logger.info("User is unable to play a music and then pause");
		    	extent.extentLoggerFail("Play/Pause", "User is unable to play a music and then pause");
				
			}
	navigateToHomePage();
		}
	}
	
	public void addingMusic_T600(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user- Check if user is able to add a music_T600");
			System.out.println("T600");
			extent.extentLogger("Creator", "T600");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			waitTime(5000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			Swipe("UP", 1);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Trending MusicRail");
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			waitTime(2000);
			String expectedText=getText(HipiCreateVideoPage.objMusicScreenHeader);
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
			waitTime(3000);
			  String actualText=getText(HipiCreateVideoPage.objVideoScreenHeader);
			    if(expectedText!=actualText) {
			    	logger.info("User is able to add a music");
			    	extent.extentLoggerPass("Music", "User is able to add a music");
			    }else {
			    	logger.info("User is unable to add a music");
			    	extent.extentLoggerFail("Music", "User is unable to add a music"); 
				}
			    navigateToHomePage();	
		}
	}
	
	public void verifyVideoCreation_T604(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Check if sound duration is greater than the selected Video duration, the user will be redirected to the Trimming Screen and trim icon is enabled");
			System.out.println("T604");
			extent.extentLogger("Creator", "T604");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon stop");
			String actualtime=getText(HipiCreateVideoPage.objVideoRecordtime);
			System.out.println(actualtime);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			waitTime(5000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(3000);				
			String actualsound=getText(HipiCreateVideoPage.objSoundsAnySound);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
			waitTime(4000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrimSong,10);
			verifyElementPresent(HipiCreateVideoPage.objTrimSong, "Music Screen Header");
			
			if (verifyElementPresent(HipiCreateVideoPage.objMusicscreenRightTrimEnable, "Music screen Right TrimEnable")) {
				logger.info("User is able to redirect to the Trimming Screen and trim icon is enabled when Sound duration is greater than the selected Video duration");
		    	extent.extentLoggerPass("Add music", "User is able to redirect to the Trimming Screen and trim icon is enabled when Sound duration is greater than the selected Video duration");
		    }else {
		    	logger.info("User is unable to redirect to the Trimming Screen and trim icon is enabled when Sound duration is greater than the selected Video duration");
		    	extent.extentLoggerFail("Add music", "User is unable to redirect to the Trimming Screen and trim icon is enabled when Sound duration is greater than the selected Video duration");
			}
			
		discardPopup();
	}
	}
	
	
	public void replaceAddedMusic_T612(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T612 - Check if user is able to replace the already added sound_T612");
			System.out.println("T612");
			extent.extentLogger("Creator", "T612");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(4000);
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundsHeaderScreen,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    	click(HipiCreateVideoPage.objSoundsHeaderScreen,"Sound Screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(3000);				
			String actualsound=getText(HipiCreateVideoPage.objSoundsAnySound);
//			System.out.println(actualsound);
//		     String[] expect = actualsound.split("• Original Audio");
//				System.out.println(expect[0]);
			String sound = getText(HipiCreateVideoPage.objSoundsAnySound);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
		waitTime(3000);
		waitUntilElementDisplayed(HipiCreateVideoPage.objMusicScreenTickIcon, 10);
		
		System.out.println(sound);
		click(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
		waitTime(5000);
			String Expectedsound=getText(HipiCreateVideoPage.objVideoScreenHeader);
//			System.out.println(Expectedsound);
//			  String numberOnly = Expectedsound.replaceAll("[0-9]", "");
//		        System.out.println(numberOnly);
			
			  if(sound.contains(Expectedsound)) {
			    	logger.info("User is able to add a music");
			    	extent.extentLoggerPass("Music", "User is able to add a music");
			    }else {
			    	logger.info("User is unable to add a music");
			    	extent.extentLoggerFail("Music", "User is unable to add a music"); 
				}
				waitTime(3000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 5);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
				waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenSoundbtn, 10);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"sound");
				waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 10);
				verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
				waitTime(3000);				
				verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound2,"AnySound");
//				waitTime(5000);
				waitUntilElementDisplayed(HipiCreateVideoPage.objMusicScreenTickIcon, 20);
				
				click(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick icon");
				waitTime(3000);
				click(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Edits");
				waitTime(2000);
				String Finalsound=getText(HipiCreateVideoPage.objVideoScreenHeader);
				if(Expectedsound!=Finalsound) {
			    	logger.info("User is able to replace the already added sound");
			    	extent.extentLoggerPass("Replace Music", "User is able to replace the already added sound");
			    }else {
			    	logger.info("User is unable to add a music");
			    	extent.extentLoggerFail("Replace Music", "User is able to replace the already added sound"); 				
				}
			discardPopup();
	            
		}
	}
	
	
	public void createVideoWithExistingSound_T624(String userType) throws Exception {
		String expected;
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T624 - Check if user is able to Create a video with existing sound");
			System.out.println("T624");
			extent.extentLogger("Creator", "T624");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsHeaderScreen,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
//			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);

			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(3000);				
			String actualsound=getText(HipiCreateVideoPage.objSoundsAnySound);
			System.out.println(actualsound);
			 String[] jj = actualsound.split(" • Original Audio");
				System.out.println(jj[0]);
			
				
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
		waitTime(6000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick icon");
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(7000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
			
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
			waitTime(3000);
			String descText="Test";
			type(HipiCreateVideoPage.objPostDescription,"Test", "Description");
			waitTime(2000);
//			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
//			{
//				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			}else {
//				logger.info("User is unable to See Language Options");
//				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
//			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitTime(8000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile");
			for (int i = 0; i <= 50; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
				     expected=getText(HipiProfilePage.objMusicVideoName);
				     
				     System.out.println(expected);
				     String[] mm = expected.split("• ");
						System.out.println(mm[1]);
				     
//				     String[] expect = expected.split("• ");
//						System.out.println(expect[1]);
//					verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
					waitTime(8000);
					if(mm[1].contains(jj[0]))
					{
						logger.info("User is able to view video newly created by music");
						extent.extentLoggerPass("profile screen", "User is able to view video newly created by music");
					}else {
						logger.info("User is unable to view video newly created by music");
						extent.extentLoggerFail("profile screen", "User is unable to view video newly created by music"); 
					}
					break;
				}
			}
			waitTime(3000);
			navigateToHomePage();

		}
	}
	
	public void verifyDescriptionAndHashtagPresentInNewVideo_T644(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T644 - Check if user is able to add Hashtag Title, description to a newly created video");
			System.out.println("T644");
			extent.extentLogger("Creator", "T644");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(7000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			
			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
			
			waitTime(3000);
			String desc="#funny";
			type(HipiCreateVideoPage.objPostDescription,"#funny", "Hashtag");
			waitTime(3000);
			hideKeyboard();
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitTime(8000);
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,10,"profile");
			for (int i = 0; i <= 50; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(desc), "Video");
				
					boolean result=verifyElementDisplayed(HipiProfilePage.objVerifyHastag);
					if(result==true&&desc.equals(desc)) {
						logger.info("User is able to add Hashtag Title, description to a newly created video");
				    	extent.extentLoggerPass("Hastag With Description", "User is able to add Hashtag Title, description to a newly created video");
				    }else {
				    	logger.info("User is unable to add Hashtag Title, description to a newly created video");
				    	extent.extentLoggerFail("Hastag With Description", "User is unable to add Hashtag Title, description to a newly created video"); 		
					}
					break;
				}}

			
			navigateToHomePage();
			
		}
	}	
	
	
	public void addAlphabetAndSpecialTextToVideo_T655(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T655 - Check user is able to add text on the video");
			System.out.println("T655");
			extent.extentLogger("Creator", "T655");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitTime(8000);waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittext,"Edit Text");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittextplusicon,"Plus icon");
			waitTime(3000);
			type(HipiCreateVideoPage.objVideoEditTextfield,"hipi@No1","text");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNextButton,"Next Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenDoneButton,"Done Button");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditNextBtn, "Next Button"))
			{
		    	logger.info("User is able to add text on video");
		    	extent.extentLoggerPass("Textfield", "User is able to add text on video");
		    }else {
		    	logger.info("User is unable to add text on video");
		    	extent.extentLoggerFail("Textfield", "User is unable to add text on video");   	
			}
	discardPopup();	
		}
		}
	public void verifyVoulmeDisplayedInVideoEditScreen_T674(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T674 - Check user is able to see the Volume");
			System.out.println("T674");
			extent.extentLogger("Creator", "T674");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenVoulmebtn," Volume"))
			{
			   	logger.info("User is able to see the volume in video edit screen");
		    	extent.extentLoggerPass("Video Edit Screen", "User is able to see the volume in video edit screen");
		    }else {
		    	logger.info("User is able to see the volume in video edit screen");
		    	extent.extentLoggerFail("Video Edit Screen", "User is able to see the volume in video edit screen");   		
			}
			discardPopup();

		}
		}
	
	
	
	
	public void verifyUserIsAbleToTapOnVoulmeButton_T675(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T675 - Check user is able to see the Volume");
			System.out.println("T675");
			extent.extentLogger("Creator", "T675");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenVoulmebtn," Volume");
			
			if(verifyElementExist(HipiCreateVideoPage.objVolumeScreenHeader, "Volume Popup"))
			{
				logger.info("User is able to tap on volume in video edit screen");
		    	extent.extentLoggerPass("Volume Popup", "User is able to tap on volume in video edit screen");
		    }else {
		    	logger.info("User is unable to tap on volume in video edit screen");
		    	extent.extentLoggerFail("Volume Popup", "User is unable to tap on volume in video edit screen");   
				
			}
		discardPopup();
		}
		}
	
	
	
	
	public void verifyWithoutDescriptionUserCanCreateVideo_T680(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T680 - Check if user is able to add Hashtag Title, description to a newly created video");
			System.out.println("T680");
			extent.extentLogger("Creator", "T680");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(10000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
			waitTime(3000);
//			String Text2="Describe your video";
//			waitTime(2200);
//			String text=getText(HipiCreateVideoPage.objPostDescription);
//			logger.info(text);
			hideKeyboard();
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			
			waitTime(4000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"profile");

			for (int i = 0; i <= 50; i++) {
				scrolltomiddle(HipiCreateVideoPage.objselectfirstVideo);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
//					verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
					waitTime(8000);
					break;
				}
			
			}

				
			
			navigateToHomePage();
			
		}
	}
	
	
	
	public void verifyUserCanUploadVideoWithHashtag_T681(String userType) throws Exception {
		String expected;
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T681 - Check if user is able to upload video with HashTag");
			System.out.println("T681");
			extent.extentLogger("Creator", "T681");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
			waitTime(3000);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			String desc="#hipiTest";
			type(HipiCreateVideoPage.objPostDescription,"#hipiTest", "Hashtag");
			waitTime(3000);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
	      
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			waitTime(5000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"profile");
			for (int i = 0; i <= 50; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
					waitTime(3000);
					 String expected1 = getText(HipiHomePage.objHashtagButtonDescription);
					 System.out.println(expected1);
					 if(expected1.contains("#hipiTes ..MORE"))
					 {
					 	logger.info("User is able to upload video with HashTag");
					 	extent.extentLoggerPass("Post screen", "User is able to upload video with HashTag");
					 }else {
					 	logger.info("User is able to upload video with HashTag");
					 	extent.extentLoggerFail("Post screen", "User is able to upload video with HashTag"); 		
					 }
					break;
				}
				}
			navigateToHomePage();
			
		}
	}
	
	public void verifyWithoutHashtagUserCanCreateVideo_T682(String userType) throws Exception {
		String expected;
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T682 - Check if user is able to upload video without HashTag [Since Hashtag is optional field]");
			System.out.println("T682");
			extent.extentLogger("Creator", "T682");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(15000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
			waitTime(3000);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			
			}
			String desc="King";
			System.out.println("desc="+desc);
			type(HipiCreateVideoPage.objPostDescription,desc , "Description");
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			waitTime(15000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30, "profile");

			for (int i = 0; i <= 50; i++) {
				scrolltomiddle(HipiCreateVideoPage.objselectfirstVideo);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(desc), "Video");
					waitTime(8000);
					break;
				}
			
			}
			navigateToHomePage();
			
		}
	}
	
	public void verifyUserCanMentionSinglePersonWhileUpload_T684(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T684 - Check if user is able to tag single person while upload");
			System.out.println("T684");
			extent.extentLogger("Creator", "T684");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(15000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenFriendsBotton,"@Friends");
			waitTime(5000);
//			String username1=getText(HipiCreateVideoPage.objPostScreenFirstFriendSuggestedUser).replaceAll("\\s+","").replaceAll("[^a-zA-Z ]", "").toUpperCase().trim();
//			System.out.println(username1);
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenFirstFriendSuggestedUser,"First Suggested user");
			//hideKeyboard();
			String postDescription = getText(HipiCreateVideoPage.objPostDescription);
			String text =postDescription.trim();
			System.out.println(text);
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post");
			waitTime(4000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"Profile");
			for (int i = 0; i <= 50; i++) {
				scrolltomiddle(HipiCreateVideoPage.objselectfirstVideo);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(text), "Video");
					waitTime(8000);
					break;
				}
			
			}
					if(postDescription.contains("@"))
					{
						logger.info("user is able to tag single person while upload");
				    	extent.extentLoggerPass("First Video", "user is able to tag single person while upload");
				    }else {
				    	logger.info("user is unable to tag single person while upload");
				    	extent.extentLoggerFail("First Video", "user is unable to tag single person while upload"); 
					}
					navigateToHomePage();
			}
		
		

	}
	public void setVisibilityToPrivate_T689(String userType) throws Exception {
		String expected;
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T689 - Check if user is able to set visibilty mode to private");
			System.out.println("T689");
			extent.extentLogger("Creator", "T689");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 2);
			String postDescription = "Desc"+GeneratingRandomString(7);
			waitTime(3000);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			click(HipiCreateVideoPage.objPostDescription," postDescription");
			type(HipiCreateVideoPage.objPostDescription, "#hipiTest", "Description");
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoPostPrivacyBtn,"privacy");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objVideoPostPublicBtn,"Public");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoPostFriendsBtn,"Friends");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoPostPrivateBtn,"Private");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoPostPrivateBtn,"Private");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post");
			waitTime(4000);
			
//			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
//			waitTime(4000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitUntilElementDisplayed(HipiProfilePage.objPrivateVideoTab, 2);
			waitTime(4000);
			Back(1);
			Thread.sleep(2000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			waitTime(4000);
			for (int i = 0; i <= 50; i++) {
				verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"private Tab");
				 PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
				     expected=getText(HipiProfilePage.objVideoScreenDisc);
				     System.out.println(expected);
				     System.out.println(postDescription);
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
					waitTime(8000);	
					
						if(expected.contains("#hipiTes ..MORE")){
					    	logger.info("User is able to set visibilty mode to Private");
					    	extent.extentLoggerPass("Private Mode", "User is able to set visibilty mode to Private");
					    }else {
					    	logger.info("User is unable to set visibilty mode to Private");
					    	extent.extentLoggerFail("Private Mode", "User is unable to set visibilty mode to Private");	
						}
					break;
				}
			}
			navigateToHomePage();
			}
	}	
	
	public void verifyUserCanEnableComments_T691(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T691 - Check if user is able to set privacy setting to allow[enable] comments");
			System.out.println("T691");
			extent.extentLogger("Creator", "T691");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 100);
			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader, "Post SCreen Headers")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			 waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenCommentsEnabled,"comments enabled"))
			{
		    	logger.info("By defaullt allow comments is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow comments is not enabled");
		    }else {
		    	logger.info("By defaullt allow comments is enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow comments is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenComments,"comments");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenCommentsDisabled,"comments Disabled"))
			{
		    	logger.info("User is able to turn off the allow comment by tapping on toggle button");
		    	extent.extentLoggerPass("video posting screen", "User is able to turn off the allow comment by tapping on toggle button");
		    }else {
		    	logger.info("User is unable to turn off the allow comment by tapping on toggle button");
		    	extent.extentLoggerFail("video posting screen", "User is unable to turn off the allow comment by tapping on toggle button");	
			}
		    click(HipiCreateVideoPage.objPostScreenComments,"comments");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenCommentsEnabled,"comments enabled"))
			{
		    	logger.info("User is able to set privacy setting to allow[enable] comments");
		    	extent.extentLoggerPass("video posting screen", "User is able to set privacy setting to allow[enable] comments");
		    }else {
		    	logger.info("User is unable to set privacy setting to allow[enable] comments");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set privacy setting to allow[enable] comments");	
			}
			discardPopup();	
		}
	}
	public void verifyUserCanDisableComments_T693(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T693 - Check if user is able to set privacy setting to allow/[disable] comments");
			System.out.println("T693");
			extent.extentLogger("Creator", "T693");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			  waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			  
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenCommentsEnabled,"comments enabled"))
			{
		    	logger.info("By defaullt allow comments is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow comments is not enabled");
		    }else {
		    	logger.info("By defaullt allow comments is enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow comments is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenComments,"comments");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenCommentsDisabled,"comments Disabled"))
			{
		    	logger.info("User is able to turn off the allow comment by tapping on toggle button");
		    	extent.extentLoggerPass("video posting screen", "User is able to turn off the allow comment by tapping on toggle button");
		    }else {
		    	logger.info("User is unable to turn off the allow comment by tapping on toggle button");
		    	extent.extentLoggerFail("video posting screen", "User is unable to turn off the allow comment by tapping on toggle button");	
			}
			 click(HipiCreateVideoPage.objPostScreenComments,"comments");
			discardPopup();	
		}
	}
	public void verifyUserCanSetPrivacyToEnableLikes_T695(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T695 - Check if user is able to set privacy setting to allow/[disable] comments");
			System.out.println("T695");
			extent.extentLogger("Creator", "T695");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			  waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenLikesEnabled,"Likes enabled"))
			{
		    	logger.info("By defaullt allow Likes is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow Likes is enabled");
		    }else {
		    	logger.info("By defaullt allow Likes is not enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow Likes is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenLikes,"Likes");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenLikesDisabled,"Likes Disabled"))
			{
		    	logger.info("user is able to set setting to allow[disable] Like");
		    	extent.extentLoggerPass("video posting screen", "user is able to set setting to allow[disable] Like");
		    }else {
		    	logger.info("user is unable to set setting to allow[disable] Like");
		    	extent.extentLoggerFail("video posting screen", "user is unable to set setting to allow[disable] Like");	
			}
			
			click(HipiCreateVideoPage.objPostScreenLikes,"Likes");
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenLikesEnabled,"Likes Enabled"))
			{
		    	logger.info("user is able to set setting to allow[enable] Like");
		    	extent.extentLoggerPass("video posting screen", "user is able to set setting to allow[enable] Like");
		    }else {
		    	logger.info("By defaullt allow Likes is not enabled");
		    	extent.extentLoggerFail("video posting screen", "user is unable to set setting to allow[enable] Like");	
			}
			discardPopup();	
		}
	}
	public void verifyUserCanSetPrivacyToDisableLikes_T697(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T697 - Check if user is able to set privacy setting to allow/[disable] comments");
			System.out.println("T697");
			extent.extentLogger("Creator", "T697");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenLikesEnabled,"Likes enabled"))
			{
		    	logger.info("By defaullt allow Likes is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow Likes is enabled");
		    }else {
		    	logger.info("By defaullt allow Likes is not enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow Likes is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenLikes,"Likes");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenLikesDisabled,"Likes Disabled"))
			{
		    	logger.info("user is able to set setting to allow[disable] Like");
		    	extent.extentLoggerPass("video posting screen", "user is able to set setting to allow[disable] Like");
		    }else {
		    	logger.info("user is unable to set setting to allow[disable] Like");
		    	extent.extentLoggerFail("video posting screen", "user is unable to set setting to allow[disable] Like");	
			}
			discardPopup();	
		}
	}
	//Logged in user - Check if user is able to set privacy setting to allow[enable] Share_T699
	public void verifyUserCanSetPrivacyToEnableDuet_T699(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T699 - Check if user is able to set privacy setting to allow[enable] Duet");
			System.out.println("T699");
			extent.extentLogger("Creator", "T699");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduetEnabled,"Duet enabled"))
			{
		    	logger.info("By defaullt allow Duet is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow Duet is enabled");
		    }else {
		    	logger.info("By defaullt allow Duet is not enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow Duet is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenAllowduet,"Allow Duet");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduetDisabled,"Duet Disabled"))
			{
		    	logger.info("User is able to set setting to allow[disable] Duet");
		    	extent.extentLoggerPass("video posting screen", "User is able to set setting to allow[disable] Duet");
		    }else {
		    	logger.info("User is unable to set setting to allow[disable] Duet");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set setting to allow[disable] Duet");	
			}
		    click(HipiCreateVideoPage.objPostScreenAllowduet,"Allow Duet");
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduetEnabled,"Duet Enabled"))
			{
		    	logger.info("User is able to set setting to allow[enable] Duet");
		    	extent.extentLoggerPass("video posting screen", "User is able to set setting to allow[enable] Duet");
		    }else {
		    	logger.info("User is unable to set setting to allow[enable] Duet");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set setting to allow[enable] Duet");	
			}
			discardPopup();	
		}
	}
	public void verifyUserCanSetPrivacyToDisableDuet_T701(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T701 - Check if user is able to set privacy setting to allow[disable] Duet");
			System.out.println("T701");
			extent.extentLogger("Creator", "T701");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduetEnabled,"Duet enabled"))
			{
		    	logger.info("By defaullt allow Duet is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow Duet is enabled");
		    }else {
		    	logger.info("By defaullt allow Duet is not enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow Duet is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenAllowduet,"Duet");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduetDisabled,"Duet Disabled"))
			{
		    	logger.info("User is able to set setting to allow[disable] Duet");
		    	extent.extentLoggerPass("video posting screen", "User is able to set setting to allow[disable] Duet");
		    }else {
		    	logger.info("User is unable to set setting to allow[disable] Duet");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set setting to allow[disable] Duet");	
			}
			discardPopup();	
		}
	}
	
	public void verifyUserCanSetPrivacyToEnableDuet_T703(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T703 - Check if user is able to set privacy setting to allow[enable] Save to device");
			System.out.println("T703");
			extent.extentLogger("Creator", "T703");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save to device"))
			{
		    	logger.info("By defaullt allow Save to duet is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow Save to duet is enabled");
		    }else {
		    	logger.info("By defaullt allow Save to duet is not enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow Save to duet is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save to device");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDeviceDisabled,"Save to device Disabled"))
			{
		    	logger.info("User is able to set privacy setting to allow [enable] Save to device");
		    	extent.extentLoggerPass("video posting screen", "User is able to set privacy setting to allow [Disable] Save to device");
		    }else {
		    	logger.info("User is unable to set privacy setting to allow [enable] Save to device");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set privacy setting to allow [DIsable] Save to device");	
			}
		    click(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save to device");
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDeviceEnabled,"Save to device Enabled"))
			{
		    	logger.info("User is able to set privacy setting to allow [enable] Save to device");
		    	extent.extentLoggerPass("video posting screen", "User is able to set privacy setting to allow [enable] Save to device");
		    }else {
		    	logger.info("User is unable to set privacy setting to allow [enable] Save to device");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set privacy setting to allow [enable] Save to device");	
			}
			discardPopup();	
		}
	}
	public void verifyUserCanSetPrivacyToDisableDuet_T705(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T705 - Check if user is able to set privacy setting to allow[disable] Download");
			System.out.println("T705");
			extent.extentLogger("Creator", "T705");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenCommentsEnabled, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save to device"))
			{
		    	logger.info("By defaullt allow Save to duet is enabled");
		    	extent.extentLoggerPass("video posting screen", "By defaullt allow Save to duet is enabled");
		    }else {
		    	logger.info("By defaullt allow Save to duet is not enabled");
		    	extent.extentLoggerFail("video posting screen", "By defaullt allow Save to duet is not enabled");	
			}
			waitTime(3000);
		    click(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save to device");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDeviceDisabled,"Save to device Disabled"))
			{
		    	logger.info("User is able to set privacy setting to allow [enable] Save to device");
		    	extent.extentLoggerPass("video posting screen", "User is able to set privacy setting to allow [Disable] Save to device");
		    }else {
		    	logger.info("User is unable to set privacy setting to allow [enable] Save to device");
		    	extent.extentLoggerFail("video posting screen", "User is unable to set privacy setting to allow [DIsable] Save to device");	
			}
			discardPopup();	
		}
	}
	public void verifyUserCanSaveVideoAsDraft_T707(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T707 - Check if user is able to set privacy setting to allow[disable] Download");
			System.out.println("T707");
			extent.extentLogger("Creator", "T707");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objsavedraft, 20);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objsavedraft,"Save As Draft");
//			if(verifyElementDisplayed(HipiCreateVideoPage.objSaveasDraftPopup))
//			{
//		    	logger.info("Save as Draft popup has been displayed");
//		    	extent.extentLoggerPass("save as draft popup", "Save as Draft popup has been displayed");
//		    }else {
//		    	logger.info("Save as Draft popup has been displayed");
//		    	extent.extentLoggerFail("save as draft popup", "Save as Draft popup has not displayed");
//			}
			if(verifyElementPresent(HipiHomePage.objForYou,"Home Screen"))
			{
				logger.info("User is able to save video as draft for upload");
		    	extent.extentLoggerPass("Home Screen", "Save as Draft popup has been displayed");
		    }else {
		    	logger.info("User is unable to save video as draft for upload");
		    	extent.extentLoggerFail("Home Screen", "User is unable to save video as draft for upload");
			}
			navigateToHomePage();
	}
	}
	public void verifySaveAsDraftCtaIsVisible_T709(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T709 - Check whether 'Save as Draft' CTA is available on 'Post HiPi' screen");
			System.out.println("T709");
			extent.extentLogger("Creator", "T709");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitUntilElementDisplayed(HipiCreateVideoPage.objsavedraft, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objsavedraft,"Save As Draft"))
			{
				logger.info("Save as draft CTA is visible in post screen");
		    	extent.extentLoggerPass("Post Screen", "Save as draft CTA is visible in post screen");
		    }else {
		    	logger.info("Save as draft CTA is not visible in post screen");
		    	extent.extentLoggerFail("Post Screen", "Save as draft CTA is not visible in post screen");
			}
			discardPopup();
	}
	}
	
	public void verifyvideoSavedAsDraft_T723(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T723 - Check if user is able to view the Cover photo of video created");
			System.out.println("T723");
			extent.extentLogger("Creator", "T723");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitTime(5000);
			if(verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab"))
			{
				logger.info("Draft tab has been displayed");
		    	extent.extentLoggerPass("Draft Page", "Draft tab has been displayed");
		    }else {
		    	logger.info("Draft tab has been displayed");
		    	extent.extentLoggerFail("Draft Page", "Draft tab has been displayed");
			}
			if(verifyElementPresentAndClick(HipiProfilePage.objDraftFirstVideo,"Drafted Video"))
			{
				logger.info(" video saved as draft is displayed.");
		    	extent.extentLoggerPass("Draft Page", " video saved as draft is displayed.");
		    }else {
		    	logger.info(" video saved as draft is not displayed.");
		    	extent.extentLoggerFail("Draft Page", " video saved as draft is not displayed.");
			}
			navigateToHomePage();
		}
	}
	public void verifyUSerCanCreateShortVIdeo_T726(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T726 - Check user is able to create video less than 6s");
			System.out.println("T726");
			extent.extentLogger("Creator", "T726");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			click(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitTime(1000);
			click(HipiCreateVideoPage.objRecordIcon, "Record icon Again");

			boolean verify=verifyElementDisplayed(HipiCreateVideoPage.objVideoTickBtn);
			if(verify==false) {
				logger.info("User Can't create a video less than 6s");
		    	extent.extentLoggerPass("Video Creation Page", "User Can't create a video less than 6s");
		    }else {
		    	logger.info("User Can create a video less than 6s");
		    	extent.extentLoggerFail("Video Creation Page", "User Can create a video less than 6s");	
			}
			discardPopup();
		}
	}
	
	public void verifyUserCanAdjustMicrophoneVolume_T676(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T676 - Check user is able to adjust the voulme of microphone");
			System.out.println("T676");
			extent.extentLogger("Creator", "T676");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenVoulmebtn, 10);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenVoulmebtn," Volume"))
			{
			   	logger.info("User is navigated to video edit screen");
		    	extent.extentLoggerPass("Video Edit Screen", "User is navigated to video edit screen");
		    }else {
		    	logger.info("User is unable to navigate to video edit screen");
		    	extent.extentLoggerFail("Video Edit Screen", "User is unable to navigate to video edit screen");   		
			}
			waitTime(4000);
			 verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
//				verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
				Boolean a = verifyElementExist(HipiSoundDetailPage.objMicrophoneEnabled,"Microphone with volume bar");
				String Value = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
				System.out.println(Value);
				logger.info(Value);
				if((a == true)) {
					logger.info("Microphone with volume bar is 'enabled' when video is created with original sound");
					extent.extentLoggerPass("AddSoundPostShoot", "Microphone with volume bar is 'enabled' when video is created with original sound");
				}else {
					logger.error("Microphone with volume bar is Not 'enabled' when video is created with original sound");
					extent.extentLoggerFail("AddSoundPostShoot", "Microphone with volume bar is Not'enabled' when video is created with original sound");
						}
				verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
				Boolean v = verifyElementExist(HipiSoundDetailPage.objMicrophoneMinValue,"Microphone with volume bar");
				String Value2 = findElement(HipiSoundDetailPage.objMicrophoneMaxValue).getText();
				System.out.println(Value2);
				extent.extentLogger("", Value2);
				logger.info(Value2);
				if((v == true)) {
					logger.info("Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
					extent.extentLoggerPass("AddSoundPostShoot", "Microphone  icon is 'disabled' when video is created with some added sound with volume 0");
				}else {
					logger.error("Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
					extent.extentLoggerFail("AddSoundPostShoot", "Microphone  icon is Not 'disabled' when video is created with some added sound with volume 0");
						}		
				
//				 verifyElementExist(HipiSoundDetailPage.objAdjustVolumePopup, "Adjust volume popup");
					DecreaseMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar);
				    String currentvolume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
				    System.out.println(currentvolume);extent.extentLogger("", "Volume after Decrease : "+currentvolume);
				    int k=Integer.parseInt(currentvolume);
				    IncreasingMusicVolume(HipiSoundDetailPage.objMicrophoneSeekbar); 	
				    String volume = getDriver().findElement(HipiSoundDetailPage.objMicrophoneVolumeValue).getText();
				    System.out.println(volume);extent.extentLogger("", "Volume after Decrease : "+volume);
				    int l=Integer.parseInt(volume);
				    if(l>k) {
				    	logger.info("user is able to Adjust volume of microphone");
						extent.extentLoggerPass("AddSoundPostShoot", "user is able to Adjust volume of microphone");
					}else {
						logger.error("user is unable to Adjust volume of microphone");
						extent.extentLoggerFail("AddSoundPostShoot", "user is unable to Adjust volume of microphone");
					}
				discardPopup();
		}
	}
	public void videoPublishing() throws Exception {
		for (int i = 0; i <= 50; i++) {
			scrolltomiddle(HipiCreateVideoPage.objselectfirstVideo);
			if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
				Thread.sleep(2000);
				Back(1);
				Thread.sleep(2000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			} else {
			
				click(HipiCreateVideoPage.objselectfirstVideo, "First video");
//				verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
				waitTime(8000);
				break;
			}
		
		}
	}
	public void scrolltomiddle(By byLocator) throws Exception {
		TouchAction action = new TouchAction(getDriver());
		waitTime(5000);
		Dimension size = getDriver().manage().window().getSize();
		WebElement ele = getDriver().findElement(byLocator);
		Point point = ele.getLocation();
		int startx = point.getX();
		// System.out.println(startx);
		int starty = point.getY();
		// System.out.println(starty);
		int posy = (size.height) / 2;
		// System.out.println("height :"+size.height);
		// System.out.println("posy :"+posy);

		action.press(PointOption.point(startx, starty)).waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
				.moveTo(PointOption.point(startx, posy)).release().perform();
	}
	
	
	//---------------------------------------Kartheek------------------------------------
	
	public void  bannersAtTheTopOfTheDiscoverPage__T1515(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1515 - Guest User- Verify if user able to see and click the banners at the top of the discover page");
			System.out.println("T1515");
			extent.extentLogger("Discover", "T1515");	
			
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitUntilElementDisplayed(HipiDiscoverPage.objBannerPictures, 1);
			verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Image");
			waitTime(3000);
			click(HipiDiscoverPage.objBannerPictureIndex1, "Banner Image index");
			click(HipiDiscoverPage.objBannerPictures, "Banner Image");
//			click(HipiDiscoverPage.objBannerImage, "Banner Image");
			waitTime(3000);
			navigateToBannerDetailsPage(userType);
			if(verifyElementPresent(HipiDiscoverPage.objHashTagNameInBannerPictures, "HashTag Name In Banner Pictures")){
				logger.info("User is able to see and click banner picture and also able to navigate to respective page");	
				extent.extentLoggerPass("Discover_Banners", "User is able to see and click banner picture and also able to navigate to respective page");
			}else {
				logger.info("User is able to see and click banner picture and also able to navigate to respective page");	
				extent.extentLoggerFail("Discover_Banners", "User is able to see and click banner picture and also able to navigate to respective page");	
			}
			navigateToHomePage();
			
			
			
			
		}
	}
	
	
	public void clickOnTheVideoBannerDisplayedInTheDiscoverPage_T1516(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1516 - Guest User-Verify if user able to see and click on the video banner displayed in the discover page_T1516");
			System.out.println("T1516");
			extent.extentLogger("Discover_Banners","T1516");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Pictures");
			//if(verifyElementPresent(HipiDiscoverPage.objTabIndicator, "Tab indicator"))
			//{
			//SwipeRail(HipiDiscoverPage.objFourthBannerPicture);
			//waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objTabIndicator3, "Tab indicator");
			
			click(HipiDiscoverPage.objBannerPictures,"Banner pictures");
			waitTime(2000);
			navigateToBannerDetailsPage(userType);
			if(verifyElementPresent(HipiDiscoverPage.objHashTagNameInBannerPictures, "Hash TagName In Banner Pictures")){
				
				logger.info("User is able to see and click on video banner displayed in the discover page");	
				extent.extentLoggerPass("Discover_Banners", "User is able to see and click on video banner displayed in the discover page");
				
			}else {
				logger.info("User is  not able to see and not able to click on video banner displayed in the discover page");	
				extent.extentLoggerFail("Discover_Banners", "User is not able to see and not able to click on video banner displayed in the discover page");	
			}
			navigateToHomePage();
		}
			
			
	
}	
	public void verifyForVideoClicksOnTheBannersDetailsPage_T1519(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1519 - Guest User-Verify for video clicks on the banners details page_T1519");
			System.out.println("T1519");
			extent.extentLogger("Discover_Banners","T1519");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Images");
			
			verifyElementPresentAndClick(HipiDiscoverPage.objTabIndicator3, "Tab indicator");
			
			click(HipiDiscoverPage.objBannerPictures,"Banner Images");
			waitTime(3000);
			navigateToBannerDetailsPage(userType);
			verifyElementPresent(HipiDiscoverPage.objHashTagNameInBannerPictures, "Hash TagName In Banner Pictures");
			verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage,"First Video Banner Page");
			waitTime(4000);
			if(verifyElementPresent(HipiHomePage.objPlayerScreen, "Player Screen")){
				logger.info("User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");	
				extent.extentLoggerPass("Discover_Banners", "User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");
			}else {
				logger.info("User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");	
				extent.extentLoggerFail("Discover_Banners", "User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");	
			}
			navigateToHomePage();
			
		}
	}
	public void verifyForCreateVideoCameraButtonClickAndNavigation_T1525(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1525 - Guest User : verify for create video camera button click and navigation_T1525");
			System.out.println("T1525");
			extent.extentLogger("Discover_Banners","T1525");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Images");
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objTabIndicator3, "Tab indicator");
			
			click(HipiDiscoverPage.objBannerPictures,"Banner Images");
			waitTime(3000);
			navigateToBannerDetailsPage(userType);
			verifyElementPresent(HipiDiscoverPage.objBannerHeader, "Banner Header");
			verifyElementPresentAndClick(HipiDiscoverPage.objCreateVideo, "Create Video");
			VerifyLoginPopUp();
			navigateToHomePage();
}
	}
	
	public void verifyForAddFavoriteButtonFunctionality_T1533(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1533 - Verify for Add Favorite button functionality_T1533");
			System.out.println("T1533");
			extent.extentLogger("Discover_Search", "T1533");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Images");
			
			verifyElementPresentAndClick(HipiDiscoverPage.objTabIndicator3, "Tab indicator");
			
			click(HipiDiscoverPage.objBannerPictures,"Banner Images");
			waitTime(3000);
			navigateToBannerDetailsPage(userType);
			verifyElementPresent(HipiDiscoverPage.objBannerHeader, "Banner Header");
		    addFavouritesConverting();
		    waitTime(5000);
		    verifyElementPresentAndClick(HipiDiscoverPage.objAddToFavorite, "Add to Favourites");
		    verifyElementPresent(HipiDiscoverPage.objBannerHeader, "Banner Header");
		    String text = getText(HipiDiscoverPage.objBannerHeader);
		    System.out.println(text);
		    navigateToHomePage();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Saved button");	
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtag Tab");	
			 verifyElementPresent(HipiDiscoverPage.objfavoriteshashtags, "Banners Rail");
		String text1 = getText(HipiDiscoverPage.objfavoriteshashtags);
		System.out.println(text1);
	if(text.equals(text1))
	 {
	  	  logger.info("User is able to tap on Add to favorites button and on tap and this favorited hashtag is get saved on the favorite page of user profile under hashtag tab");
			extent.extentLoggerPass("favorites Hashtag", "User is able to tap on Add to favorites button and on tap and this favorited hashtag is get saved on the favorite page of user profile under hashtag tab");
	    }else
	    {
	  	  logger.info("User is not able to tap on Add to favorites button and on tap and this favorited hashtag is not get saved on the favorite page of user profile under hashtag tab");
			extent.extentLoggerFail("favorites Hashtag", "User is not able to tap on Add to favorites button and on tap and this favorited hashtag is not get saved on the favorite page of user profile under hashtag tab");
	    }
		  navigateToHomePage();
	        }
			}	
	
	public void addFavouritesConverting() throws Exception
	{
	 if(verifyElementExist(HipiDiscoverPage.objAddedToFavouritesbutton,"Added to Favourites " ))
	   {
		 logger.info("User Added to Favourites before");
//			extent.extentLoggerPass("", "User Added to Favourites before");
	 
		 click(HipiDiscoverPage.objAddedToFavouritesbutton,"Added to Favourites Button" );
	   }else{
		   logger.info("User is not Add to Favourites");
//			extent.extentLoggerFail("", "User is not Add to Favourites");
	  
	   }
	}	
	public void verifyForCreateVideoCameraButtonClickAndNavigation_T1537(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1537 - verify for create video camera button click and navigation_T1537");
			System.out.println("T1537");
			extent.extentLogger("Discover_Search", "T1537");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Images");
			
			verifyElementPresentAndClick(HipiDiscoverPage.objTabIndicator3, "Tab indicator");
			
			click(HipiDiscoverPage.objBannerPictures,"Banner Images");
			waitTime(10000);
			navigateToBannerDetailsPage(userType);
			verifyElementPresent(HipiDiscoverPage.objBannerHeader, "Banner Header");
	verifyElementPresentAndClick(HipiDiscoverPage.objCreateVideoButton, "Create Video Button");
	//AllowPermission();
	allowPermissions();
	if(verifyElementPresent(HipiDiscoverPage.objRecordButton, "Record Button"))
	{
	  	  logger.info("On tap craete video button user is navigate craete video page of creatot Module");
			extent.extentLoggerPass("Record Button", "On tap craete video button user is navigate craete video page of creatot Module");
	    }else
	    {
	  	  logger.info("On tap craete video button user is not navigate craete video page of creatot Module");
			extent.extentLoggerFail("Record Button", "On tap craete video button user is not navigate craete video page of creatot Module");
	    }
		  navigateToHomePage();
	        }
			}
	 public void SwipeRailsToLeftAndRight__T1540(String userType) throws Exception{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T1540 - Guest User -Verify swipe the rail to left and right");
				System.out.println("T1540");
				extent.extentLogger("Discover_Search", "T1540");
		
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
//		scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
//		PartialSwipe("UP", 1);

		String text = getText(HipiDiscoverPage.objFirstProfileName);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		
		String text1 = getText(HipiDiscoverPage.objFirstProfileName);
		if (!text.equals(text1)) {
			  logger.info("User is able to swipe rail left");
				extent.extentLoggerPass("", "User is able to swipe rail left");
		    }else {
		  	  logger.info("User is not able to swipe rail left");
				extent.extentLoggerFail("", "User is not able to swipe rail left");
		    }
		
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Right",3);
		String text2 = getText(HipiDiscoverPage.objFirstProfileName);
		if (!text1.equals(text2)) {
			  logger.info("User is able to swipe rail Right");
				extent.extentLoggerPass("", "User is able to swipe rail Right");
		    }else {
		  	  logger.info("User is not able to swipe rail Right");
				extent.extentLoggerFail("", "User is not able to swipe rail Right");
		    }
		navigateToHomePage();
	} 
	 }
		
	public void verifyForArrowMarkInFrontOfRailTitleName_T1544(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1544 - Guest User -Verify for arrow mark infront of rail title name_T1544");
			System.out.println("T1544");
			extent.extentLogger("Discover_Rail","T1544");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);

		//	Swipe("Left", 3);
//			PartialSwipe("UP", 1);
			String first=getText(HipiDiscoverPage.objFirstProfileName);
			System.out.println(first);
			//waitTime(2000);
			swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
			String second=getText(HipiDiscoverPage.objFirstProfileName);
			System.out.println(second);
			if(!first.equals(second))
			{
				logger.info("Rail is scrolled on discover page");	
				extent.extentLoggerPass("Discover_Rail", "Rail is scrolled on discover page");
			}else {
				logger.info("Rail is not scrolled on discover page");	
				extent.extentLoggerFail("Discover_Rail", "Rail is not scrolled on discover page");
			}
			verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			waitTime(2000);
			click(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark ");
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Bollywood Zone After Tapping Arrow")){
				logger.info("User is able to see arrow mark infront of rail title and able to navigate to user profile list page");	
				extent.extentLoggerPass("Discover_Rail", "User is able to see arrow mark infront of rail title and able to navigate to user profile list page");
			}else {
				logger.info("User is not able to see arrow mark infront of rail title and also not able to navigate to user profile list page");	
				extent.extentLoggerFail("Discover_Rail", "User is able to see arrow mark infront of rail title and also not able to navigate to user profile list page");	
			}
			navigateToHomePage();
			
}
	}	
	public void verifyForClickOnProfileImageAndNameFromTheUserListPage_T1548(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1548 - Guest User: Verify for click on profile image and name from the user list page_T1548");
			System.out.println("T1548");
			extent.extentLogger("Discover_Rail","T1548");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
//			PartialSwipe("UP", 1);
//			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
			
			//Swipe("Left", 3);
			waitTime(2000);
			
			verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			waitTime(2000);
			
			click(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			
			verifyElementPresentAndClick(HipiDiscoverPage.objProfileIconInBollywoodZone,"Profile Icon");
			
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
			}else {
				logger.info(" User is not  navigated to profile screen.");	
				extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
			}
			navigateToHomePage();			
}
	}	
	public void verifyForSearchFieldOnTheUserFollowingTab_T1560(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1560 - Guest User - Verify for search field on the user following tab_T1560");
			System.out.println("T1560");
			extent.extentLogger("Discover_Rail","T1560");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
//			PartialSwipe("UP", 1);

//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
			waitTime(2000);
			click(HipiDiscoverPage.objFirstRailImage, "First Rail Image");
		//	verifyElementPresentAndClick(HipiDiscoverPage.objProfileIconInBollywoodZone,"Profile Icon In Bollywood");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowingbutton, "Following In Profile");
			VerifyLoginPopUp();
			navigateToHomePage();
		}
	}
	public void VerifyShareButtonAndItsClickOnTheUserProfilePage_T1561(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Verify for click on search field_T1561");
			System.out.println("T1561");
			extent.extentLogger("Discover_Search", "T1561");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
//	verifyElementPresentAndClick(HipiDiscoverPage. objBollywood,"User Profile");
	verifyElementPresentAndClick(HipiProfilePage.objShearIcon, "Shear Icon");
	//indepandent...
		}
	}
	public void verifyForArrowMarkInFrontOfRailTitleName_T1583(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1583 - Logged In User -Verify for arrow mark infront of rail title name_T1583");
			System.out.println("T1583");
			extent.extentLogger("Discover_Rail","T1583");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
//			PartialSwipe("UP", 1);

			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
			//Swipe("Left", 3);
			waitTime(2000);
			
			verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			waitTime(2000);
			click(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, " After Tapping Arrow")){
				logger.info("User is able to see arrow mark infront of rail title and able to navigate to user profile list page");	
				extent.extentLoggerPass("Discover_Rail", "User is able to see arrow mark infront of rail title and able to navigate to user profile list page");
			}else {
				logger.info("User is not able to see arrow mark infront of rail title and also not able to navigate to user profile list page");	
				extent.extentLoggerFail("Discover_Rail", "User is able to see arrow mark infront of rail title and also not able to navigate to user profile list page");	
}
			navigateToHomePage();
			
}
	
}
	
	public void verifyFollowButtonAndItsClickOnTheUserProfilePage_T1592(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1592 - Logged In User- Verify follow button and its click on the user profile page_T1592");
			System.out.println("T1592");
			extent.extentLogger("Discover_Rail","T1592");
			removeFollowingUsers();
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
//			PartialSwipe("UP", 1);

//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
			//Swipe("Left", 3);
			waitTime(2000);
			click(HipiDiscoverPage.objFirstRailImage, "First Rail image");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowCTA, "Follow Button");
//			String userName = getText(HipiDiscoverPage.objNameUserDetails);
//			System.out.println(userName);
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
//			String userName1 = getText(HipiDiscoverPage.objRespectedFollowingUser(userName));
//			System.out.println(userName1);
			if (verifyElementPresent(HipiProfilePage.objFollowingListTab, "Following Tab")) {
				logger.info("User is able to follow and is displayed in user profile page");	
				extent.extentLoggerPass("Discover_Rail", "User is able to follow and is displayed in user profile page");
			}else {
				logger.info("User is able to follow and is displayed in user profile page");	
				extent.extentLoggerFail("Discover_Rail", "User is able to follow and is displayed in user profile page");	
			}
			navigateToHomePage();
			}
			
	}
	public void removeFollowingUsers() throws Exception {
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
		waitTime(4000);
		 for(int i=1; i<=25; i++) {	
		if (verifyElementExist(HipiProfilePage.objFollowbutton, "Following Button")) {
			click(HipiProfilePage.objFollowbutton, "Following Button");
			logger.info("User is able to removing following user");	
			extent.extentLoggerPass("", "User is able to removing following user");
			
		}else {
//			logger.info("User is able to see Following Button");	
//			extent.extentLoggerFail("", "User is able to see Following Button);	");	
			break;
		}
		 }	
	}
	public void verifyFollowingTabAndItsClickOnTheUserProfilePage_T1593(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1593 - Logged In User- Verify Following tab and its click on the user profile page_T1593");
			System.out.println("T1593");
			extent.extentLogger("Discover_Rail","T1593");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			SwipeUntilFindElement(HipiDiscoverPage.objTVShortsHeader, "UP");
			verifyElementPresentAndClick(HipiDiscoverPage.objTvShortsFirstRail, "Tv Short First Rail");
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following Button");
		//	if(verifyElementPresent(HipiDiscoverPage.objSearchFollowing, "Search Following")){
			List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/music_name']"));
		    int size = count.size();
			System.out.println(size);
	        if(size>1) {
				logger.info("user can see the following list and following list count is "+size);	
				extent.extentLoggerPass("Discover_Rail", "user can see the following list and following list count is "+size);
			}else {
				logger.info("user can not see the following list and following list count is not displayed ");	
				extent.extentLoggerFail("Discover_Rail", "user can not see the following list and following list count is not displayed ");	
}
			navigateToHomePage();
}
	}
	
	
	public void validateTheAutoSuggestionListUnderFollowingTabRespectiveToSearchInput_T1601(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1601 - Logged In User - validate the auto suggestion list under following tab respective to search input_T1601");
			System.out.println("T1601");
			extent.extentLogger("Discover_Rail","T1601");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
//			PartialSwipe("UP", 1);

			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
			waitTime(2000);
			click(HipiDiscoverPage.objFirstRailImage, "First Rail Image");
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers Button");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Discover Search Inbox");
			type(HipiDiscoverPage.objDiscoverSearchInbox, "dhanu", "Search Field");
			hideKeyboard();
			waitTime(2000);
			List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/music_name']"));
		    int size = count.size();
			System.out.println(size);
//	        if(size>1) {
//				logger.info("user can type on search field under following tab and autosuggestion list is not displayed  "+size);	
//				extent.extentLoggerPass("Discover_Rail", "user can type on search field under following tab and autosuggestion list is displayed  "+size);
//			}else {
//				logger.info("user can not type on search field under following tab and autosuggestion list is not displayed  ");	
//				extent.extentLoggerFail("Discover_Rail", "user can not type on search field under following tab and autosuggestionn list is not displayed  ");	
//}
			logger.info("user can type on search field under following tab and autosuggestion list is not displayed  "+size);	
			extent.extentLoggerPass("", "user can type on search field under following tab and autosuggestion list is displayed  "+size);
//		
			navigateToHomePage();
}
	}
	public void verifyForClickOnDisplayedUserNameFromTheSearchResultAndNaigation_T1609(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1609 - Logged In -Verify for click on displayed user name from the search result and navigation_T1609");
			System.out.println("T1609");
			extent.extentLogger("Discover_Rail","T1609");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
//			scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
//			PartialSwipe("UP", 1);

			  verifyElementPresent(HipiDiscoverPage.objFirstRailImage, "First Rail image");
		String text = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		String text1 = getText(HipiDiscoverPage. objFirstProfileName);
		System.out.println(text1);
		if(!text.equals(text1)) {	  
	   	 logger.info("User is able to swipe rail");
				extent.extentLoggerPass("", "User is able to swipe rail");
	   }else{
	   	 logger.info("User is not able to swipe rail");
	   	 extent.extentLoggerFail("", "User is not able to swipe rail");
	   }
			waitTime(2000);
			click(HipiDiscoverPage.objFirstRailImage, "First Rail Image");
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers Button");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Discover Search Inbox");
			type(HipiDiscoverPage.objDiscoverSearchInbox, "dhanu", "Search Field");
			verifyElementPresentAndClick(HipiDiscoverPage.objFollowersListClick, "Followers List");
			

			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile screen.");	
				extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
			}else {
				logger.info(" User is not  navigated to profile screen.");	
				extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
			}
			navigateToHomePage();
			
}
	}
	
	public void  verifyBackButtonAndItsClickOnTheUserProfilePage_T1399(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1399 - Verify back button and its click on the user profile page_T1399");
		System.out.println("T1399");
		extent.extentLogger("Discover_Search", "T1399");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Kundali");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresentAndClick(HipiDiscoverPage.objFollowingtab_USertab, "Following tap");
	waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
	String val1 = getParameterFromXML("SearchAnyFollowing");
	waitTime(4000);
	type(HipiDiscoverPage.objDiscoverSearchInbox,val1 , "Search Inbox");
//		verifyElementPresentAndClick(HipiDiscoverPage.objkeyboardSearchbutton, "Search button");
	hideKeyboard();
	waitTime(5000);
	verifyElementPresentAndClick(HipiDiscoverPage.objfirstuserfromlist_USertab, "First Searched Result");

	if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
		logger.info("User is navigated to profile screen.");	
		extent.extentLoggerPass("Profile_Followers", "User is navigated to profile screen.");
	}else {
		logger.info(" User is not  navigated to profile screen.");	
		extent.extentLoggerFail("Profile_Followers", " User is not navigated to profile screen.");	
	}
	waitTime(5000);
	verifyElementPresentAndClick(HipiDiscoverPage.objbackbutton_USertab, "Back Button");
	waitTime(4000);
	if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
	 {
  	  logger.info("User can tap on back button placed at left side upper corner and navaigate to respective page");
		extent.extentLoggerPass("respective page", "User can tap on back button placed at left side upper corner and navaigate to respective page");
    }else
    {
  	  logger.info("User can not tap on back button placed at left side upper corner and navaigate to respective page");
		extent.extentLoggerFail("respective page", "User can not tap on back button placed at left side upper corner and navaigate to respective page");
    }
	
  navigateToHomePage();
	}
	}
	public void  verifyForUserCanSearchAnyFollowingUserFromTheList_T1413(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1413 - Verify for User can search any following user from the list_T1413");
		System.out.println("T1413");
		extent.extentLogger("Discover_Search", "T1413");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(5000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "Sunny Leone";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
	verifyElementPresentAndClick(HipiDiscoverPage.objFollowingtab_USertab, "Following tap");
	waitTime(4000);
	verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
//	String val1 = getParameterFromXML("search_any_following");
	String value = "Comedy Shots";
	type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
	hideKeyboard();
	waitTime(5000);
	String searchBar = getText(HipiDiscoverPage.objDiscoverSearchInbox);
	String reasult = getText(HipiDiscoverPage.objfirstuserfromlist_USertab);
	if (reasult.contains(searchBar)) {
	  	  logger.info("user can type on search field under following tab and autosuggestion result is display");
			extent.extentLoggerPass("Auto Suggestion", "user can type on search field under following tab and autosuggestion result is display");
	    }else
	    {
	  	  logger.info("user can not type on search field under following tab and autosuggestion result is not display");
			extent.extentLoggerFail("Auto Suggestion", "user can not type on search field under following tab and autosuggestion result is not display");
	    }
  navigateToHomePage();

	}
	}
	
	public void verifyIfUserAbleToPlayAnyVideoFromTheVideosTabOfTheSearchedResults_T1429 (String userType) throws Exception
	{
//		if(userType.equalsIgnoreCase("NonSubscribedUser"))
//	{
		extent.HeaderChildNode("T1429 - Verify if user able to play any video from the videos tab of the searched results_T1429");
		System.out.println("T1429");
		extent.extentLogger("Discover_Search", "T1429");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Kundali");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objVideostabinSearchresultpage, "Videos tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound, "Videos");
	    if(verifyElementPresent(HipiHomePage.objPlayerScreen, "Player Screen")){
			logger.info("User is able to play any video from the videos tab under the searched results");	
			extent.extentLoggerPass("Discover_Banners", "User is able to play any video from the videos tab under the searched results");
		}else {
			logger.info("User is not able to play any video from the videos tab under the searched results");	
			extent.extentLoggerFail("Discover_Banners", "User is not able to play any video from the videos tab under the searched results");	
		}
		  navigateToHomePage();
	        }
			
	
	
	public void verifyIfUserClicksOnAnySoundsFromTheRespectiveTabAndValidate_T1432 (String userType) throws Exception
	{
//		if(userType.equalsIgnoreCase("NonSubscribedUser"))
//	{
		extent.HeaderChildNode("T1432 - Verify if user clicks on any sounds from the respective tab and validate_T1432");
		System.out.println("T1432");
		extent.extentLogger("Discover_Search", "T1432");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    waitTime(4000);
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    waitTime(4000);
	    if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
		  navigateToHomePage();
	        }
	
	
	public void soundsPosterFromTheRespectiveTab__T1433(String userType) throws Exception {
		
		
		extent.HeaderChildNode("T1433 - Verify if user clicks on any sounds poster from the respective tab and validate the sound on device");
		System.out.println("T1433");
		extent.extentLogger("Discover_Search", "T1433");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
		verifyElementPresentAndClick(HipiSoundDetailPage.objPlayIcon, "Play icon");
		if(verifyElementPresent(HipiSoundDetailPage.objPlayIconEnable, "Play Icon")) {
			logger.info("User is able to play sound tapping sound poster");
			extent.extentLoggerPass("", "User is able to play sound tapping sound poster");
	    }else
	    {
	  	  logger.info("User is not able to play sound tapping sound poster");
			extent.extentLoggerFail("", "User is not able to play sound tapping sound poster");
	    }
	  navigateToHomePage();
}
	
	public void verifyUserIsRedirectedToSoundTabOnTheSearchedResultPageByTappingBackInSoundDetailScreen_T1442(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1442 - Check if user is redirected to sound tab on the searched result page by tapping 'back' in Sound Detail Screen_T1442");
		System.out.println("T1442");
		extent.extentLogger("Discover_Search", "T1442");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
	    verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Button");
	    waitTime(4000);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
		 {
	  	  logger.info("User is able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
			extent.extentLoggerPass("Sound Detail Screen", "User is able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
	    }else
	    {
	  	  logger.info("User is not able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
			extent.extentLoggerFail("Sound Detail Screen", "User is not able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
	    }
		  navigateToHomePage();
	        }
			}
	
	
	

	public void verifyUserIsRedirectedToSoundTabOnTheSearchedResultPageByTappingDeviceBackButtonInSoundDetailScreen_T1443(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1443 - Check if user is redirected to sound tab on the searched result page by tapping device back button in Sound Detail Screen");
		System.out.println("T1443");
		extent.extentLogger("Discover_Search", "T1443");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
	       Back(1);
		   waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
		 {
	  	  logger.info("User is able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
			extent.extentLoggerPass("Sound Detail Screen", "User is able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
	    }else
	    {
	  	  logger.info("User is not able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
			extent.extentLoggerFail("Sound Detail Screen", "User is not able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
	    }
		  navigateToHomePage();
	        }
			}
	
	public void verifyUserIsAbleToAddANewlyOriginalSoundToFavourite_T1446(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1446 - Check if user is able to add a newly original sound to favourite	_T1446");
		System.out.println("T1446");
		extent.extentLogger("Discover_Search", "T1446");
//		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
//		verifyElementPresentAndClick(HipiProfilePage.objSaveVideo, "Saved button");
//		waitTime(5000);
//		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds Tab");
//		 List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/errorLayout']"));
//		    int size = count.size();
//			System.out.println(size);
//			navigateToHomePage();
		removeFavouriteProfile();
		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");

		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    	   if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound Button"))
			    {
				  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
						extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				    }else
				    {
				  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
						extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				    }
	    	   if (verifyElementExist(HipiSoundDetailPage.objAddedToFavorite, "Added To Favourite")) {
				click(HipiSoundDetailPage.objAddedToFavorite, "Added To Favourite");
	    	   }
	    	   verifyElementPresentAndClick(HipiSoundDetailPage.objAddToFavouriteIconText, "Add To Favourite");
				String musicTitle = getText(HipiSoundDetailPage.objMusicTitle);
				System.out.println(musicTitle);
//				String text = musicTitle;
//			System.out.println(text);
//				String[] name = text.split("1603517996159");
//				System.out.println(name[0]);
	navigateToHomePage();
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
	waitTime(4000);
	verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
	waitTime(5000);
	verifyElementPresentAndClick(HipiProfilePage.objSoundsTab, "Sounds Tab");
//	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");

	String soundText = getText(HipiProfilePage.objSoundsList);
	System.out.println(soundText);
//	String text1 = soundText;
////System.out.println(text);
//	String[] name1= text1.split("original audio by ");
//	System.out.println(name1[1]);
	if (verifyElementPresent(HipiProfilePage.objSoundsList, "Sound names")) {
		 logger.info("User is able to add a newly 'original sound' to favourite");
			extent.extentLoggerPass("Favourites Sound", "User is able to add a newly 'original sound' to favourite");
	    }else
	    {
	  	  logger.info("User is not able to add a newly 'original sound' to favourite");
			extent.extentLoggerFail("Favourites Sound", "User is not able to add a newly 'original sound' to favourite");
	    }
		  navigateToHomePage();
	
	}
	}	
	public void removeFavouriteProfile() throws Exception {
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
		waitTime(5000);
		verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
		waitTime(5000);
		verifyElementPresentAndClick(HipiProfilePage.objSoundsTab, "Sounds Tab");
		waitTime(4000);
		 for(int i=1; i<=25; i++) {	

		if(verifyElementExist(HipiProfilePage.objSoundsList, "Sound names")) {
			click(HipiProfilePage.objSoundsList, "Sound names");
			 if (verifyElementExist(HipiSoundDetailPage.objAddedToFavorite, "Added To Favourite")) {
					click(HipiSoundDetailPage.objAddedToFavorite, "Added To Favourite");
		    	   }
			 Back(2);
			 verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			 verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
				waitTime(5000);
				verifyElementPresentAndClick(HipiProfilePage.objSoundsTab, "Sounds Tab");
		}else {
			break;
		}
		 }
		
	}
	
	public void verifyUserIsAbleToAddAndRemoveOriginalSoundFromFavourite_T1448(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1448 - Check if user is able to add and remove 'original sound' from favourite_T1448");
		System.out.println("T1448");
		extent.extentLogger("Discover_Search", "T1448");
//		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
//		verifyElementPresentAndClick(HipiProfilePage.objSaveVideo, "Saved button");
//		waitTime(5000);
//		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds Tab");
//		 List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/errorLayout']"));
//		    int size = count.size();
//			System.out.println(size);
//			navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");

		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    	   if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound"))
			    {
				  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
						extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				    }else
				    {
				  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
						extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				    }
	    	   addFavouritesConverting();
	    	   waitTime(5000);	
	    	   String acc = getText(HipiSoundDetailPage.objAddToFavoriteWithOutText);
	    	System.out.println(acc);
	    	verifyElementPresentAndClick(HipiSoundDetailPage.objAddToFavoriteWithOutText, "Add to Favourites");
               String acc1 = getText(HipiSoundDetailPage.objAddToFavoriteWithOutText);
               System.out.println(acc1);
               if(!acc.equals(acc1))
               {
				  	  logger.info("User is able to add and remove 'original sound' from favourite");
						extent.extentLoggerPass("Add to Favourites", "User is able to add and remove 'original sound' from favourite");
				    }else
				    {
				  	  logger.info("User is not able to add and remove 'original sound' from favourite");
						extent.extentLoggerFail("Add to Favourites", "User is not able to add and remove 'original sound' from favourite");
				    }
               navigateToHomePage();
	}
	}	
	
	public void verifyUserIsAbleToViewRelatedVideosForANewOrExistingSound_T1450(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1450 - Check if user is able to view related videos for a new/existing sound_T1450");
		System.out.println("T1450");
		extent.extentLogger("Discover_Search", "T1450");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    if(verifyElementPresent(HipiDiscoverPage.objrelatedvioedosSound,"Related viedo"))
	    {
	    		logger.info("User is able to view related videos for a new/existing sound");
			extent.extentLoggerPass("Related viedo", "User is able to view related videos for a new/existing sound");
			}else
			{
			logger.info("User is not able to view related videos for a new/existing sound");
			extent.extentLoggerFail("Related viedo", "User is not able to view related videos for a new/existing sound");
			}
			navigateToHomePage();
			}
			}
	public void verifyUserIsAbleToCreateVideoForExistingSoundEffect_T1451(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1451 - Check if user is able to create video for existing sound effect_T1451");
		System.out.println("T1451");
		extent.extentLogger("Discover_Search", "T1451");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    waitTime(4000);
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    waitTime(4000);
	    String soundName = getText(HipiDiscoverPage.objSoundTittle);
	    System.out.println(soundName);
	    verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use this sound");
		allowPermissions();    
		waitUntilElementDisplayed(HipiCreateVideoPage.objRecordIcon, 10);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
		waitTime(5000);
		String postDescription = "Desc"+GeneratingRandomString(7);
		
		type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
		
//		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			click(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
		waitTime(10000);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
		click(AMDHomePage.objProfileIcon,"profile icon");
		waitTime(3000);
		for (int i = 0; i <= 50; i++) {
			if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
				Thread.sleep(2000);
				Back(1);
				Thread.sleep(2000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			} else {
			
				click(HipiCreateVideoPage.objselectfirstVideo, "First video");
				waitTime(3000);
			   
				verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
//				waitTime(8000);
				
				break;
			}
		}
			  String expected = getText(HipiProfilePage.objMusicVideoName);
			if(expected.contains(soundName))
			{
				logger.info("User is able to view video newly created by music");
				extent.extentLoggerPass("profile screen", "User is able to view video newly created by music");
			}else {
				logger.info("User is unable to view video newly created by music");
				extent.extentLoggerFail("profile screen", "User is unable to view video newly created by music"); 
			}
			
	
		navigateToHomePage();
	}
	}
	
	public void verifyUserIsAbleToViewNumberOfLikesOnVideoInTheSoundDetailsPage_T1464(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1464 - Logged in User - Check if user is able to view number of likes on video in the Sound details page_T1464");
		System.out.println("T1464");
		extent.extentLogger("Discover_Search", "T1464");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    String likes = getText(HipiDiscoverPage.objnumberoflikesforvioedosSound);
	    System.out.println(likes);
	    if(verifyElementPresent(HipiDiscoverPage.objnumberoflikesforvioedosSound,"Number of Likes"))
	    {
	    		logger.info("User is able to view number of likes on video in the Sound details page "+""+likes);
			extent.extentLoggerPass("Number of Likes", "User is able to view number of likes on video in the Sound details page "+""+likes);
			}else
			{
			logger.info("User is not able to view number of likes on video in the Sound details page");
			extent.extentLoggerFail("Number of Likes", "User is not able to view number of likes on video in the Sound details page");
			}
			navigateToHomePage();
			}
			}	
	
	public void verifyUserIsAbleToViewNumberOnViewsOnVideoInTheSoundDetailsPage_T1465(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1465 - Check if user is able to view number on views on video in the Sound details page_T1465");
		System.out.println("T1465");
		extent.extentLogger("Discover_Search", "T1465");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    waitTime(5000);	
	    String views = getText(HipiDiscoverPage.objnumberofviewforvioedosSound);
	    System.out.println(views);
	    if(verifyElementPresent(HipiDiscoverPage.objnumberofviewforvioedosSound,"Number of view"))
	    {
	    		logger.info("User is able to view number of views on video in the Sound details page "+""+views);
			extent.extentLoggerPass("Number of view", "User is able to view number of views on video in the Sound details page "+""+views);
			}else
			{
			logger.info("User is not able to view number of views on video in the Sound details page");
			extent.extentLoggerFail("Number of view", "User is not able to view number of views on video in the Sound details page");
			}
			navigateToHomePage();
			}
			}
	public void verifySelectedSoundIsDisplayedInCreatorScreenAfterTappingOnUsethisSoundButtonInSoundDetailPage_T1467(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1467 - Logged in user - Check if the selected sound is displayed in creator screen after tapping on Use thi Sound button in Sound detail page_T1467");
		System.out.println("T1467");
		extent.extentLogger("Discover_Search", "T1467");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    String soundName = getText(HipiDiscoverPage.objSoundTittle);
	    System.out.println(soundName);
	    verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use this sound Button");
		allowPermissions();    
		waitUntilElementDisplayed(HipiCreateVideoPage.objRecordIcon, 2);
		verifyElementPresent(HipiCreateVideoPage.objSelectedMusic, "Music Header");
		String expectedText=getText(HipiCreateVideoPage.objSelectedMusic);
		if(expectedText.equals(soundName))
		{
			logger.info("The selected sound is displayed in creator screen after tapping on Use this Sound button in Sound detail page");
			extent.extentLoggerPass("creator screen", "The selected sound is displayed in creator screen after tapping on Use this Sound button in Sound detail page");
		}else {
			logger.info("The selected sound is not displayed in creator screen after tapping on Use this Sound button in Sound detail page");
			extent.extentLoggerFail("creator screen", "The selected sound is not displayed in creator screen after tapping on Use this Sound button in Sound detail page"); 
		}
		navigateToHomePage();
		
	}
		}
	
	
	public void verifyUserIsRedirectedToSoundTabOnTheSearchedResultPageByTappingBackInSoundDetailScreen_T1473(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1473 - Guest User - Check if user is redirected to sound tab on the searched result page by tapping 'back' in Sound Detail Screen_T1473");
		System.out.println("T1473");
		extent.extentLogger("Discover_Search", "T1473");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
	    verifyElementPresentAndClick(HipiDiscoverPage.objbackbutton_USertab, "Back Button");
	    waitTime(4000);
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
		 {
	  	  logger.info("User is able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
			extent.extentLoggerPass("Sound Detail Screen", "User is able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
	    }else
	    {
	  	  logger.info("User is not able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
			extent.extentLoggerFail("Sound Detail Screen", "User is not able to redirected to searched sound tab screen on tapping on 'back' in Sound Detail Screen");
	    }
		  navigateToHomePage();
	        }
			}
	
	
	public void verifyUserIsRedirectedToSoundTabOnTheSearchedResultPageByTappingDeviceBackButtonInSoundDetailScreen_T1474(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1474 - Check if user is redirected to sound tab on the searched result page by tapping device back button in Sound Detail Screen_T1474");
		System.out.println("T1474");
		extent.extentLogger("Discover_Search", "T1474");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
	   Back(1);
	   waitTime(5000);	
		if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
		 {
	  	  logger.info("User is able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
			extent.extentLoggerPass("Sound Detail Screen", "User is able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
	    }else
	    {
	  	  logger.info("User is not able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
			extent.extentLoggerFail("Sound Detail Screen", "User is not able to redirected to searched sound tab screen on tapping on device back button in Sound Detail Screen");
	    }
		  navigateToHomePage();
	        }
			}
	public void verifyUserIsAbleToViewFullPlayerOfTheVideosByTappingOnAnyVideoInSoundDetailPage_T1483(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T1483 - Check user is able to view full player of the videos by tapping on any video in sound detail page_T1483");
		System.out.println("T1483");
		extent.extentLogger("Discover_Search", "T1483");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound, "viedo");
	    if(verifyElementPresent(HipiHomePage.objPlayerScreen, "Player screen"))
	    		 {
		  	  logger.info("User is able to view full player of the videos by tapping on any video in sound detail page");
				extent.extentLoggerPass("Full player screen", "User is able to view full player of the videos by tapping on any video in sound detail page");
		    }else
		    {
		  	  logger.info("User is not able to view full player of the videos by tapping on any video in sound detail page");
				extent.extentLoggerFail("Full player screen", "User is not able to view full player of the videos by tapping on any video in sound detail page");
		    }
			  navigateToHomePage();
		        }
				}
	
	public void verifyUserIsAbleToRemoveTheSoundFromFavourites_T1449(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T1449 - Check the sound is removed from profile favourites_T1449");
		System.out.println("T1449");
		extent.extentLogger("Discover_Search", "T1449");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = "atak gaya";
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use this sound Button"))
	    {
				  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
						extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				    }else
				    {
				  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
						extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				    }
	    	   addFavouritesConverting();
	    	   verifyElementPresentAndClick(HipiSoundDetailPage.objAddToFavoriteWithOutText, "Add to Favorite");
	    	   
	    	   waitTime(5000);
	    	   navigateToHomePage();
	    	   verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
	    		verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
	    		waitTime(5000);
	    		verifyElementPresentAndClick(HipiProfilePage.objSoundsTab, "Sounds Tab");
	    		verifyElementPresentAndClick(HipiProfilePage.objSoundsList, "First sound");
	    		verifyElementPresentAndClick(HipiSoundDetailPage.objAddToFavoriteWithOutText, "Add To Favorite");
	    		Back(2);
	    		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
	    		verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
	    		waitTime(5000);
	    		verifyElementPresentAndClick(HipiProfilePage.objSoundsTab, "Sounds Tab");
	    		waitTime(4000);
	    		if(verifyElementExist(HipiProfilePage.objSoundsList, "First sound")){
				  	  logger.info("sound is not removed from profile favourites");
						extent.extentLoggerFail("", "sound is not removed from profile favourites");
				    }else
				    {
				  	  logger.info("sound is removed from profile favourites");
						extent.extentLoggerPass("", "sound is removed from profile favourites");
				    }
	
		  navigateToHomePage();
	}
	}
//	public void FeedScreen_T216_T252ShopPage(String userType) throws Exception {
//		
//		if(userType.equalsIgnoreCase("Guest")) {
//			extent.HeaderChildNode("T216 - Guest User - Verify for max limit to save the products in save look while user scrolling shoppable videos");
//			System.out.println("T216");
//			extent.extentLogger("", "T216");
//			}else {
//				extent.HeaderChildNode("T252 - Logged In User - Verify for max limit to save the products in save look while user scrolling shoppable videos");
//				System.out.println("T252");
//				extent.extentLogger("", "T252");
//			}
//			deleteTheProductsFromSavedMomentsTab(userType);
//			waitTime(3000);
//			int count = 0;
//			// int saved;
////			for(int i=0; i<5 ; i++)
////			{
////				SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
////				click(HipiHomePage.objSaveLook, "Save Look");
////				Swipe("UP", 1);
////				count++;
////			}
//				
//			
//			System.out.println("count: " + count);
////			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			click(HipiHomePage.objShopButton, "Shop Button");
//			String saved = getText(HipiShopPage.objTotalNosBesideSavedMomentsInShopPage);
//			int save = Integer.parseInt(saved);
//			System.out.println("Saved :" + save);
//			if (save >= count) {
//				logger.info(
//						"user able to save unlimited products from the shoppable videos.There is no limitation to save products ");
//				extent.extentLoggerPass("",
//						"user able to save unlimited products from the shoppable videos.There is no limitation to save products ");
//			} else {
//				logger.info("user not able to save multiple products from the shoppable videos. ");
//				extent.extentLoggerFail("", "user not able to save multiple products from the shoppable videos. ");
//			}
//		navigateToHomePage();
//		}
	
	
	
	
	
	
//====================================Profile(P2)Muthu==========================================================================
	
	
	
	
	public void checkIfUserIsAbleToUploadImageByCapturingImageFromCamera_T1076(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user- Check if User is able to upload image by capturing image from camera_T1076");
			System.out.println("T1076");
			extent.extentLogger(" profile_Edit", "T1076");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objprofilephotoEditProfilePage, "Profile photo");
			waitTime(3000);
			allowPermissions();
			verifyElementPresent(HipiProfilePage.objGalleryHeader, "Gallery header");
			waitTime(3000);
//			verifyElementPresentAndClick(HipiProfilePage.objSpinDirectoryOptionCamera, "Spin Directory Option Camera");
//			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objCameraImageView, "Camera Image View");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objCameraCaptureButton, "Camera Capture Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objTickButton, "Tick Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objDoneButton, "Done Button");
			boolean verify=waitUntilElementDisplayed(HipiProfilePage.objProfilePhotoSuccess,30);
			if(verify==true){
				logger.info("User is able to upload image by capturing image from camera.");	
				extent.extentLoggerPass("profile_Edit", "User is able to upload image by capturing image from camera.");
			}else {
				logger.info("User is not able to upload image by capturing image from camera.");	
				extent.extentLoggerFail("profile_Edit", "User is not able to upload image by capturing image from camera.");	
			}
			navigateToHomePage();
		}	
		}
	
	
	
	public void checkIfUserIsAbleToUpdateNameByEnteringLessCharacter_T1081(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if user is able to update name by entering less character_T1081");
			System.out.println("T1081");
			extent.extentLogger(" profile_Edit", "T1081");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Screen");
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  screen");
			//verifyElementPresentAndClick(HipiProfilePage.objEditProfileName,"Edit profile Name");
			verifyElementPresentAndClick(HipiProfilePage.objEditProfileName, "Edit Profile Name");
			verifyElementPresentAndClick(HipiProfilePage.objEditNameCrossIcon,"Cross icon");
//			clearField(HipiProfilePage.objUserTextFieldInName, "User Text Field Name");
//			String lesserThan40 = getParameterFromXML("FullNmae");
			int count=countCharacters(getParameterFromXML("FullNmae"));
			type(HipiProfilePage.objUserTextFieldInName, getParameterFromXML("FullNmae"),"User Name");
				verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button");
			String Username = getText(HipiProfilePage.objEditProfileName);
//			System.out.println(characterCount);
//			int text = 0;
//			for (int i = 0; i < characterCount.length(); i++) {
//				   if (Character.isLetterOrDigit(characterCount.charAt(i))) 
//					   text++;
//			}
//			System.out.println(text);
			if (count < 40 && Username.contains(getParameterFromXML("FullNmae"))) {
				logger.info("User is save the name by entering less character in the field");	
				extent.extentLoggerPass("profile_Edit", "User is save the name by entering less character in the field");
			}else {
				logger.info("User is save the name by entering less character in the field");	
				extent.extentLoggerFail("profile_Edit", "User is save the name by entering less character in the field");	
			} 
			
				
	        navigateToHomePage();
	        
	}
	}
	
	
	public void checkIfADeafualtUserNameIsDisplayed_T1082(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user -Check if a default user name is displayed_T1082");
			System.out.println("T1082");
			extent.extentLogger(" profile_Edit", "T1082");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			if(verifyElementPresent(HipiProfilePage.objUserNameInEditProfile,"User name"))
			{
			String username=getText(HipiProfilePage.objUserNameInEditProfile);
			logger.info("User is able to view Default user handled created on user creation and username is "+username);
			extent.extentLoggerPass("profile_Edit","User is able to view Default user handled created on user creation and username is "+ username);
			}else{
				logger.info("User is Unable to view Default user handled created on user creation");
				extent.extentLoggerFail("profile_Edit","User is Unable to view Default user handled created on user creation");
			
			}			
				navigateToHomePage();
			}
	
		}
	public void checkWhileEditingUserHandleAnErrorIsDisplayedIfTheUserHandleAlreadyExist_T1083(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user -Check while editing user handle, an error is displayed if the user handle already exists_T1083");
			System.out.println("T1083");
			extent.extentLogger(" profile_Edit", "T1083");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objUserNameInEditProfile, "Edit Profile User Name");
			click(HipiProfilePage.objUserTextFieldInName, "User Text Field In Name");
			clearField(HipiProfilePage.objUserTextFieldInName, "Username field");
			String value=getParameterFromXML("Dheeraj");
			type(HipiProfilePage.objUserTextFieldInName,value,"User name field");
			boolean verify1=verifyElementDisplayed(HipiProfilePage.objEditUsernameErrorText);
//			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button");
			boolean verify2=verifyElementDisplayed(HipiProfilePage.objBadRequestErrorPopup);
//			waitUntilElementDisplayed(HipiProfilePage.objEditUsernameErrorText, 2000);
			//verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verify1==true||verify2==true){
				logger.info("An error is displayed if user handle already exist.");	
				extent.extentLoggerPass("profile_Edit", "An error is displayed if user handle already exist.");
			}else {
				logger.info("An error is not displayed if user handle already exist.");	
				extent.extentLoggerFail("profile_Edit", "An error is not displayed if user handle already exist.");	
			} 
			navigateToHomePage();



	}
	}
	public void checkOnEditingUserHandleNoErrorIsDisplayedIfTheUserHandleAddedDoesNotExist_T1084(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in usert -Check on editing user handle, no error is displayed if the user handle added does not exist_T1084");
			System.out.println("T1084");
			extent.extentLogger(" profile_Edit", "T1084");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objUserNameInEditProfile, "Edit Profile User Name");
			verifyElementPresent(HipiProfilePage.objUserNameHeader, "User name screen");
			click(HipiProfilePage.objUserTextFieldInName, "User Text Field In Name");
			clearField(HipiProfilePage.objUserTextFieldInName, "Username field");
			 String userName  =  generateRandomString(5) ;
			type(HipiProfilePage.objUserTextFieldInName,userName,"User name field");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button ");
			waitTime(3000);
			verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header");
			String newUserName = getText(HipiProfilePage.objUserNameInEditProfile);
			//waitUntilElementDisplayed(HipiProfilePage.objEditUsernameErrorText, 2000);
			if (userName.contains(newUserName)) {
				logger.info("No error message is displayed when adding new user handle");	
				extent.extentLoggerPass("profile_Edit", "No error message is displayed when adding new user handle");
			}else {
				logger.info(" error message is  displayed when adding new user handle");	
				extent.extentLoggerFail("profile_Edit", " error message is displayed when adding new user handle");	
			} 
			navigateToHomePage();
		}
	}
	public void checkIfOnEditingUserHandleWithLessThan20CharacterNoErrorMessageShouldGetDisplayed_T1086(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user -Check if on editing user handle with less than 20 character no error message should get displayed_T1086");
			System.out.println("T1086");
			extent.extentLogger(" profile_Edit", "T1086");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objUserNameInEditProfile, "Edit Profile User Name");
			verifyElementPresent(HipiProfilePage.objUserNameHeader, "User name screen");
			click(HipiProfilePage.objUserTextFieldInName, "User Text Field In Name");
			clearField(HipiProfilePage.objUserTextFieldInName, "Username field");
			String value=getParameterFromXML("usernamee");
			type(HipiProfilePage.objUserTextFieldInName,value,"User name field");
			String Name=getText(HipiProfilePage.objUserTextFieldInName);
			System.out.println(Name);
			int count =countCharacters(Name);
			/*int text = 0;
			for (int i = 0; i < characterCount.length(); i++) {
				   if (Character.isLetterOrDigit(characterCount.charAt(i))) 
					   text++;
			}
			System.out.println(text);*/
//			int username=0;
//			for ( int i = 0;  i < Name.length(); i++) {
//				if (Character.isLetterOrDigit(Name.charAt(i))) 
//					username++;
//			}
//				System.out.println(username);
				if(count<20&&Name.contains(getParameterFromXML("usernamee"))) {
					logger.info("Editing username by entering less than 20 character and Entered Character size is: "+count);	
						extent.extentLoggerPass("profile_Edit", "Editing username by entering less than 20 character and Entered Character size is:  "+count);
					}else {
						logger.info("Editing username by not entering less than 20 character");	
						extent.extentLoggerFail("profile_Edit", "Editing username by not entering less than 20 character");	
			}
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button ");
//			waitUntilElementDisplayed(HipiProfilePage.objEditUsernameErrorText, 2000);
			//verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objEditUsernameSuccessText, "Edit user name error text")){
				logger.info("No error message is displayed when entering less than 20 character");	
				extent.extentLoggerPass("profile_Edit", "No error message is displayed when entering less than 20 character");
			}else {
				logger.info("An toast error message is displayed when entering less than 20 character");	
				extent.extentLoggerFail("profile_Edit", "An toast error message is displayed when entering less than 20 character");	
			}
			navigateToHomePage();
			

		}
	}
	
	
	public void checkIfUseCanEnterLessThanOrEqualTo200CharactersInUserBioField_T1090(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user -Check if user can enter less than or equal to 200 characters in User Bio field_T1090");
			System.out.println("T1090");
			extent.extentLogger(" profile_Edit", "T1090");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objBioDescription, "Bio Description");
			verifyElementPresent(HipiProfilePage.objBiopage, "Bio Screen");
			click(HipiProfilePage.objBiopage, "Bio TextField");
			clearField(HipiProfilePage.objUserTextFieldInName, "Username field");
			String value=getParameterFromXML("usernameinbio");
			type(HipiProfilePage.objBioNametextfield, value, "Name text field in bio page");
//			String Name=getText(HipiProfilePage.objUserTextFieldInName);
//			System.out.println(Name);
			int count=countCharacters(value);
//			int bioname=0;
//			for ( int i = 0; i < Name.length(); i++) {
//				if (Character.isLetterOrDigit(Name.charAt(i))) 
//					bioname++;
//				
//			}
//				System.out.println(bioname);
				verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button ");

				if(count<=200) {
					logger.info("Entered less than 200 character and tapped on save and Entered Character size is: "+count);	
						extent.extentLoggerPass("profile_Edit", "Entered less than 200 character and tapped on save and Entered Character size is: "+ count);
					}else {
						logger.info("Not Entered less than 200 character and tapped on save");	
						extent.extentLoggerFail("profile_Edit", "Not Entered less than 200 character and tapped on save");	
			}
				if(verifyElementPresent(HipiProfilePage.objBioUpdateSuccess, "Bio Update success")){
					logger.info("User is able to enter less than or equal to 200 character");	
					extent.extentLoggerPass("profile_Edit", "User is able to enter less than or equal to 200 character");
				}else {
					logger.info("User is unable to enter less than or equal to 200 character");	
					extent.extentLoggerFail("profile_Edit", "User is unable to enter less than or equal to 200 character");	
				}
				navigateToHomePage();
				
	}
	}	
	
	
	public void checkIfUserNameAreMandatoryFieldsWhileEditingAProfileThatIsFieldsCannotBeBlank_T1092(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if user name are mandatory fields while editing a profile i.e fields cannot be blank_T1092");
			System.out.println("T1092");
			extent.extentLogger(" profile_Edit", "T1092");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objEditProfileName, "Edit Profile Name");
			click(HipiProfilePage.objUserTextFieldInName, "User Name Text Field");
			clearField(HipiProfilePage.objUserTextFieldInName, "User name Text field");
			verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button ");
			waitTime(1000);
//			boolean verify=verifyElementDisplayed(HipiProfilePage.objEmptyUsernameError);
//			waitUntilElementDisplayed(HipiProfilePage.objEmptyUsernameError, 2000);

			if(verifyElementDisplayed(HipiProfilePage.objEmptyUsernameError)){
				logger.info("Respective error message is visible for username as its cannot be left empty");	
				extent.extentLoggerPass("profile_Edit", "Respective error message is visible for username as its cannot be left empty");
			}else {
				logger.info("Respective error message is not visible for username as its cannot be left empty");	
				extent.extentLoggerFail("profile_Edit", "Respective error message is not visible for username as its cannot be left empty");	
			}
			navigateToHomePage();
			}
	}
	
	
	
	public void checkIfNameAreMandatoryFieldsWhileEditingAProfileThatIsFieldsCannotBeBlank_T1093(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user -Check if name are mandatory fields while editing a profile i.e fields cannot be blank_T1093");
			System.out.println("T1093");
			extent.extentLogger(" profile_Edit", "T1093");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objEditProfileName, "Edit profile Name");
			click(HipiProfilePage.objUserTextFieldInName, "Name text field");
			clearField(HipiProfilePage.objUserTextFieldInName,"Name text field");
			verifyElementPresentAndClick(HipiProfilePage.objSaveButton, "Save Button ");
			waitTime(1000);
//			waitUntilElementDisplayed(HipiProfilePage.objEmptyUsernameError, 2000);

			if(verifyElementPresent(HipiProfilePage.objEmptyUsernameError, "Empty name Error")){
				logger.info("Respective error message is visible for name as its cannot be empty");	
				extent.extentLoggerPass("profile_Edit", "Respective error message is visible for name as its cannot be empty");
			}else {
				logger.info("Respective error message is not visible for name as its cannot be empty");	
				extent.extentLoggerFail("profile_Edit", "Respective error message is not visible for name as its cannot be empty");	
			}
			navigateToHomePage();
			
	}
	}
	
	public void checkLayoutOfFollowersListScreen_T1095(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check layout of Followers list screen_T1095");
			System.out.println("T1095");
			extent.extentLogger("profile_Followers", "T1095");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiProfilePage.objFollowersSearch, "Followers Search")){
				verifyElementPresent(HipiProfilePage.objFollowersBackButton, " Top back button is displayed");
				verifyElementPresent(HipiProfilePage.objFollowersNameList,"Followers Name");
				verifyElementPresent(HipiProfilePage.objFollowbutton, "Follow CTA");
				logger.info("User is able to see all components of followers list");	
				extent.extentLoggerPass("profile_Followers", "User is able to see all components of followers list");
			}else {
				logger.info("User is unable to see all components of followers list");	
				extent.extentLoggerFail("profile_Followers", "User is unable to see all components of followers list");	
			}

			navigateToHomePage();
		}
	}
	
	
	public void checkIfUserIsAbleToSearchAndVerifyTheOptionsDisplayedOnEnteringTextInSearchTextField_T1097(String userType,String text) throws Exception //Doubt
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if user is able to search and verify the options displayed on entering text in search text field_T1097");
			System.out.println("T1097");
			extent.extentLogger("profile_Followers", "T1097");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 30);
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiProfilePage.objFollowersSearch, "Followers Search")){
				logger.info("User is redirected to followers list screen.");	
				extent.extentLoggerPass("profile_Followers", "User is redirected to followers list screen.");
			}else {
				logger.info("User is not redirected to followers list screen.");	
				extent.extentLoggerFail("profile_Followers", "User is not redirected to followers list screen.");	
			}
			hideKeyboard();
			click(HipiProfilePage.objFollowersSearch, "search field");
		
			type(HipiProfilePage.objFollowersSearch,text, "Search field");
//			click(HipiProfilePage.objFollowersSearch, "search field");
			
			System.out.println(text);
			if(verifyElementPresent(HipiProfilePage.objSearchResultOnFollowers(text),"Search Name first index"))
			{
			verifyElementPresent(HipiProfilePage.objSearchFieldCloseButton, "Search Field Close Button");
			verifyElementPresent(HipiProfilePage.objFollowersBackButton, "Followers Back Button");
			logger.info("User is able to see search field,Cross icon and back button");	
			extent.extentLoggerPass("profile_Followers", "User is able to see search field,Cross icon and back button");
			}
		navigateToHomePage();
	}
	}
	
	
	
	public void checkIfOnTappingCrossIconInSearchTextFieldEnteredTextIsRemovedAndUserIsRedirectedBackToFollowersListScreen_T1099(String userType , String text) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if on tapping cross icon in search text field entered text is removed and user is redirected back to followers list screen_T1099");
			System.out.println("T1099");
			extent.extentLogger("profile_Followers", "T1099");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			if(verifyElementPresent(HipiProfilePage.objFollowersSearch, "Followers Search")){
				logger.info("User is redirected to followers list screen.");	
				extent.extentLoggerPass("profile_Followers", "User is redirected to followers list screen.");
			}else {
				logger.info("User is not redirected to followers list screen.");	
				extent.extentLoggerFail("profile_Followers", "User is not redirected to followers list screen.");	
			}
			//hideKeyboard();
			waitTime(4000);
			click(HipiProfilePage.objFollowersSearch, "search field");
			//String value=getParameterFromXML("Name");
			type(HipiProfilePage.objFollowersSearch,text, "Search field");
			verifyElementPresentAndClick(HipiProfilePage.objSearchFieldCloseButton, "search field close button");
			waitTime(5000);
			String emptyText = getText(HipiProfilePage.objFollowersSearch);
			
			if (!text.equals(emptyText)) {
				logger.info("On tapping cross icon in search field,entered text is removed and  User is redirected to followers list screen.");	
				extent.extentLoggerPass("profile_Followers", "On tapping cross icon in search field,entered text is removed and  User is redirected to followers list screen.");
			}else {
				logger.info("On tapping cross icon in search field,entered text is not removed and  User is not redirected to followers list screen.");	
				extent.extentLoggerFail("profile_Followers", "On tapping cross icon in search field,entered text is not removed and  User is not redirected to followers list screen.");	
			}
			navigateToHomePage();
	}
}
	
	public void checkLayoutOfFollowingListScreen_T1104(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check layout of Following list screen_T1104");
			System.out.println("T1104");
			extent.extentLogger("profile_Following", "T1104");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following button");
			if(verifyElementPresent(HipiProfilePage.objFollowingSearch, "Following Search")){
				logger.info("User is redirected to following list screen.");	
				extent.extentLoggerPass("profile_Followers", "User is redirected to following list screen.");
			}else {
				logger.info("User is not redirected to following list screen.");	
				extent.extentLoggerFail("profile_Followers", "User is not redirected to following list screen.");	
			}
			waitTime(3000);

		
			if(verifyElementPresent(HipiProfilePage.objFollowingBackButton, " Top back button is displayed"))
			{
			verifyElementPresent(HipiProfilePage.objSearchBar, "Following Search bar is displayed");
			verifyElementPresent(HipiProfilePage.objFollowingNamesList,"Following Name");
			verifyElementPresent(HipiProfilePage.objFollowingbutton, "Following CTA");
			logger.info("User is able to view following list screen's Backbutton , Following list and Followig Cta.");	
			extent.extentLoggerPass("profile_Followers", "User is able to view following list screen's Backbutton , Following list and Followig Cta.");
			}
			navigateToHomePage();
			
	}
	}
	
	
	
	public void checkIfOnTappingCrossIconInSearchTextFieldEnteredTextIsRemovedAndUserIsRedirectedBackToFollowingListScreen_T1108(String userType,String text) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if on tapping cross icon in search text field entered text is removed and user is redirected back to following list screen_T1108");
			System.out.println("T1108");
			extent.extentLogger("profile_Following", "T1108");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 30);
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following button");
			if(verifyElementPresent(HipiProfilePage.objFollowingSearch, "Following Search")){
				logger.info("User is redirected to following list screen.");	
				extent.extentLoggerPass("profile_Following", "User is redirected to following list screen.");
			}else {
				logger.info("User is not redirected to following list screen.");	
				extent.extentLoggerFail("profile_Following", "User is not redirected to following list screen.");	
			}
			//hideKeyboard();
			waitTime(4000);
			click(HipiProfilePage.objFollowingSearch, "search field");
			//String value=getParameterFromXML("Name");
			type(HipiProfilePage.objFollowingSearch, text, "Search field");
			verifyElementPresentAndClick(HipiProfilePage.objSearchFieldCloseButton, "search field close button");
			waitTime(5000);
			String emptyText = getText(HipiProfilePage.objFollowersSearch);
			
			if (!text.equals(emptyText)) {
				logger.info("On tapping cross icon in search field,entered text is removed and  User is redirected to followings list screen.");	
				extent.extentLoggerPass("profile_Following", "On tapping cross icon in search field,entered text is removed and  User is redirected to followings list screen.");
			}else {
				logger.info("On tapping cross icon in search field,entered text is removed and  User is not redirected to followings list screen.");	
				extent.extentLoggerFail("profile_Following", "On tapping cross icon in search field,entered text is removed and  User is not redirected to followings list screen.");	
			}
			navigateToHomePage();
	}
	}
	public void checkIfOnTappingAnyUserFromFollowingListUserIsRedirectedToSelectedUserProfileDetailScreen_T1109(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if on tapping any user from Following list user is redirected to 'selected user profile detail screen_T1109");
			System.out.println("T1109");
			extent.extentLogger("profile_Following", "T1109");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following button");
			if(verifyElementPresent(HipiProfilePage.objFollowingSearch, "Following Search")){
				logger.info("User is redirected to following list screen.");	
				extent.extentLoggerPass("profile_Following", "User is redirected to following list screen.");
			}else {
				logger.info("User is not redirected to following list screen.");	
				extent.extentLoggerFail("profile_Following", "User is not redirected to following list screen.");	
			}
			String firstFollowingUser = getText(HipiProfilePage.objFirstFollowingUserName);
			
			verifyElementPresentAndClick(HipiProfilePage.objFirstProfileImageInFollowingList, "First Profile");
			
			String userName = getText(HipiProfilePage.objUserName);
			if (userName.equalsIgnoreCase(firstFollowingUser)) {
				logger.info("User is navigated to selected user profile detial screen");	
				extent.extentLoggerPass("profile_Following", "User is navigated to selected user profile detail screen");
			}else {
				logger.info("User is not navigated to selected user profile detail screen");	
				extent.extentLoggerFail("profile_Following", "User is not navigated to selected user profile detail screen");	
			}
			
			navigateToHomePage();
	}
	 	
	}
	
	public void checkUserIsABleToSeeNotificationBellIcon_T1145(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to see notification bell icon_T1145");
			System.out.println("T1145");
			extent.extentLogger("profile_Notification", "T1145");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objNotificationBell, "Notification Bell")){
				logger.info("User is able to see the notification bell icon");	
				extent.extentLoggerPass("profile_Notification", "User is able to see the notification bell icon");
			}else {
				logger.info("User is not able to see the notification bell icon ");	
				extent.extentLoggerFail("profile_Notification", "User is not able to see the notification bell icon");	
			}
			navigateToHomePage();
		
	}
	}
	
	
	
	public void checkUserIsABleToTapOnNotificationBellIcon_T1146(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to tap on notification bell icon_T1146");
			System.out.println("T1146");
			extent.extentLogger("profile_Notification", "T1146");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objAllActivityTitle, "All Activity title")){
				logger.info("User is able to navigated to notification screen");	
				extent.extentLoggerPass("profile_Notification", "User is able to navigated to notification screen");
			}else {
				logger.info("User is unable to navigated to notification screen");	
				extent.extentLoggerFail("profile_Notification", "User is unable to navigated to notification screen");	
			}
			navigateToHomePage();


	}

	}
	
	
	
	public void checkTheUIOfNotificationScreen_T1147(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check the UI of notification screen_T1147");
			System.out.println("T1147");
			extent.extentLogger("profile_Notification", "T1147");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objAllActivityTitle, "All activity Dropdown");
			if(verifyElementPresent(HipiProfilePage.objbackbutton,"Back button"))
			{
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objAllActivity, "All Activity");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objLikesInAllActivityDropDown, "Likes");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objCommentsInAllActivityDropDown, "Comment");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objMentionsInAllActivityDropDown, "Mentions");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objFollowersInAllActivityDropDown, "Followers");
			logger.info("User is able to see all the Components of notification screen");	
			extent.extentLoggerPass("profile_Notification", "User is able to see all the Components of notification screen");
		
			}
			navigateToHomePage();
	}
	}
	public void checkIfUserIsAbleToTapOnLikesInAllActivityDropDown_T1148(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if user is able to tap on likes in  All Activity drop down_T1148");
			System.out.println("T1148");
			extent.extentLogger("profile_Notification", "T1148");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objAllActivityTitle, "All activity Title");
			verifyElementPresentAndClick(HipiProfilePage.objLikesInAllActivityDropDown, "Likes");
			verifyElementPresent(HipiProfilePage.objLikeTextInNotification, "Like Screen");
			if(verifyElementPresent(HipiProfilePage.objLikedVideoInAllActivities, "Liked Activity")){
				logger.info("User navigated to like page all like video is getting displayed");	
				extent.extentLoggerPass("profile_Notification", "user navigated to like page all like video is getting displayed");
			}else {
				logger.info("User navigated to like page all like video is not getting displayed");	
				extent.extentLoggerFail("profile_Notification", "User navigated to like page all like video is not getting displayed");	
			}
//			verifyElementPresentAndClick(HipiProfilePage.objAllActivityTitle, "All activity in notification bell");
//			verifyElementPresentAndClick(HipiProfilePage.objAllActivity, "All Activity");
			navigateToHomePage();
			
			
	}

	 	
	}
	
	public void checkIfUserIsAbleToTapOnFollowersInAllActivityDropDown_T1151(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check if user is able to tap on Followers in All Activity drop down");
			System.out.println("T1151");
			extent.extentLogger("profile_Notification", "T1151");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objAllActivityTitle, "All activity Title");
			verifyElementPresentAndClick(HipiProfilePage.objFollowersInAllActivityDropDown, "Followers All Activity");
			verifyElementPresent(HipiProfilePage.objFollowerTextInNotification, "Follower Header");

			if(verifyElementPresent(HipiProfilePage.objFollowersHeaderInAllActivities, "Following/follower Activity")){
				logger.info("Non-followers or followers profile is getting displayed in followers page");	
				extent.extentLoggerPass("profile_Notification", "Non-followers or followers profile is getting displayed in followers page");
			}else {
				logger.info("Non-followers or followers profile is not getting displayed in followers page");	
				extent.extentLoggerFail("profile_Notification", "Non-followers or followers profile is not getting displayed in followers page");	
			}
			navigateToHomePage();
	}
	}
	
	public void checkIfUserIsNavigatedToVideoPlayModeScreenAndVideoScreenIsNotScrollable_T1158(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user -Check user is navigated to video play mode screen and video screen is not scrollable_T1158");
			System.out.println("T1158");
			extent.extentLogger("profile_Notification", "T1158");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info(" User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_Notification", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_Notification", "user is not navigated to profile screen");	
			}
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
			if(verifyElementPresent(HipiProfilePage.objAllActivityTitle, "All Activity Title")){
				logger.info("User is navigated to notification screen");	
				extent.extentLoggerPass("profile_Notification", "user is naviagted to notification screen");
			}else {
				logger.info("User is not navigated to notification screen");	
				extent.extentLoggerFail("profile_Notification", "User is not navigated to notification screen ");	
			}
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objVideoThumbnailInAllActivities, "Video Thumbnail ");
			description = getText(HipiHomePage.objDescription);
			Swipe("UP", 2);
			description1 = getText(HipiHomePage.objDescription);
			
			if(description.contains(description1)){
				extent.extentLoggerPass("profile_Notification", "video is not scrolled and particular video is played");
			}else {
				logger.info("video is not scrolled and particular video is not played");	
				extent.extentLoggerFail("profile_Notification", "video is not scrolled and particular video is not played");	
			}
			navigateToHomePage();
	}
	 		
	}
	public void checkUserNavigatedToProfileScreenByTappingBackButton_T1161(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user navigated to profile screen by tapping back button_T1161");
			System.out.println("T1161");
			extent.extentLogger("profile_Notification", "T1161");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_Notification", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_Notification", "user is not navigated to profile screen");	
			}
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
			if(verifyElementPresent(HipiProfilePage.objAllActivityTitle, "All Activity Title")){
				logger.info("User is navigated to notification screen");	
				extent.extentLoggerPass("profile_Notification", "user is naviagted to notification screen");
			}else {
				logger.info("User is not navigated to notification screen");	
				extent.extentLoggerFail("profile_Notification", "User is not navigated to notification screen ");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objbackbutton, "Back Button");
			waitTime(1000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen on tapping back button");	
				extent.extentLoggerPass("Profile_Notification", "User is navigated to profile Screen on tapping back button");	
				}else {
					logger.info("User is not navigated to profile Screen on tapping on back button");	
					extent.extentLoggerFail("Profile_Notification", "User is not navigated to profile Screen on tapping on back button");
			}
			navigateToHomePage();

	}
		
	}
	
	public void checkUserIsAbleToTapOnBookmarkIcon_T1165(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to tap on bookmark icon_T1165");
			System.out.println("T1165");
			extent.extentLogger("Profile_Bookmark", "T1165");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 30);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is navigated to profile Screen");	
				extent.extentLoggerPass("Profile_Bookmark", "user is navigated to profile screen ");
			}else {
				logger.info("user is not navigated to profile screen");	
				extent.extentLoggerFail("Profile_Bookmark", "user is not navigated to profile screen");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			waitTime(1000);
			if(verifyElementPresent(HipiProfilePage.objFavouriteScreenheader, "Favourite Screen header")){
				logger.info("User is able to navigate to favourite screen");	
				extent.extentLoggerPass("Profile_Bookmark", "User is able to navigate to favourite screen");
			}else {
				logger.info("user is not navigated to favourite screen");	
				extent.extentLoggerFail("Profile_Bookmark", "user is not navigated to favourite screen");	
			}
			navigateToHomePage();
		}
	}
	
	public void checkUserIsAbleToNavigateFromOneTabToAnotherTab_T1167(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to navigate from one tab to another tab_T1167");
			System.out.println("T1167");
			extent.extentLogger("Profile_Bookmark", "T1167");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);

			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objVideoTabInFavourites,"Video tab");
			if(verifyElementPresent(HipiProfilePage.objVideoInFavourites, "Favourites video")) {
				logger.info("User able to navigate from Video  tab");
				extent.extentLoggerPass("Profile_Bookmark", "User able to navigate from Video  tab");
			}else {
				logger.info("User unable to navigate from Video  tab");
				extent.extentLoggerFail("Profile_Bookmark", "User unable to navigate from Video  tab");
			}
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objHashtags, "Hashtags Tab");
			waitTime(2000);
			if(verifyElementPresent(HipiProfilePage.objFirstHashtag, "Hashtags Selected")) {
				logger.info("User able to navigate to Hashtags  tab");
				extent.extentLoggerPass("Profile_Bookmark", "User able to navigate to Hashtags  tab");
			}else {
				logger.info("User not able to navigate to Hashtags  tab");
				extent.extentLoggerFail("Profile_Bookmark", "User not able to navigate to Hashtags tab");
			}
//			verifyElementPresentAndClick(HipiProfilePage.objVideo, "Video Tab");
//			if(verifyElementPresent(HipiProfilePage.objVideoSelected, "Video Selected")) {
//				logger.info("User able to navigate from Video  tab");
//				extent.extentLoggerPass("Profile_Bookmark", "User able to navigate from Video  tab");
//			}else {
//				logger.info("User not able to navigate from Video  tab");
//				extent.extentLoggerFail("Profile_Bookmark", "User not able to navigate from Video tab");
//			}
			verifyElementPresentAndClick(HipiProfilePage.objSounds, "Sounds Tab");
			if(verifyElementPresent(HipiProfilePage.objSoundsSelected, "Sounds Selected")) {
				logger.info("User able to navigate to Sounds  tab");
				extent.extentLoggerPass("Profile_Bookmark", "User able to navigate to Sounds  tab");
			}else {
				logger.info("User not able to navigate to Sounds  tab");
				extent.extentLoggerFail("Profile_Bookmark", "User not able to navigate to Sounds tab");
			}
			verifyElementPresentAndClick(HipiProfilePage.objEffects, "Effects Tab");
			if(verifyElementPresent(HipiProfilePage.objNoFavouritesText, "No favorites")) {
				logger.info("User able to navigate from Effects  tab");
				extent.extentLoggerPass("Profile_Bookmark", "User able to navigate from Effects  tab");
			}else {
				logger.info("User not able to navigate from Effects  tab");
				extent.extentLoggerFail("Profile_Bookmark", "User not able to navigate from Effects tab");
			}
			verifyElementPresentAndClick(HipiProfilePage.objFilters, "Filters Tab");
			
			if(verifyElementPresent(HipiProfilePage.objNoFavouritesText, "Filters Selected")) {
				logger.info("User able to navigate from Filters  tab");
				extent.extentLoggerPass("Profile_Bookmark", "User able to navigate from Filters  tab");
			}else {
				logger.info("User not able to navigate from Filters  tab");
				extent.extentLoggerFail("Profile_Bookmark", "User not able to navigate from Filters tab");
			}
			navigateToHomePage();	
		}
	}
	
	public void addToFavrite(String userType) throws Exception {
		for(int i=1;i<=2;i++)
		{
			if(verifyElementExist(HipiHomePage.objPlayerScreen,"Player Screen"))
			{
				longPress(HipiHomePage.objPlayerScreen);
				click(HipiHomePage.objAddToFavourites,"Add To Favourites");
				Back(1);
				break;
				
			}
			{
				Back(1);
				Swipe("UP",1);
				verifyElementExist(HipiHomePage.objShareIcon,"Share Icon");
			}
		}
	}
	
	public void checkUserIsAbleToRemoveVideoByTappingOnAddedToFavorites_T1168(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to remove video by tapping on added to favorites_T1168");
			System.out.println("T1168");
			extent.extentLogger("profile_Bookmark", "T1168");
			addToFavrite(userType);
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresent(HipiProfilePage.objProfileHeader, "profile header");
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			verifyElementPresent(HipiProfilePage.objFavouriteScreenheader, "Favorite screen");
			waitUntilElementDisplayed(HipiProfilePage.objVideosInFavouriteScreen, 30);
//			waitTime(3000);
//		int countbeforeremoving=getCount(HipiProfilePage.objVideoInFavourites);
//		System.out.println(countbeforeremoving);
//		List<WebElement> countbeforeremoving = getDriver().findElements(HipiProfilePage.objVideosInFavouriteScreen);
	    // int countbeforeremoving = Favrt.size();
//		System.out.println(countbeforeremoving.size());
		click(HipiProfilePage.objVideoInFavourites, "Video");
		waitTime(4000);
		longPress(HipiHomePage.objPlayerScreen);
		verifyElementPresent(HipiProfilePage.ObjPopupOptions, "popup options");
		click(HipiHomePage.objAddToFavourites, "Added To Favourites In Home Page");
		
//		List<WebElement> countafterremoving = getDriver().findElements(HipiProfilePage.objVideosInFavouriteScreen);
		//int countafterremoving = Favrt1.size();
//		System.out.println(countafterremoving.size());
//		if (countafterremoving.size() < countbeforeremoving.size())
		if(verifyElementDisplayed(HipiProfilePage.objAddedToFavorite))
		{
			logger.info("User is unable to remove favorites video by tapping on Added to Favorites");
			extent.extentLoggerFail("Profile_Bookmark", "User is unable to remove favorites video by tapping on Added to Favorites");
		}else {
			logger.info("User is able to remove favorites video by tapping on Added to Favorites");
			extent.extentLoggerPass("Profile_Bookmark", "User is  able to remove favorites video by tapping on Added to Favorites");
		}
		navigateToHomePage();
	}

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to remove video by tapping on added to favorites_T1168");
			System.out.println("T1168");
			extent.extentLogger("profile_Bookmark", "T1168");
			addToFavrite(userType);
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresent(HipiProfilePage.objProfileHeader, "profile header");
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			verifyElementPresent(HipiProfilePage.objFavouriteScreenheader, "Favorite screen");
			waitUntilElementDisplayed(HipiProfilePage.objVideosInFavouriteScreen, 30);
//			waitTime(3000);
//		int countbeforeremoving=getCount(HipiProfilePage.objVideoInFavourites);
//		System.out.println(countbeforeremoving);
//		List<WebElement> countbeforeremoving = getDriver().findElements(HipiProfilePage.objVideosInFavouriteScreen);
	    // int countbeforeremoving = Favrt.size();
//		System.out.println(countbeforeremoving.size());
		click(HipiProfilePage.objVideoInFavourites, "Video");
		waitTime(4000);
		longPress(HipiHomePage.objPlayerScreen);
		verifyElementPresent(HipiProfilePage.ObjPopupOptions, "popup options");
		click(HipiHomePage.objAddToFavourites, "Added To Favourites In Home Page");
		
//		List<WebElement> countafterremoving = getDriver().findElements(HipiProfilePage.objVideosInFavouriteScreen);
		//int countafterremoving = Favrt1.size();
//		System.out.println(countafterremoving.size());
//		if (countafterremoving.size() < countbeforeremoving.size())
		if(verifyElementDisplayed(HipiProfilePage.objAddedToFavorite))
		{
			logger.info("User is unable to remove favorites video by tapping on Added to Favorites");
			extent.extentLoggerFail("Profile_Bookmark", "User is unable to remove favorites video by tapping on Added to Favorites");
		}else {
			logger.info("User is able to remove favorites video by tapping on Added to Favorites");
			extent.extentLoggerPass("Profile_Bookmark", "User is  able to remove favorites video by tapping on Added to Favorites");
		}
		navigateToHomePage();
	}
}
	
	public void addHashTags() throws Exception
	{
		logger.info("Adding Hastag To Favourites");
		extent.extentLoggerPass("", "Adding Hastag To Favourites");
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover button");
	click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
	type(HipiProfilePage.objFollowersSearch, getParameterFromXML("Kundali"), "Search field");
	waitUntilElementDisplayed(HipiDiscoverPage.objSearchResult, 2000);
	click(HipiDiscoverPage.objSearchResult, "Search Result");
	waitTime(2000);
	click(HipiDiscoverPage.objHashtagsTab, "Hashtags Button");
	waitTime(3000);
	click(HipiDiscoverPage.objHashhtags,"Hashtag");
	for(int i=2;i<=7;i++)
	{
	if(verifyElementDisplayed(HipiDiscoverPage.objAddToFavorite))
			{
		click(HipiDiscoverPage.objAddToFavorite,"Add to Favorites");
		break;
			}
	else
	{
		Back(1);
		click(HipiDiscoverPage.objHashhtagsIteratable(i), "Hashtags Button");
	}}
	navigateToHomePage();
	}
	
	public void checkUserIsAbleToRemoveHashtagFromFavorites_T1169(String userType) throws Exception //Jira ID
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to remove hashtag from favorites_T1169");
			System.out.println("T1169");
			extent.extentLogger("profile_Bookmark", "T1169");
			addHashTags();
			waitTime(3000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 30);
			verifyElementPresent(HipiProfilePage.objProfileHeader, "profile header");
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			verifyElementPresent(HipiProfilePage.objVideosInFavouriteScreen, "favorite screen");
			verifyElementPresentAndClick(HipiProfilePage.objHashtags, "HashTags Button");
			verifyElementPresentAndClick(HipiProfilePage.objFirstHashtag, "First Hastag");
			
			if(verifyElementPresent(HipiProfilePage.objCreateVideo,"Create video"))
			{
				logger.info("User is navigated to add to favourites screen");
				extent.extentLoggerPass("Profile_Bookmark", "User is navigated to add to favourites screen");
			}else {
				logger.info("User is unable to navigated to add to favourites screen");
				extent.extentLoggerFail("Profile_Bookmark", "User is unable to navigated to add to favourites screen");
			}
			verifyElementPresentAndClick(HipiProfilePage.objAddedToFavorite, "Added to favorite ");
			if(verifyElementDisplayed(HipiProfilePage.objAddedToFavorite))
			{
				logger.info("User is not able to remove favorites hashtag by tapping on Added to Favorites");
				extent.extentLoggerFail("Profile_Bookmark", "User is not able to remove favorites hashtag by tapping on Added to Favorites");
			}else {
				logger.info("User is able to remove favorites hashtag by tapping on Added to Favorites");
				extent.extentLoggerPass("Profile_Bookmark", "User is able to remove favorites hashtag by tapping on Added to Favorites");
			}
			navigateToHomePage();
//			removefavoritehashtags(userType);
//			navigateToHomePage();
//			
//			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
//			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
//			verifyElementPresentAndClick(HipiProfilePage.objHashtags, "HashTags Button");
//			String beforeremovinghashtags =	getText(HipiProfilePage.objHashhtags);
//			System.out.println(beforeremovinghashtags);
//			
//			String afterremovinghashtags =new String(beforeremovinghashtags);
			//System.out.println(afterremovinghashtags);
			//afterremovinghashtags =beforeremovinghashtags ;
//			verifyElementPresentAndClick(HipiProfilePage.objHashhtags, "Hashtags");
//			verifyElementPresent(HipiProfilePage.objHashTagTitle, "Hashtag title");
//			click(HipiProfilePage.objAddedToFavorite, "Added to favorite ");
//			Back(1);
			//verifyElementPresentAndClick(HipiProfilePage.objBookmarkIcon, "Bookmark icon");
			//verifyElementPresentAndClick(HipiProfilePage.objHashTagsButton, "HashTags Button");
			//List<WebElement> afterremovinghashtags = getDriver().findElements(HipiProfilePage.objHashhtags);
			//int countafterremoving = Favrt1.size();
//			System.out.println(afterremovinghashtags);
			//verifyElementExist(HipiProfilePage.objHashhtags, "hash tags");
//		if(verifyElementExist(HipiProfilePage.objHashhtags, "Hashtags"))
//			{
//				logger.info("User is not able to remove favorites hashtag by tapping on Added to Favorites");
//				extent.extentLoggerFail("Profile_Bookmark", "User is not able to remove favorites hashtag by tapping on Added to Favorites");
//				}else {
//				logger.info("User is able to remove favorites hashtag by tapping on Added to Favorites");
//				extent.extentLoggerPass("Profile_Bookmark", "User is able to remove favorites hashtag by tapping on Added to Favorites");
//				
//					}
			
			}
	}
	
//	public void removefavoritehashtags(String userType) throws Exception
//	{
//		for(;;)
//		{
//			if(verifyElementExist(HipiProfilePage.objHashtags, "Hashtag"))
//			{
//				click(HipiProfilePage.objHashtags, "Hashtag");
//				waitTime(3000);
//				click(HipiProfilePage.objAddToFavorite, "Add to favorite");
//				Back(2);
//				verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
//				verifyElementPresentAndClick(HipiProfilePage.objHashtags, "HashTags Button");
//			}
//			else
//			{
//				Back(2);
//				break;
//			}
//		}
//	}
	
	
	
	
	
//	public void VerifyuserisabletoclickonallowctaAllowZee5HiPiaccessyourcontact__T1223(String userType) throws Exception
//	{
//		if(userType.equalsIgnoreCase("NonSubscribedUser"))
//		{
//			extent.HeaderChildNode(" Logged in user - Check user is able to click on allow cta Allow Zee5 HiPi access your contact _ T1223");
//			System.out.println("T1223");
//			extent.extentLogger("Profile", "T1223");
//			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
//			verifyElementPresentAndClick(HipiProfilePage.objFindContact, "Find Contact Text");
//			allowPermissions();
//			waitTime(5000);
//			if(verifyElementPresent(HipiDiscoverPage.objListOFContact, "List of contact")){
//				logger.info("Pop-up should get disappear and users contact list should be displayed");	
//				extent.extentLoggerPass("", "Pop-up should get disappear and users contact list should be displayed");
//			}else {
//				logger.info("Pop-up not disappear and users contact list not displayed");	
//				extent.extentLoggerFail("", "Pop-up not disappear and users contact list not displayed");	
//			}
//			
//			navigateToHomePage();
//			
//		}
//	}
//	
	
//	public void VerifyuserisabletoclickonallowctaAllowZee5HiPiaccessyourAllFriends__T1208(String userType) throws Exception
//	{
//		if(userType.equalsIgnoreCase("NonSubscribedUser"))
//		{
//			extent.HeaderChildNode(" Logged in user - Check user is able to click on allow cta Allow Zee5 HiPi access your All friends _ T1208");
//			System.out.println("T1208");
//			extent.extentLogger("Profile", "T1208");
//			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
//			verifyElementPresentAndClick(HipiProfilePage.objInviteFriendsText, "Invite Friends Text");
//			allowPermissions();
//			waitTime(5000);
//			if(verifyElementPresent(HipiDiscoverPage.objAllFriends, "All Friends")){
//				logger.info("Pop-up should get disappear and users Friends list should be displayed");	
//				extent.extentLoggerPass("", "Pop-up should get disappear and users Friends list should be displayed");
//			}else {
//				logger.info("Pop-up not disappear and users Friends list not displayed");	
//				extent.extentLoggerFail("", "Pop-up not disappear and users Friends list not displayed");	
//			}
//			
//			navigateToHomePage();
//			
//		}
//	}

//	
//	public void Verifythehashtagisremovedfromprofilefavourites__T1173(String userType) throws Exception
//	{
//		if(userType.equalsIgnoreCase("NonSubscribedUser"))
//		{
//			extent.HeaderChildNode(" Logged in user -Check the hashtag is removed from profile favourites _ T1173");
//			System.out.println("T1173");
//			extent.extentLogger("Profile", "T1173");
//			longPress(HipiHomePage.objPlayerScreen);
//			Thread.sleep(5000);
//			verifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "Add To Favourites");
//			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Save Video");
//			verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtags tab");
//			String HashTagName = getText(HipiDiscoverPage.objhashtagepageasSearchresultpage);
//			System.out.println(HashTagName);
//			verifyElementPresentAndClick(HipiDiscoverPage.objhashtagepageasSearchresultpage, "Hashtags image");
//			verifyElementPresentAndClick(HipiDiscoverPage.objAddedToFavouritesbutton,"Added to Favourites " );
//			verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
//			if(HashTagName != null)
//			{
//				logger.info("Hashtag not removed from profile favourites");	
//				extent.extentLoggerFail("", "Hashtag not removed from profile favourites");
//			}else {
//				logger.info("Hashtag should be removed from profile favourites");	
//				extent.extentLoggerPass("", "Hashtag should be removed from profile favourites");	
//			}
//			
//			navigateToHomePage();			
//		}
//	}
//	
	
	
//	public void VerifyifDraftvideosofloggedinuserarenotvisibleforNormalUser__T1133(String userType) throws Exception
//	{
//		if(userType.equalsIgnoreCase("NonSubscribedUser"))
//		{
//			extent.HeaderChildNode(" Logged in user -Check if Draft videos of logged in user are not visible for Normal User _ T1133");
//			System.out.println("T1133");
//			extent.extentLogger("Profile", "T1133");
//			addvideoDraft();
//			logOut();
//			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			
//			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
//			
//			String Username = getParameterFromXML("NonsubscribedUserName1");
//			String Password = getParameterFromXML("NonsubscribedPassword1");
//			
////			Thread.sleep(5000);
////			hideKeyboard();
//			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
//			
//			click(AMDLoginScreen.objEmailIdField, "Email field");
//			hideKeyboard();
//
//			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
//			hideKeyboard();
//			
//			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//			hideKeyboard();
//
//			type(AMDLoginScreen.objPasswordField, Password, "Password field");
////			hideKeyboard();
//			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
//			
//			waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
//			//click on feed button
//			verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
//			
//			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
//			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
//			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
//			String val = getParameterFromXML("Kartheek9");
//			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
//			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
//			verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
//			verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
//			if(checkElementExist(HipiProfilePage.objDraftVideos,"Draft Video"))
//			{
//				logger.info("Draft videos of logged in user are  visible for Normal User");	
//				extent.extentLoggerFail("", "Draft videos of logged in user are  visible for Normal User");
//			}else {
//				logger.info("Draft videos of logged in user are not visible for Normal User");	
//				extent.extentLoggerPass("", "Draft videos of logged in user are not visible for Normal User");	
//			}
//			
//			navigateToHomePage();	
//		}
//	}
//	
	
	
	
	
	
	
	
	
//===========================================Creater(P2)=====================================================================
	
	
	
	public void  verifyVideoCreationScreenLayer__T526(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check 'Video Creation Screen' options are present on RIGHT section - Layer");
			System.out.println("T526");
			extent.extentLogger("Creator", "T526");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objCreateVideoSpeedButton,"Speed button")) {
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objbeautybtn,"Beauty button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objfilter,"Filter button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objFlashButton,"Flash button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objCameraFlipnew,"Camera Flip button");
				logger.info("All options of Layer 1 is displayed in Right section of Video Creation Screen");	
				extent.extentLoggerPass("", "All options of Layer 1 is displayed in Right section of Video Creation Screen");
			}else {
				logger.info("All options of Layer 1 is not displayed in Right section of Video Creation Screen");	
				extent.extentLoggerFail("", "All options of Layer 1 is not displayed in Right section of Video Creation Screen");	
			} 
			navigateToHomePage();
			}
		 }

	public void  verifyVideoCreationScreenLayerlayer2__T527(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check 'Video Creation Screen' options are present on BOTTOM section - Layer2");
			System.out.println("T527");
			extent.extentLogger("Creator", "T527");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objRecordIcon,"Video Record button")) {
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objeffect,"Effects button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objuploadvideo,"uploads button");
				logger.info("All options of Layer 2 is displayed in bottom section of Video Creation Screen");	
				extent.extentLoggerPass("", "All options of Layer 2 is displayed in bottom section of Video Creation Screen");
			}else {
				logger.info("All options of Layer 2 is not displayed in bottom section of Video Creation Screen");	
				extent.extentLoggerFail("", "All options of Layer 2 is not displayed in bottom section of Video Creation Screen");	
			} 
			navigateToHomePage();
			
		 }
	}
	
	
	public void  verifyVideoCreationScreenLayerlayer3_T528(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check 'Video Creation Screen' options are present on BOTTOM section - Layer3");
			System.out.println("T528");
			extent.extentLogger("Creator", "T528");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.obj15sec,"15s button")) {
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.obj30sec,"30s button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.obj45sec,"45s button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.obj60sec,"60s button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.obj90sec,"90s button");
			waitTime(2000);
				logger.info("All options of Layer 3 is displayed in bottom section of Video Creation Screen");	
				extent.extentLoggerPass("", "All options of Layer 3 is displayed in bottom section of Video Creation Screen");
			}else {
				logger.info("All options of Layer 3 is not displayed in bottom section of Video Creation Screen");	
				extent.extentLoggerFail("", "All options of Layer 3 is not displayed in bottom section of Video Creation Screen");	
			} 
			navigateToHomePage();
		 }
	}
	
	public void  verifyAllowpermissionPromted__T531(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is prompted to provide permission when we tries to create video after fresh install");
			System.out.println("T531");
			extent.extentLogger("Creator", "T531");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow ZEE5 to take pictures and record video?"))
			{
				logger.info("System is able to promt to provide needed permission to use device hardware microphone, Camera and storage");	
				extent.extentLoggerPass("", "System is able to promt to provide needed permission to use device hardware microphone, Camera and storage");
			}else {
				logger.info("System is unable to promt to provide needed permission to use device hardware microphone, Camera and storage");	
				extent.extentLoggerFail("", "System is unable to promt to provide needed permission to use device hardware microphone, Camera and storage");	
			}
			allowPermissions();
			navigateToHomePage();
		 }
	}
	
	public void  verifyDenyAllowPermisiionPopup__T533(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is prompted with alert when user deny to grant permission to use device hardware microphone, Camera and storage");
			System.out.println("T533");
			extent.extentLogger("Creator", "T533");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button ");
			for(int i=0;i<=15;i++)
			{
				waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
			{
				verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny");
			}else
			{
				break;
			}
			}
			if(verifyElementPresent(HipiCreateVideoPage.objAlertAfterDenying,"Deny Permission popup"))
			{
				logger.info("User permissions required to continue cta popup is getting displayed");
				extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
				
				click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
			}else
			{
				logger.info("User permissions required to continue  cta popup is not getting displayed");
				extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed");
			}	
		navigateToHomePage();
		 }
	}
	
	
	public void  verifyUserCanCreateVideoWithoutPermisssion__T535(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if logged in user without permission is unable to create video [i.e on tapping video creation icon - alert will be prompted]");
			System.out.println("T535");
			extent.extentLogger("Creator", "T535");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button ");
			for(int i=0;i<=15;i++)
			{
				waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
			{
				verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny");
			}else
			{
				break;
			}
			}
			if(verifyElementPresent(HipiCreateVideoPage.objAlertAfterDenying,"Deny Permission popup"))
			{
				logger.info("User permissions required to continue cta popup is getting displayed");
				extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
				
				click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
			}else
			{
				logger.info("User permissions required to continue  cta popup is not getting displayed");
				extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed");
			}	
			navigateToHomePage();
			}
		 }
	
	
	
	public void verifyCoverPhotoIsDisplayedInVIdeoPostingPage_T710(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T710 - Check if user is able to view the Cover photo of video created");
			System.out.println("T710");
			extent.extentLogger("Creator", "T710");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
			waitTime(3000);
			if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
		    	logger.info("User is directed to Video Posting Screen");
		    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
		    }else {
		    	logger.info("User is not directed to Video Posting Screen");
		    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
			}
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objcoverphotorecordedvideo,"Cover Photo"))
			{
				logger.info("User is able to view the Cover photo of video created");
		    	extent.extentLoggerPass("Post Screen", "User is able to view the Cover photo of video created");
		    }else {
		    	logger.info("User is unable to view the Cover photo of video created");
		    	extent.extentLoggerFail("Post Screen", "User is unable to view the Cover photo of video created");
			}
			discardPopup();
	}
	}
	
	
	
	public void  verifyUserCanSaveVideoWithoutPermisssion__T536(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if logged in user without permission is unable to save video [i.e on taping finish - alert will be prompted]");
			System.out.println("T536");
			extent.extentLogger("Creator", "T536");
			waitTime(3000);
			longPress(HipiHomePage.objPlayerScreen);
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objSaveVideo,"Save video");
			waitTime(3000);
			for(int i=0;i<=10;i++)
			{
			if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
			{
				logger.info("User is not able to save video without permission");	
				extent.extentLoggerPass("Permission popup", "User is not able to save video without permission");
				break;
			}
			else if(verifyElementDisplayed(HipiCreateVideoPage.objAlertAfterDenying))
			{
				logger.info("User is not able to save video without permission");	
				extent.extentLoggerPass("Permission popup", "User is not able to save video without permission");
				click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
				break;
			}
			else {
				logger.info("User is able to save video without permission");	
				extent.extentLoggerFail("Permission popup", "User is able to save video without permission");	
			}
			}
		navigateToHomePage();
		 }
	}	
	
	
	public void speedBarValidation() throws Exception {
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
		waitTime(3000);
		allowPermissions();
		verifyElementPresent(HipiCreateVideoPage.objRecordIcon,"Video Record Icon");
		verifyElementPresentAndClick(HipiCreateVideoPage.objCreateVideoSpeedButton,"Speed Button");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objSpeedZeropointhree,"0.3x");
		verifyElementPresent(HipiCreateVideoPage.objSpeedZeropointfive,"0.5x");
		verifyElementPresent(HipiCreateVideoPage.objSpeedOne,"1x");
		verifyElementPresent(HipiCreateVideoPage.objSpeedOnePointFive,"1.5x");
		verifyElementPresent(HipiCreateVideoPage.objSpeedTwo,"2x");
		verifyElementPresentAndClick(HipiCreateVideoPage.objSpeedOne,"1X");
		waitTime(2000);
		
		
	}
	
	public void  selectVideo1x_Speed__T543(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check if user is able to select other Video speed options like 1x");
			System.out.println("T543");
			extent.extentLogger("Creator", "T543");
			speedBarValidation();
			
			if(verifyElementDisplayed(HipiCreateVideoPage.objSpeedOneHighlighted))
			{
				logger.info("Speed 1x has been selected and Highlighted");	
				extent.extentLoggerPass("Video creation screen", "Speed 1x has been selected and Highlighted");
			}else {
				logger.info("Speed 1x is not selected and Highlighted");	
				extent.extentLoggerFail("Video creation screen", "Speed 1x is not selected and Highlighted");
			}

			navigateToHomePage();
		 }
	}
	
	public void  selectVideo2x_Speed__T544(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check if user is able to select other Video speed options like 2x");
			System.out.println("T544");
			extent.extentLogger("Creator", "T544");
			speedBarValidation();
			click(HipiCreateVideoPage.objSpeedTwo,"2x");
			waitTime(3000);
			
			if(verifyElementDisplayed(HipiCreateVideoPage.objSpeedTwoHighlighted))
			{
				logger.info("Speed 2x has been selected and Highlighted");	
				extent.extentLoggerPass("Video creation screen", "Speed 2x has been selected and Highlighted");
			}else {
				logger.info("Speed 2x is not selected and Highlighted");	
				extent.extentLoggerFail("Video creation screen", "Speed 2x is not selected and Highlighted");
			}

			navigateToHomePage();
		 }
	}
	
	public void  selectVideoOnePointFivex_Speed__T545(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check if user is able to select other Video speed options like 1.5x");
			System.out.println("T545");
			extent.extentLogger("Creator", "T545");
			speedBarValidation();
			click(HipiCreateVideoPage.objSpeedOnePointFive,"1.5x");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objSpeedOnePointFiveHighlighted))
			{
				logger.info("Speed 1.5x has been selected and Highlighted");	
				extent.extentLoggerPass("Video creation screen", "Speed 1.5x has been selected and Highlighted");
			}else {
				logger.info("Speed 1.5x is not selected and Highlighted");	
				extent.extentLoggerFail("Video creation screen", "Speed 1.5x is not selected and Highlighted");
			}
		
			navigateToHomePage();
		 }
	}
	public void  selectVideoZeroPointFiveX_Speed__T547(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check if user is able to select other Video speed options like 0.5x");
			System.out.println("T547");
			extent.extentLogger("Creator", "T547");
			speedBarValidation();
			click(HipiCreateVideoPage.objSpeedZeropointfive,"0.5x");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objSpeedZeroPointFiveHighlighted))
			{
				logger.info("Speed 0.5x has been selected and Highlighted");	
				extent.extentLoggerPass("Video creation screen", "Speed 0.5x has been selected and Highlighted");
			}else {
				logger.info("Speed 0.5x is not selected and Highlighted");	
				extent.extentLoggerFail("Video creation screen", "Speed 0.5x is not selected and Highlighted");
			}
		
			navigateToHomePage();
		 }
	}
	public void  selectVideoZeroPointThreex_Speed__T546(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check if user is able to select other Video speed options like 0.3x");
			System.out.println("T546");
			extent.extentLogger("Creator", "T546");
			speedBarValidation();
			click(HipiCreateVideoPage.objSpeedZeropointhree,"0.3x");
			waitTime(3000);

			if(verifyElementDisplayed(HipiCreateVideoPage.objSpeedZeroPointThreeHighlighted))
			{
				logger.info("Speed 0.3x has been selected and Highlighted");	
				extent.extentLoggerPass("Video creation screen", "Speed 0.3x has been selected and Highlighted");
			}else {
				logger.info("Speed 0.3x is not selected and Highlighted");	
				extent.extentLoggerFail("Video creation screen", "Speed 0.3x is not selected and Highlighted");
			}
			navigateToHomePage();
		 }
	}
	
	
	public void  verifyUserCanPauseVideo_T551(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check if user is able to select other Video speed options like 0.3x");
			System.out.println("T551");
			extent.extentLogger("Creator", "T551");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record icon");
			waitTime(6000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record icon");
			String verify=getText(HipiCreateVideoPage.objVideoRecordtime);
			waitTime(3000);
			String verify1=getText(HipiCreateVideoPage.objVideoRecordtime);
			if(verify.contains(verify1))
			{
				logger.info("User is able to pause recording during shooting by tapping on recording Icon and user is able to resume recording by tapping on creation icon again");	
				extent.extentLoggerPass("Video creation screen", "User is able to pause recording during shooting by tapping on recording Icon and user is able to resume recording by tapping on creation icon again");
			}else {
				logger.info("User is unable to pause recording during shooting by tapping on recording Icon and user is unable to resume recording by tapping on creation icon again");	
				extent.extentLoggerFail("Video creation screen", "User is unable to pause recording during shooting by tapping on recording Icon and user is unable to resume recording by tapping on creation icon again");
			}
			discardPopup();

		 }  
	} 
	
	public void  verifyDefaultSpeedOfVideo_T553(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user- Check the default video speed is set to 1x");
			System.out.println("T553");
			extent.extentLogger("Creator", "T553");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objCreateVideoSpeedButton,"Speed Button");
			waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objSpeedOneHighlighted))
			{
				logger.info("By default 1x is the selected video speed.");	
				extent.extentLoggerPass("Video creation screen", "By default 1x is the selected video speed.");
			}else {
				logger.info("By default 1x is not the selected video speed.");	
				extent.extentLoggerFail("Video creation screen", "By default 1x is not the selected video speed.");
			}
			discardPopup();
		 }
	}
	
	
	
	public void  verifyVideoEditScreenByTappingOnFinish_T554(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T554 - Logged in user - Check if user is able to end a video and verify the user is navigated to 'Video Edit Screen");
			System.out.println("T554");
			extent.extentLogger("Creator", "T554");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"finish");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditNextBtn,"Next"))
			{
				logger.info("User is able to navigate to Video edit screen by clicking finish");	
				extent.extentLoggerPass("Video Edit screen", "User is able to navigate to Video edit screen by clicking finish");
			}else {
				logger.info("User is unable to navigate to Video edit screen by clicking finish");	
				extent.extentLoggerFail("Video Edit screen", "User is unable to navigate to Video edit screen by clicking finish");
				
			}
			discardPopup();
		 }
	}
	
	
	
//	public void  verifyVideoCreationTimimings_T555(String userType) throws Exception {	
//		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
//			extent.HeaderChildNode("Logged in user - Check if user is able to end a video and verify the user is navigated to 'Video Edit Screen");
//			System.out.println("T555");
//			extent.extentLogger("Creator", "T555");
//			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
//			waitTime(3000);
//			allowPermissions();
//			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
//			waitTime(4000);
////			verifyElementPresent(HipiCreateVideoPage.objVideoRecordtime,"Record Time");
////			waitTime(2000);
////			verifyElementPresent(HipiCreateVideoPage.objMaxRecordTime,"Lapsed Time");
//			
//			if(verifyElementPresent(HipiCreateVideoPage.objrecordprogress, "Record Progress Bar")){
//				logger.info("The video recorded and remaining is displayed below the \"recording Icon\"");	
//				extent.extentLoggerPass("", "");
//			}else {
//				logger.info("");	
//				extent.extentLoggerFail("", "");
//				
//			}
			
//			waitTime(3000);
//			Dimension size = getDriver().manage().window().getSize();
//			System.out.println(size);
//			int w=(int) (size.height*0.2);
//			logger.info("Screen 20% height " + w);
//			extentLogger("","Screen 20% height " + w);
//			WebElement searchbox=getDriver().findElement(IOSHiPiNeoDiscoverPage.objiosSearchFieldInDiscoverPage);
//			int p= searchbox.getLocation().getY();
//			logger.info("Y location of search box " + p);
//			extentLogger("", "Y location of search box"+ p);
//			String expectedtext="Search";
//			String actualresult = searchbox.getText();
//			System.out.println(actualresult);
//			if((p<w)&& (expectedtext.equalsIgnoreCase(actualresult))) {
//				logger.info("Search field is display on the top of the page and search text is written over it");
//				extent.extentLoggerPass("", "Search field is display on the top of the page and search text is written over it");
//			}else {
//				logger.info("Search field is not display on the top of the page and search text is not written over it");
//				extent.extentLoggerPass("", "Search field is not display on the top of the page and search text is not written over it");
//			}
//			waitTime(3000);
//			click(IOSHipiNeoHomePage.objiOSHomeBtnInBelowTabBar, "Home Btn");
//	}
//	}
			
			
			
//			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
//			boolean verify=verifyElementPresent(HipiCreateVideoPage.objVideoRecordtime,"Record Time");
//			waitTime(2000);
//			boolean verify1=verifyElementPresent(HipiCreateVideoPage.objMaxRecordTime,"Lapsed Time");
//			if(verify==verify1)
//			{
//				logger.info("User is able to navigate to Video edit screen by clicking finish");	
//				extent.extentLoggerPass("Video Edit screen", "User is able to navigate to Video edit screen by clicking finish");
//			}else {
//				logger.info("User is unable to navigate to Video edit screen by clicking finish");	
//				extent.extentLoggerFail("Video Edit screen", "User is unable to navigate to Video edit screen by clicking finish");
//			}
//			discardPopup();
//		 }
//	}
	public void VerifyUserCanSearchSongAndAddVideo_T557(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in uuser - Check if user is able to search and add music and then verify music is displayed");
			System.out.println("T557");
			extent.extentLogger("Creator", "T557");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"sound");
			waitTime(5000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			click(HipiCreateVideoPage.objSoundScreenSearchField,"searchfield");
			type(HipiCreateVideoPage.objSoundScreenSearchField, "hai", "searchField");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"FIrst Suggested Music");
			waitTime(5000);
			String expectedText=getText(HipiCreateVideoPage.objSoundsExistingRecord);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First existing record");
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
			waitTime(3000);
			  String actualText=getText(HipiCreateVideoPage.objVideoScreenHeader);
			    if(expectedText!=actualText) {
			    	logger.info("User is able to search specific music and able to select the music");
			    	extent.extentLoggerPass("Video edit screen", "User is able to search specific music and able to select the music");
			    }else {
			    	logger.info("User is unable to search specific music and unable to select the music");
			    	extent.extentLoggerFail("Video edit screen", "User is unable to search specific music and unable to select the music"); 
				}
			    navigateToHomePage();	
		}
	}
	
	
	
	
	public void VerifyUserCanAddTimerToVideo_T558(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user- Check if user is able to select other 'Add timer' options to schedule a video based on selected add timer option [3s,5s,10s]");
			System.out.println("T558");
			extent.extentLogger("Creator", "T558");
			timerBarValidations();
			click(HipiCreateVideoPage.objtimerbtn_timer_3s, "3S");
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtntimer3senabled,"3s highlighted"))
			{
				logger.info("Selected Add timer option has been selected");
		    	extent.extentLoggerPass("Video edit screen", "Selected Add timer option has been selected");
		    }else {
		    	logger.info("Selected Add timer option is not selected");
		    	extent.extentLoggerFail("Video edit screen", "Selected Add timer option is not selected"); 
			}
			discardPopup();
		}
	}
	
	
	public void timerBarValidations() throws Exception {
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn,"Timer");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objtimerbtn_timer_3s,"3S");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objtimerbtn_timer_5s,"5S");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objtimerbtn_timer_10s,"10S");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objTimerFifteenSeconds,"15S");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objTimerTwentySeconds,"20S");
		
		
	}
	public void VerifyUserCanViewTimerOpions_T559(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user- Check if user is able to select other 'Add timer' options to schedule a video based on selected add timer option [3s,5s,10s]");
			System.out.println("T559");
			extent.extentLogger("Creator", "T559");
			timerBarValidations();
			
			discardPopup();
		}
	}
	
	public void  verifyUserCanCreateVideoWithTimerOption_T560(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if video recording is started once the scheduled Add timer video recording time is lapsed");
			System.out.println("T560");
			extent.extentLogger("Creator", "T560");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn,"Timer");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn_timer_5s,"5S");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			if(verifyElementDisplayed(HipiCreateVideoPage.objTimerCountdown))
			{
				logger.info("Recordind countdown has been started");	
				extent.extentLoggerPass("Video creation screen", "Recordind countdown has been started");
			}else {
				logger.info("Recordind countdown is not started");	
				extent.extentLoggerFail("Video creation screen", "Recordind countdown is not started");
			}
			if(waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoTickBtn,10,"Tick"))
			{
				logger.info("System  displays count down[5,4,3,2,1]and once time lapsed - Video recording has been started");	
				extent.extentLoggerPass("Video creation screen", "System  displays count down[5,4,3,2,1]and once time lapsed - Video recording has been started");
			}else {
				logger.info("System  displays count down[5,4,3,2,1]and once time lapsed - Video recording is not started");	
				extent.extentLoggerFail("Video creation screen", "System  displays count down[5,4,3,2,1]and once time lapsed - Video recording is not started");
			}
			discardPopup();
		 }
	}
	
	public void  verifyUserCanAddFilterAndSoundBeforeTimer_T561(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is able to add pre selected [effect, filter, or sound] before scheduling ADD timer");
			System.out.println("T561");
			extent.extentLogger("Creator", "T561");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter, "Filter");
	    	waitTime(2000);		    	
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First Filter");
	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objPlayerScreenForFilters,"Player screen");
	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effects");
	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objEffectsFirstEffect,"First Effect");
	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objPlayerScreenForFilters,"Player screen");
	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Trending Music");
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
	        waitTime(3000);
	        verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn,"Timer");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn_timer_5s,"5S");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(1000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objTimerCountdown))
			{
				logger.info("User is able to add pre selected [effect, filter, or sound] before scheduling ADD timer");	
				extent.extentLoggerPass("Video creation screen", "User is able to add pre selected [effect, filter, or sound] before scheduling ADD timer");
			}else {
				logger.info("User is unable to add pre selected [effect, filter, or sound] before scheduling ADD timer");	
				extent.extentLoggerFail("Video creation screen", "User is unable to add pre selected [effect, filter, or sound] before scheduling ADD timer");
			}
	        discardPopup();
		 }			
		 }
	public void  verifyUserCanAddFilterEffectsAndSoundToVideo_T562(String userType) throws Exception {	
		String expected2,expected3;
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - check the pre selected features [effect, filter, or sound] are applied on the video");
			System.out.println("T562");
			extent.extentLogger("Creator", "T562");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter, "Filter");
//	    	extent.extentLoggerPass("Filters", "Tapping on different Filter categories");
	    	waitTime(2000);		 
	    	waitUntilElementDisplayed(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, 20);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First Filter");
	    	
//            String verify3 = getText(HipiCreateVideoPage.objFirstFilter);
//			logger.info(verify3);
	    	waitTime(7000);
	    	click(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "Select First Filter");
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objPlayerScreenForFilters,"Player screen");
	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effects");
 	    	waitTime(5000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objEffectsFirstEffect,"First Effect");
	    	waitTime(7000);
	    	click(HipiCreateVideoPage.objDownloadedFirstFilter,"Select First Effect");
 	    	verifyElementPresentAndClick(HipiCreateVideoPage.objPlayerScreenForFilters,"Player screen");
 	    	waitTime(2000);
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Music");
			waitTime(1000);
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			String verify2=getText(HipiCreateVideoPage.objMusicScreenHeader);
			logger.info(verify2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
	        waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(15000);
	        verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
	        waitTime(5000);
	        String postDescription = "Desc"+GeneratingRandomString(7);
	        click(HipiCreateVideoPage.objPostDescription, "Description");
	        waitTime(3000);
	        type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
//	        verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
	        verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
	        waitTime(5000);
	        if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
	        click(AMDHomePage.objProfileIcon,"profile icon");
	        waitTime(3000);
	        for (int i = 0; i <= 50; i++) {
	        	PartialSwipe("DOWN",2);
	        	if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
	        		Thread.sleep(2000);
	        		Back(1);
	        		Thread.sleep(2000);
	        		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
	        	} else {
	        	
	        		click(HipiCreateVideoPage.objselectfirstVideo, "First video");
	        		waitTime(3000);
	        	     expected2=getText(HipiProfilePage.objPostedvideoMusicTitle);
	        	    verifyElementPresent(HipiProfilePage.objPostedVideoEffectTitle ,"Effect Added");
	        	    verifyElementPresent(HipiProfilePage.objPostedvideoFilterTitle,"Filter Added");
	        		verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
	        		waitTime(5000);
	        		if(verify2.equals(expected2))
	        		{
	        			logger.info("Pre selected features [effect, filter, or sound], User is able to add the feautures");
	        			extent.extentLoggerPass("profile screen", "Pre selected features [effect, filter, or sound], User is able to add the feautures");
	        		}else {
	        			logger.info("Pre selected features [effect, filter, or sound], User is unable to add the feautures");
	        			extent.extentLoggerFail("profile screen", "Pre selected features [effect, filter, or sound], User is unable to add the feautures"); 
	        		}
	        		break;
	        	}
	        
			
	        }
	        navigateToHomePage();
		 }
	}
	
	
	public void  verifyFilterScreen_T565(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - check the pre selected features [effect, filter, or sound] are applied on the video");
			System.out.println("T565");
			extent.extentLogger("Creator", "T565");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter, "Filter");
			if(verifyElementPresent(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First Filter"))
			{
				logger.info("User is able to navigate to Filters screen");
 			extent.extentLoggerPass("Filter screen", "User is able to navigate to Filters screen");
			}else {
 			logger.info("User is unable to navigate to Filters screen");
 			extent.extentLoggerFail("Filter screen", "User is unable to navigate to Filters screen"); 
			}
			navigateToHomePage();

		 }
	}
	
	
	
	public void  verifyVideoCreationTimeAndLapsedTime_T567(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check is user is navigated to Video edit screen once the sheduled video 'creation time' is lapsed");
			System.out.println("T567");
			extent.extentLogger("Creator", "T567");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoCreationTime30Sec,"Video Creation Time 30Sec");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			String verify1 = getText(HipiCreateVideoPage.objdefaultRecordTime);
			logger.info("waiting for time to lapse"+verify1);
			waitTime(30000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Video Edit Screen"))
			{
				logger.info("Video recording time is started with scheduled time of 30sec and on lapsed on 30sec and user is able to navigate to 'Video Edit screen'`");
   			extent.extentLoggerPass("Video edit screen", "Video recording time is started with scheduled time of 30sec and on lapsed on 30sec and user is able to navigate to 'Video Edit screen'`");
   		}else {
   			logger.info("User is unable to navigate to video Edit screen when the video creation time is lapsed");
   			extent.extentLoggerFail("Video edit screen", "User is unable to navigate to video Edit screen when the video creation time is lapsed");
			}
			discardPopup();
		 }
	}
	
	
	public void  verifyUserCanAddTimerOnMultipleClipSegment_T570(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check is user is navigated to Video edit screen once the sheduled video 'creation time' is lapsed");
			System.out.println("T570");
			extent.extentLogger("Creator", "T570");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"pause");
			String verify1 = getText(HipiCreateVideoPage.objactualRecoredTime);
			verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn,"Timer");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objtimerbtn_timer_5s,"5S");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			if(verifyElementDisplayed(HipiCreateVideoPage.objTimerCountdown))
			{
				logger.info("Recordind countdown has been started");	
				extent.extentLoggerPass("Video creation screen", "Recordind countdown has been started");
			}else {
				logger.info("Recordind countdown is not started");	
				extent.extentLoggerFail("Video creation screen", "Recordind countdown is not started");
			}
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"pause");
			String verify2 = getText(HipiCreateVideoPage.objactualRecoredTime);
			if(verify1!=verify2)
			{
				logger.info("User is able to add timer in multiple clip segment");	
				extent.extentLoggerPass("Video creation screen", "User is able to add timer in multiple clip segment");
			}else {
				logger.info("User is unable to add timer in multiple clip segment");	
				extent.extentLoggerFail("Video creation screen", "User is unable to add timer in multiple clip segment");
			}
			discardPopup();
		 }
	}
	
	public void  verifyUserCanViewSingleClipSegment_T571(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is able to view the single clip segment on the recording screen");
			System.out.println("T571");
			extent.extentLogger("Creator", "T571");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(5000);
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext,30))
				{
					logger.info("Video of single clip segment is created");	
					extent.extentLoggerPass("Video Edit screen", "Video of single clip segment is created");
				}else {
					logger.info("Video of single clip segment is not created");	
					extent.extentLoggerFail("Video Edit screen", "Video of single clip segment is not created");
				}
				discardPopup();
		 }
	}
	
	
	public void  verifyUserCanResumeVideoByTappingOnKeepInDiscardPopup_T573(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if last recorded clip in a multiple clip segment is not deleted when clicked on Keep");
			System.out.println("T573");
			extent.extentLogger("Creator", "T573");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Pause");
			String verify1 = getText(HipiCreateVideoPage.objactualRecoredTime);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objdeleteclip,"Delete");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");	
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupkeepButton,"Keep");
			waitTime(3000);
			String verify2 = getText(HipiCreateVideoPage.objactualRecoredTime);
			if(verify1.contains(verify2))
			{
				logger.info("Last recorded clip is not deleted if user clicks on Keep in Discards your edits popup");	
				extent.extentLoggerPass("Video creation screen", "Last recorded clip is not deleted if user clicks on Keep in Discards your edits popup");
			}else {
				logger.info("Last recorded clip is deleted if user clicks on Keep in Discards your edits popup");	
				extent.extentLoggerFail("Video creation screen", "Last recorded clip is deleted if user clicks on Keep in Discards your edits popup");
			}
			discardPopup();
		 }
	}
	
	public void  verifyLastRecordedClipisDeletedOrNotByTappingOnKeep_T574(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if last recorded clip in a multiple clip segment is deleted when clicked on Discard Edits");
			System.out.println("T574");
			extent.extentLogger("Creator", "T574");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");

			waitUntilElementDisplayed(HipiCreateVideoPage.objeditvideobackbtn, 80);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn, "Back button");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Edits");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objdeleteclip,"Delete");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupkeepButton,"Keep");
			waitTime(3000);
			String verify2 = getText(HipiCreateVideoPage.objactualRecoredTime);
			String verify1 = getText(HipiCreateVideoPage.objdefaultRecordTime);
			if(verify1.contains(verify2))
			{
				logger.info("Clip is not deleted if user selects Keep on delete popup");	
				extent.extentLoggerPass("Video creation screen", "Clip is not deleted if user selects Keep on delete popup");
			}else {
				logger.info("Clip is  deleted if user selects Keep on delete popup");	
				extent.extentLoggerFail("Video creation screen", "Clip is  deleted if user selects Keep on delete popup");
			}
			discardPopup();
		 }
	}
	
	
	public void  verifyLastRecordedClipisDeletedOrNotByTappingOnDiscard_T576(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if recorded clip is deleted when clicked on Discard edits [Recording completed]");
			System.out.println("T576");
			extent.extentLogger("Creator", "T576");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
			waitTime(10000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 30);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn, "Back button");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Edits");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objdeleteclip,"Delete");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Edits");
			if(verifyElementPresent(HipiCreateVideoPage.objDiscardPopupAlertMessager,"Your last clip has been deleted"))
			{
				logger.info("Clip has been deleted if user selects Discard Edits on Discard your edits popup.");	
				extent.extentLoggerPass("Video creation screen", "Clip has been deleted if user selects Discard Edits on Discard your edits popup.");
			}else {
				logger.info("Clip is not deleted if user selects Discard Edits on Discard your edits popup.");	
				extent.extentLoggerFail("Video creation screen", "Clip is not deleted if user selects Discard Edits on Discard your edits popup.");
			}
			navigateToHomePage();
		 }
	}
	
	public void  verifyLastRecordedClipisDeletedOrNotByTappingOnKeep_T577(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if recording clip is not deleted when clicked on No [Recording not completed]");
			System.out.println("T577");
			extent.extentLogger("Creator", "T577");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
		
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Pause");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objdeleteclip,"Delete"))
			{
				logger.info("Delete clip has been displayed on right of record icon");	
				extent.extentLoggerPass("", "Delete clip has been displayed on right of record icon");
				click(HipiCreateVideoPage.objdeleteclip,"Delete");
			}else {
				logger.info("Delete clip is not displayed on right of record icon");	
				extent.extentLoggerFail("", "Delete clip is not displayed on right of record icon");
			}
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupkeepButton,"Keep");
			waitTime(3000);
			String verify2 = getText(HipiCreateVideoPage.objactualRecoredTime);
			String verify1 = getText(HipiCreateVideoPage.objdefaultRecordTime);
			if(verify1!=verify2)
			{
				logger.info("Clip is not deleted if user selects Keep on delete popup");	
				extent.extentLoggerPass("Video creation screen", "Clip is not deleted if user selects Keep on delete popup");
			}else {
				logger.info("Clip is  deleted if user selects Keep on delete popup");	
				extent.extentLoggerFail("Video creation screen", "Clip is  deleted if user selects Keep on delete popup");
			}
			discardPopup();
		 }
	}		
	
	
	public void  verifyVideoCreationTimimings_T555(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is able to end a video and verify the user is navigated to 'Video Edit Screen");
			System.out.println("T555");
			extent.extentLogger("Creator", "T555");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			verifyElementPresent(HipiCreateVideoPage.objVideoRecordtime,"Record Time");
//			verifyElementPresent(HipiCreateVideoPage.objTotalRecordTime,"Lapsed Time");
			if(verifyElementPresent(HipiCreateVideoPage.objrecordprogress, "Record Progress Bar")){
				logger.info("Video seeking bar is visible at top and time lapse of the video recorded and remaining should be displayed below the \"recording Icon\"");	
				extent.extentLoggerPass("Video recording screen", "The video recorded and remaining is displayed below the recording Icon");
			}else {
				logger.info("The video recorded and remaining is not displayed below the recording Icon");	
				extent.extentLoggerFail("Video recording screen", "The video recorded and remaining is not displayed below the recording Icon");
				
			}
			discardPopup();
			}
	}
	public void  verifyLastRecordedClipisDeletedOrNotByTappingOnDiscard_T578(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Logged in user - Check if recording clip is deleted when clicked on Discard Edits [Recording not completed]");
			System.out.println("T578");
			extent.extentLogger("Creator", "T578");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
		
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Pause");
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objdeleteclip,"Delete"))
			{
				logger.info("Delete clip has been displayed on right of record icon");	
				extent.extentLoggerPass("", "Delete clip has been displayed on right of record icon");
				click(HipiCreateVideoPage.objdeleteclip,"Delete");
			}else {
				logger.info("Delete clip is not displayed on right of record icon");	
				extent.extentLoggerFail("", "Delete clip is not displayed on right of record icon");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objDiscardPopupAlertMessager,"Your last clip has been deleted"))
			{
				logger.info("Clip has been deleted if user selects Discard Edits on delete popup.");	
				extent.extentLoggerPass("Video creation screen", "Clip has been deleted if user selects Discard Edits on delete popup.");
			}else {
				logger.info("Clip is not deleted if user selects Discard Edits on delete popup.");	
				extent.extentLoggerFail("Video creation screen", "Clip is not deleted if user selects Discard Edits on delete popup.");
			}
			discardPopup();
		 }
	}
	
	public void verifyUserCanNavigatedToSelectVideoScreen_T583(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if on tapping 'Upload' Icon user is navigated to Select video screen");
			System.out.println("T583");
			extent.extentLogger("Creator", "T583");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup))
			{
				logger.info("User is able to Navigate to video upload from gallery page and Exisiting video is present");
				extent.extentLoggerPass("Gallery upload screen", "User is able to Navigate to video upload from gallery page and Exisiting video is present");
			}else {
				logger.info("User is unable to Navigate to video upload from gallery page and Exisiting video is not present");
				extent.extentLoggerFail("Gallery upload screen", "User is unable to Navigate to video upload from gallery page and Exisiting video is not present");
			}
			navigateToHomePage();
		}
	}
	public void verifyUserCanUploadVideoFromGalleryAvailableInProfile_T585(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			String expected;
			extent.HeaderChildNode("Check the uploaded video is available in user profile");
			System.out.println("T585");
			extent.extentLogger("Creator", "T585");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup))
			{
				logger.info("User is able to Navigate to video upload from gallery page and Exisiting video is present");
				extent.extentLoggerPass("Gallery upload screen", "User is able to Navigate to video upload from gallery page and Exisiting video is present");
			}else {
				logger.info("User is unable to Navigate to video upload from gallery page and Exisiting video is not present");
				extent.extentLoggerFail("Gallery upload screen", "User is unable to Navigate to video upload from gallery page and Exisiting video is not present");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton,"Edit This Video");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objGalleryVideoTickButton))
			{
				logger.info("User is navigated to Trim screen");
				extent.extentLoggerPass("Trim screen", "User is not navigated to Trim screen");
			}else {
				logger.info("User is navigated to Trim screen");
				extent.extentLoggerFail("Trim screen", "User is not navigated to Trim screen");
			}
			verifyElementPresent(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick button");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objTrimlefthandle, "Video SLider");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objRotatingIcon, "Rotate Icon");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objCrossIcon, "Cross Icon");
			waitTime(3000);
			click(HipiCreateVideoPage.objGalleryVideoTickButton,"Tick Button");
			waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next"))
			{
				logger.info("User is able to navigated to Video editing screen");
				extent.extentLoggerPass("Video Edit Screen", "User is able to navigated to Video editing screen");
				click(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
			}else {
				logger.info("User is unable to navigated to Video editing screen");
				extent.extentLoggerFail("Video Edit Screen", "User is unable to navigated to Video editing screen");
			}
//			waitTime(15000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Screen Header"))
			{
				logger.info("User is able to navigated to Video Posting screen");
				extent.extentLoggerPass("Video post Screen", "User is able to navigated to Video Posting screen");
			}else {
				logger.info("User is unable to navigated to Video post screen");
				extent.extentLoggerFail("Video post Screen", "User is unable to navigated to Video post screen");
			}
			verifyElementPresent(HipiCreateVideoPage.objVideoThumbnail, "Video Thumbnail");
			click(HipiCreateVideoPage.objPostDescription, "Description");
			type(HipiCreateVideoPage.objPostDescription,"hello #hipiTest", "Hashtag and Description");
			String text="hello #hipiTest";
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			waitTime(5000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			for (int i = 0; i <= 50; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
				     expected=getText(HipiProfilePage.objHashTagDescription);
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(text), "Video");
					waitTime(8000);
					if(expected.equals(text))
					{
						logger.info("Uploaded video has been visible in user profile");
						extent.extentLoggerPass("profile screen", "Uploaded video has been visible in user profile");
					}else {
						logger.info("Uploaded video is not visible in user profile");
						extent.extentLoggerFail("profile screen", "Uploaded video is not visible in user profile"); 
					}
					break;
				}
			}
			navigateToHomePage();
		}
	}
	
	
	
	
	public void  verifyMusicScreenLayout_T589(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check Layout of music screen");
			System.out.println("T589");
			extent.extentLogger("Creator", "T589");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Search field");
			verifyElementPresent(HipiCreateVideoPage.objSoundScreenBackButtton,"Cross icon");
			click(HipiCreateVideoPage.objSoundScreenSearchField,"Search field");
			type(HipiCreateVideoPage.objSoundScreenSearchField, "hey"," SearchField");
			waitTime(5000);
			verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"First record");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSuggestedSoundScreenBackButtton,"Back");
			waitTime(1000);
			verifyElementPresent(HipiCreateVideoPage.objSoundsScreenSecondRail," Rail");
			waitTime(1000);
			PartialSwipe("UP",1);
			verifyElementPresent(HipiCreateVideoPage.objSoundsScreenTrendingMusicRail,"Segments");
			
				logger.info("User is able to verify the layout of music screen");
				extent.extentLoggerPass("Sound screen", "User is able to verify the layout of music screen");
			
	        navigateToHomePage();
		 }			
		 }
			
		 
	
	public void  verifyMusicScreenAddedOnVideoCreation_T592(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user selected sound is played while recording");
			System.out.println("T592");
			extent.extentLogger("Creator", "T592");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Search field");
			type(HipiCreateVideoPage.objSoundScreenSearchField, "hey"," SearchField");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"First record");
			waitTime(1000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"Existing Rcord");
//	waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
	String verify1=getText(HipiCreateVideoPage.objMusicScreenHeader);
	verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
	waitTime(3000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader, 30);
	String verify2=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
			if(verify1.contains(verify2))
			{
				logger.info("User selected sound is able to play while recording");
				extent.extentLoggerPass("Video Edit screen", "User selected sound is able to play while recording");
			}else {
				logger.info("User selected sound is unable to play while recording");
				extent.extentLoggerFail("Video Edit screen", "User selected sound is unable to play while recording"); 	
			}
	       discardPopup();
		 }			
		 }
	
	public void  verifyUserCanRemoveAddedMusicInVideoCreationScreen_T593(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user selected sound can be remove till the time he has not recorded anything");
			System.out.println("T593");
			extent.extentLogger("Creator", "T593");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	   	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Search field");
			type(HipiCreateVideoPage.objSoundScreenSearchField, "hey"," SearchField");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"First record");
			waitTime(1000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"Existing Rcord");
//	waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
	verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
	waitTime(3000);
	if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader))
	{
		logger.info("Music selected has been added");
		extent.extentLoggerPass("", "Music selected has been added");
	}else {
		logger.info("Music selected is not added");
		extent.extentLoggerFail("", "Music selected is not added"); 	
	}
	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoeditscreenMusicRemove,"Music Remove");
	waitTime(5000);
	if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader))
	{
		logger.info("User selected sound is unable to remove till the time, User has not recorded anything.");
		extent.extentLoggerFail("Video creation screen", "User selected sound is unable to remove till the time, User has not recorded anything.");
	}else {
		logger.info("User selected sound is able to remove till the time, User has not recorded anything.");
		extent.extentLoggerPass("Video creation screen", "User selected sound is able to remove till the time, User has not recorded anything."); 	
	}
	navigateToHomePage();
	}
	}
	public void  verifyUserCanRemoveAddedMusicAfterRecording_T595(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user -Check if user is able to remove sound from edit screen in video");
			System.out.println("T595");
			extent.extentLogger("Creator", "T595");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	  	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Search field");
			type(HipiCreateVideoPage.objSoundScreenSearchField, "hey"," SearchField");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"First record");
			waitTime(1000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"Existing Rcord");
//	waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
	verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
	waitTime(3000);
	if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader))
	{
		logger.info("Music selected has been added");
		extent.extentLoggerPass("", "Music selected has been added");
	}else {
		logger.info("Music selected is not added");
		extent.extentLoggerFail("", "Music selected is not added"); 	
	}
	verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoeditscreenMusicRemove,"Music Remove");
	waitTime(5000);
	if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader))
	{
		logger.info("User is  unable to remove sound successfully from video in edit screen");
		extent.extentLoggerFail("Video Edit screen", "User is  unable to remove sound successfully from video in edit screen");
	}else {
		logger.info("User is  able to remove sound successfully from video in edit screen");
		extent.extentLoggerPass("Video Edit screen", "User is  able to remove sound successfully from video in edit screen"); 	
	}
	discardPopup();
	}
	}
	
	
	public void  verifyUserCanRemoveAddedMusicAfterRecording_T596(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user -Check if user is able to remove sound from edit screen in video");
			System.out.println("T596");
			extent.extentLogger("Creator", "T596");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	 	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField,"Search field");
			type(HipiCreateVideoPage.objSoundScreenSearchField, "hey"," SearchField");
			waitTime(5000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"Suggested record"))
			{
				verifyElementPresent(HipiCreateVideoPage.objSuggestedSoundScreenBackButtton, "Back Button");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objSuggestedSoundScreenCrossIcon, "Cross Icon");
				logger.info("User on tapping on search text field to enter record other options has been displayed");
				extent.extentLoggerPass("Suggested Music screen", "User on tapping on search text field to enter record other options has been displayed");
			}else
			{
		    	logger.info("User on tapping on search text field to enter record other options has not displayed");
		    	extent.extentLoggerFail("Suggested Music screen", "User on tapping on search text field to enter record other options has not displayed"); 
			}
			waitTime(1000);
			navigateToHomePage();
		 }
	}	
	
	public void  verifySoundScreen_T602(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user selected sound is played while recording");
			System.out.println("T602");
			extent.extentLogger("Creator", "T602");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
	    	waitTime(3000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			Swipe("UP", 1);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundsScreenSecondRail,"Second Rail"))
			{
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objSoundsAnySound,"New Release");
			waitTime(2000);
			PartialSwipe("UP",1);
			verifyElementPresent(HipiCreateVideoPage.objSoundsScreenTrendingMusicRail,"Trending songs");
			waitTime(2000);
//			verifyElementPresent(HipiCreateVideoPage.objSoundScreenIndemendRail,"In demand Rail");
//			waitTime(2000);
		    	logger.info("User is able to view rails and segments");
				extent.extentLoggerPass("Sound screen", "User is able to view rails and segments");
			}else {
				logger.info("User is unable to view rails and segments");
				extent.extentLoggerFail("Sound screen", "User is unable to view rails and segments"); 	
			}
	        navigateToHomePage();
		 }			
		 }		
		 
	
	
	public void verifyUserNavigatedToSoundScreenAfterDenyPermission__T609(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Check if logged in user without permission is unable to add sound to video ");
			System.out.println("T609");
			extent.extentLogger("Creator", "T609");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button ");
			for(int i=0;i<=15;i++)
			{
				waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
			{
				verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny");
			}else
			{
				break;
			}
			}
			if(verifyElementPresent(HipiCreateVideoPage.objAlertAfterDenying,"Deny Permission popup"))
			{
				logger.info("User permissions required to continue cta popup is getting displayed");
				extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
				
				click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
			}else
			{
				logger.info("User permissions required to continue  cta popup is not getting displayed");
				extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed");
			}	
		navigateToHomePage();
		 }
	}
	public void  verifySoundScreenLayout_T610(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check layout of Sound Screen");
			System.out.println("T610");
			extent.extentLogger("Creator", "T610");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
	    	waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objSoundHeaderText,"Sound Title"))
			{
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objSoundCrossIcon,"Cross Icon");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchIcon,"Search bar");
			waitTime(2000);
			PartialSwipe("UP",1);
			verifyElementPresent(HipiCreateVideoPage.objSoundsScreenTrendingMusicRail,"First rails songs");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objSoundScreenIndemendRail,"Second Rail songs");
			waitTime(2000);
		    	logger.info("User is able to view Layout of sound screen");
				extent.extentLoggerPass("Sound screen", "User is able to view Layout of sound screen");
			}else {
				logger.info("User is unable to view Layout of sound screen");
				extent.extentLoggerFail("Sound screen", "User is unable to view Layout of sound screen"); 	
			}
	        navigateToHomePage();
		 }			
		 }	
	public void  verifyMusicscreenbackButton_T613(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check Layout of music screen");
			System.out.println("T613");
			extent.extentLogger("Creator", "T613");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(20000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objtrim,"Trim Icon");
			waitTime(3000);
			Back(1);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next"))
			{
				logger.info("On tapping back from mobile keyboard, useris able to remain in Video Edit Screen");
				extent.extentLoggerPass("Video Edit Screen", "On tapping back from mobile keyboard, useris able to remain in Video Edit Screen");
			}else {
				logger.info("On tapping back from mobile keyboard, useris unable to remain in Video Edit Screen");
				extent.extentLoggerFail("Video Edit Screen", "On tapping back from mobile keyboard, useris unable to remain in Video Edit Screen"); 
			}
		    discardPopup();
		 }
	}
	
	public void  verifyTrimIconOnVideoWithOriginalSound_T614(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check Layout of music screen");
			System.out.println("T614");
			extent.extentLogger("Creator", "T614");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(20000);
			click(HipiCreateVideoPage.objtrim,"Trim Icon");
			if(verifyElementPresent(HipiCreateVideoPage.objTrimScreenHeader,"Trim Screen header"))
			{
				logger.info("Trim icon is enabled when video is created with original sound");
				extent.extentLoggerPass("Video Edit Screen", "Trim icon is enabled when video is created with original sound");
			}else {
				logger.info("Trim icon is not enabled when video is created with original sound");
				extent.extentLoggerFail("Video Edit Screen", "Trim icon is not enabled when video is created with original sound"); 
			}
			discardPopup();
		 }
	}
	public void  verifyTrimIconOnVideoWithAddedSound_T615(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if trim icon is 'enabled' when video is created with some sound");
			System.out.println("T615");
			extent.extentLogger("Creator", "T615");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Music");
			waitTime(1000);
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
		    verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
//		    waitTime(15000);
		    waitUntilElementDisplayed(HipiCreateVideoPage.objtrim, 20);
		    verifyElementPresentAndClick(HipiCreateVideoPage.objtrim,"Trim");
		    if(verifyElementDisplayed(HipiCreateVideoPage.objtrimdialog))
		    {
		    	logger.info("Trim icon is enabled when video is created with added sound");
				extent.extentLoggerPass("Trim screen", "Trim icon is enabled when video is created with added sound");
			}else {
				logger.info("Trim icon is not enabled when video is created with added sound");
				extent.extentLoggerFail("Trim screen", "Trim icon is not enabled when video is created with added sound"); 	
		    }
			discardPopup();	
		 }
	}
	
	
	
	public void  verifyTrimedsoundIsPlayed_T617(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is able to play the trimmed sound");
			System.out.println("T617");
			extent.extentLogger("Creator", "T617");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Music");
			waitTime(1000);
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
		    verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
		    waitTime(15000);
		    waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader,30);
		    verifyElementPresentAndClick(HipiCreateVideoPage.objtrim,"Trim");
		    verifyElementDisplayed(HipiCreateVideoPage.objtrimdialog);	    {
		    waitTime(5000);
//		    slideAnElements();

		    //String expectedText=getText(HipiCreateVideoPage.objMusicScreenHeader);
//			logger.info(" Expected Text"+expectedText);
//		  WebElement element = getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle);
//		    String xDuration = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
//		    System.out.println(xDuration);
//		    int endX = Integer.parseInt(xDuration) - 500;
//		    SwipeAnElement(element, endX, 0);
//		    Dimension size1= getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle).getSize();
//		    System.out.println(size1);
//		    String xDuration2 = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
//		    System.out.println(xDuration2);
//		    if(xDuration.equals(xDuration2) == false){
//		    	logger.info("User is able to trim sound from trimming screen");
//				extent.extentLoggerPass("AddSoundPreShoot", "User is able to trim sound from trimming screen");
//		    }else {
//		    	logger.error("User is NOT able to trim sound from trimming screen");
//				extent.extentLoggerFail("AddSoundPreShoot", "User is NOT able to trim sound from trimming screen");
//		    }
			discardPopup();	
		 }
	}
	}
	public void  verifyMicrophoneEnabledOnOriginalSOund_T620(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if \"Microphone\" icon is 'enabled' when video is created with original sound");
			System.out.println("T620");
			extent.extentLogger("Creator", "T620");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
		    verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
//		    waitTime(15000);
		    waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader,10);
		    verifyElementPresentAndClick(HipiCreateVideoPage.objvolumebtn,"Volume");
		    verifyElementPresent(HipiCreateVideoPage.objVolumeScreenHeader,"Volume header");
		    if(verifyElementPresent(HipiCreateVideoPage.objMicrophoneEnabled,"Microphone Enabled"))
		    {
		    	logger.info("Microphone icon is 'enabled' when video is created with original sound");
				extent.extentLoggerPass("vOLUME SCREEN", "Microphone icon is 'enabled' when video is created with original sound");
		    }else {
		    	logger.error("Microphone icon is not 'enabled' when video is created with original sound");
				extent.extentLoggerFail("vOLUME SCREEN", "Microphone icon is not 'enabled' when video is created with original sound");	
		    }
		    discardPopup();
		 }
	}
	public void  verifyMicrophoneEnabledOnaDDEDSOund_T621(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if \"Microphone\" icon is 'enabled' when video is created with some added sound but value id 0");
			System.out.println("T621");
			extent.extentLogger("Creator", "T621");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
		    verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
//		    waitTime(15000);
		    waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenSoundbtn, 20);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"Sound");
			if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
				logger.info("User is able to navigate to the Sound screen");
		    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
		    }else {
		    	logger.info("User is not able to navigate to the Sound screen");
		    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
			}
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Music");
			waitTime(1000);
//			waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
			waitUntilElementDisplayed(HipiCreateVideoPage.objMusicScreenTickIcon, 10);
			verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
			waitTime(5000);
		    verifyElementPresentAndClick(HipiCreateVideoPage.objvolumebtn,"Volume");
		    verifyElementPresent(HipiCreateVideoPage.objVolumeScreenHeader,"Volume header");
		    if(verifyElementPresent(HipiCreateVideoPage.objMicrophoneEnabled,"Microphone Enabled"))
		    {
		    	logger.info("Microphone icon is 'enabled' when video is created with added sound with volume 0");
				extent.extentLoggerPass("vOLUME SCREEN", "Microphone icon is 'enabled' when video is created with added sound with volume 0");
		    }else {
		    	logger.error("Microphone icon is not 'enabled' when video is created with added sound with volume 0");
				extent.extentLoggerFail("vOLUME SCREEN", "Microphone icon is not 'enabled' when video is created with added sound with volume 0");	
		    }
		    discardPopup();
		 }
	}
	public void  verifyFilterLayoutBeforeVideo_T627(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check layout of filter screen");
			System.out.println("T627");
			extent.extentLogger("Creator", "T627");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objfilter, "Filter"))
			{
				click(HipiCreateVideoPage.objfilter, "Filter");
				verifyElementPresent(HipiCreateVideoPage.objfiltercategorydownloadbtn, "Download Button");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objFIlterScreenClearIcon, "Clear Icon");
				waitTime(2000);
				for(int i=1;i<=3;i++)
				{
					verifyElementPresent(HipiCreateVideoPage.filterTabsXpaths(i),"Filter layout");
					String verify2 = getText(HipiCreateVideoPage.filterTabsXpaths(i));
			    	logger.info(" FIlter layout "+verify2+"is displayed");
					extent.extentLoggerPass("FIlter layout", "FIlter layout "+verify2+" is displayed");
				}
			}
			navigateToHomePage();
		 }
	}
	
	public void  verifyUserCanDowloadFilter_T629(String userType) throws Exception {	
		boolean verify1 ;
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is able to download filter, by tapping on download pin present on each filter");
			System.out.println("T629");
			extent.extentLogger("Creator", "T629");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objfilter, "Filter"))
			{
				click(HipiCreateVideoPage.objfilter, "Filter");
				verifyElementPresent(HipiCreateVideoPage.objfiltercategorydownloadbtn, "Download Button");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objFIlterScreenClearIcon, "Clear Icon");
				waitTime(2000);
				for(int i=1;i<=3;i++)
				{
					verifyElementPresent(HipiCreateVideoPage.filterTabsXpaths(i),"Filter layout");
					String verify2 = getText(HipiCreateVideoPage.filterTabsXpaths(i));
			    	logger.info(" FIlter layout "+verify2+"is displayed");
					extent.extentLoggerPass("FIlter layout", "FIlter layout "+verify2+" is displayed");
					verifyElementPresentAndClick(HipiCreateVideoPage.filterTabsFilters(i),"Filter ");
					waitTime(5000);
					String verify3 = getText(HipiCreateVideoPage.filterTabsFilters(i));
			    	logger.info(" FIlter "+verify3+"is displayed");
					extent.extentLoggerPass("FIlter", "FIlter "+verify3+" is displayed");
				}
				if(verifyElementPresent(HipiCreateVideoPage.objfiltercategorydownloadbtn,"Download Icon"))
				{
			    	logger.info("By default Not all the filters are downloaded");
					extent.extentLoggerPass("Filter SCREEN", "By default Not all the filters are downloaded");
					click(HipiCreateVideoPage.objfiltercategorydownloadbtn,"Download Icon");
				    verify1 = verifyElementPresent(HipiCreateVideoPage.objfiltercategorydownloadprogressbar,"Download progress bar");
					waitTime(2000);
					if(verify1==true)
					{
						logger.error("User is able to download filter, by tapping on download pin present on each filter");
						extent.extentLoggerPass("Filter SCREEN", "User is able to download filter, by tapping on download pin present on each filter");	}
						else {
						  	logger.error("User is unable to download filter, by tapping on download pin present on each filter");
							extent.extentLoggerFail("Filter SCREEN", "User is unable to download filter, by tapping on download pin present on each filter");			
					}
			    }
			}
			navigateToHomePage();
		 }
	}
	
	public void  verifyUserNavigatesToVideoCreationSCreenFromFilter_T633(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is redirected to Video creation screen, when tapped anywhere on (or) above the 'filter section'");
			System.out.println("T633");
			extent.extentLogger("Creator", "T633");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objfilter, "Filter"))
			{
				click(HipiCreateVideoPage.objfilter, "Filter");
				verifyElementPresentAndClick(HipiHomePage.objPlayerScreenForFilters,"Player screen");
				if(verifyElementPresent(HipiCreateVideoPage.objVideoScreenSoundbtn,"SOunds"))
				{
					logger.error("User is able to redirect to Video creation screen, when tapped anywhere on (or) above the 'filter section'");
					extent.extentLoggerPass("Video Edit SCREEN", "User is able to redirect to Video creation screen, when tapped anywhere on (or) above the 'filter section'");	
				}else
				{
					logger.error("User is unable to redirect to Video creation screen, when tapped anywhere on (or) above the 'filter section'");
					extent.extentLoggerFail("Video edit SCREEN", "User is unable to redirect to Video creation screen, when tapped anywhere on (or) above the 'filter section'");	}
			}
			navigateToHomePage();
		 }
	}
	
	
	
	public void  verifyUserCanPlayVideoWithFilter_T637(String userType) throws Exception {	
		String expected3;
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if user is able to create a video by applying any filter type");
			System.out.println("T637");
			extent.extentLogger("Creator", "T637");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter, "Filter");
	    	extent.extentLoggerPass("Filters", "Tapping on different Filter categories");
	    	waitTime(2000);		    	
	    	verifyElementPresentAndClick(HipiCreateVideoPage.objfirstfilterafterdownloadfinish, "First Filter");
	        String verify3 = getText(HipiCreateVideoPage.objFirstFilter);
			logger.info(verify3);
	    	waitTime(5000);
	    	verifyElementPresentAndClick(HipiHomePage.objPlayerScreenForFilters,"Player screen");
	    	waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 20);
	        verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
	        waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 10);
	        String postDescription = "Desc"+GeneratingRandomString(7);
	        type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
//	        verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
	        verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
	        waitTime(3000);
	        if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
	        click(AMDHomePage.objProfileIcon,"profile icon");
	        waitTime(3000);
	        for (int i = 0; i <= 50; i++) {
	        	PartialSwipe("DOWN",2);
	        	if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
	        		Thread.sleep(2000);
	        		Back(1);
	        		Thread.sleep(2000);
	        		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
	        	} else {
	        	
	        		click(HipiCreateVideoPage.objselectfirstVideo, "First video");
	        		waitTime(3000);
//	        	     expected3=getText(HipiProfilePage.objPostedvideoFilterTitle);
	        		verifyElementExist(HipiCreateVideoPage.objSelectVideo(postDescription), "Video");
	        		waitTime(5000);
	        		if(verifyElementExist(HipiProfilePage.objPostedvideoFilterTitle,"Filter"))
	        		{
	        			logger.info("User is able to create a video by applying any filter type");
	        			extent.extentLoggerPass("profile screen", "User is able to create a video by applying any filter type");
	        		}else {
	        			logger.info("User is unable to create a video by applying any filter type");
	        			extent.extentLoggerFail("profile screen", "User is unable to create a video by applying any filter type"); 
	        		}
	        		break;
	        	}
	        }
	        navigateToHomePage();
			
		 }
	}
public void verifyUserCanUploadVideoWithUrl_T645(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user - Check if user is able to add description with URL to a newly created video, for user created hashtags");
			System.out.println("T645");
			extent.extentLogger("Creator", "T645");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
				logger.info("User is navigated to Video Creation screen");
		    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
		    }else {
		    	logger.info("User is not navigated to Video Creation screen");
		    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
				logger.info("Post screen has been displayed");
		    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
		    }else {
		    	logger.info("Post screen has not displayed");
		    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
			}
			waitTime(3000);
			type(HipiCreateVideoPage.objPostDescription,"hipiTest https://www.zee5.com/", "Hashtag");
			String desc = getText(HipiCreateVideoPage.objPostDescription);
			waitTime(3000);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
	      waitTime(5000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"profile");
			for (int i = 0; i <= 50; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
//				     expected=getText(HipiProfilePage.objHashTagDescription);
					verifyElementExist(HipiCreateVideoPage.objSelectVideo(desc), "Video");
						if(verifyElementDisplayed(HipiProfilePage.objVerifyUrl)) {
							logger.info("user is able to upload video with Url and description");
					    	extent.extentLoggerPass("Hastag With Description", "user is able to upload video with Url and description");
					    }else {
					    	logger.info("user is unable to upload video with Url and description");
					    	extent.extentLoggerFail("Hastag With Description", "user is unable to upload video with Url and description"); 		
						}
					break;
				}
				}
			navigateToHomePage();
			
		}
	}
public void VerifyTextButtonInVideoEditScreen_T647(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check whether text is present in the editing screen");
		System.out.println("T647");
		extent.extentLogger("Creator", "T647");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
		
		if(verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text"))

		{
	    	logger.info("User is able to see text in the editing screen");
	    	extent.extentLoggerPass("Edit Screen", "User is able to see text in the editing screen");
	    }else {
	    	logger.info("User is unable to see text in the editing screen");
	    	extent.extentLoggerFail("Edit Screen", "User is unable to see text in the editing screen"); 
	    	
		}
		discardPopup();
	}
	
}
public void VerifyUserNavigateToTextEditSCreen_T648(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check whether text is present in the editing screen");
		System.out.println("T648");
		extent.extentLogger("Creator", "T648");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
		
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittext,"Edit Text");
		if(verifyElementPresent(HipiCreateVideoPage.objVideoedittextplusicon,"Plus Icon"))
		{
	    	logger.info("User is able to navigate to text screen");
	    	extent.extentLoggerPass("Text Edit Screen", "User is able to navigate to text screen");
	    }else {
	    	logger.info("User is unable to navigate to text screen");
	    	extent.extentLoggerFail("Text Edit Screen", "User is unable to navigate to text screen"); 
	    	
		}
		discardPopup();
	}
	
}
public void VerifyTextEditSCreen_T663(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check whether text is present in the editing screen");
		System.out.println("T663");
		extent.extentLogger("Creator", "T663");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittext,"Edit Text");
		if(verifyElementPresent(HipiCreateVideoPage.objVideoedittextplusicon,"Plus Icon"))
		{
			verifyElementPresent(HipiCreateVideoPage.objEditTextScreenBackButton,"Back Button");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Done CTA");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objEditTextScreenTrimlayout,"Trim");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objEditTextScreenPlayButton,"Play Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoedittextplusicon,"Plus Icon");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoEditTextfield,"Sticker");
	    	logger.info("User is able to navigate to text screen and all the components of Edit video Text screen has been displayed");
	    	extent.extentLoggerPass("Text Edit Screen", "User is able to navigate to text screen and all the components of Edit video Text screen has been displayedUser is able to navigate to text screen");
	    }else {
	    	logger.info("User is unable to navigate to text screen and components of Edit video Text screen has not displayed");
	    	extent.extentLoggerFail("Text Edit Screen", "User is unable to navigate to text screen and components of Edit video Text screen has not displayed"); 
	    	
		}
		discardPopup();
	}
	
}
public void VerifyUserCanNavigateToSTickerScreen_T667(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check user is able to add Stickers on the video");
		System.out.println("T667");
		extent.extentLogger("Creator", "T667");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker icon");
if(verifyElementPresent(HipiCreateVideoPage.objStickerEditScreenDoneButton,"Done"))
{
	logger.info("User is able to navigate to sticker screen");
	extent.extentLoggerPass("Sticker Screen", "User is able to navigate to sticker screen");
}else {
	logger.info("User is unable to navigate to sticker screen");
	extent.extentLoggerFail("Sticker Screen", "User is unable to navigate to sticker screen"); 
}
discardPopup();
	}
}
public void VerifyStickerVisibilityInVideoEditScreen_T668(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check user is able to add Stickers on the video");
		System.out.println("T668");
		extent.extentLogger("Creator", "T668");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
if(verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker icon"))
{
	logger.info("User is able to see The sticker icon in video edit screen");
	extent.extentLoggerPass("Video Edit Screen", "User is able to see The sticker icon in video edit screen");
}else {
	logger.info("User is unable to see The sticker icon in video edit screen");
	extent.extentLoggerFail("Video Edit Screen", "User is unable to see The sticker icon in video edit screen"); 
}
discardPopup();
	}
}


public void VerifyStickerLayout_T670(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check user is able to see the UI on sticker screen");
		System.out.println("T670");
		extent.extentLogger("Creator", "T670");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker icon");
if(verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker icon"))
{
	verifyElementPresent(HipiCreateVideoPage.objEditTextScreenBackButton,"Back Button");
	waitTime(2000);
	verifyElementPresent(HipiCreateVideoPage.objStickerEditScreenDoneButton,"Done CTA");
	waitTime(2000);
	verifyElementPresent(HipiCreateVideoPage.objFilterScreenTrimlayout,"Trim");
	waitTime(2000);
	verifyElementPresent(HipiCreateVideoPage.objFilterScreenPlayButton,"Play Button");
	waitTime(2000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objStickerScreenPlusIcon,"Plus Icon");
	waitTime(2000);
	verifyElementPresent(HipiCreateVideoPage.objVideoEditTextfield,"Sticker");
	logger.info("User is able to see The sticker icon in video edit screen");
	extent.extentLoggerPass("Video Edit Screen", "User is able to see The sticker icon in video edit screen");
}else {
	logger.info("User is unable to see The sticker icon in video edit screen");
	extent.extentLoggerFail("Video Edit Screen", "User is unable to see The sticker icon in video edit screen"); 
}
discardPopup();
	}
}
public void VerifyVideoEditScreenLayout_T677(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check the UI of video edit screen");
		System.out.println("T677");
		extent.extentLogger("Creator", "T677");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
		if(verifyElementPresent(HipiCreateVideoPage.objeditvideobackbtn,"Back Button"))
		{
//			verifyElementPresent(HipiCreateVideoPage.objFilterIcon,"Filter");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objtrim,"Trim");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objvolumebtn,"Volume");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker");
			waitTime(2000);
			verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next Cta");
			logger.info("All the components of video edit screen has been displayed");
			extent.extentLoggerPass("Video Edit Screen", "All the components of video edit screen has been displayed");
		}else {
			logger.info("All the components of video edit screen has not displayed");
			extent.extentLoggerFail("Video Edit Screen", "All the components of video edit screen has not displayed"); 
		}
		discardPopup();
		}
	}

public void verifyUserCanMentionMultiplePersonWhileUpload_T708(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Check if user is able to tag Multple person while upload");
		System.out.println("T708");
		extent.extentLogger("Creator", "T708");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		if(verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer")) {
			logger.info("User is navigated to Video Creation screen");
	    	extent.extentLoggerPass("Video Creation Screen", "User is navigated to Video Creation screen");
	    }else {
	    	logger.info("User is not navigated to Video Creation screen");
	    	extent.extentLoggerFail("Video Creation Screen", "User is not navigated to Video Creation screen");
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
		waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
//		waitTime(15000);
		waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

		if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Page Header ")) {
			logger.info("Post screen has been displayed");
	    	extent.extentLoggerPass("Post Screen", "Post screen has been displayed");
	    }else {
	    	logger.info("Post screen has not displayed");
	    	extent.extentLoggerFail("Post Screen", "Post screen has not displayed"); 	
		}
		for(int i=1;i<=3;i++) {
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenFriendsBotton,"@Friends");
			waitTime(3000);	
			type(HipiCreateVideoPage.objPostDescription,"user"+Math.random(), "Random user");
		}
		//hideKeyboard();
		verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post");
		waitTime(5000);
		
		waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
		waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"Profile");
		for (int i = 0; i <= 10; i++) 
		{	 PartialSwipe("DOWN", 2);
			if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
				Thread.sleep(2000);
				Back(1);
				Thread.sleep(2000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				waitTime(2000);
			} else {
				click(HipiCreateVideoPage.objselectfirstVideo, "First video");
				waitTime(3000);
				String Username2=getText(HipiProfilePage.objPostedVideoMentionedUser);
				System.out.println(Username2);
				waitTime(3000);
				 int count = countMatches(Username2, '@');
				 System.out.println(count);
				if(count>=3)
				{
					logger.info("user is able to tag multiple person while upload");
			    	extent.extentLoggerPass("Profile screen", "user is able to tag multiple person while upload");
			    }else {
			    	logger.info("user is unable to tag multiple person while upload");
			    	extent.extentLoggerFail("Profile screen", "user is unable to tag multiple person while upload"); 
				}
				break;	
			    }
		}
		navigateToHomePage();	
}
}



private static int countMatches(final String str, final char ch) {
	  if (str == null || str.length() == 0) {
	      return 0;
	  }
	  int count = 0;
	  // We could also call str.toCharArray() for faster look ups but that
	  // would generate more garbage.
	  for (int i = 0; i < str.length(); i++) {
	      if (ch== str.charAt(i)) {
	          count++;
	      }
	  }
	  return count;
	}


public void verifyUserRedirectedToVideoCreationScreenByTappingBackButton_T716(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user -Check if user is redirected to Video creation screen, when tapped 'back' of effect screen");
		System.out.println("T716");
		extent.extentLogger("Creator", "T716");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effects Button");
		Back(1);
		if(verifyElementDisplayed(HipiCreateVideoPage.objeffect))
		{
			logger.info("User is able to redirect to Video creation screen, when tapped Mobile'back' on effect screen");
	    	extent.extentLoggerPass("Video creation screen", "User is able to redirect to Video creation screen, when tapped Mobile'back' on effect screen");
	    }else {
	    	logger.info("User is unable to redirect to Video creation screen, when tapped Mobile'back' on effect screen");
	    	extent.extentLoggerFail("Video creation screen", "User is unable to redirect to Video creation screen, when tapped Mobile'back' on effect screen"); 
		}
		navigateToHomePage();
	}
}
public void verifyTrendingsInEffectScreen_T717(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check layout of effects screen");
		System.out.println("T717");
		extent.extentLogger("Creator", "T717");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effects Button");
		if(verifyElementDisplayed(HipiCreateVideoPage.objEffectsScreenTrendingButton))
		{
			logger.info("User is able to see trending effects below the screen");
	    	extent.extentLoggerPass("Video creation screen", "User is able to see trending effects below the screen");
	    }else {
	    	logger.info("User is unable to see trending effects below the screen");
	    	extent.extentLoggerFail("Video creation screen", "User is unable to see trending effects below the screen"); 
		}
		navigateToHomePage();
	}
}

public void verifyUserAbleToSeeRailsBelowSearchBar_T598(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user - Check for searched record, user is able to see rails just below the search bar");
		System.out.println("T598");
		extent.extentLogger("Creator", "T598");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
		if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField,"Sound Screen")) {
			logger.info("User is able to navigate to the Sound screen");
	    	extent.extentLoggerPass("Sound Screen", "User is able to navigate to the Sound screen");
	    }else {
	    	logger.info("User is not able to navigate to the Sound screen");
	    	extent.extentLoggerFail("Sound Screen", "User is not able to navigate to the Sound screen"); 
		}
		Swipe("DOWN",1);
		if(verifyElementPresent(HipiCreateVideoPage.objSoundsScreenSecondRail,"Rail"))
		{
			logger.info("User is able to see rails just below the search bar");
	    	extent.extentLoggerPass("Sound Screen", "User is able to see rails just below the search bar");
	    }else {
	    	logger.info("User is unable to see rails just below the search bar");
	    	extent.extentLoggerFail("Sound Screen", "User is unable to see rails just below the search bar");
		}
		navigateToHomePage();
	}
}
public void verifyUserCanReplaceSoundBeforeRecording_T601(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user- Check if user selected sound can be remove till the time he has not recorded anything");
		System.out.println("T601");
		extent.extentLogger("Creator", "T601");	
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
		waitTime(3000);
		String actual=getText(HipiCreateVideoPage.objSoundsAnySound);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Any Music");
//		waitForElementAndClickIfPresent(HipiCreateVideoPage.objMusicScreenHeader,30, "Music Screen");
		
		verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
		waitTime(3000);
		String expected=getText(HipiCreateVideoPage.objSoundName);
		if(actual.contains(expected))
		{
			logger.info("Selected music has been added");
	    	extent.extentLoggerPass("Video Ceation Screen", "Selected music has been added");
		}else {
			logger.info("Slected music is not added");
	    	extent.extentLoggerFail("Video Ceation Screen", "Slected music is not added");
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");

		verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound2,"Any Music");
		waitTime(4000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard popUp");
		String expected2=getText(HipiCreateVideoPage.objSoundName);
		if(actual!=expected2)
		{
			logger.info("User is able to replace already added music(till video is not recorded)");
	    	extent.extentLoggerPass("Video Ceation Screen", "User is able to replace already added music(till video is not recorded)");
		}else {
			logger.info("User is unable to replace already added music(till video is not recorded)");
	    	extent.extentLoggerFail("Video Ceation Screen", "User is unable to replace already added music(till video is not recorded)");
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		boolean Crossverify=verifyElementDisplayed(HipiCreateVideoPage.objVideoeditscreenMusicRemove);
		if(Crossverify==false)
		{
			logger.info("Music remove option has not displayed while recording the video");
	    	extent.extentLoggerPass("Video Ceation Screen", "Music remove option has not displayed while recording the video");
		}
		waitTime(15000);
		String result=getText(HipiCreateVideoPage.objMusicHeader);
		if(expected2.contains(result))
		{
			logger.info("User selected sound is removed till the time user has not recorded anything.");
	    	extent.extentLoggerPass("Video Edit Screen", "User selected sound is removed till the time user has not recorded anything.");
		}else {
			logger.info("User selected sound is not removed till the time user has not recorded anything.");
	    	extent.extentLoggerFail("Video Edit Screen", "User selected sound is not removed till the time user has not recorded anything.");
		}
		discardPopup();
	}
}

public void verifyUserCanSaveDraftMultipleTimes_T720(String userType) throws Exception {
	int count=0;
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Check if user is able to set privacy setting to allow[disable] Download");
		System.out.println("T720");
		extent.extentLogger("Creator", "T720");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 20);
		if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
	    	logger.info("User is directed to Video Posting Screen");
	    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
	    }else {
	    	logger.info("User is not directed to Video Posting Screen");
	    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
		}
		waitUntilElementDisplayed(HipiCreateVideoPage.objsavedraft, 20);
		verifyElementPresentAndClick(HipiCreateVideoPage.objsavedraft,"Save As Draft");
		boolean verify=verifyElementDisplayed(HipiCreateVideoPage.objSaveasDraftPopup);
		if(verify==true)
		{
	    	logger.info("Save as Draft popup has been displayed");
	    	extent.extentLoggerPass("save as draft popup", "Save as Draft popup has been displayed");
	    }else {
	    	logger.info("Save as Draft popup has been displayed");
	    	extent.extentLoggerFail("save as draft popup", "Save as Draft popup has not displayed");
		}
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
		waitTime(2000);
		for(int i=1;i<=3;i++)
		{
		verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"First Drafted video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objsavedraft,"Save As Draft");
		count++;
		waitUntilElementDisplayed(HipiProfilePage.objDraftVideo, 20);
		}
		if(count>=3)
		{
			logger.info("User is able to save same drafted video Multiple times");
	    	extent.extentLoggerPass("Draft Screen", "User is able to save same drafted video Multiple times");
	    }else {
	    	logger.info("User is unable to save same drafted video Multiple times");
	    	extent.extentLoggerFail("Draft Screen", "User is unable to save same drafted video Multiple times");
		}
		navigateToHomePage();
}
}	

public void verifySavedAsDraftPopUp_T722(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("Logged in user- Check whether Progress loader bar on 'Post HiPi' screen by tapping draft CTA");
		System.out.println("T722");
		extent.extentLogger("Creator", "T722");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
		waitTime(3000);
		if(verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button")) {
	    	logger.info("User is directed to Video Posting Screen");
	    	extent.extentLoggerPass("video posting", "User is directed to Video Posting Screen");
	    }else {
	    	logger.info("User is not directed to Video Posting Screen");
	    	extent.extentLoggerFail("video posting", "User is not directed to Video Posting Screen");	
		}
		waitUntilElementDisplayed(HipiCreateVideoPage.objsavedraft, 20);

		verifyElementPresentAndClick(HipiCreateVideoPage.objsavedraft,"Save As Draft");
		verifyElementDisplayed(HipiCreateVideoPage.objSaveasDraftPopup);
		if(verifyElementDisplayed(HipiCreateVideoPage.objuploadInProgressPopup))
		{
	    	logger.info("User is able to get Video Progress loader when user tap on save as draft");
	    	extent.extentLoggerPass("Home screen", "User is able to get Video Progress loader when user tap on save as draft");
	    }else {
	    	logger.info("User is unable to get Video Progress loader when user tap on save as draft");
	    	extent.extentLoggerFail("Home screen", "User is unable to get Video Progress loader when user tap on save as draft");
		}
		navigateToHomePage();
	}
}

public void  verifySystempromptedWithMessageWhileReplacingMusic_T594(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Logged in user - Check if user is prompted with message when user replace already existing music");
		System.out.println("T594");
		extent.extentLogger("Creator", "T594");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
		waitTime(3000);
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn,"Sound");
		waitTime(5000);
		click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound search Text Field");
		type(HipiCreateVideoPage.objSoundScreenSearchField,"mahi", "Sound TextField");
		if(verifyElementPresent(HipiCreateVideoPage.objSoundFirstSuggestedText,"Suggestion")) {
			logger.info("suggested records has been displayed");
	    	extent.extentLoggerPass("Suggestions", "suggested records has been displayed");
	    }else {
	    	logger.info("suggested records has failed to displayed");
	    	extent.extentLoggerFail("Suggestions", "suggested records has failed to displayed"); 
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText,"Existing record");
		waitTime(3000);
		String text=getText(HipiCreateVideoPage.objSoundsExistingRecord);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
		waitTime(5000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
		waitTime(3000);
		verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
		waitTime(12000);
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 30);
		String actual=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
		if(text.contains(actual))
		{
			logger.info("Selected Music has been played While Recording");
	    	extent.extentLoggerPass("Video Edit screen", "Selected Music has been played While Recording");
	    }else {
	    	logger.info("Selected Music has not played While Recording");
	    	extent.extentLoggerFail("Video Edit screen", "Selected Music has not played While Recording"); 
		}
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound2,"Any sound");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader,30);
		verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick");
		verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
		if(verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Edits"))
		{
			logger.info("User is able to prompt with message when user wants to replace already selected music");	
			extent.extentLoggerPass("Video Edit screen", "User is able to prompt with message when user wants to replace already selected music");
		}else {
			logger.info("User is unable to prompt with message when user wants to replace already selected music");	
			extent.extentLoggerFail("Video Edit screen", "User is unable to prompt with message when user wants to replace already selected music");
		}
		discardPopup();
	 }
}
//==============================================================================================================================
	
	
	
	
	public void viewNumberOfLikes__T105(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T105 - Logged in User - Check if user is able to view number of likes on played/paused video");
			System.out.println("T105");
			extent.extentLogger("Creator", "T105");
			String likeCount = getText(HipiHomePage.objLikeCount);
			System.out.println(likeCount);
			
			
		if (verifyElementPresent(HipiHomePage.objLikeCount, "Like Count")) {
			logger.info("Like count is " + likeCount);	
			extent.extentLoggerPass("", "Like count is " + likeCount);	
		}else {
			logger.info("User is not able to see the Like Count");	
			extent.extentLoggerFail("", "User is not able to see the Like Count");
		   }
		navigateToHomePage();
		
		}
		
	} 
	
	public void  tappingOnUserName__T140(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is able to navigate to user profile page by tapping on User name in \"For You\" tab");
			System.out.println("T140");
			extent.extentLogger("Creator", "T140");
		verifyElementPresentAndClick(HipiHomePage.objUserName, "User Name");
		waitTime(3000);
		
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("Profile details screen is displayed when tapped on name of a video description");	
			extent.extentLoggerPass("", "Profile details screen is displayed when tapped on name of a video description");
		}else {
			logger.info("Profile details screen is not displayed when tapped on name of a video description");	
			extent.extentLoggerFail("", "Profile details screen is not displayed when tapped on name of a video description");	
		}
		navigateToHomePage();
		}
	}
//==================================Feed(P2)=========================================================

	public void tappingOutsSideThePopupScreenClosesThePopup__T043(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if tapping outsside the popup screen closes the popup");
			System.out.println("T043");
			extent.extentLogger("", "T043");
		Back(1);
		if (verifyElementPresent(HipiHomePage.objExit, "Exit Button")) {
			logger.info("User is able to see the Exit Title");	
			extent.extentLoggerPass("", "User is able to see the Exit Title");
		}else {
			logger.info(" User is not able to see the Exit Title ");	
			extent.extentLoggerFail("", "User is not able to see the Exit Title");	
		}
		verifyElementPresentAndClick(HipiHomePage.objTappingOutssideThePopup, "Tapping Outs side");
		if (verifyElementPresent(HipiHomePage.objExit, "Exit Button")) {
			logger.info("User is able to see the Exit Title");	
			extent.extentLoggerFail("", "User is able to see the Exit Title");
		}else {
			logger.info("User is not able to see the Exit Title ");	
			extent.extentLoggerPass("", "User is not able to see the Exit Title");	
		}
		navigateToHomePage();
		}
		
	}
	
	
	public void performAddToFavouritesActionByTapping__T115(String userType) throws Exception {
	
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is able to perform \"Add to Favourites\" action by tapping on it");
			System.out.println("T115");
			extent.extentLogger("", "T115");	
			String description = getText(HipiHomePage.objDescription);
			longPress(HipiHomePage.objPlayerScreen);
			Thread.sleep(5000);
			verifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "Add To Favourites");
			waitTime(2000);
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First video");
			waitTime(3000);
			String description1 = getText(HipiHomePage.objDescription);
			if(description1.equals(description)) {
				logger.info("User is able add video to user favourite list");	
				extent.extentLoggerPass("", "User is able add video to user favourite list");
			}else {
				logger.info("User is not able add video to user favourite list");	
				extent.extentLoggerFail("", "User is not able add video to user favourite list");	
			}
			navigateToHomePage();
		}
	}
	
	public void verifyShareScreen__T123(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User- Check if 'Share' screen is displayed when tapped on Share video [-> Icon]");
			System.out.println("T123");
			extent.extentLogger("", "T123");	
	
	verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon");
	boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
	if (isShareOption) {
		logger.info("User is navigated share options screen");
		extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
		int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
		if (shareOptions == 0) {
			extent.extentLoggerFail("Verify share options", "Share Options are not available");
			logger.info("Share Options are not available");
			} else {
			for (int i = 2; i <= shareOptions; i++) {
				String shareOptionName = getText(HipiHomePage.objShareoptions(i));
				logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
				extent.extentLoggerPass("Share Option ",
						"Share Option : \"" + shareOptionName + "\" is available to share");
			}
		}
		} else {
		logger.info("Share Options are not displayed after clicking on Share CTA");
		extent.extentLoggerFail("Share through options screen",
				"Share Options are not displayed after clicking on Share CTA");
		}
		navigateToHomePage();
		}
	}
	
	
	
	
	
	public void loginInToHiPiPopUpScreenByTappingOnUserThisSound__T099(String userType) throws Exception {
		
		
		
		if(userType.equalsIgnoreCase("Guest")){
			extent.HeaderChildNode("Guest User - Check if user is able to see the \"Login in to HiPi\" pop-up/screen by tapping on \"User this Sound\" CTA in the Sound details page");
			System.out.println("T099");
			extent.extentLogger("", "T099");	
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSoundDetailPage.objUseThisSoundBtn, "Use This sound");
			waitTime(3000);
			VerifyLoginPopUp();
		
			navigateToHomePage();
		
		}
		
	}
	public void  checkIfShareScreen__T123(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")){
			extent.HeaderChildNode("Logged in User- Check if 'Share' screen is displayed when tapped on Share video [-> Icon]");
			System.out.println("T123");
			extent.extentLogger("", "T123");	
			verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon");
			boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
			if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
			if (shareOptions == 0) {
			extent.extentLoggerFail("Verify share options", "Share Options are not available");
			logger.info("Share Options are not available");
			} else {
			for (int i = 2; i <= shareOptions; i++) {
				String shareOptionName = getText(HipiHomePage.objShareoptions(i));
				logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
				extent.extentLoggerPass("Share Option ",
						"Share Option : \"" + shareOptionName + "\" is available to share");
			}
		}
	} else {
		logger.info("Share Options are not displayed after clicking on Share CTA");
		extent.extentLoggerFail("Share through options screen",
				"Share Options are not displayed after clicking on Share CTA");
	}
	navigateToHomePage();
	
	}
	}	
	
	public void profilePictureIsDisplayedInTheComment__T154(String userType) throws InterruptedException, Exception
 	{
 		if(userType.equalsIgnoreCase("NonSubscribedUser"))
 		{
 			extent.HeaderChildNode("Logged in User - Check 'profile picture' is displayed in the comment added by logged in user");
 			System.out.println("T154");
 			extent.extentLogger("Feed-ForYou_Comment","T154");
 			//verifyElementPresent(HipiHomePage.objForYou, "For You")
 			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
 			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 			
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			waitTime(3000);
 			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
 			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 			click(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(3000);
			type(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
			hideKeyboard();
			click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			waitTime(8000);
 			if(verifyElementPresent(HipiHomePage.objOtherUserProfilePicture, "Another viewer Profile Picture")){
 				logger.info("Profile picture is displayed in front of the comment added by creator");	
 				extent.extentLoggerPass("", "Profile picture is displayed in front of the comment added by creator");
 			}else {
 				logger.info("Profile picture is not displayed in front of the comment added by creator");	
 				extent.extentLoggerFail("", "Profile picture is not displayed in front of the comment added by creator");	
 			}  
 			navigateToHomePage();
 			
 		}
 	}
	
	public void checkProfilePictureOfAnotherViewer__T155(String userType) throws InterruptedException, Exception
 	{
 		if(userType.equalsIgnoreCase("NonSubscribedUser"))
 		{
 			extent.HeaderChildNode("Logged in User - On existing comments check 'profile picture' of another viewer is displayed , who has commented on the video");
 			System.out.println("T155");
 			extent.extentLogger("Feed-ForYou_Comment","T155");
 			//verifyElementPresent(HipiHomePage.objForYou, "For You")
 			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
 			
 			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
 			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 			 verifyOtherUserComments(userType);
 			if(verifyElementPresent(HipiHomePage.objOtherUserProfilePicture, "Another viewer Profile Picture")){
 				logger.info("User is able to view profile picture of another viewer, who has commented on the video");	
 				extent.extentLoggerPass("", "User is able to view profile picture of another viewer, who has commented on the video");
 			}else {
 				logger.info("User is not able to view profile picture of another viewer, who has commented on the video");	
 				extent.extentLoggerFail("", "User is not able to view profile picture of another viewer, who has commented on the video");	
 			}  
 			navigateToHomePage();
 			
 		}
 	}
	
	public void  followTheUserByTappingPlusIcon__T113(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
 		{
 			extent.HeaderChildNode("Logged in User - Check if user is able to follow the user by tapping + icon present on right top of Profile picture");
 			System.out.println("T113");
 			extent.extentLogger("Feed-ForYou_Comment","T113");
		
 			verifyElementPresentAndClick(HipiHomePage.objPlusFollowICON, "Plus Follow Icon");
 			waitTime(3000);
 			verifyElementPresentAndClick(HipiHomePage.objProfilePicture, "Profile Picture");
 			waitTime(3000);
 			if(verifyElementPresent(HipiProfilePage.objSubFollowingButton, "Following Button")){
 				logger.info("Logged in user is able to start following the tapped user profile");	
 				extent.extentLoggerPass("", "Logged in user is able to start following the tapped user profile");
 			}else {
 				logger.info("Logged in user is not able to start following the tapped user profile");	
 				extent.extentLoggerFail("", "Logged in user is not able to start following the tapped user profile");	
 			}  
 			navigateToHomePage();
 		}
	}
	
	
public void  followedThenFollowIcon__T114(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
 		{
 			extent.HeaderChildNode("Logged in User - Check if user is already followed then follow icon is no longer seen on \"Profile\" icon");
 			System.out.println("T114");
 			extent.extentLogger("Feed-ForYou_Comment","T114");
	

 			verifyElementPresentAndClick(HipiHomePage.objPlusFollowICON, "Plus Follow Icon");
 			waitTime(3000);
 			verifyElementPresentAndClick(HipiHomePage.objProfilePicture, "Profile Picture");
 			waitTime(3000);
 			
 			if(verifyElementPresent(HipiProfilePage.objFollowCTAText, "Follow Button")){
 				logger.info("User is able to see follow CTA");	
 				extent.extentLoggerFail("", "User is able to see follow CTA");
 			}else {
 				logger.info("As the user is already followed - Follow icon should no longer be seen on profile icon");	
 				extent.extentLoggerPass("", "As the user is already followed - Follow icon should no longer be seen on profile icon");	
 			}  
 			navigateToHomePage();
 		}
}
	

public void   commentsIsMatchedInBothForYouCommentsScreen__T160(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if count of comments is matched in both For You & comments screen");
			System.out.println("T160");
			extent.extentLogger("Feed-ForYou_Comment","T160");
//			int Count;
//			String cout = getText(HipiHomePage.objCommentCount);
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
 			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 			verifyOtherUserComments(userType);
 					Back(1);
 					String commentCout = getText(HipiHomePage.objCommentCount);
 					verifyElementExist(HipiHomePage.objCommentICON, "Comment icon");
 					click(HipiHomePage.objCommentICON, "Comment icon");
 					waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 					
 				
			String countCoMmentScreen = getText(HipiHomePage.objCommentTitle);
		
			System.out.println(countCoMmentScreen);
			String[]  text = countCoMmentScreen.split(" Comment");
			System.out.println(text[0]);
//			int text1=Integer.parseInt(text[0]);
			
			if (commentCout.equals(text[0])) {
				logger.info("Count of comments is match in both HiPi home screen & comments screen");	
				extent.extentLoggerPass("", "Count of comments is match in both HiPi home screen & comments screen");
			}else {
				logger.info("Count of comments is not match in both HiPi home screen & comments screen");	
				extent.extentLoggerFail("", "Count of comments is not match in both HiPi home screen & comments screen");
			}
			navigateToHomePage();
		}
	}



	public void tagUserInCommentAndThenPostComment__T163(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if user is able to tag user in comment and then post comment");
			System.out.println("T163");
			extent.extentLogger("Feed-ForYou_Comment","T163");
	
		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
		click(HipiHomePage.objAddAComment, "Add A Comment");
		waitTime(3000);
		type(HipiHomePage.objAddAComment, "@Shraddhaarya ", "Add A Comment");
		hideKeyboard();
		String tagComment = getText(HipiHomePage.objAddAComment);
		
		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
		waitTime(8000);
		 String comment = getText(HipiHomePage.objFirstComment);
	 System.out.println(comment);
if (comment.contains("@Shraddhaarya  few seconds ago")) {
	logger.info("User is able to tag user in comment and then post comment");	
	extent.extentLoggerPass("", "User is able to tag user in comment and then post comment");
	}else {
	logger.info("User is not able to tag user in comment and then post comment");	
	extent.extentLoggerFail("", "User is not able to tag user in comment and then post comment");
	}
navigateToHomePage();
		}
}


	
	public void addingAHashtagAndThenPostComment__T164(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if related hashtag suggestion displayed while adding a hashtag and then post comment");
			System.out.println("T164");
			extent.extentLogger("Feed-ForYou_Comment","T164");
		
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			click(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(3000);
			type(HipiHomePage.objAddAComment, "#killermoves ", "Add A Comment");
			hideKeyboard();
			String tagComment = getText(HipiHomePage.objAddAComment);
			verifyElementPresent(HipiHomePage.objListOfHashtag, "List Of Hashtag");
			click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			waitTime(8000);
			 String comment = getText(HipiHomePage.objFirstComment);
		 System.out.println(comment);
	if (comment.contains("#killermoves  few seconds ago")) {
		logger.info("User is able to add a hashtag and post comment");	
		extent.extentLoggerPass("", "User is able to add a hashtag and post comment");
		}else {
		logger.info("User is able to add a hashtag and post comment");	
		extent.extentLoggerFail("", "User is able to add a hashtag and post comment");
		}
	navigateToHomePage();
		
		}
		
	}
	
	public void viewerCreatorDislike__T167(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if viewer/creator is able to dislike a existing/new comment by tapping like icon next to comment description");
			System.out.println("T167");
			extent.extentLogger("Feed-ForYou_Comment","T167");
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
	 		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
	 		addMultipleComments(1);
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			String likeCountCommentScreenBefore = getText(HipiHomePage.objLikeCountCommentScreen);
			click(HipiHomePage.objLikeIconCommentScreen, "Again Like Icon Comment Screen");
			String likeCountCommentScreenAfter = getText(HipiHomePage.objLikeCountCommentScreen);
//			click(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			if (!likeCountCommentScreenBefore.equals(likeCountCommentScreenAfter)) {
				logger.info("User is  able to dislike comment by tapping like Icon next to comment description");	
				extent.extentLoggerPass("", "User is  able to dislike comment by tapping like Icon next to comment description");
			}else {
				logger.info("User is not able to dislike comment by tapping like Icon next to comment description");	
				extent.extentLoggerFail("", "User is not able to dislike comment by tapping like Icon next to comment description");
			}	
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("Profile details' screen is displayed when tapped on name of a video description");	
				extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
			}else {
				logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
				extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
			}
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			verifyElementPresentAndClick(HipiHomePage.objAddAComment, "Add a comment");
	 		waitTime(3000);
	 		String postDescription = "Desc"+GeneratingRandomString(7);
	 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
	 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
	 		hideKeyboard();
			
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
			String likeCountCommentScreenBefore1 = getText(HipiHomePage.objLikeCountCommentScreen);
			click(HipiHomePage.objLikeIconCommentScreen, "Again Like Icon Comment Screen");

			String likeCountCommentScreenAfter1 = getText(HipiHomePage.objLikeCountCommentScreen);
				
			if (!likeCountCommentScreenBefore1.equals(likeCountCommentScreenAfter1)) {
				logger.info("User is  able to dislike comment by tapping like Icon next to comment description");	
				extent.extentLoggerPass("", "User is  able to dislike comment by tapping like Icon next to comment description");
			}else {
				logger.info("User is not able to dislike comment by tapping like Icon next to comment description");	
				extent.extentLoggerFail("", "User is not able to dislike comment by tapping like Icon next to comment description");
			}	
	navigateToHomePage();
	}
}
	
	public void likeDislikeMutipleComments__T169(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if user is able to like/dislike mutiple comments");
			System.out.println("T169");	
			extent.extentLogger("Feed-ForYou_Comment","T169");

			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
	 		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
	 		addMultipleComments(5);
	 		String likeCountCommentScreenBefore = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(1), "First Like Icon");
	 		String likeCountCommentScreenAfter = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		if (!likeCountCommentScreenBefore.equals(likeCountCommentScreenAfter)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefore1 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(2), "First Like Icon");
	 		String likeCountCommentScreenAfter1 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		if (!likeCountCommentScreenBefore1.equals(likeCountCommentScreenAfter1)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
			
	 		String likeCountCommentScreenBefore2 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter2 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		if (!likeCountCommentScreenBefore2.equals(likeCountCommentScreenAfter2)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefore3 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter3 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		if (!likeCountCommentScreenBefore3.equals(likeCountCommentScreenAfter3)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefore4 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(5), "First Like Icon");
	 		String likeCountCommentScreenAfter4 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		if (!likeCountCommentScreenBefore4.equals(likeCountCommentScreenAfter4)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefor5 = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(1), "First Like Icon");
	 		String likeCountCommentScreenAfter5 = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		if (!likeCountCommentScreenBefor5.equals(likeCountCommentScreenAfter5)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		String likeCountCommentScreenBefore6 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(2), "First Like Icon");
	 		String likeCountCommentScreenAfter6 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		if (!likeCountCommentScreenBefore6.equals(likeCountCommentScreenAfter6)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
			
	 		String likeCountCommentScreenBefore7 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter7 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		if (!likeCountCommentScreenBefore7.equals(likeCountCommentScreenAfter7)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		String likeCountCommentScreenBefore8 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter8 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		if (!likeCountCommentScreenBefore8.equals(likeCountCommentScreenAfter8)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		String likeCountCommentScreenBefore9 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(5), "First Like Icon");
	 		String likeCountCommentScreenAfter9 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		if (!likeCountCommentScreenBefore9.equals(likeCountCommentScreenAfter9)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		navigateToHomePage();
		}
		
	}
	
	
	
	public void countOfCommentsIsMatchedInBothHiPiHomeScreenCommentsScreen__T509(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if count of comments is matched in both HiPi home screen & comments screen");
			System.out.println("T509");	
			extent.extentLogger("Feed-ForYou_Comment","T509");
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You Tab");
			followUser();
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
 			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 			verifyOtherUserComments(userType);
 					Back(1);
 					String commentCout = getText(HipiHomePage.objCommentCount);
 					verifyElementExist(HipiHomePage.objCommentICON, "Comment icon");
 					click(HipiHomePage.objCommentICON, "Comment icon");
 					waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
 					
 				
			String countCoMmentScreen = getText(HipiHomePage.objCommentTitle);
		
			System.out.println(countCoMmentScreen);
			String[]  text = countCoMmentScreen.split(" Comments");
			System.out.println(text[0]);
//			int text1=Integer.parseInt(text[0]);
			
			if (commentCout.equals(text[0])) {
				logger.info("Count of comments is match in both HiPi home screen & comments screen");	
				extent.extentLoggerPass("", "Count of comments is match in both HiPi home screen & comments screen");
			}else {
				logger.info("Count of comments is not match in both HiPi home screen & comments screen");	
				extent.extentLoggerFail("", "Count of comments is not match in both HiPi home screen & comments screen");
			}
			
			
			
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
			
		}
	}
	
public void likeDislikeMutipleComments__T518(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if user is able to like/dislike mutiple comments");
			System.out.println("T518");	
			extent.extentLogger("Feed-ForYou_Comment","T518");
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You Tab");
			followUser();
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
	 		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
	 		addMultipleComments(5);
	 		String likeCountCommentScreenBefore = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(1), "First Like Icon");
	 		String likeCountCommentScreenAfter = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		if (!likeCountCommentScreenBefore.equals(likeCountCommentScreenAfter)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefore1 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(2), "First Like Icon");
	 		String likeCountCommentScreenAfter1 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		if (!likeCountCommentScreenBefore1.equals(likeCountCommentScreenAfter1)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
			
	 		String likeCountCommentScreenBefore2 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter2 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		if (!likeCountCommentScreenBefore2.equals(likeCountCommentScreenAfter2)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefore3 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter3 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		if (!likeCountCommentScreenBefore3.equals(likeCountCommentScreenAfter3)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefore4 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(5), "First Like Icon");
	 		String likeCountCommentScreenAfter4 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		if (!likeCountCommentScreenBefore4.equals(likeCountCommentScreenAfter4)) {
				logger.info("User is able to like comment");	
				extent.extentLoggerPass("", "User is able to like comment");
			}else {
				logger.info("User is not able to like comment");	
				extent.extentLoggerFail("", "User is not able to like comment");
			}	
	 		String likeCountCommentScreenBefor5 = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(1), "First Like Icon");
	 		String likeCountCommentScreenAfter5 = getText(HipiHomePage.objLikeCountCoomentScreen(1));
	 		if (!likeCountCommentScreenBefor5.equals(likeCountCommentScreenAfter5)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		String likeCountCommentScreenBefore6 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(2), "First Like Icon");
	 		String likeCountCommentScreenAfter6 = getText(HipiHomePage.objLikeCountCoomentScreen(2));
	 		if (!likeCountCommentScreenBefore6.equals(likeCountCommentScreenAfter6)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
			
	 		String likeCountCommentScreenBefore7 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter7 = getText(HipiHomePage.objLikeCountCoomentScreen(3));
	 		if (!likeCountCommentScreenBefore7.equals(likeCountCommentScreenAfter7)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		String likeCountCommentScreenBefore8 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(3), "First Like Icon");
	 		String likeCountCommentScreenAfter8 = getText(HipiHomePage.objLikeCountCoomentScreen(4));
	 		if (!likeCountCommentScreenBefore8.equals(likeCountCommentScreenAfter8)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	
	 		String likeCountCommentScreenBefore9 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		verifyElementPresentAndClick(HipiHomePage.objLikeIconCoomentScreen(5), "First Like Icon");
	 		String likeCountCommentScreenAfter9 = getText(HipiHomePage.objLikeCountCoomentScreen(5));
	 		if (!likeCountCommentScreenBefore9.equals(likeCountCommentScreenAfter9)) {
				logger.info("User is able to dislike comment");	
				extent.extentLoggerPass("", "User is able to dislike comment");
			}else {
				logger.info("User is not able to dislike comment");	
				extent.extentLoggerFail("", "User is not able to dislike comment");
			}	

			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
		}
		
	}
	
	
	
public void viewerCreatorDislike__T516(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in User - Check if viewer/creator is able to dislike a existing/new comment by tapping like icon next to comment description");
		System.out.println("T516");
		extent.extentLogger("Feed-ForYou_Comment","T516");

		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
 		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
		addMultipleComments(1);
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
		String likeCountCommentScreenBefore = getText(HipiHomePage.objLikeCountCommentScreen);
		click(HipiHomePage.objLikeIconCommentScreen, "Again Like Icon Comment Screen");
		String likeCountCommentScreenAfter = getText(HipiHomePage.objLikeCountCommentScreen);
//		click(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
		if (!likeCountCommentScreenBefore.equals(likeCountCommentScreenAfter)) {
			logger.info("User is  able to dislike comment by tapping like Icon next to comment description");	
			extent.extentLoggerPass("", "User is  able to dislike comment by tapping like Icon next to comment description");
		}else {
			logger.info("User is not able to dislike comment by tapping like Icon next to comment description");	
			extent.extentLoggerFail("", "User is not able to dislike comment by tapping like Icon next to comment description");
		}	
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("Profile details' screen is displayed when tapped on name of a video description");	
			extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
		}else {
			logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
			extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
		}
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
		
		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
		verifyElementPresentAndClick(HipiHomePage.objAddAComment, "Add a comment");
 		waitTime(3000);
 		String postDescription = "Desc"+GeneratingRandomString(7);
 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
 		hideKeyboard();
		
		verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen, "Like Icon Comment Screen");
		String likeCountCommentScreenBefore1 = getText(HipiHomePage.objLikeCountCommentScreen);
		click(HipiHomePage.objLikeIconCommentScreen, "Again Like Icon Comment Screen");

		String likeCountCommentScreenAfter1 = getText(HipiHomePage.objLikeCountCommentScreen);
			
		if (!likeCountCommentScreenBefore1.equals(likeCountCommentScreenAfter1)) {
			logger.info("User is  able to dislike comment by tapping like Icon next to comment description");	
			extent.extentLoggerPass("", "User is  able to dislike comment by tapping like Icon next to comment description");
		}else {
			logger.info("User is not able to dislike comment by tapping like Icon next to comment description");	
			extent.extentLoggerFail("", "User is not able to dislike comment by tapping like Icon next to comment description");
		}	
		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
		navigateToHomePage();
}
}
	
public void addingAHashtagAndThenPostComment__T513(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in User - Check if related hashtag suggestion displayed while adding a hashtag and then post comment");
		System.out.println("T513");
		extent.extentLogger("Feed-ForYou_Comment","T513");
		verifyElementPresentAndClick(HipiHomePage.objForYou, "For You Tab");
		followUser();
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment ICON");
		waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
		click(HipiHomePage.objAddAComment, "Add A Comment");
		waitTime(3000);
		type(HipiHomePage.objAddAComment, "#killermoves ", "Add A Comment");
		hideKeyboard();
		String tagComment = getText(HipiHomePage.objAddAComment);
		verifyElementPresent(HipiHomePage.objListOfHashtag, "List Of Hashtag");
		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
		waitTime(8000);
		 String comment = getText(HipiHomePage.objFirstComment);
	 System.out.println(comment);
if (comment.contains("#killermoves  few seconds ago")) {
	logger.info("User is able to add a hashtag and post comment");	
	extent.extentLoggerPass("", "User is able to add a hashtag and post comment");
	}else {
	logger.info("User is able to add a hashtag and post comment");	
	extent.extentLoggerFail("", "User is able to add a hashtag and post comment");
	}
navigateToHomePage();
verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
navigateToHomePage();
	
	}
	
}
	
	
public void profilePictureIsDisplayedInTheComment__T503(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in User - Check 'profile picture' is displayed in the comment added by logged in user");
		System.out.println("T503");
		extent.extentLogger("","T503");
		verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		waitTime(3000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
		waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			click(HipiHomePage.objAddAComment, "Add A Comment");
		waitTime(3000);
		type(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
		hideKeyboard();
		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
		waitTime(8000);
			if(verifyElementPresent(HipiHomePage.objOtherUserProfilePicture, "Another viewer Profile Picture")){
				logger.info("Profile picture is displayed in front of the comment added by creator");	
				extent.extentLoggerPass("", "Profile picture is displayed in front of the comment added by creator");
			}else {
				logger.info("Profile picture is not displayed in front of the comment added by creator");	
				extent.extentLoggerFail("", "Profile picture is not displayed in front of the comment added by creator");	
			}  
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
	}
	
}


public void userAbleToAddMultipleComments__T498(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is able to add multiple comments");
			System.out.println("T498");
			extent.extentLogger("", "T498");	
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);

			addMultipleComments(8);
			logger.info("User is able to add multiple comments");	
		extent.extentLoggerPass("", "User is able to add multiple comments");
		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
		navigateToHomePage();	
		
		}
	
	
	
	
	
	
	
}


	public void  verifyPerformverticalScrollCommentScreen_T497(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is able to perform vertical scroll");
			System.out.println("T497");
			extent.extentLogger("", "T497");	
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
//			verifyOtherUserComments(userType);
			addMultipleComments(10);
			String comment = getText(HipiHomePage.objFirstComment);
			System.out.println(comment);
			PartialSwipe("UP", 5);
			String comment1 = getText(HipiHomePage.objFirstComment);
			System.out.println(comment1);
			if (!comment.equals(comment1)) {
			logger.info("User is allowed to perform vertical scroll.");	
			extent.extentLoggerPass("", "User is allowed to perform vertical scroll.");
			}else {
			logger.info("User is not allowed to perform vertical scroll.");	
			extent.extentLoggerFail("", "User is not allowed to perform vertical scroll.");
			}

			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
		}
	}
	
	
	
	public void verifySelectedSoundIsDisplayedInCreatorScreenAfterTappingOnUsethisSoundButtonInSoundDetailPage_T495(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check if the selected sound is displayed in creator screen after tapping on Use thi Sound button in Sound detail page_T1467");
		System.out.println("T495");
		extent.extentLogger("Discover_Search", "T495");
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
	    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
	    String soundName = getText(HipiDiscoverPage.objSoundTittle);
	    System.out.println(soundName);
	    verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use this sound Button");
		allowPermissions();    
		waitUntilElementDisplayed(HipiCreateVideoPage.objRecordIcon, 1000);
		verifyElementPresent(HipiCreateVideoPage.objSelectedMusic, "Music Header");
		String expectedText=getText(HipiCreateVideoPage.objSelectedMusic);
		if(expectedText.equals(soundName))
		{
			logger.info("The selected sound is displayed in creator screen after tapping on Use this Sound button in Sound detail page");
			extent.extentLoggerPass("creator screen", "The selected sound is displayed in creator screen after tapping on Use this Sound button in Sound detail page");
		}else {
			logger.info("The selected sound is not displayed in creator screen after tapping on Use this Sound button in Sound detail page");
			extent.extentLoggerFail("creator screen", "The selected sound is not displayed in creator screen after tapping on Use this Sound button in Sound detail page"); 
		}
		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
		navigateToHomePage();	
	}
		}
	
	public void viewNumberOfCommentsOnPlayedPausedVideo__T493(String userType) throws Exception {
 		
 		if(userType.equalsIgnoreCase("NonSubscribedUser")){
   			extent.HeaderChildNode("Logged in User - Check if user is able to view number of comments on played/paused video");
   			System.out.println("T493");
   			extent.extentLogger("", "T493");	
   			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
   			waitTime(3000);
   			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
   			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
   			
   			verifyOtherUserComments(userType);
   			verifyElementPresent(HipiHomePage.objLikeCountCommentScreen, "Like count");
   			String likeCount = getText(HipiHomePage.objLikeCountCommentScreen);
   			
   			System.out.println(likeCount);
   			if (verifyElementPresent(HipiHomePage.objLikeCountCommentScreen, "Like count")) {
   				logger.info("User is able to view number of comments for played video and like count is " + likeCount);	
 				extent.extentLoggerPass("", "User is able to view number of comments for played video and like count is " + likeCount);
 			}else {
 				logger.info("User is not able to view number of comments for played video");	
 				extent.extentLoggerFail("", "User is not able to view number of comments for played video");	
 			}  
   			navigateToHomePage();
   			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
   			navigateToHomePage();	
 		}
 	}
	
	
	
	public void checkIfUserIsAbleToSeeTheUserNameInForYouTab_T490(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in User - Check if user is able to see the user name in \"Following\" tab");
			System.out.println("T490");
			extent.extentLogger("Feed-ForYou_username","T490");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
   			waitTime(3000);
			if(verifyElementPresent(HipiHomePage.objDescription,"Description")) {
				logger.info("User is able to see the user name");
				extent.extentLoggerPass("Feed-ForYou_username", "User is able to see the user name");
			}else {
				logger.info("User is able to see the user name");
				extent.extentLoggerFail("Feed-ForYou_username", "User is able to see the user name");
			}		
			navigateToHomePage();
   			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
   			navigateToHomePage();	
		}
	}
public void  tappingOnUserName__T486(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if 'Profile details' screen is displayed when tapped on Profile picture of a video");
			System.out.println("T486");
			extent.extentLogger("", "T486");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
   			waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objUserName, "User Name");
		waitTime(3000);
		
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("Profile details screen is displayed when tapped on name of a video description");	
			extent.extentLoggerPass("", "Profile details screen is displayed when tapped on name of a video description");
		}else {
			logger.info("Profile details screen is not displayed when tapped on name of a video description");	
			extent.extentLoggerFail("", "Profile details screen is not displayed when tapped on name of a video description");	
		}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
		}
	}
public void  tappingOnUserName__T489(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Logged in User - Check if user is able to navigate to user profile page by tapping on User name in \"For You\" tab");
		System.out.println("T489");
		extent.extentLogger("Creator", "T489");
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
	verifyElementPresentAndClick(HipiHomePage.objUserName, "User Name");
	waitTime(3000);
	
	if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
		logger.info("Profile details screen is displayed when tapped on name of a video description");	
		extent.extentLoggerPass("", "Profile details screen is displayed when tapped on name of a video description");
	}else {
		logger.info("Profile details screen is not displayed when tapped on name of a video description");	
		extent.extentLoggerFail("", "Profile details screen is not displayed when tapped on name of a video description");	
	}
	navigateToHomePage();
	verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
	navigateToHomePage();	
	}
}


	public void ableToSeeProfilePictureOnTheVideoScreenOfFeed__T487(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to see profile picture on the video screen of feed");
			System.out.println("T487");
			extent.extentLogger("", "T487");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objUserName, "User Name");
			waitTime(3000);
			if (verifyElementPresent(HipiProfilePage.objProfilePicture, "Profile Picture")) {
				logger.info("User is able to see the profile picture on the video screen of feed");	
				extent.extentLoggerPass("", "User is able to see the profile picture on the video screen of feed");
			}else {
				logger.info("User is not able to see the profile picture on the video screen of feed");	
				extent.extentLoggerFail("", "User is not able to see the profile picture on the video screen of feed");	
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
		}
	}
	
	public void performAddToFavouritesActionByTapping__T466(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User - Check if user is able to perform \"Add to Favourites\" action by tapping on it");
			System.out.println("T466");
			extent.extentLogger("", "T466");	
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			String description = getText(HipiHomePage.objDescription);
			longPress(HipiHomePage.objPlayerScreen);
			Thread.sleep(5000);
			verifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "Add To Favourites");
			waitTime(2000);
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Favorites Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First video");
			waitTime(3000);
			String description1 = getText(HipiHomePage.objDescription);
			if(description1.equalsIgnoreCase(description)) {
				logger.info("User is able add video to user favourite list");	
				extent.extentLoggerPass("", "User is able add video to user favourite list");
			}else {
				logger.info("User is not able add video to user favourite list");	
				extent.extentLoggerFail("", "User is not able add video to user favourite list");	
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
		}
	}
public void  followedThenFollowIcon__T465(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
 		{
 			extent.HeaderChildNode("Logged in User - Check if user is already followed then follow icon is no longer seen on \"Profile\" icon");
 			System.out.println("T465");
 			extent.extentLogger("Feed-ForYou_Comment","T465");
 			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);

 			verifyElementPresentAndClick(HipiHomePage.objPlusFollowICON, "Plus Follow Icon");
 			waitTime(3000);
 			verifyElementPresentAndClick(HipiHomePage.objProfilePicture, "Profile Picture");
 			waitTime(3000);
 			
 			if(verifyElementPresent(HipiProfilePage.objFollowCTAText, "Follow Button")){
 				logger.info("User is able to see follow CTA");	
 				extent.extentLoggerFail("", "User is able to see follow CTA");
 			}else {
 				logger.info("As the user is already followed - Follow icon should no longer be seen on profile icon");	
 				extent.extentLoggerPass("", "As the user is already followed - Follow icon should no longer be seen on profile icon");	
 			}  
 			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
 		}
}
	
public void ableToLikeDislikeAMultipleVideo__T462(String userType) throws Exception {
	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to Like/Dislike a multiple video");
			System.out.println("T462");
			extent.extentLogger("Feed", "T462");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			verifyLikeIconWorkingFine();
			Swipe("UP", 1);
			verifyLikeIconWorkingFine();
			
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
	 }
}



public void userIsAbleToLikeAVideoOnPlayedPausedVideo__T460(String userType) throws Exception{
	   if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to Dislike a video on played/paused video");
			System.out.println("T460");
			extent.extentLogger("For You >> Like", "T460");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			
			verifyElementPresentAndClick(HipiHomePage.objLikeICON, "Like ICON");
			
			String afterclicklikeIcon = getText(HipiHomePage.objLikeCount);
			System.out.println(afterclicklikeIcon);
			click(HipiHomePage.objLikeICON, "Like ICON");

			String dislikeIcon  = getText(HipiHomePage.objLikeCount);
			
	        System.out.println(dislikeIcon);
			
			
			if (!afterclicklikeIcon.equals(dislikeIcon)) {
				logger.info("User is able to dislike the video");	
				extent.extentLoggerPass("", "User should able to dislike the video");
			}else {
				logger.info("User is not able to dislike the video");	
				extent.extentLoggerFail("", "User is not able to dislike the video");
			}	
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();	
   }
}

	public void followingTabInFeedScreenAndLoginPopUp__T419(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User - Check if user is able to tap on \"Following\" tab in \"Feed\" screen and login pop-up is displayed");
				System.out.println("T419");
				extent.extentLogger("", "T419");	
		
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
				waitTime(3000);
				verifyElementPresentAndClick(HipiHomePage.objFollowCTAFollowingScreen, "Follow Button");
				VerifyLoginPopUp();
				navigateToHomePage();
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
				navigateToHomePage();	
				
		 }
	}

	public void userAbleToViewFollowingScreen__T421(String userType) throws Exception {
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Logged in User - Check if user is able view \"Following\" screen");
				System.out.println("T421");
				extent.extentLogger("", "T421");	
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
		 
		if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
			logger.info("User is able to switch Following the section");	
			extent.extentLoggerPass("", "User is able to switch Following the section");
		}else {
			logger.info("User is able to switch Following section");	
			extent.extentLoggerFail("", "User is able to switch Following section");	
		}  
		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
		navigateToHomePage();
		 }
	}
	
	
	public void followingTabsAreDisplayedAtTopOfTheScreen__T422(String userType) throws Exception {
		
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Logged in User - Check if \"For You\" and \"Following\" tabs are displayed at top of the screen in \"Following\" screen");
				System.out.println("T422");
				extent.extentLogger("", "T422");	
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
				 waitTime(3000);
				if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
					logger.info("User is able to switch Following the section");	
					extent.extentLoggerPass("", "User is able to switch Following the section");
				}else {
					logger.info("User is able to switch Following section");	
					extent.extentLoggerFail("", "User is able to switch Following section");	
				}  
				verifyElementPresent(HipiHomePage.objForYou, "For You");
				navigateToHomePage();
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
				navigateToHomePage();
		 }
	}
	
	public void optionsArePresentInBottomInFollowingScreen__T423(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check the options are present in bottom in \"Following\" screen");
			System.out.println("T423");
			extent.extentLogger("", "T423");	
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);
			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
			verifyElementPresent(HipiHomePage.objDiscoverButton, "Discover Icon");
			verifyElementPresent(HipiHomePage.objVideoCreateIcon,"Create Icon");
			verifyElementPresent(AMDHomePage.objProfileIcon,"Profile Icon");
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
		}
		
	}
	
	
	public void verifyFollowingTabIsSelected__T425(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check the tabs present in Feed key section and also verify Following tab is selected when user tapping on \"Following\" tab");
			System.out.println("T425");
			extent.extentLogger("", "T425");	
		
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);
			if (verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Button Highlighted")) {
				logger.info("User is able to switch Following the section");	
				extent.extentLoggerPass("", "User is able to switch Following the section");
			}else {
				logger.info("User is able to switch Following section");	
				extent.extentLoggerFail("", "User is able to switch Following section");	
			}  
			verifyElementPresent(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();

		
		}
	}
	
	
	public void  likeAVideo__T458(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to like a video on played/paused video");
			System.out.println("T458");
			extent.extentLogger("", "T458");
			

			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);
			 verifyLikeIconWorkingFine();			 
				navigateToHomePage();
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
				navigateToHomePage();
			 
			 
			
			
			
			
			
		}
		
		
	} 
	
	
	
	
	
	public void  redirectedToFeedScreen__T455(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in user - Check if user is able is redirected to 'Feed' screen on tapping on device back button in Sound Detail Screen");
			System.out.println("T455");
			extent.extentLogger("", "T455");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);
			 SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			 verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
				
				if(verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title")){
					logger.info("User is able to navigate to Sound details page");	
					extent.extentLoggerPass("", "User is able to navigate to Sound details page");
				}else {
					logger.info("User is not able to navigate to Sound details page");	
					extent.extentLoggerFail("", "User is not able to navigate to Sound details page");	
				}
				Back(1);
				if(verifyElementPresent(HipiHomePage.objHomeIcon, "Home Page")){
					logger.info("User is navigate to HiPi home screen on tapping 'Back ' icon on device");	
					extent.extentLoggerPass("", "User is navigate to HiPi home screen on tapping 'Back ' icon on device");
				}else {
					logger.info("User is not navigate to HiPi home screen on tapping 'Back ' icon on device");	
					extent.extentLoggerFail("", "User is not navigate to HiPi home screen on tapping 'Back ' icon on device");	
				}
			
			
			
			 navigateToHomePage();
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
				navigateToHomePage();
		}		
	}
	
	public void  soundDetailPageByTappingOnMusic__T449(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to view Sound detail page by tapping on Music in the description on played/paused video");
			System.out.println("T449");
			extent.extentLogger("", "T449");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);
			 SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			 verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
				
				if(verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title")){
					logger.info("User is able to navigate to Sound details page");	
					extent.extentLoggerPass("", "User is able to navigate to Sound details page");
				}else {
					logger.info("User is not able to navigate to Sound details page");	
					extent.extentLoggerFail("", "User is not able to navigate to Sound details page");	
				}
			
				 navigateToHomePage();
					verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
					navigateToHomePage();
			
		
		}
	}
	
	
	public void  userIsAbleToViewSound__T448(String userType) throws Exception {
		

		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if user is able to view sound on played/paused video");
			System.out.println("T448");
			extent.extentLogger("", "T448");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			 if(verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name")){
					logger.info("User is able to view sound used for played video");	
					extent.extentLoggerPass("", "User is able to view sound used for played video");
				}else {
					logger.info("User is not able to view sound used for played video");	
					extent.extentLoggerFail("", "User is not able to view sound used for played video");	
				}
			 navigateToHomePage();
				verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
				navigateToHomePage();
		
			 
		
		
		}
	}
	
	
	public void profileDetailsScreen__T441(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check if 'Profile details' screen is displayed when tapped on 'name' of a video description");
			System.out.println("T441");
			extent.extentLogger("", "T441");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);
			 verifyElementPresentAndClick(HipiHomePage.objDescription, "Description");
				waitTime(3000);
				if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
					logger.info("Profile details' screen is displayed when tapped on name of a video description");	
					extent.extentLoggerPass("", "Profile details' screen is displayed when tapped on name of a video description");
				}else {
					logger.info("Profile details' screen is not displayed when tapped on name of a video description");	
					extent.extentLoggerFail("", "Profile details' screen is not displayed when tapped on name of a video description");	
				}
				 navigateToHomePage();
					verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
					navigateToHomePage();
			
		
		}
	}
	
	
	public void  UIOfTheFollowingTabInFeedScreen__T430(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Logged in User - Check the UI of the \"Following\" tab in \"Feed\" screen");
			System.out.println("T430");
			extent.extentLogger("", "T430");
			
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			 waitTime(3000);			 
			 verifyElementPresent(HipiHomePage.objForYou, "For you tab") ;
			 verifyElementPresent(HipiHomePage.objFollowingButton, "Following Button");
			 verifyElementPresent(HipiHomePage.objProfilePicture, "Profile Picture");
//			 verifyElementPresent(HipiHomePage.objPlusFollowICON, "Plus Follow Icon");
			 verifyElementPresent(HipiHomePage.objLikeICON, "Like Icon");
			 verifyElementPresent(HipiHomePage.objShareICON, "Share Icon");
			 verifyElementPresent(HipiHomePage.objCommentICON, "Comment Icon");
			 verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon");
			 verifyElementPresent(HipiHomePage.objDiscoverButton, "Discover Icon");
			 verifyElementPresent(HipiHomePage.objVideoCreateIcon, "Create Icon");
			 verifyElementPresent(AMDHomePage.objProfileIcon, "Profile Icon");
			 verifyElementPresent(HipiHomePage.objDescription, "Description");
			 SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			 verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Name");
			 
			 
		}
		
		
		
	}
	public void  Verifyifuserisabletopausetheplayedbydefaultvideobytappingonit__T433(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode(" Logged in user - Check if user is able to pause the played by default video by tapping on it _ T433");
			System.out.println("T433");
			extent.extentLogger("Feed", "T433");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			PausePlayer();
			if (verifyElementExist(HipiHomePage.objplaybutton, "Pause button")) 
			{
				logger.info("Default played video should be paused with a paused icon displayed over the video.");	
				extent.extentLoggerPass("", "Default played video should be paused with a paused icon displayed over the video.");
			}else {
				logger.info("Default played video not paused with a paused icon not displayed over the video.");	
				extent.extentLoggerFail("", "Default played video not  paused with a paused icon not displayed over the video.");	
			}
			
			navigateToHomePage();
		}
	}


	public void  VerifyifuserisabletoaddURLandURLisvisibleasplaintext__T510(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode(" Logged in user - Check if user is able to add URL and URL is visible as plain text _ T510");
			System.out.println("T510");
			extent.extentLogger("Feed", "T510");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 1000);
			click(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(3000);
			type(HipiHomePage.objAddAComment, "https://www.google.com/", "Add A Comment");
			hideKeyboard();
			click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			waitTime(8000);
			verifyElementPresentAndClick(HipiHomePage.obCommentText, "First Comment user name");
			if (verifyElementPresent(HipiHomePage.objCommentTitle, "Comment Title")){
				logger.info("User should be allowed to enter URL and it should be displayed as a plain text");	
				extent.extentLoggerPass("", "User should be allowed to enter URL and it should be displayed as a plain text");	
			}else {
				logger.info("User not allowed to enter URL and it not displayed as a plain text");	
				extent.extentLoggerFail("", "User not allowed to enter URL and it not displayed as a plain text");
			}
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objForYou, "For You");
			navigateToHomePage();
			}
		}
	
	
//=================================================Discover(P2)===========================================
	public void DiscoverSearchFiled__T1332(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify for Search field click_T1332");
			System.out.println("T1332");
			extent.extentLogger(" Discover Search Field", "T1332");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			if(verifyElementPresent(HipiDiscoverPage.objBackButtonSearchBar,"Back Button")) {
				logger.info("User is navigate to search parent page(recent Dicover page)");	
				extent.extentLoggerPass("Discover", "User is navigate to search parent page(recent Dicover page)");
			}else {
				logger.info("User is not navigate to search parent page(recent Dicover page)");	
				extent.extentLoggerFail("Discover", "User is not navigate to search parent page(recent Dicover page)");
			}
			
			navigateToHomePage();
		}
		
	}
	
	public void DiscoverOptionDesign__T1336(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User: Verify for discover option design on application T1336");
			System.out.println("T1336");
			extent.extentLogger(" Discover Search Field", "T1336");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Search Box")) {
				logger.info("User is navigate to search parent page");	
				extent.extentLoggerPass("Discover", "User is navigate to search parent page");
			}else {
				logger.info("User is not navigate to search parent page");	
				extent.extentLoggerFail("Discover", "User is not navigate to search parent page");
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void DiscoverSearchPage__T1349(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify for Search parent page (recent search page) back button and its click and navigation T1349");
			System.out.println("T1349");
			extent.extentLogger(" Discover Search Field", "T1349");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			verifyElementPresentAndClick(HipiDiscoverPage.objBackButtonSearchBar,"Back Button");
			if(verifyElementPresent(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner"))
			{
				logger.info("User is navigate to Discover Page");	
				extent.extentLoggerPass("Discover", "User is navigate to Discover Page");
			}else {
				logger.info("User is not navigate to Discover Page");	
				extent.extentLoggerFail("Discover", "User is not navigate to Discover Page");
			}
			navigateToHomePage();
		}
	}
	
	public void DiscoverOptionDesignForGuest__T1326(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for discover option design on application T1326");
			System.out.println("T1326");
			extent.extentLogger(" Discover Search Field", "T1326");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Search Box")) {
				logger.info("User is navigate to search parent page");	
				extent.extentLoggerPass("Discover", "User is navigate to search parent page");
			}else {
				logger.info("User is not navigate to search parent page");	
				extent.extentLoggerFail("Discover", "User is not navigate to search parent page");
			}
			navigateToHomePage();
		}
	}
	
	public void SearchFieldValidationAfterClickOnCancelButtonForGuest__T1351(String userType , String Title) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for Search parent page (recent search page)search field cancle button and its click T1351");
			System.out.println("T1351");
			extent.extentLogger(" Discover Search Field", "T1351");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
			
			String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			System.out.println(searchBoXText);
			 verifyElementPresentAndClick(HipiDiscoverPage.objcrossicone,"Search Inbox");
			 waitTime(3000);
			 
			 String searchBoXText1 = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			 System.out.println(searchBoXText1);
			 
			 if(searchBoXText.equals(searchBoXText1))
			 {
				 logger.info("User is not able to clear the search content after clicking cancel button");	
					extent.extentLoggerFail("Discover", "User is not able to clear the search content after clicking cancel button");
				
					}else {
						 logger.info("User is able to clear the search content after clicking cancel button");	
						extent.extentLoggerPass("Discover", "User is able to clear the search content after clicking cancel button");
				
			 }
			 
			 navigateToHomePage();
		}
	}
	
	
	
	
	public void SearchFieldValidationAfterClickOnCancelButtonForLoggedInUser__T1358(String userType , String Title) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In user-Verify for Search parent page (recent search page)search field cancle button and its click T1351");
			System.out.println("T1358");
			extent.extentLogger(" Discover Search Field", "T1358");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
			
			String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			System.out.println(searchBoXText);
			 verifyElementPresentAndClick(HipiDiscoverPage.objcrossicone,"Search Inbox");
			 waitTime(3000);
			 
			 String searchBoXText1 = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			 System.out.println(searchBoXText1);
			 
			 if(searchBoXText.equals(searchBoXText1))
			 {
				 logger.info("User is not able to clear the search content after clicking cancel button");	
					extent.extentLoggerFail("Discover", "User is not able to clear the search content after clicking cancel button");
				
					}else {
						 logger.info("User is able to clear the search content after clicking cancel button");	
						extent.extentLoggerPass("Discover", "User is able to clear the search content after clicking cancel button");
				
			 }
			 
			 navigateToHomePage();
		}
	}
	
	public void SearchResultScreenAfterEnteringThreeCharacter__T1359(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In user- Verify for Search parent page (recent search page)Verify if user gets the auto suggestions upon entering three characters T1359");
			System.out.println("T1359");
			extent.extentLogger(" Discover Search Field", "T1359");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, "sal", "Type value");
			String enteredValue = getAttributValue("text", HipiDiscoverPage.objDiscoverSearchInbox);
			if (enteredValue.length() >= 3) {
				if (verifyElementPresent(HipiDiscoverPage.objReleatedSearchResult, "Releated Search result screen")) {
					logger.info("Search result screen is displayed once user enters 3rd character in the search box.");
					extent.extentLogger("Search result screen",
							"Search result screen is displayed once user enters 3rd character in the search box.");
				} else {
					logger.info("Search result screen is not displayed");
					extent.extentLogger("Search result screen",
							"Search result screen is not displayed when user enters less than 3 characters in the search box.");
				}
			} else {
				logger.info(
						"Search result screen is not displayed when user enters less than 3 characters in the search box.");
			}
			 navigateToHomePage();
		}
	}
	
	public void ClickOnDifferentTabs__T1364(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify if user able to click on the other tabs from the displayed results T1364");
			System.out.println("T1364");
			extent.extentLogger(" Discover Search Field", "T1364");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			waitTime(50000);
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage. objToptabinSearchresultpage, "Top tab");
			waitTime(5000);
			if(verifyElementPresent(HipiDiscoverPage.objTopPageSelected, "Top page"))
			{
				logger.info("User is able to Tap on Top tab ");
				extent.extentLoggerPass("Top tab", "User is able to Tap on Top tab ");
			}else
			{
				logger.info("User is not able to Tap on Top tab ");
				extent.extentLoggerFail("Top tab", "User is not able to Tap on Top tab ");
			}
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "Users tab");
			waitTime(5000);
			if(verifyElementPresent(HipiDiscoverPage.objUserPageSelected, "Users tab Selected"))
			{
				logger.info("User is able to Tap on User tab ");
				extent.extentLoggerPass("USer tab", "User is able to Tap on Users tab ");
			}else
			{
				logger.info("User is not able to Tap on User tab ");
				extent.extentLoggerFail("Users tab", "User is not able to Tap on Users tab ");
			}
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objVideostabinSearchresultpage, "Videos tab");
			waitTime(5000);
			if(verifyElementPresent(HipiDiscoverPage.objVideosPageSelected, "Videos tab Selected"))
			{
				logger.info("User is able to Tap on Videos tab ");
				extent.extentLoggerPass("Videos tab", "User is able to Tap on Videos tab ");
			}else
			{
				logger.info("User is not able to Tap on Videos tab ");
				extent.extentLoggerFail("Videos tab", "User is not able to Tap on Videos tab ");
			}	
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
			waitTime(5000);
			if(verifyElementPresent(HipiDiscoverPage.objSoundsPageSelected, "Sounds tab Selected"))
			{
				logger.info("User is able to Tap on Sounds tab ");
				extent.extentLoggerPass("Sounds tab", "User is able to Tap on Sounds tab ");
			}else
			{
				logger.info("User is not able to Tap on Sounds tab ");
				extent.extentLoggerFail("Sounds tab", "User is not able to Tap on Sounds tab ");
			}
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtags tab");
			waitTime(5000);
			if(verifyElementPresent(HipiDiscoverPage.objHashtagsPageSelected, "Hashtags tab Selected"))
			{
				logger.info("User is able to Tap on Hashtags tab ");
				extent.extentLoggerPass("Hashtags tab", "User is able to Tap on Hashtags tab ");
			}else
			{
				logger.info("User is not able to Tap on Hashtags tab ");
				extent.extentLoggerFail("Hashtags tab", "User is not able to Tap on Hashtags tab ");
			}
		  
			navigateToHomePage();
			}
		}
	
	public void   verifyForUserShouldBeAbleToSeeAllCategoriesResultsInTheTopTab_T1366(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode(" verify For User Should Be Able To See All Categories Results In The Top Tab_ T1366");
		System.out.println("T1366");
		extent.extentLogger("Discover_Search", "T1366");
	
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/imageView']"));
	    int size = count.size();
		System.out.println(size);
      
        	  logger.info("User is able to see all the other user profiles respective to the searched keyword under the User tab"+size);
  			extent.extentLoggerPass("User Tab", "User is able to see all the other user profiles respective to the searched keyword under the User tab "+" "+size);
         
        navigateToHomePage();
}
}
	
	public void   verifyUsersTabOnTheSearchResultPage_T1367(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode(" Verify Users Tab on the search result page_T1367");
		System.out.println("T1367");
		extent.extentLogger("Discover_Search", "T1367");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
	    int size = count.size();
		System.out.println(size);
        	  logger.info("User is able to see list of user"+size);
  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
  			verifyElementPresent(HipiDiscoverPage.objFirstuserProfile, "First Profile");
  			String ProfileNameText = getText(HipiDiscoverPage.objFirstuserProfile);
  			System.out.println(ProfileNameText);
  			verifyElementPresent(HipiDiscoverPage.objSeconduserProfile, "Second Profile");
  			String ProfileNameText1 = getText(HipiDiscoverPage.objSeconduserProfile);
  			System.out.println(ProfileNameText1);
  			if(ProfileNameText.equalsIgnoreCase(ProfileNameText1))
  			{
				logger.info("User is  able to see the same user profiles");
				extent.extentLoggerFail("Hashtags tab", "User is  able to see the same user profiles");
			}else
			{
				logger.info("User is  able to see the other user profiles ");
				extent.extentLoggerPass("Hashtags tab", "User is  able to see the other user profiles ");
			}
       
	    navigateToHomePage();
	}
	}	
	
	
	public void   verifyUsersTabOnTheSearchResultPage_T1371(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
	{
		extent.HeaderChildNode(" Verify Users Tab on the search result page_T1371");
		System.out.println("T1371");
		extent.extentLogger("Discover_Search", "T1371");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
	    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
	    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
	    int size = count.size();
		System.out.println(size);
        	  logger.info("User is able to see list of user"+size);
  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
  			verifyElementPresent(HipiDiscoverPage.objFirstuserProfile, "First Profile");
  			String ProfileNameText = getText(HipiDiscoverPage.objFirstuserProfile);
  			System.out.println(ProfileNameText);
  			verifyElementPresent(HipiDiscoverPage.objSeconduserProfile, "Second Profile");
  			String ProfileNameText1 = getText(HipiDiscoverPage.objSeconduserProfile);
  			System.out.println(ProfileNameText1);
  			if(ProfileNameText.equalsIgnoreCase(ProfileNameText1))
  			{
				logger.info("User is  able to see the same user profiles");
				extent.extentLoggerFail("Hashtags tab", "User is  able to see the same user profiles");
			}else
			{
				logger.info("User is  able to see the other user profiles ");
				extent.extentLoggerPass("Hashtags tab", "User is  able to see the other user profiles ");
			}
       
	    navigateToHomePage();
	}
	}	
	
	public void VerifyNavigatedToSameUserProfile__T1373(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify click on the users name on Users Tab of the search result page and its navigation _T1373");
			System.out.println("T1373");
			extent.extentLogger("Discover_Search", "T1373");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
		    int size = count.size();
			System.out.println(size);
	        	  logger.info("User is able to see list of user"+size);
	  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
	  			String ProfileNameText = getText(HipiDiscoverPage.objProfileName);
	  			System.out.println(ProfileNameText);
	  			verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
	  			waitTime(5000);	
	  			String userName = getText(HipiProfilePage.objUserName);
				System.out.println(userName);
				if(ProfileNameText.equalsIgnoreCase(userName))
				{
					logger.info("User is navigated to same user profiles");
					extent.extentLoggerPass("Hashtags tab", "User is navigated to same user profiles");
				}else
				{
					logger.info("User is not navigated to same user profiles ");
					extent.extentLoggerFail("Hashtags tab", "User is not navigated to same user profiles");
				}
				 navigateToHomePage();
		}
	}
	
	public void VerifyLogionPopUpAfterClickingOnFollowTabGuestuser__T1378(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify Users followers list page _T1378");
			System.out.println("T1378");
			extent.extentLogger("Discover_Search", "T1378");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
		    int size = count.size();
			System.out.println(size);
	        	  logger.info("User is able to see list of user"+size);
	  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
	  			verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
	  			verifyElementPresentAndClick(HipiDiscoverPage.objfollowbutton_USertab, "Follow Tab");
	  			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
	  			{
					logger.info("On tap follow tab user can get login pop up on the screen");
					extent.extentLoggerPass("Hashtags tab", "On tap follow tab user can get login pop up on the screen");
				}else
				{
					logger.info("On tap follow tab user not getting login pop up on the screen ");
					extent.extentLoggerFail("Hashtags tab", "On tap follow tab user not getting login pop up on the screen");
				}
	  			 navigateToHomePage();
		}
	}
	
	public void VerifyLogionPopUpAfterClickingOnFollowersTabGuestuser__T1387(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify for followes tab user list _T1387");
			System.out.println("T1387");
			extent.extentLogger("Discover_Search", "T1387");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
		    int size = count.size();
			System.out.println(size);
	        	  logger.info("User is able to see list of user"+size);
	  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
	  			verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
	  			waitTime(4000);
	  			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
	  			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
	  			{
					logger.info("On tap followers tab user can get login pop up on the screen");
					extent.extentLoggerPass("Hashtags tab", "On tap followers tab user can get login pop up on the screen");
				}else
				{
					logger.info("On tap followers tab user not getting login pop up on the screen ");
					extent.extentLoggerFail("Hashtags tab", "On tap followers tab user not getting login pop up on the screen");
				}
	  			 navigateToHomePage();
		}
	}
	
	
	
	
	public void VerifyFollowingList__T1381(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify for following tab of user list page _T1381");
			System.out.println("T1381");
			extent.extentLogger("Discover_Search", "T1381");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("KundaliBhagya");
			type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			 if(verifyElementPresentAndClick(HipiDiscoverPage.objListOFFollowing, "List of Following"))
			 {
					logger.info(" user should have access to following list of respective user to see the list");
					extent.extentLoggerPass("Hashtags tab", " user should have access to following list of respective user to see the list");
				}else
				{
					logger.info(" user should have access to following list of respective user to see the list");
					extent.extentLoggerFail("Hashtags tab", " user should have access to following list of respective user to see the list");
				}
			 navigateToHomePage();
		}
	}
	
	public void VerifySEarchFieldInListOfFollowing__T1382(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify for search field on the user following tab _T1382");
			System.out.println("T1382");
			extent.extentLogger("Discover_Search", "T1382");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			String val = getParameterFromXML("KundaliBhagya");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			 if(verifyElementPresent(HipiDiscoverPage.objSearchButton, "Search button"))
			 {
					logger.info(" user will get search field on the following tab");
					extent.extentLoggerPass("Hashtags tab", " user will get search field on the following tab");
				}else
				{
					logger.info(" user will get search field on the following tab");
					extent.extentLoggerFail("Hashtags tab", " user will get search field on the following tab");
				}
			 navigateToHomePage();
		}
	}
	
	public void VerifyUserAbleToEnterDataInFollowingTab__T1383(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify for click on search field _T1383");
			System.out.println("T1383");
			extent.extentLogger("Discover_Search", "T1383");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			String val = getParameterFromXML("KundaliBhagya");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			 waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objSearchButton, "Search button");
			 waitTime(5000);	
			 String val2 = getParameterFromXML("a");
				type(HipiDiscoverPage.objDiscoverSearchInbox, val2 , "Search Inbox");
				String SearchResult=getText(HipiDiscoverPage.objDiscoverSearchInbox);
				waitTime(4000);
				System.out.println(SearchResult);
				if(SearchResult.equals(" "))
				{
					logger.info(" user not able to  type on search field under following tab");
					extent.extentLoggerFail("Hashtags tab", "user not able to  type on search field under following tab");
				}else
				{
					logger.info("user can type on search field under following tab");
					extent.extentLoggerPass("Hashtags tab", " user can type on search field under following tab");
				}
				navigateToHomePage();
		}
	}
	
	public void VerifyUserISAbleToClickOnFollowingUserProfile__T1393(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify following list user click and navigation _T1393");
			System.out.println("T1393");
			extent.extentLogger("Discover_Search", "T1393");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			String val = getParameterFromXML("SunnyLeone");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			 waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objSearchButton, "Search button");
			 waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objfirstuserfromlist_USertab, "First SearchedResult");
			 if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
					logger.info("user should navigate to user profile page");	
					extent.extentLoggerPass("", "user should navigate to user profile page");
				}else {
					logger.info("user not navigate to user profile page");	
					extent.extentLoggerFail("", "user not navigate to user profile page");	
				}
			 navigateToHomePage();
		}
	}
	
	public void VerifyLogionPopUpAfterClickingOnFollowingTabGuestuser__T1394(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify for following tab user list _T1394");
			System.out.println("T1394");
			extent.extentLogger("Discover_Search", "T1394");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			waitTime(5000);
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		    List<WebElement> count = getDriver().findElements(By.xpath("//*[@resource-id='com.zee5.hipi:id/musicName']"));
		    int size = count.size();
			System.out.println(size);
	        	  logger.info("User is able to see list of user"+size);
	  			extent.extentLoggerPass("User list", "User is able to see list of user"+" "+size);
	  			verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
	  			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
	  			
	  			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
	  			{
					logger.info("On tap followers tab user can get login pop up on the screen");
					extent.extentLoggerPass("Hashtags tab", "On tap followers tab user can get login pop up on the screen");
				}else
				{
					logger.info("On tap followers tab user not getting login pop up on the screen ");
					extent.extentLoggerFail("Hashtags tab", "On tap followers tab user not getting login pop up on the screen");
				}
	  			 navigateToHomePage();
		}
	}
	
	
	public void VerifyFieldsOnUserTab__T1400(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Verify for following tab of user list page _T1400");
			System.out.println("T1400");
			extent.extentLogger("Discover_Search", "T1400");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		    if(verifyElementPresent(HipiDiscoverPage.objListOfUsers, "List of users")&& 
		    		verifyElementPresent(HipiDiscoverPage.objProfileName, "Profile Name")&& 
		    		verifyElementPresent(HipiDiscoverPage.objFollowersCount, "Followers"))
		    {
				logger.info("user tab should contains list of users , Name , Followers count");
				extent.extentLoggerPass("Hashtags tab", "user tab should contains list of users , Name , Followers count");
			}else
			{
				logger.info("user tab not contains list of users , Name , Followers count");
				extent.extentLoggerFail("Hashtags tab", "user tab not contains list of users , Name , Followers count");
			}
		    navigateToHomePage();
		}
	}
	
	public void VerifyclickontheusersnameonUsersTabofthesearchresultpageanditsnavigation__T1401(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User-Verify click on the users name on Users Tab of the search result page and its navigation _T1401");
			System.out.println("T1401");
			extent.extentLogger("Discover_Search", "T1401");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		    verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
		    waitTime(5000);	
		    if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("user should navigate to user profile page");	
				extent.extentLoggerPass("", "user should navigate to user profile page");
			}else {
				logger.info("user not navigate to user profile page");	
				extent.extentLoggerFail("", "user not navigate to user profile page");	
			}
		    navigateToHomePage();
		}
	}
	
	public void LoggedInUserVerifyuserprofilepage__T1402(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("LoggedIn User: Verify user profile page_T1402");
			System.out.println("T1402");
			extent.extentLogger("Discover_Search", "T1402");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
		verifyElementPresent(HipiProfilePage.objFollowers, " respective profile detail page");
		
		verifyElementPresent(HipiProfilePage.objListOfFollowing, "List of Following");
		String following = getText(HipiProfilePage.objListOfFollowing);
		System.out.println(following);
		  logger.info("List Of following " + following);
			extent.extentLoggerPass("", "List Of following " + following);
		verifyElementPresent(HipiProfilePage.objListOfLikes, "List of Likes");
		String Likes = getText(HipiProfilePage.objListOfLikes);
		System.out.println(Likes);
		  logger.info("List Of likes " + Likes);
		extent.extentLoggerPass("", "List Of likes " + Likes);
		verifyElementPresent(HipiProfilePage.objListOfVideos, "List of Videos");
		int videos = getCount(HipiProfilePage.objListOfVideos);
		System.out.println(videos);
		  logger.info("List Of Videos " + videos);
			extent.extentLoggerPass("", "List Of Videos " + videos);
			navigateToHomePage();	
		
		}
			
		
		
	}
	
	public void BackButtonNavigateToPreviousPage__T1427(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify back button and its click on the user profile page _T1427");
			System.out.println("T1427");
			extent.extentLogger("Discover_Search", "T1427");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
		verifyElementPresent(HipiProfilePage.objFollowers, " respective profile detail page");
		verifyElementPresentAndClick(HipiProfilePage.objBackButton, "Back Arrow");
		waitTime(4000);
		if(verifyElementPresent(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab"))
		{
			logger.info("user Navigate to previous page");	
			extent.extentLoggerPass("", "user Navigate to previous page");
		}else {
			logger.info("user not Navigate to previous page");	
			extent.extentLoggerFail("", "user not Navigate to previous page");	
		}navigateToHomePage();	
		}
	}
	
	public void PlayOrPauseValidationOnSoundTab__T1434(String userType) throws Exception
	{
		extent.HeaderChildNode("Verify if user play and pause any sounds clicking upon poster from the respective tab and validate the sound on device _T1434");
		System.out.println("T1434");
		extent.extentLogger("Discover_Search", "T1434");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objPlayButton, "Play and pause button");
		if(verifyElementPresent(HipiDiscoverPage.objPlayButton, "Play and pause button"))
		{
			logger.info("user able to play and pause the song ");	
			extent.extentLoggerPass("", "user able to play and pause the song ");
		}else {
			logger.info("user not able to play and pause the song ");	
			extent.extentLoggerFail("", "user not able to play and pause the song ");	
		}
		navigateToHomePage();	
	}
	
	public void VerifyTheDurationListOfSondsDetailsLine__T1435(String userType) throws Exception
	{
		extent.HeaderChildNode("Verify Sound Tab on the search result page  _T1435");
		System.out.println("T1435");
		extent.extentLogger("Discover_Search", "T1435");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
		verifyElementPresent(HipiDiscoverPage.objPlayButton, "Play and pause button");
		verifyElementPresent(HipiDiscoverPage.objDuration, "Song duration");
		verifyElementPresent(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "Three Lines details");
		navigateToHomePage();
	}
	
	public void VerifySongDetailsPage__T1436(String userType) throws Exception
	{
		extent.HeaderChildNode("Verify tap on sound poster image and details icon and its navigation _T1436");
		System.out.println("T1436");
		extent.extentLogger("Discover_Search", "T1436");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
		if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
		  navigateToHomePage();
	  }
	
	public void VerifySoundRailInTopTab__T1437(String userType) throws Exception
	{
		extent.HeaderChildNode("Verify tap on sound poster image and details icon and its navigation _T1437");
		System.out.println("T1437");
		extent.extentLogger("Discover_Search", "T1437");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		if(verifyElementPresent(HipiDiscoverPage.objSoundesTapPage, "Sound rail"))
		{
		  	  logger.info("Sounds rail should be displayed under \"Top\" tab in search result page");
				extent.extentLoggerPass("Play Sound", "Sounds rail should be displayed under \"Top\" tab in search result page");
		    }else
		    {
		  	  logger.info("Sounds rail is not displayed under \"Top\" tab in search result page");
				extent.extentLoggerFail("Play sound", "Sounds rail is not displayed under \"Top\" tab in search result page");
		    }
		 navigateToHomePage();
	}
	
	public void VerifySoundCollectionPageAfterTappingSeeMore__T1438(String userType) throws Exception
	{
		extent.HeaderChildNode("Check if user navigate to \"Sound\" tab by tapping on \"See more\" CTA which is present beside of Sounds rail under \"Top\" tab in search result page _T1438");
		System.out.println("T1438");
		extent.extentLogger("Discover_Search", "T1438");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundSeeMore, "Sound See more tab");
		if(verifyElementPresent(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
		  navigateToHomePage();
	  
	}
	
	
	public void VerifyScrollDownInSoundTab__T1439(String userType) throws Exception
	{
		extent.HeaderChildNode("Check if user is able to scroll down the screen in \"Sound\" tab _T1439");
		System.out.println("T1439");
		extent.extentLogger("Discover_Search", "T1439");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");

		 productDetails = getText(HipiDiscoverPage.objFirstSearchedResultSoundTab);
		 Swipe("UP", 3);
		 productDetails1 = getText(HipiDiscoverPage.objFirstSearchedResultSoundTab);

		  if (!productDetails.equals(productDetails1)) {
				logger.info("User is able to scroll the page Down side");	
				extent.extentLoggerPass("", "User is able to scroll the page Down side");
			}else {
				logger.info("User is not able to scroll the page Down side");	
				extent.extentLoggerFail("", "User is not able to scroll the page Down side");
			}
		  navigateToHomePage();
	}
	
	public void VerifyScrollUpInSoundTab__T1440(String userType) throws Exception
	{
		extent.HeaderChildNode("Check if user is able to scroll up the screen in \"Sound\" tab _T1440");
		System.out.println("T1440");
		extent.extentLogger("Discover_Search", "T1440");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");


		 productDetails = getText(HipiDiscoverPage.objFirstSearchedResultSoundTab);
		 Swipe("UP", 3);
		 productDetails1 = getText(HipiDiscoverPage.objFirstSearchedResultSoundTab);


		  if (!productDetails.equals(productDetails1)) {
				logger.info("User is able to scroll the page up side");	
				extent.extentLoggerPass("Shop >In app Browser", "User is able to scroll the page up side");
			}else {
				logger.info("User is not able to scroll the page up side");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not able to scroll the page up side");
			} navigateToHomePage();
	}
	
	public void VerifyTheShowDetailsPage__T1441(String userType) throws Exception
	{
	
		extent.HeaderChildNode("Verify sound details page _T1441");
		System.out.println("T1441");
		extent.extentLogger("Discover_Search", "T1441");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "User in Sound Title");
		waitTime(4000);
		if( verifyElementPresent(HipiDiscoverPage.objaddtofavouritesbutton_Soundtab, "Add to Favourites")
				&& verifyElementPresent(HipiDiscoverPage.objShareButtonInUserProfile, "Share Button")
		&& verifyElementPresent(HipiProfilePage.objBackButton, "Back Button")
		&&verifyElementPresent(HipiDiscoverPage.objMusicPaster, "Music Poster")
		&& verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
//		&&verifyElementPresent(HipiProfilePage.objListOfVideos, "List of Videos"))
		{
			for(int i=2;i<10;i++) {
				if(verifyElementDisplayed(HipiSoundDetailPage.objListOfVideos))
				{
			  	  logger.info("Sound details page contains poster Add to favorite button share button back button song name and description use this sound button List of videos created");
					extent.extentLoggerPass("Play Sound", "Sound details page contains poster Add to favorite button share button back button song name and description use this sound button List of videos created");
				break;
				} else {
				Back(1);
				click(HipiDiscoverPage.objsoundspageasSearchresultpageIterating(i), "User in Sound Title");
				}
		    }
		 navigateToHomePage();
	}
	}
	
	public void VerifySongDetailsPageForLoggedinUser__T1444(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
		extent.HeaderChildNode("Logged in User - Check if user tapping on 'sound title' in the sound tab user is directed to 'sound detail screen' and verify 'sound title' is displayed _T1444");
		System.out.println("T1444");
		extent.extentLogger("Discover_Search", "T1444");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
		if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
		  navigateToHomePage();
	  }
		
	}
	public void VerifySTappingOnThreeLinesDotedInSoundTab__T1445(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
		extent.HeaderChildNode("Logged in User - Check if user is navigate to sound detil page by tapping on three lines which is present at right side of the screen in Sound tab _T1445");
		System.out.println("T1445");
		extent.extentLogger("Discover_Search", "T1445");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Himanshi");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		hideKeyboard();
		waitTime(5000);	
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
		if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
	    {
		  	  logger.info("User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
				extent.extentLoggerPass("Play Sound", "User is able to tap on any sounds from the list and on tap it is redirect to sound deails page");
		    }else
		    {
		  	  logger.info("User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
				extent.extentLoggerFail("Play sound", "User is not able to tap on any sounds from the list and on tap it is not redirect to sound deails page");
		    }
		  navigateToHomePage();
		}
	  }
	
	public void VerifyContentAddedToFavourite__T1447(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged in User - Check the sound is added to profile favourites _T1447");
			System.out.println("T1447");
			extent.extentLogger("Discover_Search", "T1447");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			     String userName = getText(HipiSoundDetailPage.objUserNameSoundPage);   
			verifyElementPresentAndClick(HipiDiscoverPage.objaddtofavouritesbutton_Soundtab, "Add to Favourites");
			waitTime(5000);	
			 navigateToHomePage();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(5000);	
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Save Video");
			verifyElementPresentAndClick(HipiProfilePage.objSoundsTab, "Sounds Tab");
			String soundText = getText(HipiProfilePage.objSoundsList);
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
		     String userName1 = getText(HipiSoundDetailPage.objUserNameSoundPage);   
			System.out.println(soundText);

			if (userName.equals(userName1)) {
				 logger.info("User is able to add a newly 'original sound' to favourite");
					extent.extentLoggerPass("Favourites Sound", "User is able to add a newly 'original sound' to favourite");
			    }else
			    {
			  	  logger.info("User is not able to add a newly 'original sound' to favourite");
					extent.extentLoggerFail("Favourites Sound", "User is not able to add a newly 'original sound' to favourite");
			    }
			verifyElementPresentAndClick(HipiDiscoverPage.objaddtofavouritesbutton_Soundtab, "Add to Favourites");
				  navigateToHomePage();
			
			
		}
	}
	
	
	public void VerifyUserISableToViewVideoInSoundDetailsPage__T1462(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged in User - Check if user is able to view any video in the \"Sound\" details page _T1462");
			System.out.println("T1462");
			extent.extentLogger("Discover_Search", "T1462");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			for(int i=2;i<10;i++) {
				if(verifyElementDisplayed(HipiProfilePage.objListOfVideos))
				{
					click(HipiProfilePage.objListOfVideos,"list of videos");
			  	  logger.info("List of videos is displayed");
					extent.extentLoggerPass("Play Sound", "List of videos is displayed");
				break;
				} else {
				Back(1);
				click(HipiDiscoverPage.objThreeLinesDetailsInSoundTabIterator(i), "ThreeLinesDetailsInSoundTab");
				}
			}
//			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			if(verifyElementPresent(HipiDiscoverPage.objShareButtonInUserProfile, "Share Icon"))
			{
			  	  logger.info("User should able to view any video in the Sound details page");
					extent.extentLoggerPass("Play Sound", "User should able to view any video in the Sound details page");
			    }else
			    {
			  	  logger.info("User not able to view any video in the Sound details page");
					extent.extentLoggerFail("Play sound", "User not able to view any video in the Sound details page");
			    }
			  navigateToHomePage();
		}
	}
	
	
	public void VerifyCreatorPageOnTappingUseThisSound__T1466(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged in user - Check if user is able to navigate to creator screen by tapping on \"Use this Sound\" CTA _T1466");
			System.out.println("T1466");
			extent.extentLogger("Discover_Search", "T1466");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Button");
			allowPermissions();
			waitTime(2000);
			if(verifyElementPresent(HipiCreateVideoPage.objuploadvideo,"Upload"))
			{
			  	  logger.info("User should be able to navigate to creator screen");
					extent.extentLoggerPass("Play Sound", "User should be able to navigate to creator screen");
			    }else
			    {
			  	  logger.info("User not be able to navigate to creator screen");
					extent.extentLoggerFail("Play sound", "User not be able to navigate to creator screen");
			    }
			navigateToHomePage();
		}
	}
	
	public void VerifyUserNavigatedToSoundDetailsPageTappingBackButton__T1468(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged in User - Check user is able to navigate to Sound detail page by tapping back button from video _T1468");
			System.out.println("T1468");
			extent.extentLogger("Discover_Search", "T1468");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			for(int i=2;i<10;i++) {
				if(verifyElementDisplayed(HipiProfilePage.objListOfVideos))
				{					
					click(HipiProfilePage.objListOfVideos,"list of videos");
			  	    logger.info("List of videos is displayed");
					extent.extentLoggerPass("Play Sound", "List of videos is displayed");
				break;
				} else {
				Back(1);
				click(HipiDiscoverPage.objThreeLinesDetailsInSoundTabIterator(i), "ThreeLinesDetailsInSoundTab");
				}
			}
//			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping back button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping back button from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping back button from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping back button from video");
			    }
			  navigateToHomePage();
			
		}
	}
	
	public void VerifyUserNavigatedToSoundDetailsPageTappingonDeviceBackButton__T1469(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged in User - Check user is able to navigate to Sound detail page by tapping device back button from video _T1469");
			System.out.println("T1469");
			extent.extentLogger("Discover_Search", "T1469");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			Back(1);
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping device back button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping device back button from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping device back button from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping device back button from video");
			    }
			  navigateToHomePage();
			
		}
	}
	
	public void VerifyLoginPopUPAfterTappingAddToWatchlist__T1470(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest Userr: Verify Add to favorite button on song details page _T1470");
			System.out.println("T1470");
			extent.extentLogger("Discover_Search", "T1470");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiDiscoverPage.objaddtofavouritesbutton_Soundtab, "Add to Favourites");
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Add to watchlist tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Add to watchlist tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Add to watchlist tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Add to watchlist tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
			
		}
	}
	
	public void VerifyLoginPopUPAfterTappingShare__T1471(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User: Verify share button on song details page _T1471");
			System.out.println("T1471");
			extent.extentLogger("Discover_Search", "T1471");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiProfilePage.objShareButton, "Share Button");
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Share tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Share tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Share tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Share tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
			
		}
		
	}
	
	
	public void VerifyLoginPopUPAfterTappingUseThisSound__T1472(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User: Verify Use This Sound button on song details page _T1472");
			System.out.println("T1472");
			extent.extentLogger("Discover_Search", "T1472");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Button");
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Use This Sound  tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Use This Sound tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Use This Sound tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Use This Sound tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
			
		}
		
	}
	
	public void VerifySoundTitleInSoundDetailsPage__T1475(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User - Check if user tapping on 'sound title' in the sound tab user is directed to 'sound detail screen' and verify 'sound title' is displayed _T1475");
			System.out.println("T1475");
			extent.extentLogger("Discover_Search", "T1475");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("SunnyLeone");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			String ProfileNameText = getText(HipiDiscoverPage.objFirstSongSoundTab);
  			System.out.println(ProfileNameText);
			verifyElementPresentAndClick(HipiDiscoverPage.objFirstSongSoundTab, "First Song");
			verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Music Title");
			String MusicTitle = getText(HipiSoundDetailPage.objMusicTitle);
  			System.out.println(MusicTitle);
			if(MusicTitle.equalsIgnoreCase(ProfileNameText))
			{
				logger.info("User should directed to 'sound detail screen' and verify 'sound title' should be displayed");
				extent.extentLoggerPass("Hashtags tab", "User should directed to 'sound detail screen' and verify 'sound title' should be displayed");
			}else
			{
				logger.info("User not directed to 'sound detail screen' and verify 'sound title' should be displayed");
				extent.extentLoggerFail("Hashtags tab", "User not directed to 'sound detail screen' and verify 'sound title' should be displayed");
			}
  			 navigateToHomePage();
		}
		
	}
	
	public void VerifySoundDetailsPageOnTappingThreeDotLine__T1476(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User - Check if user is navigate to sound detail page by tapping on three lines which is present at right side of the screen in Sound tab _T1476");
			System.out.println("T1476");
			extent.extentLogger("Discover_Search", "T1476");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping ThreeLinesDetailsInSoundTab button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping ThreeLinesDetailsInSoundTab from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping ThreeLinesDetailsInSoundTab from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping ThreeLinesDetailsInSoundTab from video");
			    }
  			 navigateToHomePage();
			
			
		}
		
	}
	
	public void VerifyCountOFLikes__T1485(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1485 - Guest User - Check if user is able to view number on views on video in the \"Sound\" details page _T1485");
			System.out.println("T1485");
			extent.extentLogger("Discover_Search", "T1485");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
//			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,"atak gaya" , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "Three Lines Details In Sound Tab");
			if(verifyElementPresentAndClick(HipiSoundDetailPage.objNoOFViewCount, "View Count"))
			{
			  	  logger.info("User should able to view number of views on video in the Sound details page");
					extent.extentLoggerPass("Play Sound", "User should able to view number of views on video in the Sound details page");
			    }else
			    {
			  	  logger.info("User not able to view number of views on video in the Sound details page");
					extent.extentLoggerFail("Play sound", "User not able to view number of views on video in the Sound details page");
			    }
			 navigateToHomePage();
		}
	}
	
	public void VerifyUserNavigatedToSoundDetailsPageTappingBackButtonGuestUser__T1468(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Logged in User - Check user is able to navigate to Sound detail page by tapping back button from video _T1468");
			System.out.println("T1468");
			extent.extentLogger("Discover_Search", "T1468");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			waitTime(4000);
			verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
			waitTime(3000);
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping back button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping back button from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping back button from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping back button from video");
			    }
			  navigateToHomePage();
			
		}
	}
	
	public void VerifyUserNavigatedToSoundDetailsPageTappingonDeviceBackButtonGuestUser__T1469(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Logged in User - Check user is able to navigate to Sound detail page by tapping device back button from video _T1469");
			System.out.println("T1469");
			extent.extentLogger("Discover_Search", "T1469");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			Back(1);
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping device back button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping device back button from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping device back button from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping device back button from video");
			    }
			  navigateToHomePage();
			
		}
	}
	
	public void VerifyUserNavigatedToSoundDetailsPageTappingBackButtonGuestUser__T1486(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User - Check user is able to navigate to Sound detail page by tapping back button from video _T1486");
			System.out.println("T1486");
			extent.extentLogger("Discover_Search", "T1486");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping back button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping back button from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping back button from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping back button from video");
			    }
			  navigateToHomePage();
			
		}
	}
	
	
	
	public void VerifyUserNavigatedToSoundDetailsPageTappingonDeviceBackButtonGuestUser__T1487(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User - Check user is able to navigate to Sound detail page by tapping device back button from video _T1487");
			System.out.println("T1487");
			extent.extentLogger("Discover_Search", "T1487");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
			verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
			verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
			Back(1);
			if(verifyElementPresent(HipiDiscoverPage.objUseThisSound, "Use This Sound Button"))
		    {
			  	  logger.info("User should able to navigate to Sound detail page by tapping device back button from video");
					extent.extentLoggerPass("Play Sound", "User should able to navigate to Sound detail page by tapping device back button from video");
			    }else
			    {
			  	  logger.info("User not able to navigate to Sound detail page by tapping device back button from video");
					extent.extentLoggerFail("Play sound", "User not able to navigate to Sound detail page by tapping device back button from video");
			    }
			  navigateToHomePage();
			
		}
	}
	
	
	
	public void VerifyHashTagTab__T1492(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged in user - Check if hashtags are displaying in the hashtag tab related to the searched keyword _T1492");
			System.out.println("T1492");
			extent.extentLogger("Discover_Search", "T1492");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtag Tab");
			if(verifyElementPresent(HipiProfilePage.objHashTagDescription,"Hashtag description")) {
				logger.info("User should be able to to see all the hashtag list in the hashtag tab respective to the searched keyword");
		    	extent.extentLoggerPass("HashTag description", "User should be able to to see all the hashtag list in the hashtag tab respective to the searched keyword");
		    }else {
		    	logger.info("User not able to to see all the hashtag list in the hashtag tab respective to the searched keyword");
		    	extent.extentLoggerFail("HashTag description", "User not able to to see all the hashtag list in the hashtag tab respective to the searched keyword");   		
		    }
			 navigateToHomePage();
		}
	}
	
	
	public void VerifyViewCountInHashTagTab__T1493(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is able to see hashtag view count under hashtag tab _T1493");
			System.out.println("T1493");
			extent.extentLogger("Discover_Search", "T1493");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("SunnyLeone");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtag Tab");
			if(verifyElementPresent(HipiDiscoverPage.objViewCountsOfHashTag,"View count of hash tag")) {
				logger.info("User should see view counts of hashtag under hashtag tab");
		    	extent.extentLoggerPass("HashTag description", "User should see view counts of hashtag under hashtag tab");
		    }else {
		    	logger.info("User should see view counts of hashtag under hashtag tab");
		    	extent.extentLoggerFail("HashTag description", "User should see view counts of hashtag under hashtag tab");   		
		    }
			 navigateToHomePage();
		}
	}
	
	
	public void VerifyBannerAfterClickingBackButton__T1494(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged in user - Check user is navigated to discover by tapping back button in serach bar _T1494");
			System.out.println("T1494");
			extent.extentLogger("Discover_Search", "T1494");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objBackButton, "Back Button");
			if(verifyElementPresent(HipiDiscoverPage.objBannersBelowTheSearchField,"Banners Below The Search Field")) {
				logger.info("User should navigate to discover screen");	
				extent.extentLoggerPass("Discover", "User should navigate to discover screen");
			}else {
				logger.info("User not navigate to discover screen");	
				extent.extentLoggerFail("Discover", "User not navigate to discover screen");
			}
			 navigateToHomePage();
		}
	}
	
	
	public void navigateToBannerDetailsPage(String userType) throws Exception
	{
		for (int i = 1; i <=15; i++) {
			waitTime(5000);
			if (verifyElementExist(HipiDiscoverPage.objAddToFavorite,"Add to favourites button Sound tab"))
			{
				logger.info("User should navigate to  banner details page");	
				extent.extentLoggerPass("Discover", "User should navigate to  banner details page");
				break;
			}
			else
			{
				Back(1);
				verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
				
			}
			
		}
	}
	
	
	public void VerifyUIOFHashTagDetailsPage__T1517(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for banner details page navigation _T1517");
			System.out.println("T1517");
			extent.extentLogger("Discover_Search", "T1517");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			navigateToHomePage();
		}
	}
	
	
	
	public void VerifyBannerDetailPage__T1518(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify banner details page _T1518");
			System.out.println("T1518");
			extent.extentLogger("Discover_Search", "T1518");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			if(verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites"))
			{
//				verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites");
				verifyElementPresent(HipiDiscoverPage.objBannerImageinDetailsPage, "Banner Image");
				verifyElementPresent(HipiDiscoverPage.objShareButtonInUserProfile, "Share");
				verifyElementPresent(HipiDiscoverPage.objCreateVideoButton, "Create Video Button");
				verifyElementPresent(HipiProfilePage.objListOfVideos, "List of Videos");
				verifyElementPresent(HipiDiscoverPage.obDescriptionBannerDetailsPage, "Description");
				verifyElementPresent(HipiDiscoverPage.objBannerDetailsPageBackButton, "Back Arrow");
			}
			navigateToHomePage();
		}
	}
	
	
	public void VerifyLoginPopupAfterClickingAddToWatchList__T1521(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User : Verify for Add Favorite button functionality _T1521");
			System.out.println("T1521");
			extent.extentLogger("Discover_Search", "T1521");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			if(verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites"))
			{
				click(HipiDiscoverPage.objAddToFavorite, "Add to Favourites");
				if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
	  			{
					logger.info("On tap Add to favorites   tab user can get login pop up on the screen");
					extent.extentLoggerPass("Hashtags tab", "On tap Add to favorites  tab user can get login pop up on the screen");
				}else
				{
					logger.info("On tap Add to favorites  tab user not getting login pop up on the screen ");
					extent.extentLoggerFail("Hashtags tab", "On tap Add to favorites  tab user not getting login pop up on the screen");
				}
	  			 navigateToHomePage();
			}
	
	
		}
	}
	
	public void VerifyLoginPopupAfterClickingShare__T1524(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User : verify for sharing banner on multiple medium _T1523 , T1524");
			System.out.println("T1523 , T1524");
			extent.extentLogger("Discover_Search", "T1523 , T1524");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			if(verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites"))
			{
				verifyElementPresentAndClick(HipiDiscoverPage.objShareButtonInUserProfile, "Share");
				if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
	  			{
					logger.info("On tap Add to favorites   tab user can get login pop up on the screen");
					extent.extentLoggerPass("Hashtags tab", "On tap Add to favorites  tab user can get login pop up on the screen");
				}else
				{
					logger.info("On tap Add to favorites  tab user not getting login pop up on the screen ");
					extent.extentLoggerFail("Hashtags tab", "On tap Add to favorites  tab user not getting login pop up on the screen");
				}
	  			 navigateToHomePage();
			}
	
	
		}
	}
	public void VerifyBannerDetailsPage__T1529(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Nonsubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User -Verify for banner details page navigation _T1529");
			System.out.println("T1529");
			extent.extentLogger("Discover_Search", "T1529");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			navigateToHomePage();
		}
	}
	
	public void VerifyBannerDetailPageForLoggedInUser__T1530(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Nonsubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify banner details page _T1530");
			System.out.println("T1530");
			extent.extentLogger("Discover_Search", "T1530");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
				waitTime(5000);
			if(verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites"))
			{
				verifyElementPresent(HipiDiscoverPage.objBannerImageinDetailsPage, "Banner Image");
				verifyElementPresent(HipiDiscoverPage.objShareButtonInUserProfile, "Share");
				verifyElementPresent(HipiDiscoverPage.objCreateVideoButton, "Create Video Button");
				verifyElementPresent(HipiProfilePage.objListOfVideos, "List of Videos");
				verifyElementPresent(HipiDiscoverPage.obDescriptionBannerDetailsPage, "Description");
				verifyElementPresent(HipiDiscoverPage.objbackbutton_USertab, "Back Arrow");
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void VerifyPreviousPageFromBannerDetailsPage__T1532(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Nonsubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User - Verify for back button on the banner details page and click _T1532");
			System.out.println("T1532");
			extent.extentLogger("Discover_Search", "T1532");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			
			if(verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites"))
			{
				Back(1);
				if(verifyElementPresent(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner"))
				{
					logger.info("user should able to tap on back button available on banner details page and on tap it should navigate to previous page");
					extent.extentLoggerPass("Banner", "user should able to tap on back button available on banner details page and on tap it should navigate to previous page");
				}else
				{
					logger.info("user not navigated to previous page ");
					extent.extentLoggerFail("Banner", "user not navigated to previous page");
				}
				navigateToHomePage();
			}
		}
	}
	
	
	public void verifyForAddFavoriteButtonFunctionality__T1534(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode(" Logged In User : Verify for Add to Favorite button click_T1534");
			System.out.println("T1534");
			extent.extentLogger("Discover_Search", "T1534");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			  navigateToBannerDetailsPage(userType);
			
			if(verifyElementPresent(HipiDiscoverPage.objAddToFavorite, "Add to Favourites"))
			{
			
			
		    addFavouritesConverting();
		    waitTime(5000);
		    verifyElementPresentAndClick(HipiDiscoverPage.objAddToFavorite, "Add to Favourites");
		    verifyElementPresent(HipiDiscoverPage.objBannerHeader, "Banner Header");
		    String text = getText(HipiDiscoverPage.objBannerHeader);
		    System.out.println(text);
		    navigateToHomePage();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Saved button");	
			verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtag Tab");	
			 verifyElementPresent(HipiDiscoverPage.objfavoriteshashtags, "Banners Rail");
		String text1 = getText(HipiDiscoverPage.objfavoriteshashtags);
		System.out.println(text1);
	if(text.equals(text1))
	 {
	  	  logger.info("User is able to tap on Add to favorites button and on tap and this favorited hashtag is get saved on the favorite page of user profile under hashtag tab");
			extent.extentLoggerPass("favorites Hashtag", "User is able to tap on Add to favorites button and on tap and this favorited hashtag is get saved on the favorite page of user profile under hashtag tab");
	    }else
	    {
	  	  logger.info("User is not able to tap on Add to favorites button and on tap and this favorited hashtag is not get saved on the favorite page of user profile under hashtag tab");
			extent.extentLoggerFail("favorites Hashtag", "User is not able to tap on Add to favorites button and on tap and this favorited hashtag is not get saved on the favorite page of user profile under hashtag tab");
	    }
		  navigateToHomePage();
	        }
			}	
	
	}
	public void verifyUIRailOfContent__T1539(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User -Verify for UI of rail contents_T1539");
			System.out.println("T1539");
			extent.extentLogger("Discover_Search", "T1539");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			verifyElementPresent(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			 navigateToHomePage();
		}
		
	}
	
	public void verifyUserAbleToTabOnProfileIconInBollywoodRail__T1542(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode(" Guest User- Verify for Profile Click on rail _T1542");
			System.out.println("T1542");
			extent.extentLogger("Discover_Search", "T1542");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			click(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Bollywood Zone profile name"))
			{
				logger.info("User should able to tap on any profile from rail");
				extent.extentLoggerPass("Hashtags tab", "User should able to tap on any profile from rail");
			}else
			{
				logger.info("User not able to tap on any profile from rail ");
				extent.extentLoggerFail("Hashtags tab", "User not able to tap on any profile from rail");
			}
			 navigateToHomePage();
		}
	}
	

	public void verifyUserNavigatedSameProfile__T1543(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify for Profile click navigation _T1543");
			System.out.println("T1543");
			extent.extentLogger("Discover_Search", "T1543");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			String ProfileName = getText(HipiDiscoverPage.objBollywoodProfileName);
			System.out.println(ProfileName);
			click(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			verifyElementPresent(HipiProfilePage.objUserName, "User name");
			String ProfileName1 = getText(HipiProfilePage.objUserName);
			System.out.println(ProfileName1);
			if(ProfileName.equalsIgnoreCase(ProfileName1))
			{
				logger.info("On tap profile from the rail user should navigate to respective profile details page");
				extent.extentLoggerPass("Hashtags tab", "On tap profile from the rail user should navigate to respective profile details page");
			}else
			{
				logger.info("On tap profile from the rail user not navigate to respective profile details page");
				extent.extentLoggerFail("Hashtags tab", "On tap profile from the rail user not navigate to respective profile details page");
			}
			 navigateToHomePage();
		}
	}
	
	
	public void verifyUserNavigatedProfileScreenAfterTappingArrowIcon__T1545(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify for user profile list Page _T1545");
			System.out.println("T1545");
			extent.extentLogger("Discover_Search", "T1545");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
//			Swipe("Up",1);
			SwipeUntilFindElement(HipiDiscoverPage.objBollywoodZone, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodZone, "Bollywood Zone");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			verifyElementPresent(HipiDiscoverPage.objNameUserDetails, "Bollywood Zone profile name");
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodProfileUserList, "Bollywood Zone profile userlist"))
			{
				logger.info("On tap arrow mark it should navigate to user profile list page");
				extent.extentLoggerPass("Hashtags tab", "On tap arrow mark it should navigate to user profile list page");
			}else
			{
				logger.info("On tap arrow mark it not navigate to user profile list page");
				extent.extentLoggerFail("Hashtags tab", "On tap arrow mark it not navigate to user profile list page");
			}
			 navigateToHomePage();
		}
	}
	
	
	public void verifyforuserprofilelistPagecontent__T1546(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify for user profile list Page content _T1546");
			System.out.println("T1546");
			extent.extentLogger("Discover_Search", "T1546");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			SwipeUntilFindElement(HipiDiscoverPage.objBollywoodZone, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodZone, "Bollywood Zone");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			verifyElementPresent(HipiDiscoverPage.objNameUserDetails, "Bollywood Zone profile name");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileUserList, "Bollywood Zone profile userlist");
			verifyElementPresent(HipiDiscoverPage.objProfileName, "Profile Name");
			verifyElementPresent(HipiDiscoverPage.objBollywoodFollowButton, "Bollywood Follow Button");
			 navigateToHomePage();
		}
	}
	
	
	public void verifyUserNavigatedPreviousScreenAfterTappingArrowIcon__T1549(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for back button on user profile list page _T1549");
			System.out.println("T1549");
			extent.extentLogger("Discover_Search", "T1549");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			SwipeUntilFindElement(HipiDiscoverPage.objBollywoodZone, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodZone, "Bollywood Zone");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			Back(1);
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone"))
			{
				logger.info("On tap back button, guest user navigate to previous page");
				extent.extentLoggerPass("Hashtags tab", "On tap back button, guest user navigate to previous page");
			}else
			{
				logger.info("On tap back button, guest user not navigate to previous page");
				extent.extentLoggerFail("Hashtags tab", "On tap back button, guest user not navigate to previous page");
			}
			 navigateToHomePage();
		}
		
	}
	
	public void Verifyforprofiledetailspage__T1550(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for profile details page _ T1550");
			System.out.println("T1550");
			extent.extentLogger("Discover_Search", "T1550");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			verifyElementPresent(HipiDiscoverPage.objProfileImage, "Profile image");
			verifyElementPresent(HipiProfilePage.objVideoUnderAllTabs, "List of Videos");
			verifyElementPresent(HipiProfilePage.objFollowing, "Following");
			verifyElementPresent(HipiProfilePage.objFollowers, "Followers");
			verifyElementPresent(HipiProfilePage.objLikeSections, "Like Sections");
			verifyElementPresent(HipiProfilePage.objFollowCTA, "Follow Button");
			verifyElementPresent(HipiDiscoverPage.objShareButtonInUserProfile, "Share");
			verifyElementPresent(HipiProfilePage.objBackButton, "Back Arrow");
			 navigateToHomePage();
		}
		
	}
	
	public void Verifyforfollowbuttonclickonprofiledetailspage__T1553(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for follow button click on profile details page _ T1553");
			System.out.println("T1553");
			extent.extentLogger("Discover_Search", "T1553");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			waitTime(5000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowCTA, "Follow Button");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Follow tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Follow tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Follow tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Follow tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
		}
	}
	public void VerifyFollowingtabanditsclickontheuserprofilepage__T1554(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Guest User: Verify Following tab and its click on the user profile page _ T1554");
			System.out.println("T1554");
			extent.extentLogger("Discover_Search", "T1554");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			waitTime(3000);
			if(verifyElementPresent(HipiDiscoverPage.objSearchFollowing, "Search Following"))
			{
				logger.info("Guest User can access the following list clicking upon following tab");
				extent.extentLoggerPass("Hashtags tab", "Guest User can access the following list clicking upon following tab");
			}else
			{
				logger.info("Guest User cannot access the following list clicking upon following tab ");
				extent.extentLoggerFail("Hashtags tab", "Guest User cannot access the following list clicking upon following tab");
			}
  			 navigateToHomePage();
			
		}
	}
	
	public void Verifyforfollowersbuttonclickonprofiledetailspage__T1555(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for following button click on profile details page _ T1555");
			System.out.println("T1555");
			extent.extentLogger("Discover_Search", "T1555");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Followers tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Followers tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Followers tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Followers tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
		}
	}
	
	public void Verifyforfollowingbuttonclickonprofiledetailspage__T1556(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for following button click on profile details page _ T1556");
			System.out.println("T1556");
			extent.extentLogger("Discover_Search", "T1556");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Following tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Following tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Following tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Following tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
		}
	}
	
	
	public void VerifyforShareuttonclickonprofiledetailspage__T1576(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User: Verify for Share button click on profile details page _ T1576");
			System.out.println("T1576");
			extent.extentLogger("Discover_Search", "T1576");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			verifyElementPresentAndClick(HipiDiscoverPage.objShareButtonInUserProfile, "Share");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
  			{
				logger.info("On tap Followers tab user can get login pop up on the screen");
				extent.extentLoggerPass("Hashtags tab", "On tap Followers tab user can get login pop up on the screen");
			}else
			{
				logger.info("On tap Followers tab user not getting login pop up on the screen ");
				extent.extentLoggerFail("Hashtags tab", "On tap Followers tab user not getting login pop up on the screen");
			}
  			 navigateToHomePage();
			
		}
	}
	public void verifyUIRailOfContentLoggedInUser__T1578(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged In User -Verify for rail _ T1578");
			System.out.println("T1578");
			extent.extentLogger("Discover_Search", "T1578");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			verifyElementPresent(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone image");
			verifyElementPresent(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			 navigateToHomePage();
		}
		
	}
	
	
	
	public void SwipeRailsToLeftAndRightLoggedInUser__T1579(String userType) throws Exception{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
		extent.HeaderChildNode("Guest User -Verify swipe the rail to left and right _ T1579 ");
		System.out.println("T1579");
		extent.extentLogger("Discover_Search", "T1579");
		
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
//		scrolltomiddle(HipiDiscoverPage.objFirstRailHeader);
//		PartialSwipe("UP", 1);

		String text = getText(HipiDiscoverPage.objBollywoodProfileName);
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Left",3);
		
		String text1 = getText(HipiDiscoverPage.objFirstTextInBollywood);
		if (!text.equals(text1)) {
			  logger.info("User is able to swipe rail left");
				extent.extentLoggerPass("", "User is able to swipe rail left");
		    }else {
		  	  logger.info("User is not able to swipe rail left");
				extent.extentLoggerFail("", "User is not able to swipe rail left");
		    }
		
		swipeRail(HipiDiscoverPage.objFirstRailSwipe, "Right",3);
		String text2 = getText(HipiDiscoverPage.objFirstTextInBollywood);
		if (!text1.equals(text2)) {
			  logger.info("User is able to swipe rail Right");
				extent.extentLoggerPass("", "User is able to swipe rail Right");
		    }else {
		  	  logger.info("User is not able to swipe rail Right");
				extent.extentLoggerFail("", "User is not able to swipe rail Right");
		    }
		navigateToHomePage();
		}
	} 
	
	
	
	
	public void VerifyUserprofileonrail__T1580(String userType) throws Exception		
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode(" Logged In User- Verify User profile on rail _ T1580");
			System.out.println("T1580");
			extent.extentLogger("Discover_Search", "T1580");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name"))
			{
				logger.info("User can see Users profile on the rails");
				extent.extentLoggerPass("Hashtags tab", "User can see Users profile on the rails");
			}else
			{
				logger.info("User cannot see Users profile on the rails");
				extent.extentLoggerFail("Hashtags tab", "User cannot see Users profile on the rails");
			}
  			 navigateToHomePage();
			
		}
		
	}
	
	
	public void verifyUserNavigatedSameProfileLoggedInUser__T1582(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User -Verify for Profile click navigation T1582");
			System.out.println("T1582");
			extent.extentLogger("Discover_Search", "T1582");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			String ProfileName = getText(HipiDiscoverPage.objBollywoodProfileName);
			System.out.println(ProfileName);
			click(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			
//			verifyElementPresent(HipiDiscoverPage.objNameUserDetails, "Bollywood Zone profile name");
			String ProfileName1 = getText(HipiProfilePage.objUserName);
			System.out.println(ProfileName1);
			if(ProfileName.equalsIgnoreCase(ProfileName1))
			{
				logger.info("On tap profile from the rail user should navigate to respective profile details page");
				extent.extentLoggerPass("Hashtags tab", "On tap profile from the rail user should navigate to respective profile details page");
			}else
			{
				logger.info("On tap profile from the rail user not navigate to respective profile details page");
				extent.extentLoggerFail("Hashtags tab", "On tap profile from the rail user not navigate to respective profile details page");
			}
			 navigateToHomePage();
		}
	}
	public void verifyUserNavigatedProfileScreenAfterTappingArrowIconLoggedInUser__T1584(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User -Verify for user profile list Page _ T1584");
			System.out.println("T1584");
			extent.extentLogger("Discover_Search", "T1584");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
//			Swipe("UP",1);
//			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresentAndClick(HipiDiscoverPage.objArrowMarkFirstRailProfile, "Arrow Mark");
			verifyElementPresent(HipiDiscoverPage.objNameUserDetails, "Bollywood Zone profile name");
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodProfileUserList, "Bollywood Zone profile userlist"))
			{
				logger.info("On tap arrow mark it should navigate to user profile list page");
				extent.extentLoggerPass("Hashtags tab", "On tap arrow mark it should navigate to user profile list page");
			}else
			{
				logger.info("On tap arrow mark it not navigate to user profile list page");
				extent.extentLoggerFail("Hashtags tab", "On tap arrow mark it not navigate to user profile list page");
			}
			 navigateToHomePage();
		}
	}
	
	public void verifyforuserprofilelistPagecontentLoggedInUser__T1585(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In  User -Verify for user profile list Page content _ T1585");
			System.out.println("T1585");
			extent.extentLogger("Discover_Search", "T1585");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			waitTime(4000);
		
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			verifyElementPresent(HipiDiscoverPage.objNameUserDetails, "Bollywood Zone profile name");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileUserList, "Bollywood Zone profile userlist");
			verifyElementPresent(HipiDiscoverPage.objProfileName, "Profile Name");
			verifyElementPresent(HipiDiscoverPage.objBollywoodFollowButton, "Bollywood Follow Button");
			 navigateToHomePage();
		}
	}
	
	
	public void verifyUserNavigatedSameProfileAfterTappingProfileImage__T1587(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User: Verify for click on profile image and name from the user list page T1587");
			System.out.println("T1587");
			extent.extentLogger("Discover_Search", "T1587");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresent(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			String ProfileName = getText(HipiDiscoverPage.objBollywoodProfileName);
			System.out.println(ProfileName);
			click(HipiDiscoverPage.objBollywoodImage, "Bollywood Zone profile image");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objUserName, "Bollywood Zone profile name");
			String ProfileName1 = getText(HipiProfilePage.objUserName);
			System.out.println(ProfileName1);
			if(ProfileName.equalsIgnoreCase(ProfileName1))
			{
				logger.info("On tap profile image from the rail user should navigate to respective profile details page");
				extent.extentLoggerPass("Hashtags tab", "On tap profile image from the rail user should navigate to respective profile details page");
			}else
			{
				logger.info("On tap profile image from the rail user not navigate to respective profile details page");
				extent.extentLoggerFail("Hashtags tab", "On tap profile image from the rail user not navigate to respective profile details page");
			}
			 navigateToHomePage();
		}
	}
	
	
	public void verifyUserNavigatedPreviousScreenAfterTappingArrowIconLoggedInUser__T1588(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In  User: Verify for back button on user profile list page _T1588");
			System.out.println("T1588");
			extent.extentLogger("Discover_Search", "T1588");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
//			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
//			Swipe("UP",1);
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "Arrow Mark");
			Back(1);
			if(verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone"))
			{
				logger.info("On tap back button, guest user navigate to previous page");
				extent.extentLoggerPass("Hashtags tab", "On tap back button, guest user navigate to previous page");
			}else
			{
				logger.info("On tap back button, guest user not navigate to previous page");
				extent.extentLoggerFail("Hashtags tab", "On tap back button, guest user not navigate to previous page");
			}
			 navigateToHomePage();
		}
		
	}
	
	
	public void Verifyifuserabletosearchanythinganddisplaystheresults__T1353(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest user-Verify for Search parent page (recent search page)Verify if user able to search anything and displays the results _T1353");
			System.out.println("T1353");
			extent.extentLogger("Discover_Search", "T1353");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			if(verifyElementPresent(HipiDiscoverPage.objSearchResult, "Search Reasult"))
			{
				logger.info("Guest user should be able to search anything and app should display the result");
				extent.extentLoggerPass("Search tab", "Guest user should be able to search anything and app should display the result");
			}else
			{
				logger.info("Guest user not able to search anything and app should display the result");
				extent.extentLoggerFail("Search tab", "Guest user not able to search anything and app should display the result");
			}
			 navigateToHomePage();
		}
	}
	
	public void VerifySearchDataAppersAtTop__T1354(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest user-Verify for Search parent page (recent search page) keyboard search button click _T1354");
			System.out.println("T1354");
			extent.extentLogger("Discover_Search", "T1354");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			waitTime(3000);
			String SearchedText = getAttributValue("text", HipiDiscoverPage.objDiscoverSearchInbox);
		    System.out.println(SearchedText);
			verifyElementPresent(HipiDiscoverPage.objSearchResult, "Search Reasult");
			String SearchedResult = getAttributValue("text", HipiDiscoverPage.objSearchResult);
		    System.out.println(SearchedResult);
		    if(SearchedText.equalsIgnoreCase(SearchedResult))
		    {
				logger.info("On click search button the search result page should display and data should appaer on Top category");
				extent.extentLoggerPass("Search tab", "On click search button the search result page should display and data should appaer on Top category");
			}else
			{
				logger.info("On click search button the search result page not display and data should appaer on Top category");
				extent.extentLoggerFail("Search tab", "On click search button the search result page not display and data should appaer on Top category");
			}
			 navigateToHomePage();
		}
	}
	
	
	
	public void SearchFieldValidationAfterClickOnCancelButtonForLoggedIn__T1358(String userType , String Title) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User-Verify for Search parent page (recent search page)search field cancle button and its click T1358");
			System.out.println("T1358");
			extent.extentLogger(" Discover Search Field", "T1358");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
			
			String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			System.out.println(searchBoXText);
			 verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox,"Search Inbox");
			 waitTime(3000);
			 
			 String searchBoXText1 = getText(HipiDiscoverPage.objDiscoverSearchedInbox);
			 System.out.println(searchBoXText1);
			 
			 if(searchBoXText.equals(searchBoXText1))
			 {
				 logger.info("User is able to clear the search content after clicking cancel button");	
					extent.extentLoggerPass("Discover", "User is able to clear the search content after clicking cancel button");
				}else {
					logger.info("User is not able to clear the search content after clicking cancel button");	
					extent.extentLoggerFail("Discover", "User is not able to clear the search content after clicking cancel button");
				
			 }
			 
			 navigateToHomePage();
		}
	}
	
	
	
	public void VerifyifuserabletosearchanythinganddisplaystheresultsLoggedINUser__T1360(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged in user-Verify for Search parent page (recent search page)Verify if user able to search anything and displays the results _T1360");
			System.out.println("T1360");
			extent.extentLogger("Discover_Search", "T1360");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			if(verifyElementPresent(HipiDiscoverPage.objSearchResult, "Search Reasult"))
			{
				logger.info("user should be able to search anything and app should display the result");
				extent.extentLoggerPass("Search tab", "user should be able to search anything and app should display the result");
			}else
			{
				logger.info("user not able to search anything and app should display the result");
				extent.extentLoggerFail("Search tab", "user not able to search anything and app should display the result");
			}
			 navigateToHomePage();
		}
	}
	
	
	
	public void VerifySearchDataAppersAtTopLoggedInUser__T1361(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In user-Verify for Search parent page (recent search page) keyboard search button click _T1361");
			System.out.println("T1361");
			extent.extentLogger("Discover_Search", "T1361");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			String SearchedText = getAttributValue("text", HipiDiscoverPage.objDiscoverSearchInbox);
		    System.out.println(SearchedText);
			verifyElementPresent(HipiDiscoverPage.objSearchResult, "Search Reasult");
			String SearchedResult = getAttributValue("text", HipiDiscoverPage.objSearchResult);
		    System.out.println(SearchedResult);
		    if(SearchedText.equalsIgnoreCase(SearchedResult))
		    {
				logger.info("On click search button the search result page should display and data should appaer on Top category");
				extent.extentLoggerPass("Search tab", "On click search button the search result page should display and data should appaer on Top category");
			}else
			{
				logger.info("On click search button the search result page not display and data should appaer on Top category");
				extent.extentLoggerFail("Search tab", "On click search button the search result page not display and data should appaer on Top category");
			}
			 navigateToHomePage();
		}
	}
	
	
	public void  userAbleToClickOnTheDisplayedResultsInTheSearchPage__T1362(String userType,String userName) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Logged In user-Verify if user able to click on the displayed results in the search page T1362");
			System.out.println("T1362");
			extent.extentLogger("Discover", "T1362");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(4000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
			
			String searchBoXText = getText(HipiDiscoverPage.objDiscoverSearchInbox);
			
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
			waitTime(4000);
				
			if(verifyElementPresent(HipiDiscoverPage.objTopButton,"Top Button ")) {
				logger.info("User is able to click on the displayed results from the Dicover page and land on respective page)");	
				extent.extentLoggerPass("Discover", "User is able to click on the displayed results from the Dicover page and land on respective page)");
			}else {
				logger.info("User is not able to click on the displayed results from the Dicover page and user is not land on respective page)");	
				extent.extentLoggerFail("Discover", "User is not able to click on the displayed results from the Dicover page and user is not land on respective page)");
			}
			
			navigateToHomePage();
		}
	
	} 	
	public void VerifyFollowingListingScreen__T1405(String userType,String userName) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify Followers tab and its click on the user profile page _T1405");
			System.out.println("T1405");
			extent.extentLogger("Discover_Search", "T1405");
			click(HipiHomePage.objDiscoverButton, "Discover Button");	
			waitTime(7000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			waitTime(3000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(3000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Inbox ");//
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
				verifyElementPresent(HipiProfilePage.objFollowers, " respective profile detail page");
				verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers tap");
				if(verifyElementPresent(HipiProfilePage.objFollowersSearch,"Followers Search"))
				{
					logger.info("User is redirected to followers list screen");	
					extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
				}else {
					logger.info("User is not redirected to followers list screen");	
					extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
				} 
				navigateToHomePage();
		}
	}
	
	
	
	public void VerifyUserISAbleToClickOnFollowingUserProfileLoggedINUser__T1614(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User - Verify followers list user click and navigation _ T1614");
			System.out.println("T1614");
			extent.extentLogger("Discover_Search", "T1614");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			
			 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			 waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objSearchButton, "Search button");
			 waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objfirstuserfromlist_USertab, "First SearchedResult");
			 if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
					logger.info("user should navigate to user profile page");	
					extent.extentLoggerPass("", "user should navigate to user profile page");
				}else {
					logger.info("user not navigate to user profile page");	
					extent.extentLoggerFail("", "user not navigate to user profile page");	
				}
			 navigateToHomePage();
		}
	}
	
	public void VerifyifUIUXareasperthedesigns__T1618(String userType) throws Exception
	{
		extent.HeaderChildNode("Verify if UI/UX are as per the designs _ T1618");
		System.out.println("T1618");
		extent.extentLogger("Discover_Search", "T1618");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		waitTime(4000);
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		 verifyElementPresent(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
		 verifyElementPresent(HipiDiscoverPage.objBollywoodRailInDiscoverScreen, "Bollywood Zone");
		 verifyElementPresent(HipiProfilePage.objVerifyHastag, "Hash Tag");
		 navigateToHomePage();
	}
	
	
	public void VerifyFollowersListUserProfile__T1613(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify for followers tab user list _ T1613");
			System.out.println("T1613");
			extent.extentLogger("Discover_Search", "T1613");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			waitTime(5000);
			 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			 if(verifyElementPresent(HipiDiscoverPage.objListOFFollowing,"List of followers"))
				{
					logger.info("User is redirected to followers list screen");	
					extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
				}else {
					logger.info("User is not redirected to followers list screen");	
					extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
				}
				navigateToHomePage();

		}
	}
	
	
	public void VerifyFollowersSearchFieldUserProfile__T1612(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify for search on the user followers tab _ T1612");
			System.out.println("T1612");
			extent.extentLogger("Discover_Search", "T1612");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			waitTime(5000);
			 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			 if(verifyElementPresent(HipiProfilePage.objFollowersSearch,"Followers Search"))
				{
					logger.info("User is redirected to followers list screen");	
					extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
				}else {
					logger.info("User is not redirected to followers list screen");	
					extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
				}
				navigateToHomePage();

		}
	}
	
	
	
	public void Verifyfollowinglistuserclickandnavigation__T1610(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User - Verify following list user click and navigation _ T1610");
			System.out.println("T1610");
			extent.extentLogger("Discover_Search", "T1610");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonProfile, "More Button");
			waitTime(2000);
			
			for(int i=1;i<=12;i++)
			{
				click(HipiDiscoverPage.objUserHandles(i), "User Handle");
				String a=getText(HipiProfilePage.objListOfFollowing);
				int digit=Integer.parseInt(a);
				if(digit>0)
				{
					break;
				}
				else
				{
					Back(1);
				}
				
			}
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			waitTime(3000);
			verifyElementPresentAndClick(HipiDiscoverPage.objFollowersListProfileName, "Followers List Profile Name");
			waitTime(4000);
			 if(verifyElementPresent(HipiDiscoverPage.objBollywoodPageProfileName,"user name"))
				{
					logger.info("On tap any user from the following list it navigate to user profile page");	
					extent.extentLoggerPass("Profile_Followers", "On tap any user from the following list it navigate to user profile page");
				}else {
					logger.info("On tap any user from the following list it not navigate to user profile page");	
					extent.extentLoggerFail("Profile_Followers", "On tap any user from the following list it not navigate to user profile page.");	
				}
				navigateToHomePage();
		}
	}
	
	
	
	public void VerifyforUsercansearchanyfollowersuserfromthelist__T1608(String userType,String text) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User - Verify for User can search any followers user from the list _ T1608");
			System.out.println("T1608");
			extent.extentLogger("Discover_Search", "T1608");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			waitTime(5000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowersSearch,"Followers Search");
			waitTime(4000);
			 String val2 = getParameterFromXML("anahita");
				type(HipiDiscoverPage.objDiscoverSearchInbox, text , "Search Inbox");
				String SearchResult=getText(HipiDiscoverPage.objDiscoverSearchInbox);
				
//				verifyElementPresentAndClick(HipiDiscoverPage.objRespectedFollowingUser(SearchResult),"");
				String result = getText(HipiDiscoverPage.obSearchResultInFollowersTab);
				System.out.println(SearchResult);
				if(SearchResult.equalsIgnoreCase(result))
				{
					logger.info(" user not able to  type on search field under following tab");
					extent.extentLoggerFail("Hashtags tab", "user not able to  type on search field under following tab");
				}else
				{
					logger.info("user can type on search field under following tab");
					extent.extentLoggerPass("Hashtags tab", " user can type on search field under following tab");
				}
				navigateToHomePage();
		}
	}
	
	
	public void Verifyforclickonsearchfield__T1606(String userType,String text) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User - Verify for click on search field _ T1606");
			System.out.println("T1606");
			extent.extentLogger("Discover_Search", "T1606");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowersSearch,"Followers Search");
			waitTime(4000);
//			 String val2 = getParameterFromXML("anahita");
			
				type(HipiDiscoverPage.objDiscoverSearchInbox, text , "Search Inbox");
				String SearchResult=getText(HipiDiscoverPage.objDiscoverSearchInbox);
				System.out.println(SearchResult);
				if(SearchResult.equalsIgnoreCase(text))
				{
					logger.info(" user not able to  type on search field under followers tab");
					extent.extentLoggerFail("Hashtags tab", "user not able to  type on search field under followers tab");
				}else
				{
					logger.info("user can type on search field under followers tab");
					extent.extentLoggerPass("Hashtags tab", " user can type on search field under followers tab");
				}
				navigateToHomePage();
		}
	}
	
	
	
	public void Verifyforclickondisplayedusernamefromthesearchresultandnavigation__T1603(String userType,String text) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User -Verify for click on displayed user name from the search result and navigation _ T1603");
			System.out.println("T1603");
			extent.extentLogger("Discover_Search", "T1603");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowersSearch,"Followers Search");
			waitTime(4000);
//			 String val2 = getParameterFromXML("Anahita");
				type(HipiDiscoverPage.objDiscoverSearchInbox, text , "Search Inbox");
				waitTime(3000);
				click(HipiDiscoverPage.obSearchResultInFollowersTab, "Search result");
				waitTime(4000);
//				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResultByText("Anahita ganesan"), "Search result");
				 if(verifyElementPresent(HipiProfilePage.objUserName,"user name"))
					{
						logger.info("User can tap on searched result from the list and it should navigate to user profile page");	
						extent.extentLoggerPass("Profile_Followers", "User can tap on searched result from the list and it should navigate to user profile page");
					}else {
						logger.info("User can tap on searched result from the list and it not navigate to user profile page");	
						extent.extentLoggerFail("Profile_Followers", "User can tap on searched result from the list and it not navigate to user profile page.");	
					}
				 navigateToHomePage();
		}
	}
	
	
	
	
	//need data
	public void VerifyforUsercansearchanyfollowinguserfromthelist__T1604(String userType, String Title) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User -Verify for click on displayed user name from the search result and navigation _ T1603");
			System.out.println("T1604");
			extent.extentLogger("Discover_Search", "T1604");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(5000);
//			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
//			type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
//			waitTime(3000);
//			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
//			waitTime(3000);
//			verifyElementPresentAndClick(HipiDiscoverPage.objFirstSuggestedUser,"First user");
			verifyElementPresentAndClick(HipiDiscoverPage.objFirstRailImage,"First user");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFollowingSearch,"Following Search");
//			 String val2 = getParameterFromXML("Shraddha");
				type(HipiDiscoverPage.objDiscoverSearchInbox, Title , "Search Inbox");
			//	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResultByText("Anahita saini"), "Search result");
				 if(verifyElementPresent(HipiDiscoverPage.objFollowingListUserName,"user name"))
					{
						logger.info("User can tap on searched result from the list and it should navigate to user profile page");	
						extent.extentLoggerPass("Profile_Followers", "User can tap on searched result from the list and it should navigate to user profile page");
					}else {
						logger.info("User can tap on searched result from the list and it not navigate to user profile page");	
						extent.extentLoggerFail("Profile_Followers", "User can tap on searched result from the list and it not navigate to user profile page.");	
					}
				 navigateToHomePage();
		}
	}
	
		public void  VerifyforclickonsearchfieldFollowers__T1600(String userType,String text) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User - Verify for click on search field _ T1600");
				System.out.println("T1600");
				extent.extentLogger("Discover_Search", "T1600");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				waitTime(5000);
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
				waitTime(5000);
				verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Following");
				waitTime(5000);
				type(HipiDiscoverPage.objDiscoverSearchInbox, text , "Search Inbox");
				String SearchResult=getText(HipiDiscoverPage.objDiscoverSearchInbox);
				System.out.println(SearchResult);
				if(SearchResult.equalsIgnoreCase(text))
				{
					logger.info(" user not able to  type on search field under followers tab");
					extent.extentLoggerFail("Hashtags tab", "user not able to  type on search field under followers tab");
				}else
				{
					logger.info("user can type on search field under followers tab");
					extent.extentLoggerPass("Hashtags tab", " user can type on search field under followers tab");
				}
				navigateToHomePage();

			}
		}
	
		public void  VerifyforclickonsearchfieldFollowing__T1599(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User - Verify for click on search field _ T1599");
				System.out.println("T1599");
				extent.extentLogger("Discover_Search", "T1599");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objBollywoodProfileName, "Bollywood Zone profile name");
				verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Followers");
				if(verifyElementPresent(HipiProfilePage.objFollowingSearch,"Followers Search"))
				{
					logger.info("user can type on search field under following tab");	
					extent.extentLoggerPass("Profile_Followers", "user can type on search field under following tab");
				}else {
					logger.info("user cannot type on search field under following tab");	
					extent.extentLoggerFail("Profile_Followers", " user cannot type on search field under following tab.");	
				}
				navigateToHomePage();

			}
		}
		
		
		
		public void  VerifyUI_UXusersFollowing_FollowersPage__T1596(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User -  Verify users Following /Followers Page _ T1596");
				System.out.println("T1596");
				extent.extentLogger("Discover_Search", "T1596");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonProfile, "More Button");
				waitTime(2000);
				
				for(int i=1;i<=12;i++)
				{
					click(HipiDiscoverPage.objUserHandles(i), "User Handle");
					String a=getText(HipiProfilePage.objListOfFollowing);
					int digit=Integer.parseInt(a);
					if(digit>0)
					{
						break;
					}
					else
					{
						Back(1);
					}
					
				}
				verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
				waitTime(3000);
				verifyElementPresent(HipiDiscoverPage.objTitleName, "Title Name");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresent(HipiDiscoverPage.objFollowersTabInTitleName, "Followers Tab In Title Name");
				verifyElementPresent(HipiDiscoverPage.objFollowingTabInTitleName, "Following Tab In Title Name");
				waitTime(3000);
				verifyElementPresent(HipiDiscoverPage.objListOFFollowing,"List of Following");
				navigateToHomePage();
				
			}
		}
		
		
		
		
		public void VerifyUserISableToViewVideoInSoundDetailsPageGuest__T1482(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode(" Guest User - Check if user is able to view relevant video in the \"Sound\" details page _T1482");
				System.out.println("T1482");
				extent.extentLogger("Discover_Search", "T1482");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Himanshi");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound tab");
				verifyElementPresentAndClick(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "ThreeLinesDetailsInSoundTab");
				for(int i=2;i<10;i++) {
					if(verifyElementDisplayed(HipiProfilePage.objListOfVideos))
					{
						click(HipiProfilePage.objListOfVideos,"list of videos");
				  	  logger.info("List of videos is displayed");
						extent.extentLoggerPass("Play Sound", "List of videos is displayed");
					break;
					} else {
					Back(1);
					click(HipiDiscoverPage.objThreeLinesDetailsInSoundTabIterator(i), "ThreeLinesDetailsInSoundTab");
					}
				}
//				verifyElementPresentAndClick(HipiProfilePage.objListOfVideos, "List of Videos");
				if(verifyElementPresent(HipiHomePage.objShareICON, "Share Icon"))
				{
				  	  logger.info("User should able to view any video in the Sound details page");
						extent.extentLoggerPass("Play Sound", "User should able to view any video in the Sound details page");
				    }else
				    {
				  	  logger.info("User not able to view any video in the Sound details page");
						extent.extentLoggerFail("Play sound", "User not able to view any video in the Sound details page");
				    }
				  navigateToHomePage();
			}
		}
		
		
		public void Checkifusercantaponanyhashtagtrendingvideo__T1489(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode(" Logged in user - Check if user can tap on any hashtag trending video _T1489");
				System.out.println("T1489");
				extent.extentLogger("Discover_Search", "T1489");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				waitTime(3000);
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");				
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos, "Related Video");
				if (verifyElementPresent(HipiHomePage.objShareICON, "Share ICON")){
					logger.info("User should able to tap on hashtag trending videos");	
					extent.extentLoggerPass("", "User should able to tap on hashtag trending videos");	
				}else {
					logger.info("User not able to tap on hashtag trending videos");	
					extent.extentLoggerFail("", "User not able to tap on hashtag trending videos");
				}
				navigateToHomePage();
			}
		}
		
		
		public void VerifyFollowersListThroughUserTab__T1424(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User- Verify for followers tab user list _ T1424");
				System.out.println("T1424");
				extent.extentLogger("Discover_Search", "T1424");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Himanshi");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 waitTime(5000);
				 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
				 waitTime(5000);
				 if(verifyElementPresent(HipiDiscoverPage.objListOFFollowing,"List of followers"))
					{
						logger.info("User should able to see all the follwers of user on the respective tab");	
						extent.extentLoggerPass("Profile_Followers", "User should able to see all the follwers of user on the respective tab");
					}else {
						logger.info("User not able to see all the follwers of user on the respective tab");	
						extent.extentLoggerFail("Profile_Followers", "User not able to see all the follwers of user on the respective tab.");	
					}
					navigateToHomePage();

			}
		}	
		
		public void VerifySearchFieldInFollowersTab__T1423(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User- Verify for search field on the user followers tab _ T1423");
				System.out.println("T1423");
				extent.extentLogger("Discover_Search", "T1423");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Himanshi");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 
				 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
				 if(verifyElementPresent(HipiProfilePage.objFollowersSearch,"Followers Search"))
					{
						logger.info("User should get search field on the following tab");	
						extent.extentLoggerPass("Profile_Followers", "User should get search field on the following tab");
					}else {
						logger.info("User not getting search field on the following tab");	
						extent.extentLoggerFail("Profile_Followers", "User not getting search field on the following tab.");	
					}
					navigateToHomePage();

			}
		}
		
		public void VerifyListOFFollowingTab__T1422(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User- Verify for followers tab of user list page _ T1422");
				System.out.println("T1422");
				extent.extentLogger("Discover_Search", "T1422");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Dheeraj");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 
				 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Followers");
				 if(verifyElementPresentAndClick(HipiDiscoverPage.objListOFFollowing, "List of Following"))
					{
						logger.info("On tap followers tab user will get list of followers list of that user on his followers page");	
						extent.extentLoggerPass("Profile_Followers", "On tap followers tab user will get list of followers list of that user on his followers page");
					}else {
						logger.info("On tap followers tab user not getting list of followers list of that user on his followers page");	
						extent.extentLoggerFail("Profile_Followers", "On tap followers tab user not getting list of followers list of that user on his followers page.");	
					}
					navigateToHomePage();

			}
		}
		
		public void VerifyProfileAfterTappingOnUserInFollowingTab__T1421(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User - Verify following list user click and navigation _ T1421");
				System.out.println("T1421");
				extent.extentLogger("Discover_Search", "T1421");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Dheeraj");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 waitTime(5000);
				 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Followers");
				 waitTime(4000);
				 verifyElementPresentAndClick(HipiDiscoverPage.objFollowersListClick, "Followers list click");
				 waitTime(4000);
				 if(verifyElementPresentAndClick(HipiProfilePage.objProfileHeader, "Profile header"))
					{
						logger.info("On tap any user user from the following list it navigate to user profile page");	
						extent.extentLoggerPass("Profile_Followers", "On tap any user user from the following list it navigate to user profile page");
					}else {
						logger.info("On tap any user user from the following list it not navigate to user profile page");	
						extent.extentLoggerFail("Profile_Followers", "On tap any user user from the following list it not navigate to user profile page.");	
					}
					navigateToHomePage();

			}
		}
		public void VerifyLogInPopupaafteraTappingFollowersTab__T1398(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("Guest User - Verify for followers tab user list _ T1398");
				System.out.println("T1398");
				extent.extentLogger("Discover_Search", "T1398");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Himanshi");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 
				 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
				 if(verifyElementPresent(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email"))
		  			{
						logger.info("On tap followers tab user can get login pop up on the screen");
						extent.extentLoggerPass("Hashtags tab", "On tap followers tab user can get login pop up on the screen");
					}else
					{
						logger.info("On tap followers tab user not getting login pop up on the screen ");
						extent.extentLoggerFail("Hashtags tab", "On tap followers tab user not getting login pop up on the screen");
					}
		  			 navigateToHomePage();

			}
		}
		
		
		public void VerifyFollowerstabanditsclickontheuserprofilepage__T1405(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User- Verify Followers tab and its click on the user profile page _ T1405");
				System.out.println("T1405");
				extent.extentLogger("Discover_Search", "T1405");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Himanshi");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 
				 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
				 if(verifyElementPresent(HipiDiscoverPage.objListOFFollowing,"List of followers"))
					{
						logger.info("User is redirected to followers list screen");	
						extent.extentLoggerPass("Profile_Followers", "User is redirected to followers list screen");
					}else {
						logger.info("User is not redirected to followers list screen");	
						extent.extentLoggerFail("Profile_Followers", " User is not redirected to followers list screen is not navigated to profile screen.");	
					}
					navigateToHomePage();
				 
			}
		}
		
		
		public void VerifyusersFollowing_FollowersPage__T1407(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User - Verify users Following /Followers Page _ T1407");
				System.out.println("T1407");
				extent.extentLogger("Discover_Search", "T1407");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Himanshi");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 
				 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers");
					verifyElementPresentAndClick(HipiDiscoverPage.objTitleName, "Followers");
					verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
					verifyElementPresent(HipiDiscoverPage.objFollowersTabInTitleName, "FollowersTabInTitleName");
					verifyElementPresent(HipiDiscoverPage.objFollowingTabInTitleName, "FollowingTabInTitleName");
					verifyElementPresent(HipiDiscoverPage.objListOFFollowing,"List of followers");
					
					navigateToHomePage();
			}
		}
		
		public void Verifyfollowerslistuserclickandnavigation__T1425(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User - Verify followers list user click and navigation _T1425");
				System.out.println("T1425");
				extent.extentLogger("Discover_Search", "T1425");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				String val = getParameterFromXML("KundaliBhagya");
				type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Follower");
				 waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objSearchButton, "Search button");
				 waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objfirstuserfromlist_USertab, "First SearchedResult");
				 if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
						logger.info("user should navigate to user profile page");	
						extent.extentLoggerPass("", "user should navigate to user profile page");
					}else {
						logger.info("user not navigate to user profile page");	
						extent.extentLoggerFail("", "user not navigate to user profile page");	
					}
				 navigateToHomePage();
			}
		}
		
		
		
		public void verifyUserIsAbleToViewFullPlayerOfTheVideosByTappingOnAnyVideoInSoundDetailPageLoggedINUser__T1463(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Check user is able to view full player of the videos by tapping on any video in sound detail page _ T1463");
			System.out.println("T1463");
			extent.extentLogger("Discover_Search", "T1463");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("SunnyLeone");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
		    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
		    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
		    for(int i=2;i<10;i++) {
				if(verifyElementDisplayed(HipiProfilePage.objListOfVideos))
				{
					click(HipiProfilePage.objListOfVideos,"videos");
			  	  logger.info(" video is displayed");
					extent.extentLoggerPass("Play Sound", " video is displayed");
				break;
				} else {
				Back(1);
				click(HipiDiscoverPage.objsoundspageasSearchresultpageIterating(i), "User in Sound Title");
				}
			}
		    if(verifyElementPresent(HipiHomePage.objPlayerScreen, "Player screen"))
		    		 {
			  	  logger.info("User is able to view full player of the videos by tapping on any video in sound detail page");
					extent.extentLoggerPass("Full player screen", "User is able to view full player of the videos by tapping on any video in sound detail page");
			    }else
			    {
			  	  logger.info("User is not able to view full player of the videos by tapping on any video in sound detail page");
					extent.extentLoggerFail("Full player screen", "User is not able to view full player of the videos by tapping on any video in sound detail page");
			    }
				  navigateToHomePage();
			        }
					}
		
		
		public void verifyUserIsAbleToViewRelatedVideosForANewOrExistingSoundGuest__T1477(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("Check if user is able to view related videos for a new/existing sound _ T1477");
				System.out.println("T1477");
				extent.extentLogger("Discover_Search", "T1477");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("SunnyLeone");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
			    verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds tab");
			    verifyElementPresentAndClick(HipiDiscoverPage.objsoundspageasSearchresultpage, "Sounds");
			    for(int i=2;i<10;i++) {
					if(verifyElementDisplayed(HipiProfilePage.objListOfVideos))
					{
						 logger.info("List of videos is displayed");
						extent.extentLoggerPass("Play Sound", "List of videos is displayed");
					break;
					} else {
					Back(1);
					click(HipiDiscoverPage.objsoundspageasSearchresultpageIterating(i), "Sounds");
					}
				}
			    if(verifyElementPresent(HipiDiscoverPage.objrelatedvioedosSound,"Related viedo"))
			    {
			    		logger.info("User is able to view related videos for a new/existing sound");
					extent.extentLoggerPass("Related viedo", "User is able to view related videos for a new/existing sound");
				}
			    else
				{
					logger.info("User is not able to view related videos for a new/existing sound");
					extent.extentLoggerFail("Related viedo", "User is not able to view related videos for a new/existing sound");
				}
				navigateToHomePage();
			}
		}
		public void   Verifyfollowbuttonanditsclickontheuserprofilepage__T1403(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Logged In User: Verify follow button and its click on the user profile page");
				System.out.println("T1403");
				extent.extentLogger("Discover", "T1403");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				String val = getParameterFromXML("Kundali");
				type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				 waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objFollowButton, "Follow Button");
				waitTime(4000);
				if(verifyElementPresent(HipiDiscoverPage.objFollowingTab, "Following Tab")){
					logger.info("Taping follow button user gets followed and it displays under following list");	
					extent.extentLoggerPass("", "Taping follow button user gets followed and it displays under following list");
				}else {
					logger.info("Taping follow button user not gets followed and it not displays under following list");	
					extent.extentLoggerFail("", "Taping follow button user not gets followed and it not displays under following list");	
				}
				click(HipiDiscoverPage.objFollowingTab, "Following Tab");
				navigateToHomePage();
			}
			}
			
		
		public void verifyClickOnTheVideoBannerLoggedInUser__T1528(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Nonsubscribeduser")) {
				extent.HeaderChildNode("Logged In User-Verify if user able to see and click on the video banner displayed in the discover page _ T1528");
				System.out.println("T1528");
				extent.extentLogger("Discover", "T1528");
				click(HipiHomePage.objDiscoverButton, "Discover Button");
			    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			    try {
			    for(int i=0;i<=5;i++)
			    {
					if(verifyElementExist(HipiHomePage.objPlayerScreen,"Player Screen"))
					{
					logger.info("User is able to land on player page");	
					extent.extentLoggerPass("", "User is able to land on player page");
					break;
				    }				
					else if(verifyElementExist(HipiDiscoverPage.objGoatPage,"Goat screen"))
					{
					Back(1);
				    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
					}
					else if(verifyElementPresent(HipiDiscoverPage.objModelfaceHeader, "Model face"))
					{
						verifyElementPresentAndClick(HipiDiscoverPage.objModelfaceFirstVideo,"First video");
						if(verifyElementPresent(HipiHomePage.objPlayerScreen,"player screen"))
						{
							logger.info("User is able to land on player page");	
							extent.extentLoggerPass("", "User is able to land on player page");
							break;					
						}
					}
			    }
			    }
			    catch (Exception e)
			    {
			    
						logger.info("User is not able to land on player page");	
						extent.extentLoggerFail("", "User is not able to land on player page");			
			    }

				navigateToHomePage();

			}
		}
		public void verifyForVideoClicksOnTheBannersDetailsPageLoggedInUser__T1531(String userType) throws InterruptedException, Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				extent.HeaderChildNode("Logged In User- Verify for video clicks on the banners details page _ T1531");
				System.out.println("T1531");
				extent.extentLogger("Discover_Banners","T1531");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objBannerPictures, "Banner Images");
				
				verifyElementPresentAndClick(HipiDiscoverPage.objTabIndicator3, "Tab indicator");
				
				verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
				  navigateToBannerDetailsPage(userType);

				waitTime(3000);
				verifyElementPresent(HipiDiscoverPage.objHashTagNameInBannerPictures, "Hash TagName In Banner Pictures");
				verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage,"First Video Banner Page");
				waitTime(4000);
				if(verifyElementPresent(HipiHomePage.objPlayerScreen, "Player Screen")){
					logger.info("User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");	
					extent.extentLoggerPass("Discover_Banners", "User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");
				}else {
					logger.info("User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");	
					extent.extentLoggerFail("Discover_Banners", "User is able to tap on any video from the list of videos available on banner page and video is playing on the feed");	
				}
				navigateToHomePage();
				
			}
		}
			
		public void verifyforsharebuttonclick__T1536__T1576(String userType) throws Exception {
			 
			 if(userType.equalsIgnoreCase("NonSubscribedUser")){
					extent.HeaderChildNode("Logged In User : verify for share button click _ T1536");
					System.out.println("T1536");
			 }else {
						extent.HeaderChildNode("Guest In User : verify for share button click _ T1576");
						System.out.println("T1576");
					}
//					extent.extentLogger("", "T1536");
					verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
					waitTime(4000);
					verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button again");
					waitTime(10000);
					verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
					  verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
					  navigateToBannerDetailsPage(userType);
					  verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage,"First Video Banner Page");
					if(verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon"))
					{
//					verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon");
					boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
					if (isShareOption) {
						logger.info("User is navigated share options screen");
						extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
						int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
						if (shareOptions == 0) {
							extent.extentLoggerFail("Verify share options", "Share Options are not available");
							logger.info("Share Options are not available");
						} else {
							for (int i = 2; i <= shareOptions; i++) {
								String shareOptionName = getText(HipiHomePage.objShareoptions(i));
								logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
								extent.extentLoggerPass("Share Option ",
										"Share Option : \"" + shareOptionName + "\" is available to share");
							}
						}
					} else {
						logger.info("Share Options are not displayed after clicking on Share CTA");
						extent.extentLoggerFail("Share through options screen",
								"Share Options are not displayed after clicking on Share CTA");
					}
					}
//					navigateToHomePage();
//					verifyElementPresentAndClick(HipiHomePage.objForYou, "For you");
					navigateToHomePage();
				}
			

		
		public void   Verifyforfollowingtabofuserlistpage__T1409(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode(" Verify for following tab of user list page _ T1409");
				System.out.println("T1409");
				extent.extentLogger("Discover_Search", "T1409");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
				String val = getParameterFromXML("Kundali");
				type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
			    verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			    waitTime(3000);
				verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
				 waitTime(3000);
				verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following tap");
				 waitTime(3000);
				verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox");
					
					
				String value = getParameterFromXML("RamPyaare");
				type(HipiDiscoverPage.objDiscoverSearchInbox,value , "Search Inbox");
				hideKeyboard();
				waitTime(5000);
				String searchBar = getText(HipiDiscoverPage.objDiscoverSearchInbox);
				String reasult = getText(HipiDiscoverPage.objfirstuserfromlist_USertab);
				if (searchBar.contains(reasult)) {
					logger.info("Following user list display over this tab from the following list");
					extent.extentLoggerPass("", "Following user list display over this tab from the following list");
					 }else {
					  	logger.info("Following user list display over this tab from the following list");
						extent.extentLoggerFail("Auto Suggestion", "Following user list display over this tab from the following list");
					    }
					navigateToHomePage();
				}
		}

		public void Verifyvideotabofsearchresultpage__T1430(String userType) throws Exception
		{
			extent.HeaderChildNode(" Verify video tab of search result page _ T1430");
			System.out.println("T1430");
			extent.extentLogger("Discover_Search", "T1430");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Kundali");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab, "Video Tab");
			verifyElementPresent(HipiProfilePage.objListOfVideos, "List of Videos");
			SwipeUntilFindElement(HipiShopPage.objShopTabOnVideo, "UP");
			verifyElementPresent(HipiDiscoverPage.objPlayIconWithCount, "Play Icon With Count");
			verifyElementPresent(HipiDiscoverPage.ObjHandIconOnVideo, "Hand Icon On Video");
			navigateToHomePage();
		}

		
	//=================================================Login(Deepa)======================================================
	
	
	
	
	
	
	
	
	public void checkTheUIOfTheLoginInScreenForPhoneTab_T803(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check the UI of the Login in screen for Phone tab");
			System.out.println("T803");
			extent.extentLogger("Login/Signup screen", "T803");
	 
	 verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	 waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	 verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
	 
	 verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
	 String loginText = getText(HipiLoginPage.objLoginTitle);
     if (loginText.equals("Log in")) {
    	 logger.info(loginText + " is displayed");	
		 extent.extentLoggerPass("", loginText + " is displayed" );
	}else {
		logger.info(loginText + " is not displayed");	
		 extent.extentLoggerPass("", loginText + " is not displayed" );
	}
	 verifyElementPresent(HipiLoginPage.objPhoneTabIsSelectedByDefault, "Phone Tab Is Selected By Default");
	 verifyElementPresent(HipiLoginPage.objEmailOption, "Email Tab");
	 waitTime(2000);
	 verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
     
     
     verifyElementPresent(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
     verifyElementPresent(HipiLoginPage.objPasswordTextField, "Password Text Field");
     verifyElementPresent(HipiLoginPage.objForgotPasswordButton,"Forgot Password button");
     verifyElementPresent(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
     
     if(verifyElementPresent(AMDLoginScreen.objLoginBtn, "Login Button")){
			logger.info("User is able to see the login CTA");	
			extent.extentLoggerPass("", "User is able to see the login CTA");
		}else {
			logger.info("User is not able to see the login CTA");	
			extent.extentLoggerFail("", "User is not able to see the login CTA");
		}
     navigateToHomePage();
     
		}
}
	public void checktheUIOfTheLoginInToHiPiPopUp_T800(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check the UI of the \"Login in to HiPi\" pop-up");
			System.out.println("T800");
			extent.extentLogger("Login/Signup screen", "T800");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
		     String loginText = getText(HipiLoginPage.objLoginTitle);
		     if (loginText.equals("Login to Hipi")) {
		    logger.info(loginText + " is displayed");	
			extent.extentLoggerPass("", loginText + " is displayed" );
		     }
		     else {
		    	logger.info(loginText + " is not displayed");	
				extent.extentLoggerPass("", loginText + " is not displayed" );
		     }
		     
		     verifyElementPresent(HipiLoginPage.objMetaDataOfLoginPopUp, "Meta Data");
		     String MetaData = getText(HipiLoginPage.objMetaDataOfLoginPopUp);
		     if(MetaData.equals("Manage your account, check notifications, comment non videos and more")) {
		    	 logger.info(MetaData + " is displayed");	
					extent.extentLoggerPass("", MetaData + " is displayed" );
				     }
				     else {
				    	logger.info(MetaData + " is not displayed");	
						extent.extentLoggerPass("", MetaData + " is not displayed" );
				     }
		     
		     verifyElementPresent(HipiLoginPage.objCrossIconOnLoginPopup, "Cross Icon");
		     verifyElementPresent(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
		     verifyElementPresent(HipiLoginPage.objContinuewithFacebookCTA, "Continue with FaceBook CTA");
		     verifyElementPresent(HipiLoginPage.objContinueWithGoogleCTA, "Continue with google CTA");
		    
		     verifyElementPresent(HipiLoginPage.objMetaDataOfLoginPopUp, "Manage your Account text");
		     String TermsofUseandPrivacyPolicy = getText(HipiLoginPage.objTermsOfUseandPrivacyPolicy);
		     if(TermsofUseandPrivacyPolicy.equals("By continuing, you agree to Hipi's Terms of Use and confirm that you have read Hipi's Privacy policy.")) {
		    	 logger.info(TermsofUseandPrivacyPolicy + " is displayed");	
					extent.extentLoggerPass("", TermsofUseandPrivacyPolicy + " is displayed" );
				     }
				     else {
				    	logger.info(TermsofUseandPrivacyPolicy + " is not displayed");	
						extent.extentLoggerPass("", TermsofUseandPrivacyPolicy + " is not displayed" );
				     }
		           verifyElementPresent(HipiLoginPage.objTDontHaveAnAccountSignupLink, "Don't Have An Account Signup Link");
		     
		     }
		 navigateToHomePage();
		    	 
		     }
	public void checktheUIoftheForgotPasswordResetScreenForPhoneNnumber_T819(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check the UI of the forgot Password Reset Screen for Phone number");
			System.out.println("T819");
			extent.extentLogger("Login/Signup screen", "T819");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password Button");
			
			verifyElementPresent(HipiLoginPage.objResetHeader, "Reset Text");
			 String ResetText = getText(HipiLoginPage.objResetHeader);
		     if (ResetText.equals("Reset")) {
		    logger.info(ResetText + " is displayed");	
			extent.extentLoggerPass("", ResetText + " is displayed" );
		     }
		     else {
		    	logger.info(ResetText + " is not displayed");	
				extent.extentLoggerPass("", ResetText + " is not displayed" );
		     }
			verifyElementPresent(HipiLoginPage.objForgotPasswordResetScreen, "Forgot Password Reset Screen");
			
			verifyElementPresent(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword, "We'll SMS You a OTP to Reset Your Password Text");
			String Text= getText(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword);
			if(Text.equals("We'll SMS You a OTP to Reset Your Password")) {
				logger.info(Text + " is displayed");	
				extent.extentLoggerPass("", Text + " is displayed" );
			     }
			     else {
			    	logger.info(Text + " is not displayed");	
					extent.extentLoggerPass("", Text + " is not displayed" );
			}
			verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "Plus 91 Drop Dwon");
			verifyElementPresent(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			
			 if (verifyElementExist(HipiLoginPage.objResetButton, "Reset button")) {
				 logger.info("User is able to see the  Reset CTA");	
					extent.extentLoggerPass("","User is able to see the Reset CTA");	
			}else {
				 logger.info("User is not able to see the  Reset CTA");	
				 extent.extentLoggerFail("", "User is not able to see the  Reset CTA");
					
			}
			 navigateToHomePage();
			
			   }
	}
	public void checkifUserisAbletoRemovetheEnteredPhoneNumber_T830(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check if user is able to remove the entered phone number by tapping on cross icon in Login with OTP screen for Phone number");
			System.out.println("T830");
			extent.extentLogger("Login/Signup screen", "T830");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String phoneNumber = getParameterFromXML("NewNumber");
			type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			hideKeyboard();
			
			String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
			System.out.println(checkPhoneNumber);
			waitTime(4000);
			 click(HipiLoginPage.objRemovePhoneNumber, "Remove Button");
				String removePhoneNumber= getText(HipiLoginPage.objPhoneNumberTextField);
				System.out.println(removePhoneNumber);
				
			 if (!checkPhoneNumber.equals(removePhoneNumber)) {
				 logger.info("User is able to remove the entered phone number by tapping on cross icon in Login with OTP screen" );	
				 extent.extentLoggerPass("", "User is able to remove the entered phone number by tapping on cross icon in Login with OTP screen" );
			}else {
				logger.info("User is not able to remove the entered phone number by tapping on cross icon in Login with OTP screen");	
				extent.extentLoggerFail("", "User is not able to remove the entered phone number by tapping on cross icon in Login with OTP screen");		
			}
			 navigateToHomePage();



		}
}
	public void checktheUIoftheLoginWithOTPScreen_T835(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check the UI of the Login with OTP screen");
			System.out.println("T835");
			extent.extentLogger("Login/Signup screen", "T835");
			

			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			
			verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
			waitTime(2000);
		     
		    verifyElementPresent(HipiLoginPage.objPhoneTabIsSelectedByDefault, "Phone Tab Is Selected By Default");
		 	verifyElementPresent(HipiProfilePage.objEmailOption, "Email Option");
		 	verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "Plus 91 Drop Dwon");
		 	verifyElementPresent(HipiLoginPage.objLoginWithPassword,"Login Password button");
		 	verifyElementPresent(HipiLoginPage.objSendOTP, "Send OTP Button");
		 	waitTime(5000);
		 	
		 	verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
		     String loginText = getText(HipiLoginPage.objLoginTitle);
		     verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
			 String loginText1 = getText(HipiLoginPage.objLoginTitle);
		     if (loginText1.equals("Log in")) {
		    	 logger.info(loginText1 + " is displayed");	
				 extent.extentLoggerPass("", loginText1 + " is displayed" );
			}else {
				logger.info(loginText1 + " is not displayed");	
				 extent.extentLoggerPass("", loginText1 + " is not displayed" );
			}
		     navigateToHomePage();
		}

}			
	
	
	public void checktheUIofVericationScreen_T837(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check the UI of verifcation screen");
			System.out.println("T837");
			extent.extentLogger("Login/Signup screen", "T837");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String phoneNumber = getParameterFromXML("PhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			hideKeyboard();
			
			String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
			System.out.println(checkPhoneNumber);
			verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
			waitTime(5000);
			verifyElementPresent(HipiLoginPage.objBackButton, "Back  Button");
			verifyElementPresent(HipiLoginPage.objEnterFourDigitOTP, "Enter Four Digit OTP Text");
			
			verifyElementPresent(HipiLoginPage.objFirstDigit, "First Digit");
			verifyElementPresent(HipiLoginPage.objSecondDigit, "Second Digit");
			verifyElementPresent(HipiLoginPage.objThirdDigit, "Third Digit");
			verifyElementPresent(HipiLoginPage.objFourthDigit, "Fourth Digit");
			
			verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify CTA");
			waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);

			verifyElementPresent(HipiLoginPage.objHavntRecivedOTPSendAgain, "Havn't Recived OTP Send Again");
		
			
			verifyElementPresent(HipiLoginPage.objVerifyOTPScreenMetadata, "Verify OTP Screen Metadata");
			String MessagedText = getText(HipiLoginPage.objVerifyOTPScreenMetadata);
			  if (MessagedText.equals("Your OTP was  messaged to 91-9059995072")) {
				    logger.info(MessagedText + " is displayed");	
					extent.extentLoggerPass("", MessagedText + " is displayed" );
				     }
				     else {
				    	logger.info(MessagedText + " is not displayed");	
						extent.extentLoggerFail("", MessagedText + " is not displayed" );
				     }
				     navigateToHomePage();

		}
}
	public void checktheifUserisAabletoSeetheResendcodeAalongWithtimeinVerificationScreen_T840(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check if user is able to see the Resend code along with time in verification screen");
			System.out.println("T840");
			extent.extentLogger("Login/Signup screen", "T840");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String phoneNumber = getParameterFromXML("PhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			hideKeyboard();
			String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
			if (phoneNumber.contains(checkPhoneNumber)) {
				logger.info("User is able to type "  + checkPhoneNumber );	
				extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
			}else {
				logger.info("User is not able to type number");	
				extent.extentLoggerFail("", "User is not able to type number");	
		    }
			verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
			waitTime(5000);
			
			if (verifyElementPresent(HipiLoginPage.objResendOTPtextAllongWithTime, "Resend OTP text Allong With Time")) {
			 logger.info("User is able to see the Resend code along with time in verification screen");	
			 extent.extentLoggerPass("","User is able to see the Resend code along with time in verification screen");	
				}else {
					logger.info("User is not able to see the Resend code along with time in verification screen");	
					extent.extentLoggerFail("", "User is not able to see the Resend code along with time in verification screen");
						
				}
				 navigateToHomePage();
		}
				   }
	
	public void checktheUIoftheLogininScreenforEmailtab_T846(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check the UI of the \"Login in\" screen for Email tab");
			System.out.println("T846");
			extent.extentLogger("Login/Signup screen", "T846");
			
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			waitTime(2000);
			
			verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
		     String loginText = getText(HipiLoginPage.objLoginTitle);
		     logger.info(loginText + " is displayed");	
			 extent.extentLoggerPass("", loginText + " is displayed" );
			 
			 verifyElementPresent(HipiLoginPage.objPhoneTabIsSelectedByDefault, "Phone Tab Is Selected By Default");
			 verifyElementPresent(HipiLoginPage.objEmailOption, "Email Option");
			 verifyElementPresent(HipiProfilePage.objEmailOption, "Email Adress Text Field");
			 verifyElementPresent(HipiLoginPage.objPasswordTextField, "Password Text Field");
			 verifyElementPresent(HipiLoginPage.objForgotPasswordButton,"Forgot Password button");
			 verifyElementPresent(AMDLoginScreen.objLoginBtn, "Login Button");
			 navigateToHomePage();
	
		}
		
	}
	
	public void checktheifUuserisAabletoSeetheToastMessage__T848(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check if user is able to see the toast message as Please use valid Email Address by tapping on Log in CTA without giving any data in Login in screen");
			System.out.println("T848");
			extent.extentLogger("Login/Signup screen", "T848");
			

			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objLoginButton, "Login Button");
			
			if (verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress, "Please Use Valid Email Address")) {
			logger.info("User is get the message as Please use valid Email Address by tapping on Log in CTA in Log in screen");	
			 extent.extentLoggerPass("","User is get the message as Please use valid Email Address by tapping on Log in CTA in Log in screen");	
				}else {
					logger.info("User not  get the message as Please use valid Email Address by tapping on Log in CTA in Log in screen");	
					extent.extentLoggerFail("", "User not get the message as Please use valid Email Address by tapping on Log in CTA in Log in screen");
						
				}	
				 navigateToHomePage();
				
}
}
	
	
	public void checkifUserisAbletoRemovetheEnteredEmailAddressbyTappingonCrossIconinLoginScreen__T850(String userType) throws Exception
	{
	if(userType.equalsIgnoreCase("Guest"))
			{
			extent.HeaderChildNode("Check if user is able to remove the entered Email address by tapping on cross icon in login screen");
			System.out.println("T850");
	    	extent.extentLogger("Login/Signup screen", "T850");
	    	

			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			waitTime(2000);
			String Username = getParameterFromXML("NonsubscribedUserName");
			click(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			hideKeyboard();
			String AfterText2 = getText(AMDLoginScreen.objEmailIdField);
			verifyElementPresentAndClick(HipiLoginPage.objRemovePhoneNumber, "Remove Email");
			String AfterRemoveTheText = getText(AMDLoginScreen.objEmailIdField);
			System.out.println(AfterRemoveTheText);
			waitTime(4000);
			 if (!AfterRemoveTheText.equals(AfterText2)) {
				 logger.info("User is able to remove the entered Email id by tapping on cross icon" );	
				 extent.extentLoggerPass("", "User is able to remove the entered Email id by tapping on cross icon" );
			}else {
				logger.info("User not able to remove the entered Email id by tapping on cross icon");	
				extent.extentLoggerFail("", "User not able to remove the entered Email id by tapping on cross icon");		
			}
			 navigateToHomePage();
								
		
			}
	}
	
	public void  checkifUserisAbletoRemoveTheEnteredPasswordByTappingOnCrossIconInLoginScreen__T852(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to remove the entered password by tapping on cross icon in login screen");
		System.out.println("T852");
		extent.extentLogger("Login/Signup screen", "T852");
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");

	String Password = getParameterFromXML("NonsubscribedPassword");
	verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
	//hideKeyboard();

	type(AMDLoginScreen.objPasswordField, Password, "Password field");
	hideKeyboard();

	String checkPassword = getText(HipiLoginPage.objPasswordTextField);
	System.out.println(checkPassword);
	waitTime(4000);
	 click(HipiLoginPage.objPasswordRemoveButton, "Remove Button");
		String removePassword = getText(HipiLoginPage.objPasswordTextField);
		System.out.println(removePassword);
	 if (checkPassword.equals(removePassword)) {
		 logger.info("User is not able to remove the entered password by tapping on cross icon" );	
		 extent.extentLoggerFail("", "User is not able to remove the entered password by tapping on cross icon" );
	}else {
		logger.info("User is able to remove the entered password by tapping on cross icon");	
		extent.extentLoggerPass("", "User is able to remove the entered password by tapping on cross icon");		
	}
	 navigateToHomePage();
	 
	}
	}
	
	
	public void checktheUIofTheForgotPasswordResetScreenforEmail__T855(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the UI of the forgot Password Reset Screen for Email");
		System.out.println("T855");
		extent.extentLogger("Login/Signup screen", "T855");

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password Button");
		
		verifyElementPresent(HipiLoginPage.objResetHeader, "Reset Text");
		 String ResetText = getText(HipiLoginPage.objResetHeader);
	     if (ResetText.equals("Reset")) {
	    logger.info(ResetText + " is displayed");	
		extent.extentLoggerPass("", ResetText + " is displayed" );
	     }
	     else {
	    	logger.info(ResetText + " is not displayed");	
			extent.extentLoggerPass("", ResetText + " is not displayed" );
	     }
		verifyElementPresent(HipiLoginPage.objForgotPasswordResetScreen, "Forgot Password Reset Screen");
		
		verifyElementPresent(HipiLoginPage.objWellEmailYouALinkToResetYourPassword, "Metadata  of Forgot password screen");
		 String ForgotText = getText(HipiLoginPage.objResetHeader);
	     if (ForgotText.equals("We'll email you a link to reset your password")) {
	    logger.info(ForgotText + " is displayed");	
		extent.extentLoggerPass("", ForgotText + " is displayed" );
	     }
	     else {
	    	logger.info(ForgotText + " is not displayed");	
			extent.extentLoggerPass("", ForgotText + " is not displayed" );
	     }
		
		verifyElementPresent(HipiProfilePage.objEmailOption, "Email Adress Text Field");
		verifyElementPresent(HipiLoginPage.objResetButton, "Reset button");
		navigateToHomePage();
	}
	    
	}
	public void checkuserisabletoRemovetheEnteredEmailAddressbyTappingonCrossIcon__T857(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to remove the entered email address by tapping on cross icon in forgot Password Reset Screen for Email");
		System.out.println("T857");
		extent.extentLogger("Login/Signup screen", "T857");


		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		waitTime(2000);
		
		verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot Password button");
		waitTime(2000);
		
		String Username = getParameterFromXML("NonsubscribedUserName");
	
		click(AMDLoginScreen.objEmailIdField, "Email field");

		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		hideKeyboard();
		
		String AfterText2 = getText(AMDLoginScreen.objEmailIdField);
		verifyElementPresentAndClick(HipiLoginPage.objRemoveOptionRestScreen, "Remove Email");
		
		String AfterRemoveTheText = getText(AMDLoginScreen.objEmailIdField);
		System.out.println(AfterRemoveTheText);
		waitTime(4000);
		
		
		 if (!AfterRemoveTheText.equals(AfterText2)) {
			 logger.info("User is able to remove the entered email address by tapping on cross icon in Reset screen" );	
			 extent.extentLoggerPass("", "User is able to remove the entered email address by tapping on cross icon in Reset screen" );
		}else {
			logger.info("User is not able to remove the entered email address by tapping on cross icon in Reset screen");	
			extent.extentLoggerFail("", "User is not able to remove the entered email address by tapping on cross icon in Reset screen");		
		}
		 navigateToHomePage();
							
	
		}
}
	public void checkuserisabletoRemovetheEnteredEmailAddressbyTappingonCrossIcon__T882(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the UI of the \"Sign up for HiPi\" pop-up");
		System.out.println("T882");
		extent.extentLogger("Login/Signup screen", "T882");
		

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		
		verifyElementPresent(HipiLoginPage.objCrossIconLoginPopUp, "Cross icon");
		verifyElementPresent(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		verifyElementPresent(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA");
		verifyElementPresent(HipiLoginPage.objContinueWithGoogleCTA, "Continue With Google CTA");
		
		verifyElementPresent(HipiLoginPage.objTermsOfUseandPrivacyPolicy, "Terms of Use and Privacy Policy");
	     String TermsofUseandPrivacyPolicy = getText(HipiLoginPage.objTermsOfUseandPrivacyPolicy);
	     if(TermsofUseandPrivacyPolicy.equals("By continuing, you agree to Hipi's Terms of Use and confirm that you have read Hipi's Privacy policy.")) {
	     logger.info(TermsofUseandPrivacyPolicy + " is displayed");	
		 extent.extentLoggerPass("", TermsofUseandPrivacyPolicy + " is displayed" );
		     }
		     else {
		 	logger.info(TermsofUseandPrivacyPolicy + " is not displayed");	
			extent.extentLoggerPass("", TermsofUseandPrivacyPolicy + " is not displayed" );
			     }
	     verifyElementPresent(HipiLoginPage.objTDontHaveAnAccountSignupLink, " Already have an account? Log in link");
		
		verifyElementPresent(HipiLoginPage.objCreateAProfileFollowOtherAccountsMakeYourOwnVideosAndMore, "Create A Profile Follow Other Accounts Make your Own Videos And More");
		 String SignupTitle = getText(HipiLoginPage.objCreateAProfileFollowOtherAccountsMakeYourOwnVideosAndMore);
	     if (SignupTitle.equals("Create a profile, follow other accounts, make your own videos and more")) {
	    logger.info(SignupTitle + " is displayed");	
		extent.extentLoggerPass("", SignupTitle + " is displayed" );
	     }
	     else {
	    	logger.info(SignupTitle + " is not displayed");	
			extent.extentLoggerPass("", SignupTitle + " is not displayed" );
	     }
	     
	     verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
		 String SignupTitle1 = getText(HipiLoginPage.objSignUpTitle);
	     if (SignupTitle1.equals("'Sign up")) {
	    logger.info(SignupTitle1 + " is displayed");	
		extent.extentLoggerPass("", SignupTitle1 + " is displayed" );
	     }
	     else {
	    	logger.info(SignupTitle1 + " is not displayed");	
			extent.extentLoggerPass("", SignupTitle1 + " is not displayed" );
	     }
	     
		navigateToHomePage();
}
	}
	
	
	public void checktheUIoftheSignUpScreenForPhoneNumber__T885(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the UI of the Sign up screen for Phone Number");
		System.out.println("T885");
		extent.extentLogger("Login/Signup screen", "T885");
		

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		waitTime(2000);
		
		verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
		 String SignupTitle = getText(HipiLoginPage.objSignUpTitle);
	     if (SignupTitle.equals("'Sign up")) {
	    logger.info(SignupTitle + " is displayed");	
		extent.extentLoggerPass("", SignupTitle + " is displayed" );
	     }
	     else {
	    	logger.info(SignupTitle + " is not displayed");	
			extent.extentLoggerPass("", SignupTitle + " is not displayed" );
	     }
	     
	     verifyElementPresent(HipiLoginPage.objBackButton,"Back Button");
	     verifyElementPresent(HipiLoginPage.objWhensYourBirthDay,"Whens Your BirthDay");
	     
	     verifyElementPresent(HipiLoginPage.objYourBirthdayWontBeShownPublicly,"Your Birthday Wont Be Shown Publicly");
	     String MetdaDataofBirthDay = getText(HipiLoginPage.objYourBirthdayWontBeShownPublicly);
	     if (MetdaDataofBirthDay.equals("Your birthday won't be shown publicly")) {
	    logger.info(MetdaDataofBirthDay + " is displayed");	
		extent.extentLoggerPass("", MetdaDataofBirthDay + " is displayed" );
	     }
	     else {
	    	logger.info(MetdaDataofBirthDay + " is not displayed");	
			extent.extentLoggerPass("", MetdaDataofBirthDay + " is not displayed" );
	     }

     //}(d). Date Month Year field and user should able to scroll up and down
	    
	    
	    verifyElementPresent(HipiLoginPage.objNextButtonSignUpPage,"Next CTA");
	}
	navigateToHomePage();
}
	

	public void checkifUserisAbleToNavigateToSignupScreenAfterTappingonUsePhoneorEmailCTA__T931(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to navigate to Sign up screen after tapping on Use Phone or Email CTA");
		System.out.println("T931");
		extent.extentLogger("Login/Signup screen", "T931");

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		waitTime(2000);
		
		if (verifyElementPresent(HipiLoginPage.objSignUpScreenTittle, "Sign Up Screen Tittle")) {
		 logger.info("User is navigate to Sign up screen after tapping on Use Phone or Email CTA" );	
		 extent.extentLoggerPass("", "User is navigate to Sign up screen after tapping on Use Phone or Email CTA" );
	      }else {
		logger.info("User is not navigate to Sign up screen after tapping on Use Phone or Email CTA");	
		extent.extentLoggerFail("", "User is not navigate to Sign up screen after tapping on Use Phone or Email CTA");		
	}
	 navigateToHomePage();
						
    }
	}
	
	
	
	public void checkifuserisabletoseetheSelectCountryRegion_T896(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to see the \"Select country/region\" screen after tapping on +91 in Sign up screen for Phone Number");
		System.out.println("T896");
		extent.extentLogger("Login/Signup screen", "T896");

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		waitTime(2000);
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		
		verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		waitTime(2000);
		
		if (verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region")) {
			logger.info("User is able to see the Select country/region screen on tapping +91");	
			extent.extentLoggerPass("", "User is able to see the Select country/region screen on tapping +91");
		}else {
			logger.info("User is not able to see the Select country/region screen on tapping +91");	
			extent.extentLoggerFail("", "User is not able to see theSelect country/region screen on tapping +91");	
		}
		navigateToHomePage();
	  }

	}
	public void checkifuserisabletoseetheCloseCountryRegion_T897(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to close the \"Select country/region\" screen by tapping on cross icon");
		System.out.println("T897");
		extent.extentLogger("Login/Signup screen", "T897");

		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		waitTime(2000);
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		
		verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objCrossIconOnContryorRegionScreen, "Cross Icon On Contry or Region Screen");
		waitTime(2000);
		if (verifyElementExist(HipiLoginPage.objSearchTab, "Search tab")) {
			logger.info("User is not able to close the Select country/region screen by tapping on cross icon");	
			extent.extentLoggerFail("", "User is not able to close the Select country/region screen by tapping on cross icon");	
		}else {
			logger.info("User is able to close the \"Select country/region\" screen by tapping on cross icon");	
				extent.extentLoggerPass("", "User is able to close the Select country/region screen by tapping on cross icon");
		}
		navigateToHomePage();
	  }
	
	}
	
	
	
	public void checkifuserisabletoseetheCloseCountryRegion_T898(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the UI of the Select country/region screen by tapping on +91 in Sign up screen for Phone Number");
		System.out.println("T898");
		extent.extentLogger("Login/Signup screen", "T898");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		String year1995= getParameterFromXML("SelectYear1995");
	    type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		click(HipiLoginPage.objSelectYear, "Select year");
		click(HipiLoginPage.objSelectYear, "Select year");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
		verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 DropDwon (Field)");
		
		verifyElementPresent(HipiLoginPage.objCrossIcon, "Cross Icon");
		verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
		verifyElementPresent(HipiLoginPage.objSearchCTA, "Search CTA");
		
		List<WebElement> listOfCountrys = getDriver().findElements(HipiLoginPage.objcountryOrRegionList);
		int size = listOfCountrys.size();
		System.out.println(size);
		logger.info("Countrys list is " + size);	
		extent.extentLoggerPass("", "Countrys list is " + size);

		verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select country/region");
		String SelectCountryRegion = getText(HipiLoginPage.objSelectCountryRegion);
	     if (SelectCountryRegion.equals("Select country/region")) {
	    logger.info(SelectCountryRegion + " is displayed");	
		extent.extentLoggerPass("", SelectCountryRegion + " is displayed" );
	     }
	     else {
	    	logger.info(SelectCountryRegion + " is not displayed");	
			extent.extentLoggerPass("", SelectCountryRegion + " is not displayed" );
	     }
	     navigateToHomePage();
}
	
	}
	
	public void checkifUserisNavigatetoSignUpwithPhoneNumberScreen__T901(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is navigate to Sign up with Phone Number screen by tapping on cross icon in Select country/region screen");
		System.out.println("T901");
		extent.extentLogger("Login/Signup screen", "T901");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		
		verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objCrossIconOnContryorRegionScreen, "Cross Icon On Contry or Region Screen");
		waitTime(2000);
		if (verifyElementExist(HipiLoginPage.objSearchTab, "Cross Icon On Contryor/Region Screen")) {
			logger.info("User is not able to close the Select country/region screen by tapping on cross icon");	
			extent.extentLoggerFail("", "User is not able to close the Select country/region screen by tapping on cross icon");	
		}else {
			logger.info("User is able to close the \"Select country/region\" screen by tapping on cross icon");	
				extent.extentLoggerPass("", "User is able to close the Select country/region screen by tapping on cross icon");
		}
		
		if(verifyElementPresent(HipiLoginPage.objSignUpTitle, "SignUp Title")) {
		logger.info("User is navigate to Sign up with Phone number screen by tapping on cross icon");	
			extent.extentLoggerPass("", "User is navigate to Sign up with Phone number screen by tapping on cross icon");
	}else {
		logger.info("User is not navigate to Sign up with Phone number screen by tapping on cross icon");	
		extent.extentLoggerFail("", "User is not navigate to Sign up with Phone number screen by tapping on cross icon");	
	}
	navigateToHomePage();

	    }
	    
	}

	
	
	
	public void checkifuserisabletoEnterthePhoneNumberinPhoneNumberField__T902(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to enter the Phone Number in Phone Number field in Sign up screen for Phone Number");
		System.out.println("T902");
		extent.extentLogger("Login/Signup screen", "T902");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 
		 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String phoneNumber = getParameterFromXML("PhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			hideKeyboard();
			String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
			if (phoneNumber.equals(checkPhoneNumber)) {
				logger.info("User is able to enter the Phone Number in the Phone Number field in Sign up screen"  + checkPhoneNumber );	
				extent.extentLoggerPass("", "User is able to enter the Phone Number in the Phone Number field in Sign up screen" + checkPhoneNumber );	
			}else {
				logger.info("User is not able to enter the Phone Number in the Phone Number field in Sign up screen");	
				extent.extentLoggerFail("", "User is not able to enter the Phone Number in the Phone Number field in Sign up screen");	
		    }
			navigateToHomePage();
		
			}
		}	
	
	public void checkIfUserIsAbleToRemoveTheEnteredPhoneNumber__T903(String userType) throws Exception {
	    if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to remove the entered phone number by tapping on cross icon in Sign up screen for Phone Number");
		System.out.println("T903");
		extent.extentLogger("Login/Signup screen", "T903");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
		
		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();
		
		String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
		System.out.println(checkPhoneNumber);
		waitTime(4000);
		
		click(HipiLoginPage.objRemovePhoneNumber, "Remove Button");
		String removePhoneNumber= getText(HipiLoginPage.objPhoneNumberTextField);
		System.out.println(removePhoneNumber);
			
		 if (!checkPhoneNumber.equals(removePhoneNumber)) {
			 logger.info("User is able to remove the entered phone number by tapping on cross icon" );	
			 extent.extentLoggerPass("", "User is able to remove the entered phone number by tapping on cross icon" );
		}else {
			logger.info("User is not able to remove the entered phone number by tapping on cross icon");	
			extent.extentLoggerFail("", "User is not able to remove the entered phone number by tapping on cross icon");		
		}
		 navigateToHomePage();
		 }
	    
	}
	
	
public void checktheUIofVerificationScreen__T909(String userType) throws Exception {
if(userType.equalsIgnoreCase("Guest")) {
extent.HeaderChildNode("Check the UI of verification screen");
System.out.println("T909");
extent.extentLogger("Login/Signup screen", "T909");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("NewNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 waitTime(8000);
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 
	 verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
	 verifyElementPresent(HipiLoginPage.objEnterFourDigitOTP, "EnterFourDigitOTP");
	 		
		verifyElementPresent(HipiLoginPage.objFirstDigit, "First Digit");
		verifyElementPresent(HipiLoginPage.objSecondDigit, "Second Digit");
		verifyElementPresent(HipiLoginPage.objThirdDigit, "Third Digit");
		verifyElementPresent(HipiLoginPage.objFourthDigit, "Fourth Digit");
		verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
		
		 
		 verifyElementPresent(HipiLoginPage.objVerifyOTPScreenMetadata, "Your code was messaged to 91-91xxxxxxx10 [text]");
			String MessagedText = getText(HipiLoginPage.objVerifyOTPScreenMetadata);
			if (MessagedText.equals("Your OTP was  messaged to 91-9441739566")) {
		    logger.info(MessagedText + " is displayed");	
			extent.extentLoggerPass("", MessagedText + " is displayed" );
		     }
		    else {
		   	logger.info(MessagedText + " is not displayed");	
		    extent.extentLoggerPass("", MessagedText + " is not displayed" );
			}
			waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
			verifyElementPresent(HipiLoginPage.objHavntRecivedOTPSendAgain, "Havn't Recived OTP Send Again");
			
		navigateToHomePage();
	}

}
public void checktheInvalidCodeMessageIsDisplayedWhenUserTappingOnVerifyOTPCTAWithoutEnteringOTP__T910(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the Invalid Code message is displayed when user tapping on Verify OTP CTA without entering OTP");
	System.out.println("T910");
	extent.extentLogger("Login/Signup screen", "T910");	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("NewNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 waitTime(8000);
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
	 
	 if(verifyElementPresent(HipiLoginPage.objInvalidCode, "Invalid code "))
		logger.info("User is get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
		extent.extentLoggerPass("", "User is get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
	    }else {
		logger.info("User is not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
		extent.extentLoggerFail("", "User is not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
    }
	navigateToHomePage();
 }

public void checkCheckifuserisAbletoSeetheOTPSentSuccessfullyMessage__T914(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user is able to see the \"OTP sent successfully\" message is displayed by tapping on Send again link");
	System.out.println("T914");
	extent.extentLogger("Login/Signup screen", "T914");	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("NewNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 waitTime(8000);
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Vrify OTP CTA");
 	
 	waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
	 verifyElementPresentAndClick(HipiLoginPage.objSendAgain, "Send again link");
	 
	 if(verifyElementPresent(HipiLoginPage.objOTPSentSuccessfully, "OTP sent successfully")) {
		logger.info("User is get the message OTP sent successfully by tapping on Send again link");	
		extent.extentLoggerPass("", "User is get the message OTP sent successfully by tapping on Send again link");	
	    }else {
		logger.info("User is not get the message OTP sent successfully by tapping on Send again link");	
		extent.extentLoggerFail("", "User is not get the message OTP sent successfully by tapping on Send again link");	
    }
	navigateToHomePage();
 }


}

public void checkifuserisabletoseetheResendCodeAlongWithTimeinVerificationScreee__T915(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user is able to see the Resend code along with time in verification screen");
	System.out.println("T915");
	extent.extentLogger("Login/Signup screen", "T915");	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("NewNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 waitTime(8000);
	 verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	 if (verifyElementPresent(HipiLoginPage.objResendOTPtextAllongWithTime, "Resend OTP text Allong With Time")) {
	logger.info("User is able to see the Resend code along with time in verification screen");	
	extent.extentLoggerPass("","User is able to see the Resend code along with time in verification screen");	
	}else {
	logger.info("User is not able to see the Resend code along with time in verification screen");	
	extent.extentLoggerFail("", "User is not able to see the Resend code along with time in verification screen");
					
	}
	 navigateToHomePage();
	}
}

	
public void checktheUIofTheForgotPasswordResetScreenForPhoneNumber__T919(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the UI of the forgot Password Reset Screen for Phone number");
	System.out.println("T919");
	extent.extentLogger("Login/Signup screen", "T919");	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	waitTime(8000);
	verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword, "Login with password link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password Button");
	
	verifyElementPresent(HipiLoginPage.objResetHeader, "Reset Text");
	 String ResetText = getText(HipiLoginPage.objResetHeader);
     if (ResetText.equals("Reset")) {
    logger.info(ResetText + " is displayed");	
	extent.extentLoggerPass("", ResetText + " is displayed" );
     }
     else {
    	logger.info(ResetText + " is not displayed");	
		extent.extentLoggerPass("", ResetText + " is not displayed" );
     }
	verifyElementPresent(HipiLoginPage.objForgotPasswordResetScreen, "Forgot Password Reset Screen");
	
	verifyElementPresent(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword, "We'll SMS You a OTP to Reset Your Password Text");
	String Text= getText(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword);
	if(Text.equals("We'll SMS You a OTP to Reset Your Password")) {
		logger.info(Text + " is displayed");	
		extent.extentLoggerPass("", Text + " is displayed" );
	     }
	     else {
	    	logger.info(Text + " is not displayed");	
			extent.extentLoggerPass("", Text + " is not displayed" );
	}
	verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "Plus 91 Drop Dwon");
	verifyElementPresent(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	
	 if (verifyElementExist(HipiLoginPage.objResetButton, "Reset button")) {
		 logger.info("User is able to see the  Reset CTA");	
			extent.extentLoggerPass("","User is able to see the Reset CTA");	
	}else {
		 logger.info("User is not able to see the  Reset CTA");	
		 extent.extentLoggerFail("", "User is not able to see the  Reset CTA");
			
	}
	 navigateToHomePage();
	
	   }
}

public void checkifUserNavigatetoVerificationScreen__T924(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user navigate to Verification screen after tapping on Reset CTA in Reset with Phone number screen");
	System.out.println("T924");
	extent.extentLogger("Login/Signup screen", "T924");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	waitTime(8000);
	verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword, "Login with password link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
	verifyElementPresentAndClick(HipiLoginPage.objResetButton,"Reset button");
	
	if(verifyElementPresent(HipiLoginPage.objVerifyOTPCTA,"Verify OTP CTA")) {
	 logger.info("User is navigate to verification screen after tapping on Reset CTA");	
	 extent.extentLoggerPass("","User is navigate to verification screen after tapping on Reset CTA");	
	}else {
	 logger.info("User is not navigate to verification screen after tapping on Reset CTA");	
	 extent.extentLoggerFail("", "User is not navigate to verification screen after tapping on Reset CTA");
			
	}
	 navigateToHomePage();
	}
	   }
	

public void checktheUIofVerificationScreenforOTP__T925(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the UI of verification screen for OTP");
	System.out.println("T925");
	extent.extentLogger("Login/Signup screen", "T925");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	waitTime(8000);
	verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword, "Login with password link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
	verifyElementPresentAndClick(HipiLoginPage.objResetButton,"Reset button");
	waitTime(2000);
	verifyElementPresent(HipiLoginPage.objBackButton,"Back Button");
	verifyElementPresent(HipiLoginPage.objEnterFourDigitOTP," Enter 4-digit OTP");
	verifyElementPresent(HipiLoginPage.objVerifyOTPScreenMetadata,"  Your code was messaged to 91-91xxxxxxx10 [text]");
	verifyElementPresent(HipiLoginPage.objFirstDigit, "First Digit");
	verifyElementPresent(HipiLoginPage.objSecondDigit, "Second Digit");
	verifyElementPresent(HipiLoginPage.objThirdDigit, "Third Digit");
	verifyElementPresent(HipiLoginPage.objFourthDigit, "Fourth Digit");
	verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
	waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
	verifyElementPresent(HipiLoginPage.objHavntRecivedOTPSendAgain, "Haven't received OTP? Send again");
}
navigateToHomePage();

 }



public void checktheInvalidCodeMessageIsDisplayedWhenUserTappingOnVerifyOTP__T926(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the Invalid Code message is displayed when user tapping on Verify OTP CTA without entering OTP");
	System.out.println("T926");
	extent.extentLogger("Login/Signup screen", "T926");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	
	verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
	waitTime(8000);
	verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword, "Login with password link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
	verifyElementPresentAndClick(HipiLoginPage.objResetButton,"Reset button");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA,"Verify OTP CTA");

	if(verifyElementPresent(HipiLoginPage.objInvalidCode,"Invalid Code")) {
		 logger.info("User is get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
		 extent.extentLoggerPass("","User is get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
		}else {
		 logger.info("User is not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
		 extent.extentLoggerFail("", "User is not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");
				
		}
		 navigateToHomePage();
		}
		   }

public void checkifUserNavigateToResetPasswordScreen__T944(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user is able to close the \"Select country/region\" screen by tapping on cross icon");
	System.out.println("T944");
	extent.extentLogger("Login/Signup screen", "T944");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	String year1995= getParameterFromXML("SelectYear1995");
    type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 DropDwon (Field)");
	verifyElementPresentAndClick(HipiLoginPage.objCrossIcon, "Cross Icon");
	
	if(verifyElementPresent(HipiLoginPage.objSignUpTitle,"Sign UP Title")) {
	logger.info("User is able to close the Select country/region screen by tapping on cross icon");	
	extent.extentLoggerPass("","User is able to close the Select country/region screen by tapping on cross icon");	
	}else {
	logger.info("User is not able to close the Select country/region screen by tapping on cross icon");	
	extent.extentLoggerFail("", "User is not able to close the Select country/region screen by tapping on cross icon");
	}
	navigateToHomePage();
	}
}

public void checktheUIoftheSelectCountryRegionScreen__T945(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the UI of the Select country/region screen by tapping on +91 in Sign up screen for Phone Number");
	System.out.println("T945");
	extent.extentLogger("Login/Signup screen", "T945");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	String year1995= getParameterFromXML("SelectYear1995");
    type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 DropDwon (Field)");
	
	verifyElementPresent(HipiLoginPage.objCrossIcon, "Cross Icon");
	verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
	verifyElementPresent(HipiLoginPage.objSearchCTA, "Search CTA");
	
	List<WebElement> listOfCountrys = getDriver().findElements(HipiLoginPage.objcountryOrRegionList);
	int size = listOfCountrys.size();
	System.out.println(size);
	logger.info("Countrys list is " + size);	
	extent.extentLoggerPass("", "Countrys list is " + size);

	verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select country/region");
	String SelectCountryRegion = getText(HipiLoginPage.objSelectCountryRegion);
     if (SelectCountryRegion.equals("Select country/region")) {
    logger.info(SelectCountryRegion + " is displayed");	
	extent.extentLoggerPass("", SelectCountryRegion + " is displayed" );
     }
     else {
    	logger.info(SelectCountryRegion + " is not displayed");	
		extent.extentLoggerPass("", SelectCountryRegion + " is not displayed" );
     }
     navigateToHomePage();
	}	

}


public void checkifuserisNavigatetoSignUpwithPhoneNumberScreen__T948(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user is navigate to Sign up with Phone Number screen by tapping on cross icon in Select country/region screen");
	System.out.println("T948");
	extent.extentLogger("Login/Signup screen", "T948");

	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone or email CTA");
	String year1995= getParameterFromXML("SelectYear1995");
    type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");		
	verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 DropDwon (Field)");

	verifyElementPresentAndClick(HipiLoginPage.objCrossIcon, "Cross Icon");
	
	if(verifyElementPresent(HipiLoginPage.objSignUpTitle," Sign up with Phone number screen")) {
		logger.info("User is navigate to Sign up with Phone number screen by tapping on cross icon");	
		extent.extentLoggerPass("","User is navigate to Sign up with Phone number screen by tapping on cross icon");	
		}else {
		logger.info("User is not navigate to Sign up with Phone number screen by tapping on cross icon");	
		extent.extentLoggerFail("", "User is not navigate to Sign up with Phone number screen by tapping on cross icon");
		}
		navigateToHomePage();
		}
	}


public void checkifUserisAbletoEenterthenewPhoneNumberinPhoneNumberField__T949(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to enter the new Phone Number in Phone Number field in Sign up screen for Phone Number");
		System.out.println("T949");
		extent.extentLogger("", "T949");	
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();
		
		String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
		System.out.println(checkPhoneNumber);
		
		 if (checkPhoneNumber.equals(phoneNumber)) {
			 logger.info("User is able to enter the new Phone Number in the Phone Number field in Sign up screen" );	
			 extent.extentLoggerPass("", "User is able to enter the new Phone Number in the Phone Number field in Sign up screen" );
		}else {
			logger.info("User is not able to enter the new Phone Number in the Phone Number field in Sign up screen");	
			extent.extentLoggerFail("", "User is not able to enter the new Phone Number in the Phone Number field in Sign up screen");		
		}
		 navigateToHomePage();
	}
}


public void checkifUserisNavigativetoVerificationScreenByTappingOnSendOTPCTA__T952(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user navigative to Verification screen by tapping on Send OTP CTA");
		System.out.println("T952");
		extent.extentLogger("", "T952");	
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);	
		
		if(verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA")) {
		 logger.info("User is navigative to verification screen by tapping on Send OTP CTA" );	
		 extent.extentLoggerPass("", "User is navigative to verification screen by tapping on Send OTP CTA" );
	}else {
		logger.info("User is not navigative to verification screen by tapping on Send OTP CTA");	
		extent.extentLoggerFail("", "User is not navigative to verification screen by tapping on Send OTP CTA");		
	}
	 navigateToHomePage();
}
}

public void checktheUIofVerificationScreenforOTP__T953(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the UI of verification screen for OTP");
		System.out.println("T953");
		extent.extentLogger("", "T953");	
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);	
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);	
		
		verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
		verifyElementPresent(HipiLoginPage.objEnterFourDigitOTP," Enter 4-digit code");
		verifyElementPresent(HipiLoginPage.objVerifyOTPScreenMetadata,"  Your code was messaged to 91-91xxxxxxx10 [text]");
		verifyElementPresent(HipiLoginPage.objFirstDigit, "First Digit");
		verifyElementPresent(HipiLoginPage.objSecondDigit, "Second Digit");
		verifyElementPresent(HipiLoginPage.objThirdDigit, "Third Digit");
		verifyElementPresent(HipiLoginPage.objFourthDigit, "Fourth Digit");
		verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
		waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
		verifyElementPresent(HipiLoginPage.objHavntRecivedOTPSendAgain, "Haven't received OTP? Send again");
		navigateToHomePage();
}
	

	 }


public void checkifUserisAbletoRequestMultipleOTPs__T955(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check if user is able to request multiple OTPs");
		System.out.println("T955");
		extent.extentLogger("", "T955");	
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		String year1995= getParameterFromXML("SelectYear1995");
		type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		click(HipiLoginPage.objSelectYear, "Select year");
		click(HipiLoginPage.objSelectYear, "Select year");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);	
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
		verifyElementPresentAndClick(HipiLoginPage.objSendAgain, "Send again");
		waitTime(4000);
	
		if(verifyElementPresent(HipiLoginPage.objResendOTPtextAllongWithTime,"Resend OTP text Allong With Time")) {
		 logger.info("User is be able to request multiple OTPs" );	
		 extent.extentLoggerPass("", "User is be able to request multiple OTPs" );
	}else {
		logger.info("User is not be able to request multiple OTPs");	
		extent.extentLoggerFail("", "User is not be able to request multiple OTPs");		
	}
	 navigateToHomePage();
}
}			

public void checktheInvalidCodeMessageIsDisplayed__T956(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the Invalid Code message is displayed when user tapping on Verify OTP CTA without entering OTP");
		System.out.println("T956");
		extent.extentLogger("", "T956");	
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		String year1995= getParameterFromXML("SelectYear1995");
		type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		click(HipiLoginPage.objSelectYear, "Select year");
		click(HipiLoginPage.objSelectYear, "Select year");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();	
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);	
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
		
		if(verifyElementPresent(HipiLoginPage.objInvalidCode,"Invalid Code")) {
			 logger.info("User is get the Invalid code message after tapping on Verify OTP CTA in Verification screen" );	
			 extent.extentLoggerPass("", "User is get the Invalid code message after tapping on Verify OTP CTA in Verification screen" );
		}else {
			logger.info("User is not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");	
			extent.extentLoggerFail("", "User is not get the Invalid code message after tapping on Verify OTP CTA in Verification screen");		
		}
		 navigateToHomePage();
	}
	
}


public void checktheEitherOTPisNotValidorHasExpiredMessageIsDisplayedd__T957(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("Check the Either OTP is not valid or has expired message is displayed by tapping on Verify OTP when user entered invalid OTP");
		System.out.println("T957");
		extent.extentLogger("", "T957");	
	
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		String year1995= getParameterFromXML("SelectYear1995");
		type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		click(HipiLoginPage.objSelectYear, "Select year");
		click(HipiLoginPage.objSelectYear, "Select year");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

		verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("NewNumber");
		type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		hideKeyboard();	
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);	
		verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objFirstDigit, "First Digit");
		type(HipiLoginPage.objFirstDigit, "1", "Eneter first digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objSecondDigit, "Second Digit");
		type(HipiLoginPage.objSecondDigit, "1", "Eneter Second digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objThirdDigit, "Third Digit");
		type(HipiLoginPage.objThirdDigit, "1", "Eneter Thired digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objFourthDigit, "Fourth Digit");
		type(HipiLoginPage.objFourthDigit, "1", "Eneter Fourth digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
		
		if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
			 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
			 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
		}else {
			logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
			extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
		}
		 navigateToHomePage();
	}
	
}

public void checkIfUserNavigatetoSignUpWithEmailScreend__T981(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user navigate to sign up with Email screen after tapping on Next CTA");
	System.out.println("T981");
 	extent.extentLogger("", "T981");
 	
 	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
 	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	String year1995= getParameterFromXML("SelectYear1995");
	type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	
	if(verifyElementPresent(HipiLoginPage.objSignUpTitle,"Signup Title")) {
		 logger.info("User is navigate to Sign up with Phone number screen after tapping on Next CTA" );	
		 extent.extentLoggerPass("", "User is navigate to Sign up with Phone number screen after tapping on Next CTA" );
	}else {
		logger.info("User is not navigate to Sign up with Phone number screen after tapping on Next CTA");	
		extent.extentLoggerFail("", "User is not navigate to Sign up with Phone number screen after tapping on Next CTA");		
	}
	 navigateToHomePage();
}
	}

public void checktheUIofTheSignupScreenforEmail__T983(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the UI of the Sign up screen for Email");
	System.out.println("T983");
	extent.extentLogger("", "T983");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	String year1995= getParameterFromXML("SelectYear1995");
	type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	verifyElementPresentAndClick(HipiLoginPage.objEmailButton, "Next Button Sign Up Page");
	
	verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
	verifyElementPresent(HipiLoginPage.objPhoneTabIsSelectedByDefault, "Phone Option");
	verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
	waitTime(2000);		
	verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email Address Field");
	verifyElementPresent(HipiLoginPage.objNextButtonEmailOption, "Next Button Email Option");
	
	verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
	String SignupTitle1 = getText(HipiLoginPage.objSignUpTitle);
	if (SignupTitle1.equals("Sign up")) {
	logger.info(SignupTitle1 + " is displayed");	
	extent.extentLoggerPass("", SignupTitle1 + " is displayed" );
     }
    else {
   	logger.info(SignupTitle1 + " is not displayed");	
	extent.extentLoggerFail("", SignupTitle1 + " is not displayed" );
    }
 verifyElementPresent(HipiLoginPage.objTermsOfUserAndConfirmText, "Terms of Use and Privacy Policy");
 String TermsofUseandPrivacyPolicy = getText(HipiLoginPage.objTermsOfUseandPrivacyPolicy);
 if(TermsofUseandPrivacyPolicy.equals("By continuing, you agree to Hipi's Terms of Use and confirm that you have read Hipi's Privacy policy.")) {
 logger.info(TermsofUseandPrivacyPolicy + " is displayed");	
 extent.extentLoggerPass("", TermsofUseandPrivacyPolicy + " is displayed" );
     }
 else {
logger.info(TermsofUseandPrivacyPolicy + " is not displayed");	
extent.extentLoggerPass("", TermsofUseandPrivacyPolicy + " is not displayed" );
		     }
navigateToHomePage();
}
	}	
	


public void checkthePleaseuseValidEmailAddressMessageIsDisplayedWhenUserEnterInvalidEmail__T985(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the Please use valid Email Address message is displayed when user enter invalid email in Sign up screen");
	System.out.println("T985");
	extent.extentLogger("", "T985");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	String year1995= getParameterFromXML("SelectYear1995");
	type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
//	verifyElementPresentAndClick(HipiLoginPage.objEmailButton, "Email Button");
	verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
	
	verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email Address Field");
    String InavlidEmailId = getParameterFromXML("InvalidEmailId");
    type(AMDLoginScreen.objEmailIdField,InavlidEmailId , "Email Address Field");
    verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button Email Option");
    
  if(verifyElementPresent(HipiLoginPage.objPleaseProvideValidPhoneNumberTosterMessage, "Please use valid Email Address")) {
	logger.info("Please use valid Email Address. message is displayed when user enter invalid email in Sign up screen" );	
	extent.extentLoggerPass("", "Please use valid Email Address. message is displayed when user enter invalid email in Sign up screen" );
	}else {
	logger.info("Please use valid Email Address. message is not displayed when user enter invalid email in Sign up screen");	
	extent.extentLoggerFail("", "Please use valid Email Address. message is not displayed when user enter invalid email in Sign up screen");		
	}
	 navigateToHomePage();
}
	}	

public void checkifUserisAbletoRemovetheEnteredEmailAddress__T987(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user is able to remove the entered Email address by tapping on cross icon in Sign up screen");
	System.out.println("T987");
	extent.extentLogger("", "T987");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	String year1995= getParameterFromXML("SelectYear1995");
	type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");

	verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
	waitTime(2000);
	verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email Address Field");
	String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";
	type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
	Thread.sleep(5000);
	hideKeyboard();
	String AfterText2 = getText(AMDLoginScreen.objEmailIdField);
	verifyElementPresentAndClick(HipiLoginPage.objRemovePhoneNumber, "Remove Email");
	
	String AfterRemoveTheText = getText(AMDLoginScreen.objEmailIdField);
	System.out.println(AfterRemoveTheText);
	waitTime(4000);
	 if (!AfterRemoveTheText.equals(AfterText2)) {
		 logger.info("User is able to remove the entered Email address by tapping on cross icon in Sign up screen" );	
			extent.extentLoggerPass("", "User is able to remove the entered Email address by tapping on cross icon in Sign up screen" );
			}else {
			logger.info("User is not able to remove the entered Email address by tapping on cross icon in Sign up screen");	
			extent.extentLoggerFail("", "User is not able to remove the entered Email address by tapping on cross icon in Sign up screen");		
			}
	 navigateToHomePage();
	}					

	}
	
public void checkifUsernavigatetoSignupScreenByTappingonNextCTA__T989(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check if user navigate to Sign up screen by tapping on Next CTA in SIgn up screen");
	System.out.println("T989");
	extent.extentLogger("", "T989");
	

	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profilr Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	String year1995= getParameterFromXML("SelectYear1995");
	type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	click(HipiLoginPage.objSelectYear, "Select year");
	click(HipiLoginPage.objSelectYear, "Select year");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
	waitTime(2000);
	verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email Address Field");
	String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";
	type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
	Thread.sleep(5000);
	hideKeyboard();
	
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button Email Option");
	    
	  if(verifyElementPresent(HipiLoginPage.objSignUpTitle, "SignUp Title")) {
		logger.info("User is navigate to Sign up screen by tapping on Next CTA in SIgn up screen" );	
		extent.extentLoggerPass("", "User is navigate to Sign up screen by tapping on Next CTA in SIgn up screen" );
		}else {
		logger.info("User is navigate to Sign up screen by tapping on Next CTA in SIgn up screen");	
		extent.extentLoggerFail("", "User is navigate to Sign up screen by tapping on Next CTA in SIgn up screen");		
		}
		 navigateToHomePage();
	}
		}	


	public void selectCountryRegionScreen__T809(String userType,String text) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to search any country/region in Select country/region screen");
			System.out.println("T809");
			extent.extentLogger("", "T809");	
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
	       waitTime(2000);
	       verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
			waitTime(2000);
			hideKeyboard();
			verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
			verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
		
			type(HipiLoginPage.objSearchTab, text, "Search Country");
			 String searchText = getText(HipiLoginPage.objSearchTab);
			 if(verifyElementPresent(HipiLoginPage.objSearchCountry(text), "Search result")){
				 logger.info("User is able to search any country/region in Select country/region screen");	
					extent.extentLoggerPass("", "User is able to search any country/region in Select country/region screen" );
					}else {
					logger.info("User is not able to search any country/region in Select country/region screen");	
					extent.extentLoggerFail("", "User is not able to search any country/region in Select country/region screen");		
					}
			 navigateToHomePage();
		}
	}



	public void  searchBarbyTappingOnCrossIcon__T809(String userType,String text) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to search any country/region in Select country/region screen");
			System.out.println("T809");
			extent.extentLogger("", "T809");	
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
	       waitTime(2000);
	       verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
			waitTime(2000);
			hideKeyboard();
			verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
			verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
		
			type(HipiLoginPage.objSearchTab, text, "Search Country");
			 String searchText = getText(HipiLoginPage.objSearchTab);
			 verifyElementPresentAndClick(HipiLoginPage.objCrossIconInSearchBar, "Cross Icon");
			 String searchText1 = getText(HipiLoginPage.objSearchTab);
			 if (!searchText.equals(searchText1)) {
				 logger.info("User is able to remove the searched text by tapping on cross icon in Select country/region screen");	
					extent.extentLoggerPass("", "User is able to remove the searched text by tapping on cross icon in Select country/region screen" );
					}else {
					logger.info("User is not able to remove the searched text by tapping on cross icon in Select country/region screen");	
					extent.extentLoggerFail("", "User is not able to remove the searched text by tapping on cross icon in Select country/region screen");		
					}
			 navigateToHomePage();
			 
		}
	}

	public void countryRegionScreen__T946(String userType,String text) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to search any country/region in Select country/region screen");
			System.out.println("T946");
			extent.extentLogger("", "T946");	
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 	waitTime(2000);
		       verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
				waitTime(2000);
				hideKeyboard();
				verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
				verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
			
				type(HipiLoginPage.objSearchTab, text, "Search Country");
				 String searchText = getText(HipiLoginPage.objSearchTab);
				 if(verifyElementPresent(HipiLoginPage.objSearchCountry(text), "Search result")){
					 logger.info("User is able to search any country/region in Select country/region screen");	
						extent.extentLoggerPass("", "User is able to search any country/region in Select country/region screen" );
						}else {
						logger.info("User is not able to search any country/region in Select country/region screen");	
						extent.extentLoggerFail("", "User is not able to search any country/region in Select country/region screen");		
						}
				 navigateToHomePage();
		}	
	}

	
	public void tappingOnCrossIconInSelectCountry__T947(String userType,String text) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able remove the searched text in search bar by tapping on cross icon in Select country/region screen");
			System.out.println("T947");
			extent.extentLogger("", "T947");	
			navigateToSignUpScreen();
			waitTime(5000);
			 String year1995= getParameterFromXML("SelectYear1995");
			 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
			
			 click(HipiLoginPage.objSelectYear, "Select year");
			 click(HipiLoginPage.objSelectYear, "Select year");
			 hideKeyboard();
			 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
			 	waitTime(2000);
		       verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
				waitTime(2000);
				hideKeyboard();
				verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
				verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");
			
				type(HipiLoginPage.objSearchTab, text, "Search Country");
				 String searchText = getText(HipiLoginPage.objSearchTab);
				 verifyElementPresentAndClick(HipiLoginPage.objCrossIconInSearchBar, "Cross Icon");
				 String searchText1 = getText(HipiLoginPage.objSearchTab);
				 if (!searchText.equals(searchText1)) {
					 logger.info("User is able to remove the searched text by tapping on cross icon in Select country/region screen");	
						extent.extentLoggerPass("", "User is able to remove the searched text by tapping on cross icon in Select country/region screen" );
						}else {
						logger.info("User is not able to remove the searched text by tapping on cross icon in Select country/region screen");	
						extent.extentLoggerFail("", "User is not able to remove the searched text by tapping on cross icon in Select country/region screen");		
						}
				
				 navigateToHomePage();
				
				
				
		}
	}
	
	
	
	public void CreateNewAccount(String userType) throws Exception {
		navigateToSignUpScreen();
		waitTime(5000);
		 String year1995= getParameterFromXML("SelectYear1995");
		 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		 hideKeyboard();
		 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

			
			type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
			Thread.sleep(5000);
			hideKeyboard();
//		 hideKeyboard();
//		  String text = getText(AMDLoginScreen.objEmailIdField);
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
		waitTime(2000);
		verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
		 String fullName = getParameterFromXML("FullNmae");
		 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
		 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
		 String Password = getParameterFromXML("NonsubscribedPassword");
		 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
			waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 100);	
	
	}
	
	
	
	public void CreateUserNamePageUI__T999(String userType) throws Exception {
		

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the UI of the Create username page");
			System.out.println("T999");
			extent.extentLogger("", "T999");	
		
			CreateNewAccount(userType);
			
			if (verifyElementPresent(HipiLoginPage.objCreateUsername, "Create User name")) {
				 logger.info("User is navigate to Create username page by tapping on Complete CTA in Sign up screen");	
				 extent.extentLoggerPass("", "User is navigate to Create username page by tapping on Complete CTA in Sign up screen");
				 verifyElementPresent(HipiLoginPage.objTickMarkCreateScreen, "Tick Mark");
			}else {
				logger.info("User is not navigate to Create username page by tapping on Complete CTA in Sign up screen");	
				extent.extentLoggerFail("", "User is not navigate to Create username page by tapping on Complete CTA in Sign up screen");		
			}
			verifyElementPresent(HipiLoginPage.objSkipCTA, "Skip CTA");
			
			  verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
				 String SignupTitle1 = getText(HipiLoginPage.objSignUpTitle);
			     if (SignupTitle1.equals("Sign up")) {
			    logger.info(SignupTitle1 + " is displayed");	
				extent.extentLoggerPass("", SignupTitle1 + " is displayed" );
			     }
			     else {
			    	logger.info(SignupTitle1 + " is not displayed");	
					extent.extentLoggerPass("", SignupTitle1 + " is not displayed" );
			     }
			     verifyElementPresent(HipiLoginPage.objYouCanAlwaysChangeThisLater, "You Can Always Change This Later");
			     String youCanAlwaysChangeThisLate = getText(HipiLoginPage.objSignUpTitle);
			     if (youCanAlwaysChangeThisLate.equals("You can always change this later")) {
					    logger.info(youCanAlwaysChangeThisLate + " is displayed");	
						extent.extentLoggerPass("", youCanAlwaysChangeThisLate + " is displayed" );
					     }
					     else {
					    	logger.info(youCanAlwaysChangeThisLate + " is not displayed");	
							extent.extentLoggerPass("", youCanAlwaysChangeThisLate + " is not displayed" );
					     }
			     verifyElementPresent(HipiLoginPage.objSubmitButton, "Submit Button");
			     logOut();
			     navigateToHomePage();
		}
	}
	

	public void changeTheUsername__T1001(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to change the username in create username page");
			System.out.println("T1001");
			extent.extentLogger("", "T1001");	
		
			CreateNewAccount(userType);
			verifyElementPresentAndClick(HipiLoginPage.objDefaultUsername, "Default User name");
			String  enterName1= getText(HipiLoginPage.objDefaultUsername);
			clearField(HipiLoginPage.objDefaultUsername, "Clear Default User name");
			String name = getParameterFromXML("WithOutSpaceName");
			System.out.println(name);
			type(HipiLoginPage.objDefaultUsername, name, "Enter name");
			String  enterName= getText(HipiLoginPage.objDefaultUsername);
			 System.out.println(enterName);
			 if (!enterName.equals(enterName1)) {
				 logger.info("User is able to change the username in create username page");	
				 extent.extentLoggerPass("", "User is able to change the username in create username page");
			}else {
				logger.info("User is not able to change the username in create username page");	
				extent.extentLoggerFail("", "User is not able to change the username in create username page");		
			}	
//				navigateToHomePage();
			 logOut();
		navigateToHomePage();
		}
	}
	
	public void   googleLoginPopWithListOfGoogleAccount__T876(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to see the google login pop with list of google account which are present on the device.");
			System.out.println("T876");
			extent.extentLogger("", "T876");	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitTime(2000);waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Continue With Google CTA");
	waitTime(9000);
	List<WebElement> googleAccounts = getDriver().findElements(HipiLoginPage.objGoogleAccount);
	int size = googleAccounts.size();
	System.out.println(size);
	 logger.info("User is able to see the list of google account and number of google account list is " + size);
	   extent.extentLoggerPass("","User is able to see the list of google account and number of google account list is " + size);
	 navigateToHomePage();
	
		}
	}
	
	public void multipleOTPs__T842(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to request multiple OTPs");
			System.out.println("T842");
			extent.extentLogger("", "T842");	
	
		
	
	  verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//	  VerifyLoginPopUp();
	  waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
     verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
     waitTime(2000);
     

     verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
     waitTime(2000);

     verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("PhoneNumber");
 	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
 	hideKeyboard();
 	
 	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
 	waitTime(5000);
 	waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
	verifyElementPresentAndClick(HipiLoginPage.objSendAgain, "Send again");
	waitTime(4000);

	if(verifyElementPresent(HipiLoginPage.objResendOTPtextAllongWithTime,"Resend OTP text Allong With Time")) {
	 logger.info("User is be able to request multiple OTPs" );	
	 extent.extentLoggerPass("", "User is be able to request multiple OTPs" );
	}else {
	logger.info("User is not be able to request multiple OTPs");	
	extent.extentLoggerFail("", "User is not be able to request multiple OTPs");		
	}
	navigateToHomePage();
	
		}	
	}
	
	
	
	public void checktheUIoftheSignUpScreen__T990(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
	extent.HeaderChildNode("Check the UI of the Sign up screen");
	System.out.println("T990");
	extent.extentLogger("", "T990");
	navigateToSignUpScreen();
	waitTime(5000);
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
	 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
	 hideKeyboard();
	 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

		
		type(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
		Thread.sleep(5000);
		hideKeyboard();
//	 hideKeyboard();
//	  String text = getText(AMDLoginScreen.objEmailIdField);
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
	 waitTime(2000);
	 verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
	 verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
	 String SignupTitle = getText(HipiLoginPage.objSignUpTitle);
	 if (SignupTitle.equals("'Sign up")) {
	logger.info(SignupTitle + " is displayed");
	extent.extentLoggerPass("", SignupTitle + " is displayed" );
	}
	else {
	logger.info(SignupTitle + " is not displayed");
	extent.extentLoggerPass("", SignupTitle + " is not displayed" );
	}
	verifyElementPresent(HipiLoginPage.objForgotPasswordResetScreen,"Tell Us More To Serve You Better!");
	verifyElementPresent(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword, "User Your Name Gender and Other Info");
	String CompleteScreenMetaData = getText(HipiLoginPage.objUserYourNameGenderandOtherInfo);
	if (CompleteScreenMetaData.equals("Use your Name, Gender and other info for better result. You can update these info anytime")) {
	logger.info(CompleteScreenMetaData + " is displayed");
	extent.extentLoggerPass("", CompleteScreenMetaData + " is displayed" );
	}
	else {
	logger.info(SignupTitle + " is not displayed");
	extent.extentLoggerPass("", CompleteScreenMetaData + " is not displayed" );
	}
	verifyElementPresent(HipiLoginPage.objFullNameTextField,"Full Name field");
	verifyElementPresent(HipiLoginPage.objByContinuingMessage,"By default Male and along with down and up arrows");
	verifyElementPresent(HipiLoginPage.objCompleteCTA,"Complete CTA");
	}
	navigateToHomePage();
	}


	public void mobileNumberAndPassowrdCombination__T826(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the error message as \"The mobile number and passowrd combination was wrong during login\" when user enter invalid passowrd");
			System.out.println("T826");
			extent.extentLogger("", "T826");
		
			  verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			  VerifyLoginPopUp();
			  waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		     verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		     waitTime(2000);
			
		     verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		 	String phoneNumber = getParameterFromXML("PhoneNumber");
		 	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
		 	hideKeyboard();
		 	
		 	String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
		 	logger.info("User is able to type "  + checkPhoneNumber );	
		 	extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
		 	
		 	String Password = getParameterFromXML("InvalidePassword");
		 	
//		 	Thread.sleep(5000);
//		 	hideKeyboard();
		 	
		 	verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//		 	hideKeyboard();

		 	type(AMDLoginScreen.objPasswordField, Password, "Password field");
		 	hideKeyboard();

		 	String checkPassword = getText(HipiLoginPage.objPasswordTextField);
		 	verifyElementPresentAndClick(HipiLoginPage.objLoginButton, "Login Button");
		 	
		 	if(verifyElementPresent(HipiLoginPage.objTheMobileNumberAndPassowrdCombinationWasWrong, "The mobile number and passowrd combination was wrong")){
		 		 logger.info("User is get the error message as The mobile number and passowrd combination was wrong during login when entered wrong password" );	
		 		 extent.extentLoggerPass("", "User is get the error message as The mobile number and passowrd combination was wrong during login when entered wrong password" );
		 		}else {
		 		logger.info("User is not get the error message as The mobile number and passowrd combination was wrong during login when entered wrong password");	
		 		extent.extentLoggerFail("", "User is not get the error message as The mobile number and passowrd combination was wrong during login when entered wrong password");		
		 		}
		 	navigateToHomePage();
		 	}
		}
	
	
	
	
	public void eitherOTPIsNotValidHasExpiredMessage__T839(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the Either OTP is not valid or has expired message is displayed by tapping on Verify OTP when user entered invalid OTP");
			System.out.println("T839");
			extent.extentLogger("", "T839");
			
			  verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			  VerifyLoginPopUp();
			  waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		     verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		     waitTime(2000);
			 verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
	            waitTime(2000);
	       
	            verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	    		String phoneNumber = getParameterFromXML("PhoneNumber");
	        	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	        	hideKeyboard();
	        	
	        	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
	        	waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 100);
	        	verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Vrify OTP CTA");
	        	
	        	verifyElementPresentAndClick(HipiLoginPage.objFirstDigit, "First Digit");
	    		type(HipiLoginPage.objFirstDigit, "1", "Eneter first digit");
	    		hideKeyboard();
	    		verifyElementPresentAndClick(HipiLoginPage.objSecondDigit, "Second Digit");
	    		type(HipiLoginPage.objSecondDigit, "1", "Eneter Second digit");
	    		hideKeyboard();
	    		verifyElementPresentAndClick(HipiLoginPage.objThirdDigit, "Third Digit");
	    		type(HipiLoginPage.objThirdDigit, "1", "Eneter Thired digit");
	    		hideKeyboard();
	    		verifyElementPresentAndClick(HipiLoginPage.objFourthDigit, "Fourth Digit");
	    		type(HipiLoginPage.objFourthDigit, "1", "Eneter Fourth digit");
	    		hideKeyboard();
	    		verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
	    		
	    		if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
	    			 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
	    			 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
	    		}else {
	    			logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
	    			extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
	    		}
	    		navigateToHomePage();
		}
	}
	
	public void sentSuccessfullyMessageIsDisplayedByTappingOnSendAgain__T843(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if user is able to see the \"OTP sent successfully\" message is displayed by tapping on Send again link");
			System.out.println("T843");
			extent.extentLogger("", "T843");
			
			  verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			  VerifyLoginPopUp();
			  waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		     verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
		     waitTime(2000);
			 verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton, "Login With OTP Button");
	            waitTime(2000);
	       
	            verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	    		String phoneNumber = getParameterFromXML("PhoneNumber");
	        	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	        	hideKeyboard();
	        	
	        	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
	        	waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 100);
	        	verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Vrify OTP CTA");
	        	
	        	waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 100);
	    		verifyElementPresentAndClick(HipiLoginPage.objSendAgain, "Send again");
	    		
	    		if(verifyElementPresent(HipiLoginPage.objOTPSentSuccessfully, "OTP sent successfully")) {
	    			logger.info("User is get the message OTP sent successfully by tapping on Send again link");	
	    			extent.extentLoggerPass("", "User is get the message OTP sent successfully by tapping on Send again link");	
	    		    }else {
	    			logger.info("User is not get the message OTP sent successfully by tapping on Send again link");	
	    			extent.extentLoggerFail("", "User is not get the message OTP sent successfully by tapping on Send again link");	
	    	    }
	    		navigateToHomePage();
	    }	
		
	}
	
	public void userEnterInvalidPassword__T860(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the error message as \"The email address and passowrd combination was wrong during login\" when user enter invalid passowrd");
			System.out.println("T860");
			extent.extentLogger("", "T860");
			
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
			
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("InvalidePassword");
			
//			Thread.sleep(5000);
//			hideKeyboard();
			verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
			
			click(AMDLoginScreen.objEmailIdField, "Email field");
			hideKeyboard();

			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			hideKeyboard();
			
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			hideKeyboard();

			type(AMDLoginScreen.objPasswordField, Password, "Password field");
//			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
   			 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
   			 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
   		}else {
   			logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
   			extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
   		}
    		navigateToHomePage();
			
		}		
			
	}
	
	public void emailAddressAndPassowrdCombinationWasWongDuring__T859(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the error message as \"Please use valid email address\" when user enter invalid Email id");
			System.out.println("T859");
			extent.extentLogger("", "T859");
		
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		String Username = getParameterFromXML("InvalidEmailId");
		String Password = getParameterFromXML("NonsubscribedPassword");
		
//		Thread.sleep(5000);
//		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		
		click(AMDLoginScreen.objEmailIdField, "Email field");
		hideKeyboard();

		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		hideKeyboard();
		
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		hideKeyboard();

		type(AMDLoginScreen.objPasswordField, Password, "Password field");
//		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
			 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
			 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
		}else {
			logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
			extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
			}
			navigateToHomePage();
		
		}		
	}
	
	
	public void  UIOfTheListOfGoogleAccount__T879(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the UI of the list of google account which are present on the device.");
			System.out.println("T879");
			extent.extentLogger("", "T879");
		
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
				//Click on Google CTA
				verifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");
				waitTime(10000);
				
				verifyElementPresent(HipiLoginPage.objZEE5Logo, "Hipi Logo");
				verifyElementPresent(HipiLoginPage.objADDAnotherAccount, "ADD Another Account");
				
				
			
				verifyElementPresent(HipiLoginPage.objChoseAnAccount, "Chose An Account");
				String account = getText(HipiLoginPage.objChoseAnAccount);
				if (account.equals("Choose an account")) {
				logger.info(account + " is displayed");
				extent.extentLoggerPass("", account + " is displayed" );
				}
				else {
				logger.info(account + " is not displayed");
				extent.extentLoggerPass("", account + " is not displayed" );
				}
		
				verifyElementPresent(HipiLoginPage.objToContinueToHipi, "To Continue To Hipi");
				String toContinue = getText(HipiLoginPage.objToContinueToHipi);
				if (toContinue.equals("to continue to Hipi")) {
				logger.info(toContinue + " is displayed");
				extent.extentLoggerPass("", toContinue + " is displayed" );
				}
				else {
				logger.info(toContinue + " is not displayed");
				extent.extentLoggerPass("", toContinue + " is not displayed" );
				}
		
				verifyElementPresent(HipiLoginPage.objToContinueGoogleWillShare, "To Continue Google Will Share text");
				String continueGoogleWillShare = getText(HipiLoginPage.objToContinueGoogleWillShare);
				if (continueGoogleWillShare.equals("To continue, Google will share your name, email address, and profile picture with Hipi. Before using this app, review its privacy policy and terms of service.")) {
				logger.info(continueGoogleWillShare + " is displayed");
				extent.extentLoggerPass("", continueGoogleWillShare + " is displayed" );
				}
				else {
				logger.info(continueGoogleWillShare + " is not displayed");
				extent.extentLoggerPass("", continueGoogleWillShare + " is not displayed" );
				}
				
				List<WebElement> googleAccounts = getDriver().findElements(HipiLoginPage.objGoogleAccount);
				int size = googleAccounts.size();
				System.out.println(size);
				 logger.info("User is able to see the list of google account and number of google account list is " + size);
		  	   extent.extentLoggerPass("","User is able to see the list of google account and number of google account list is " + size);
		  	 
		  		navigateToHomePage();
		}
	}
	
	
	
	public void alreadyHaveAnAccountWithThisNumbner__T905(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if \"Already have an account with this numbner\" message is displayed and navigate to Login with Phone number scrren Send OTP CTA when user enter existing Phone number in Sign up with Phone Number screen");
			System.out.println("T905");
			extent.extentLogger("", "T905");
	
	
	navigateToSignUpScreen();
	waitTime(5000);
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("PhoneNumber");
 	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
 	hideKeyboard();
 	
 	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
	 
 	 
	 if(verifyElementPresent(HipiLoginPage.objOTPSentSuccessfully, "OTP sent successfully")) {
		logger.info("User is get the message OTP sent successfully by tapping on Send again link");	
		extent.extentLoggerPass("", "User is get the message OTP sent successfully by tapping on Send again link");	
	    }else {
		logger.info("User is not get the message OTP sent successfully by tapping on Send again link");	
		extent.extentLoggerFail("", "User is not get the message OTP sent successfully by tapping on Send again link");	
   }
	 
	 if (verifyElementPresent(HipiLoginPage.objLoginTitle,"Login Title")){
			logger.info("User is navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerPass("", "User is navigate to Log In screen on tapping Login in to HiPi CTA");
		}else {
			logger.info("User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			extent.extentLoggerFail("", "User is not navigate to Log In screen on tapping Login in to HiPi CTA");	
			}
	 navigateToHomePage();
		}
	 }
	
	public void tappingOnVerifyOTPWhenUserEnteredInvalidOTP__T911(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the \"Either OTP is not valid or has expired\" message is displayed by tapping on Verify OTP when user entered invalid OTP");
			System.out.println("T911");
			extent.extentLogger("", "T911");
	
	
	navigateToSignUpScreen();
	waitTime(5000);
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
		
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Again Send OTP Button");
		
	waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 100);
	verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Vrify OTP CTA");
	
	verifyElementPresentAndClick(HipiLoginPage.objFirstDigit, "First Digit");
	type(HipiLoginPage.objFirstDigit, "1", "Eneter first digit");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objSecondDigit, "Second Digit");
	type(HipiLoginPage.objSecondDigit, "1", "Eneter Second digit");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objThirdDigit, "Third Digit");
	type(HipiLoginPage.objThirdDigit, "1", "Eneter Thired digit");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objFourthDigit, "Fourth Digit");
	type(HipiLoginPage.objFourthDigit, "1", "Eneter Fourth digit");
	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
	
	if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
		 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
		 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
	}else {
		logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
		extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
	}
		navigateToHomePage();
		}
	}
	
	
	public void UIOftheResetScreen__T923(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the UI of the Reset screen");
			System.out.println("T923");
			extent.extentLogger("", "T923");
	
	
	navigateToSignUpScreen();
	waitTime(5000);
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
		
	  if (verifyElementPresent(HipiLoginPage.objLoginWithPassword, "Login With Password")) {
  		 logger.info("User is able to see the Login with OTP in Login with Phone Number screen" );	
  		 extent.extentLoggerPass("", "User is able to see theLogin with passwoed in Login with Phone Number screen" );
  	 }else {
  		logger.info("User is not able to see the Login with OTP in Login with Phone Number screen");	
  		extent.extentLoggerFail("", "User is able to see the Login with OTP in Login with Phone Number screen");		
  	  }
	  click(HipiLoginPage.objLoginWithPassword, "Login With Password");
	  verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
		
		verifyElementPresent(HipiLoginPage.objResetHeader, "Reset Text");
		 String ResetText = getText(HipiLoginPage.objResetHeader);
	     if (ResetText.equals("Reset")) {
	    logger.info(ResetText + " is displayed");	
		extent.extentLoggerPass("", ResetText + " is displayed" );
	     }
	     else {
	    	logger.info(ResetText + " is not displayed");	
			extent.extentLoggerPass("", ResetText + " is not displayed" );
	     }
		verifyElementPresent(HipiLoginPage.objForgotPasswordResetScreen, "Forgot Password Reset Screen");
		
		verifyElementPresent(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword, "We'll SMS You a OTP to Reset Your Password Text");
		String Text= getText(HipiLoginPage.objWellSMSYouaOTPtoResetYourPassword);
		if(Text.equals("We'll SMS You a OTP to Reset Your Password")) {
			logger.info(Text + " is displayed");	
			extent.extentLoggerPass("", Text + " is displayed" );
		     }
		     else {
		    	logger.info(Text + " is not displayed");	
				extent.extentLoggerPass("", Text + " is not displayed" );
		}
		verifyElementPresent(HipiLoginPage.objPlus91DropDwon, "Plus 91 Drop Dwon");
		verifyElementPresent(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		
		 if (verifyElementExist(HipiLoginPage.objResetButton, "Reset button")) {
			 logger.info("User is able to see the  Reset CTA");	
				extent.extentLoggerPass("","User is able to see the Reset CTA");	
		}else {
			 logger.info("User is not able to see the  Reset CTA");	
			 extent.extentLoggerFail("", "User is not able to see the  Reset CTA");
				
		}
		 navigateToHomePage();
		
		}
	}
	
	public void eitherOTPIsNotValidHasExpired__T927(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check the \"Either OTP is not valid or has expired\" message is displayed by tapping on Verify OTP when user entered invalid OTP");
			System.out.println("T927");
			extent.extentLogger("", "T927");
		
	navigateToSignUpScreen();
	waitTime(5000);
	 String year1995= getParameterFromXML("SelectYear1995");
	 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
	
	 click(HipiLoginPage.objSelectYear, "Select year");
	 click(HipiLoginPage.objSelectYear, "Select year");
	 hideKeyboard();
	 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
	 verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
		String phoneNumber = getParameterFromXML("PhoneNumber");
	type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	hideKeyboard();
	
	verifyElementPresentAndClick(HipiLoginPage.objSendOTP, "Send OTP Button");
		
	  if (verifyElementPresent(HipiLoginPage.objLoginWithPassword, "Login With Password")) {
  		 logger.info("User is able to see the Login with OTP in Login with Phone Number screen" );	
  		 extent.extentLoggerPass("", "User is able to see theLogin with passwoed in Login with Phone Number screen" );
  	 }else {
  		logger.info("User is not able to see the Login with OTP in Login with Phone Number screen");	
  		extent.extentLoggerFail("", "User is able to see the Login with OTP in Login with Phone Number screen");		
  	  }
	  click(HipiLoginPage.objLoginWithPassword, "Login With Password");
	  verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton, "Forgot Password link");
		waitTime(5000);
		verifyElementPresentAndClick(HipiLoginPage.objResetButton, "Reset CTA");
		waitTime(4000);
	  verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Vrify OTP CTA");
  	
  	verifyElementPresentAndClick(HipiLoginPage.objFirstDigit, "First Digit");
		type(HipiLoginPage.objFirstDigit, "1", "Eneter first digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objSecondDigit, "Second Digit");
		type(HipiLoginPage.objSecondDigit, "1", "Eneter Second digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objThirdDigit, "Third Digit");
		type(HipiLoginPage.objThirdDigit, "1", "Eneter Thired digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objFourthDigit, "Fourth Digit");
		type(HipiLoginPage.objFourthDigit, "1", "Eneter Fourth digit");
		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
		
		if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
			 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
			 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
		}else {
			logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
			extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
		}
		navigateToHomePage();
	
		}
	
	}
	
	public void ageShouldBeAbove18YearMessage__T940(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if the \"Age should be above 18 year\" message is displayed when user select less than 18 years");
			System.out.println("T940");
			extent.extentLogger("", "T940");
		
		navigateToSignUpScreen();

		 String year2017= getParameterFromXML("SelectYear2017");
		 type(HipiLoginPage.objSelectYear, year2017, "Type Year");
		
		 click(HipiLoginPage.objSelectYear, "Select year");
		 click(HipiLoginPage.objSelectYear, "Select year");
		 hideKeyboard();
		 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 
		if(verifyElementPresent(HipiLoginPage.objAgeShouldBeAbove18TosterMessage, "Toster Message")){
			logger.info("User is get the Age should be above 18 year message when selects less than 18 years");	
			extent.extentLoggerPass("", "User is get the Age should be above 18 year message when selects less than 18 years");
		}else {
			logger.info("User is not get the Age should be above 18 year message when selects less than 18 years");	
			extent.extentLoggerFail("", "User is not get the Age should be above 18 year message when selects less than 18 years");	
		}
		navigateToHomePage();	
		
		}
		
	}
	
	
	
	public void signUpScreenForEmail__T972(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")){
 		extent.HeaderChildNode("Check the UI of the Sign up screen for Email");
 		System.out.println("T972");
 		extent.extentLogger("", "T972");

 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
 		waitTime(2000);
 		verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");

 		 verifyElementPresent(HipiLoginPage.objSignUpTitle, "Signup Title text");
 		 String SignupTitle = getText(HipiLoginPage.objSignUpTitle);
 		 if (SignupTitle.equals("Sign up")) {
 		logger.info(SignupTitle + " is displayed");
 		extent.extentLoggerPass("", SignupTitle + " is displayed" );
 		}
 		else {
 		logger.info(SignupTitle + " is not displayed");
 		extent.extentLoggerPass("", SignupTitle + " is not displayed" );
 		}
 		 
 		verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
 		verifyElementPresent(HipiLoginPage.objWhensYourBirthDay, "Whens Your BirthDay Text");
 		 String whenYourBirthday  = getText(HipiLoginPage.objWhensYourBirthDay);
 		 if (whenYourBirthday.equals("When's your birthday?")) {
 		logger.info(whenYourBirthday + " is displayed");
 		extent.extentLoggerPass("", whenYourBirthday + " is displayed" );
 		}
 		else {
 		logger.info(whenYourBirthday + " is not displayed");
 		extent.extentLoggerPass("", whenYourBirthday + " is not displayed" );
 		}
		verifyElementPresent(HipiLoginPage.objNextButtonSignUpPage, "Next CTA");
 		verifyElementPresent(HipiLoginPage.objYourBirthdayWontBeShownPublicly, "Your Birthday Won't Be Shown Publicly Text");
 		String  yourBirthdaywont = getText(HipiLoginPage.objYourBirthdayWontBeShownPublicly);
 		 System.out.println(yourBirthdaywont);
 		 
 		 if (yourBirthdaywont.equals("Your birthday won't be shown publicly.")) {
 		logger.info(yourBirthdaywont + " is displayed");
 		extent.extentLoggerPass("", yourBirthdaywont + " is displayed" );
 		}
 		else {
 		logger.info(yourBirthdaywont + " is not displayed");
 		extent.extentLoggerPass("", yourBirthdaywont + " is not displayed" );
 		}
 		navigateToHomePage();
 		}
 		

	
	
	}

	
	public void UIOfTheListOfGoogleAccount__T1035(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")){
	 		extent.HeaderChildNode("Check the UI of the list of google account which are present on the device.");
	 		System.out.println("T1035");
	 		extent.extentLogger("", "T1035");

	 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	 		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	 		verifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	 		waitTime(2000);
	 		verifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");
			waitTime(10000);
			
			verifyElementPresent(HipiLoginPage.objZEE5Logo, "Hipi Logo");
			verifyElementPresent(HipiLoginPage.objADDAnotherAccount, "ADD Another Account");
			
			
		
			verifyElementPresent(HipiLoginPage.objChoseAnAccount, "Chose An Account");
			String account = getText(HipiLoginPage.objChoseAnAccount);
			if (account.equals("Choose an account")) {
			logger.info(account + " is displayed");
			extent.extentLoggerPass("", account + " is displayed" );
			}
			else {
			logger.info(account + " is not displayed");
			extent.extentLoggerPass("", account + " is not displayed" );
			}
	
			verifyElementPresent(HipiLoginPage.objToContinueToHipi, "To Continue To Hipi");
			String toContinue = getText(HipiLoginPage.objToContinueToHipi);
			if (toContinue.equals("to continue to Hipi")) {
			logger.info(toContinue + " is displayed");
			extent.extentLoggerPass("", toContinue + " is displayed" );
			}
			else {
			logger.info(toContinue + " is not displayed");
			extent.extentLoggerPass("", toContinue + " is not displayed" );
			}
	
			verifyElementPresent(HipiLoginPage.objToContinueGoogleWillShare, "To Continue Google Will Share text");
			String continueGoogleWillShare = getText(HipiLoginPage.objToContinueGoogleWillShare);
			if (continueGoogleWillShare.equals("To continue, Google will share your name, email address, and profile picture with Hipi. Before using this app, review its privacy policy and terms of service.")) {
			logger.info(continueGoogleWillShare + " is displayed");
			extent.extentLoggerPass("", continueGoogleWillShare + " is displayed" );
			}
			else {
			logger.info(continueGoogleWillShare + " is not displayed");
			extent.extentLoggerPass("", continueGoogleWillShare + " is not displayed" );
			}
			
			List<WebElement> googleAccounts = getDriver().findElements(HipiLoginPage.objGoogleAccount);
			int size = googleAccounts.size();
			System.out.println(size);
			 logger.info("User is able to see the list of google account and number of google account list is " + size);
	  	   extent.extentLoggerPass("","User is able to see the list of google account and number of google account list is " + size);
	  	 
	  		navigateToHomePage();
			}
		
	}
	
	
//===========================================Settings==========================================

//-=========================================================m===================================
public void checkForTheCTANatureOfChangeYourPassword_T745(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user -Check for the CTA nature of change your password_T745");
		System.out.println("T745");
		extent.extentLogger("Settings and privacy-ManageAccount_Password","T745");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
		waitTime(3000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword, "Change Password");
		if(verifyElementPresent(HipiSettingsPage.objChangePasswordHeader, "Change Password Screen")){
			logger.info("user is landing on change password screen");	
			extent.extentLoggerPass("Settings and privacy-ManageAccount_Password", "user is landing on change password screen");
		}else {
			logger.info("user is not landing on change password screen");	
			extent.extentLoggerFail("Settings and privacy-ManageAccount_Password", "user is not landing on change password screen");	
		}
		navigateToHomePage();
		
}
}

public void checkIfUserIsAbleToCreateAPassWordWithLessThan8Character_T747(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user -Check if User is able to create a password with less than 8 chacarter_T747");
		System.out.println("T747");
		extent.extentLogger("Settings and privacy-ManageAccount_Password","T747");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
		waitTime(3000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword, "Change Password");
		click(HipiSettingsPage.objOldPasswordField, "Old Password Field");
	String oldPassword = getParameterFromXML("oldpassword");
	type(HipiSettingsPage.objOldPasswordField, oldPassword, "Password Field");
	waitTime(3000);
	click(HipiSettingsPage.objNewPasswordField, "New Password Field");
	String newPassword = getParameterFromXML("newpassword");
	int password=newPassword.length();
	type(HipiSettingsPage.objNewPasswordField, newPassword, "Password Field");
	hideKeyboard();
	waitTime(2000);
	click(HipiSettingsPage.objSubmit, "Submit ");

		if(verifyElementPresent(HipiSettingsPage.objPasswordPromptMessage, "Password Prompt Message"))
	{
		logger.info("user is not able to change password succesfully as number of characters are less than 8");	
		extent.extentLoggerPass("Settings and privacy-ManageAccount_Password", "user is not able to change password succesfully as number of characters are less than 8");
	}else {
		logger.info("user is able to change password succesfully as number of characters are less than 8");	
		extent.extentLoggerFail("Settings and privacy-ManageAccount_Password", "user is able to change password succesfully as number of characters are less than 8");	
	} 
  navigateToHomePage();
	}
}
public void checkIfUserIsAbleToCreateAPasswordUsingOnlyOneCategoryLetters_T749(String userType) throws Exception //Doubts
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user -Check if user is able to create a password using only one category-Letters_T749");
		System.out.println("T749");
		extent.extentLogger("Settings and privacy-ManageAccount_Password","T749");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
		waitTime(3000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword, "Change Password");
		click(HipiSettingsPage.objOldPasswordField, "Old Password Field");
	String oldPassword = getParameterFromXML("oldpassword");
	type(HipiSettingsPage.objOldPasswordField, oldPassword, "Password Field");
	waitTime(3000);
	click(HipiSettingsPage.objNewPasswordField, "New Password Field");
	String newPassword = getParameterFromXML("newpassword2");
	int password=newPassword.length();
	System.out.println(newPassword);
	type(HipiSettingsPage.objNewPasswordField, newPassword, "password Field");
//String newpasswordtext =getAttributValue("text", HipiSettingsPage.objNewPasswordField);
//int newpasswordcount=newpasswordtext.length();
//System.out.println(newpasswordcount);
	hideKeyboard();
	waitTime(2000);
//	String NewPassword = getText(HipiSettingsPage.objNewPasswordField);
//	System.out.println(NewPassword);
	click(HipiSettingsPage.objSubmit, "Submit ");
//	 (str.matches("^[a-zA-Z]*$"))
//	String letters=("^[a-zA-Z]");
	
//	if (NewPassword.contains(".*[a-zA-Z].*"))
		if (newPassword.matches(".*[a-zA-Z].*"))
//	boolean result =newPassword.matches("[a-zA-Z]+");
//	if(result==true)
		//if(result)
//	if(letters.contains(newPassword))
	{
		logger.info("user is not able to create a new password using a single category:Letters");	
		extent.extentLoggerPass("Settings and privacy-ManageAccount_Password", "user is not able to create a new password using a single category:Letters");
	}else {
		logger.info("user is able to create a new password using a single category:Letters");	
		extent.extentLoggerFail("Settings and privacy-ManageAccount_Password", "user is able to create a new password using a single category:Letters");	
	} 
  navigateToHomePage();
	}
}

//================================================================




public void setPrivateAccount() throws Exception
{
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
	waitTime(2000);
	waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 1000);
	verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
	waitTime(2000);
	verifyElementPresentAndClick(HipiSettingsPage.objPrivacy,"Privacy");
	waitTime(2000);

	if(verifyElementExist(HipiSettingsPage.objToggleButtonOff,"Toggle Button Off"))
	{
		click(HipiSettingsPage.objToggleButtonOff,"Toggle On");
		logger.info("user is able to turn on the Private Account Toggle");
		navigateToHomePage();
	}else
	{
		logger.info("Acount is in Private Mode");
		navigateToHomePage();
	}
}
public void LoginAsUserBAndNavigateToHipi(String loginMethod) throws Exception {
	extent.HeaderChildNode("Login Functionality");
	String pUserType = getParameterFromXML("userType");
    System.out.println("Logging In as User B");
	extent.extentLogger("Login Type", "Login Type : " + pUserType);
	switch (loginMethod) {
	case "Guest":
		extent.HeaderChildNode("Guest User");
		extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
		waitTime(1000);
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);
		break;

	case "NonSubscribedUser":
		// navigateToIntroScreen_DisplaylangScreen();
		extent.HeaderChildNode("NonSubscribed User");
		
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);
		//click on Profile icon
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		Thread.sleep(5000);
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		String Username = getParameterFromXML("NonsubscribedUserName2");
		String Password = getParameterFromXML("NonsubscribedPassword2");
		
		Thread.sleep(5000);
//		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		Thread.sleep(5000);
		click(AMDLoginScreen.objEmailIdField, "Email field");
		hideKeyboard();
		Thread.sleep(5000);
		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		hideKeyboard();
		
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		hideKeyboard();

		type(AMDLoginScreen.objPasswordField, Password, "Password field");
//		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		
		waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
		//click on feed button
		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
		
		
		

		break;

	case "SubscribedUser":
		// navigateToIntroScreen_DisplaylangScreen();
		extent.HeaderChildNode("Login as Subscribed User");
		verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for free");
		String SubscribedUsername = getParameterFromXML("SubscribedUserName1");
		String SubscribedPassword = getParameterFromXML("SubscribedPassword1");

		Thread.sleep(5000);

		hideKeyboard();
		Thread.sleep(5000);
		click(AMDLoginScreen.objEmailIdField, "Email field");
		// getDriver().getKeyboard().sendKeys(Username);
		hideKeyboard();
		type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
		verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		waitTime(9000);

		if (verifyElementExist(AMDOnboardingScreen.objHipiButton, "HiPi")) {
			click(AMDOnboardingScreen.objHipiButton, "HiPi");
			Thread.sleep(6000);

		} else {

		}

		break;
	}
}	
public void navigateToPrivateAccountPageDis(String userType,String Title) throws Exception {
	logOut();
	LoginAsUserBAndNavigateToHipi("NonSubscribedUser");
	disablePrivateAccount();
	logOut();
	LoginAndNivigateToHipi(userType);
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(4000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
	waitTime(5000);
//	click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
	verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"First Suggested user");
	waitTime(3000);
	verifyElementPresentAndClick(HipiHomePage.objDescription, "User handle");

	waitUntilElementDisplayed(HipiProfilePage.objFollowingBackButton, 10);
	
	
}


public void navigateToPrivateAccountPage(String userType,String Title) throws Exception {
	logOut();
	LoginAsUserBAndNavigateToHipi("NonSubscribedUser");
	setPrivateAccount();
	logOut();
	LoginAndNivigateToHipi(userType);
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(4000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
	waitTime(5000);
//	click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
	verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"First Suggested user");
	waitTime(3000);
	verifyElementPresentAndClick(HipiHomePage.objDescription, "User handle");

	waitUntilElementDisplayed(HipiProfilePage.objFollowingBackButton, 10);
	
}
public void  verifyApprovedUsersCanFolowPrivateProfile_T757(String userType,String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("With 'Private account' enabled for a profile, only approved users can follow that profile");
		System.out.println("T757");
		extent.extentLogger("Creator", "T757");
		navigateToPrivateAccountPage(userType, Title);
		if(verifyElementExist(HipiProfilePage.objFollowCTAText,"Follow Icon"))
		{
			click(HipiProfilePage.objFollowCTAText,"following Icon");
			}else {
				logger.info("Approved users is able to Follow The private profile");	
				extent.extentLoggerPass("Profile screen", "Approved users is able to Follow The private profile");
			
		}
		waitTime(3000);
		if(verifyElementPresent(HipiDiscoverPage.objFollowingIcon,"following Icon"))
			{
				logger.info("Approved users is able to Follow The private profile");	
				extent.extentLoggerPass("Profile screen", "Approved users is able to Follow The private profile");
			}else {
				logger.info("Approved users is unable to Follow The private profile");	
				extent.extentLoggerFail("Profile screen", "Approved users is unable to Follow The private profile");
			}	
		navigateToHomePage();
		logOut();
	 }
}
public void  verifyApprovedUsersCanViewVideosOfPrivateProfile_T758(String userType,String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("With Private account enabled for a profile , only approved users can view vidoes of that profile");
		System.out.println("T758");
		extent.extentLogger("Creator", "T758");
		navigateToPrivateAccountPage(userType, Title);
		if(verifyElementPresent(HipiDiscoverPage.objFollowingIcon,"following Icon"))
		{
			logger.info("Approved users is able to view vidoes of the private profile");	
			extent.extentLoggerPass("Profile screen", "Approved users is able to view vidoes of the private profile");
			verifyElementPresent(HipiProfilePage.objFirstVideo,"First video");
		}else {
			logger.info("Approved users is unable to view vidoes of the private profile");	
			extent.extentLoggerFail("Profile screen", "Approved users is unable to view vidoes of the private profile");
		}
			
		navigateToHomePage();
		logOut();
	 }
}

public void  verifyApprovedUsersCanLikeVideosOfPrivateProfile_T759(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("With Private account enabled for a profile , only approved users can like videos of that profile");
		System.out.println("T759");
		extent.extentLogger("Creator", "T759");
		navigateToPrivateAccountPage(userType, Title);
		verifyElementPresent(HipiDiscoverPage.objFollowingIcon,"following Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
		String text1=getText(HipiProfilePage.objLikeCount);
		System.out.println(text1);
		verifyElementPresentAndClick(HipiProfilePage.objLikeIcon,"Like");
		String text2=getText(HipiProfilePage.objLikeCount);
		System.out.println(text2);
		if(!text1.equals(text2))
		{
			logger.info("Approved users Is able to like vidoes of the private profile");	
			extent.extentLoggerPass("Profile screen", "Approved users Is able to like vidoes of the private profile");
		}else {
			logger.info("Approved users Is unable to like vidoes of the private profile");	
			extent.extentLoggerFail("Profile screen", "Approved users Is unable to like vidoes of the private profile");
		}
		navigateToHomePage();
		logOut();
	 }
}

public void  verifyPrivateAccountDoesnotRestrictFollowViewAndLike_T760(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("To check if enabling Private account toggle restrict the follow , view and like permissions of existing followers");
		System.out.println("T760");
		extent.extentLogger("Creator", "T760");
		navigateToPrivateAccountPage(userType, Title);

		if(verifyElementPresent(HipiDiscoverPage.objFollowingIcon,"following Icon"))
		{
		verifyElementPresent(HipiProfilePage.objListOfLikes,"Likes");
		waitTime(2000);
		if(verifyElementPresent(HipiProfilePage.objFirstVideo,"View")){
			logger.info("Enabling Private account toggle is not restricting the follow , view and like permissions of existing followers");	
			extent.extentLoggerPass("Profile screen", "Enabling Private account toggle is not restricting the follow , view and like permissions of existing followers");
		}else {
			logger.info("Enabling Private account toggle is  restricting the follow , view and like permissions of existing followers");	
			extent.extentLoggerFail("Profile screen", "Enabling Private account toggle is  restricting the follow , view and like permissions of existing followers");
		}
		navigateToHomePage();
		logOut();
		}
	 }
}
public void disablePrivateAccount() throws Exception
{
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
	waitTime(2000);
	verifyElementPresentAndClick(HipiSettingsPage.objPrivacy,"Privacy");
	waitTime(2000);
//	String preference1="Private account OFF";
//	String preference2="Private account ON";
	if(verifyElementExist(HipiSettingsPage.objToggleButtonOn,"Toggle Button On"))
	{
		click(HipiSettingsPage.objToggleButtonOff,"Toggle off");
		logger.info("user is able to turn off the Private Account Toggle");
		navigateToHomePage();
		
	}else
	{
		logger.info("Acount is not in Private Mode");
		navigateToHomePage();	
	}
}



public void  verifyAnyUserCanFollowThePublicProfile_T761(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("With Private account disabled for a profile, anyone can follow that profile");
		System.out.println("T761");
		extent.extentLogger("Creator", "T761");
		navigateToPrivateAccountPageDis(userType, Title);
		
		if(verifyElementExist(HipiProfilePage.objFollowCTAText,"Follow Icon"))
		{
			click(HipiProfilePage.objFollowCTAText,"following Icon");
			}else {
				logger.info("Approved users is able to Follow The private profile");	
				extent.extentLoggerPass("Profile screen", "Approved users is able to Follow The private profile");
		}
		
		if(verifyElementDisplayed(HipiProfilePage.objSubFollowingButton))
		{
//			verifyElementPresentAndClick(HipiProfilePage.objFollowUnfollow,"Unfollowing");
//			waitTime(2000);
//			verifyElementPresentAndClick(HipiProfilePage.objFollowUnfollow,"following");
			logger.info("Any user is able to follow, The user's profile while private account toggle is disabled");	
			extent.extentLoggerPass("Profile screen", "Any user is able to follow, The user's profile while private account toggle is disabled");
			
		}else
		{
			logger.info("Any user is unable to follow, The user's profile while private account toggle is disabled");	
			extent.extentLoggerFail("Profile screen", "Any user is unable to follow, The user's profile while private account toggle is disabled");	
		}
		navigateToHomePage();
		logOut();
	 }
	 
	}
public void  verifyAnyUserCanViewVideosOfPublicProfile_T762(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("With Private account disabled for a profile, anyone can view vidoes of that profile");
		System.out.println("T762");
		extent.extentLogger("Creator", "T762");
		navigateToPrivateAccountPageDis(userType, Title);

		if(verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video"))
		{
			logger.info("Any user is able to view vidoes of The user profile while private account  toggle is disabled");	
			extent.extentLoggerPass("Profile screen", "Any user is able to view vidoes of The user profile while private account  toggle is disabled");
			
		}else
		{
			logger.info("Any user is unable to view vidoes of The user profile while private account  toggle is disabled");	
			extent.extentLoggerFail("Profile screen", "Any user is unable to view vidoes of The user profile while private account  toggle is disabled");	
		}
		navigateToHomePage();
		logOut();
	 } 
}

public void  verifyAnyUserCanLikeVideosOfPublicProfile_T763(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("With Private account disabled for a profile, anyone can like content of that profile");
		System.out.println("T763");
		extent.extentLogger("Creator", "T763");
		navigateToPrivateAccountPageDis(userType, Title);

		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
		waitTime(2000);
		String text1=getText(HipiProfilePage.objLikeCount);
		verifyElementPresentAndClick(HipiProfilePage.objLikeIcon,"Like");
		waitTime(2000);
		String text2=getText(HipiProfilePage.objLikeCount);
		if(text1!=text2)
		{
			logger.info("Any user is able to like content of The user's profile While private account toggle is disabled");	
			extent.extentLoggerPass("Profile screen", "Any user is able to like content of The user's profile While private account toggle is disabled");
		}else {
			logger.info("Any user is unable to like content of The user's profile While private account toggle is disabled");	
			extent.extentLoggerFail("Profile screen", "Any user is unable to like content of The user's profile While private account toggle is disabled");
		}
		navigateToHomePage();
		logOut();
	 } 
}

public void  verifyUserAbleToDownloadVideoWhileDownloadVideosSetToOn_T764(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to download content of a creator if Allow your videos to be donwloaded is turned on");
		System.out.println("T764");
		extent.extentLogger("Creator", "T764");
		logOut();
		LoginAsUserBAndNavigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objPrivacy,"Privacy");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objDownloadYourVideoButton,"Allow Your Videos To be Donloaded -Off");
		verifyElementPresentAndClick(HipiSettingsPage.objDownloadYourVideoButton,"Allow Your Videos To be Donloaded-On");
		navigateToHomePage();
		logOut();
		LoginAndNivigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(4000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		waitTime(5000);
//		click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"First Suggested user");
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objDescription, "User handle");

		waitUntilElementDisplayed(HipiProfilePage.objFollowingBackButton, 10);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
		waitTime(3000);
		longPress(HipiHomePage.objPlayerScreen);
		verifyElementPresentAndClick(HipiHomePage.objSaveVideo," Save Video");
		verifyElementDisplayed(HipiCreateVideoPage.objCreatePermissionVideo);
		if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
//			Thread.sleep(2000);
			}else {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
				
			}
		if(verifyElementDisplayed(HipiHomePage.objVideoSaved))
		{
			logger.info("User  is able to download content of the creator if user 'Allow your vidoes to be donwloaded' is set to 'on'");	
			extent.extentLoggerPass("Profile screen", "User  is able to download content of the creator if user 'Allow your vidoes to be donwloaded' is set to 'on'");
		}else {
			logger.info("User  is unable to download content of the creator if user 'Allow your vidoes to be donwloaded' is set to 'on'");	
			extent.extentLoggerFail("Profile screen", "User  is unable to download content of the creator if user 'Allow your vidoes to be donwloaded' is set to 'on'");
		}
		navigateToHomePage();
		logOut();
}
}

public void  verifyUserAbleToLikeVideoWhenLikingVideoIsSetToEveryOne_T766(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if users are able to like videos when content creator has set value of Who can like your videos to Everyone");
		System.out.println("T766");
		extent.extentLogger("Creator", "T766");
		logOut();
		LoginAsUserBAndNavigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objPrivacy,"Privacy");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objLikePrivacy,"Who can like Your Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objLikeEveryOne,"Every one");
		navigateToHomePage();
		logOut();
		LoginAndNivigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(4000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		waitTime(5000);
//		click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"First Suggested user");
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objDescription, "User handle");

		waitUntilElementDisplayed(HipiProfilePage.objFollowingBackButton, 10);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
		waitTime(3000);
		String text1=getText(HipiProfilePage.objLikeCount);
		verifyElementPresentAndClick(HipiProfilePage.objLikeIcon,"Like");
		waitTime(2000);
		String text2=getText(HipiProfilePage.objLikeCount);
		if(text1!=text2)
		{
			logger.info("User is able to like content of this creator if the creator has set 'Who can like your videos' to 'Everyone'");	
			extent.extentLoggerPass("Profile screen", "User is able to like content of this creator if the creator has set 'Who can like your videos' to 'Everyone'");
		}else {
			logger.info("User is unable to like content of this creator if the creator has set 'Who can like your videos' to 'Everyone'");	
			extent.extentLoggerFail("Profile screen", "User is unable to like content of this creator if the creator has set 'Who can like your videos' to 'Everyone'");
		}
		navigateToHomePage();
		logOut();
}
}


public void  verifyUserAbleToShareVideoWhenDuetVideoIsSetToEveryOne_T768(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if users are able to duet videos when content creator has set value of 'Who can Duet your videos' to 'Everyone'");
		System.out.println("T768");
		extent.extentLogger("Creator", "T768");
		logOut();
		LoginAsUserBAndNavigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objPrivacy,"Privacy");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objDuetPrivacy,"Who can Duet Your Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objLikeEveryOne,"Every one");
		navigateToHomePage();
		logOut();
		LoginAndNivigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(4000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		waitTime(5000);
//		click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"First Suggested user");
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objDescription, "User handle");

		waitUntilElementDisplayed(HipiProfilePage.objFollowingBackButton, 10);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objPrivateTabShareButton,"Share");
		if(verifyElementDisplayed(HipiProfilePage.objprivateTabShareToTitle))
		{
			logger.info("User is able to share content of this creator if the creator has set 'Who can Duet your videos' to 'Everyone'");	
			extent.extentLoggerPass("Feed screen", "User is able to share content of this creator if the creator has set 'Who can Duet your videos' to 'Everyone'");
		}else {
			logger.info("User is unable to share content of this creator if the creator has set 'Who can Duet your videos' to 'Everyone'");	
			extent.extentLoggerFail("Feed screen", "User is unable to share content of this creator if the creator has set 'Who can Duet your videos' to 'Everyone'");
		}
		navigateToHomePage();
		logOut();
}
}

public void  verifyUserAbleToShareVideoWhenDuetVideoIsSetToEveryOne_T770(String userType, String Title) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if users are able to copmment on your videos when content creator has set value of 'Who can comment on your videos' to 'Everyone'");
		System.out.println("T770");
		extent.extentLogger("Creator", "T770");
		logOut();
		LoginAsUserBAndNavigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objPrivacy,"Privacy");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objCommentPrivacy,"Who can Comment Your Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objLikeEveryOne,"Every one");
		navigateToHomePage();
		logOut();
		LoginAndNivigateToHipi("NonSubscribedUser");
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(4000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, Title, "Type value");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
//		click(HipiDiscoverPage.objkeyboardSearchbutton,"key board search Button");
		waitTime(2000);
//		click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser,"First Suggested user");
		waitTime(3000);
		waitUntilElementDisplayed(HipiDiscoverPage.objFollowingIcon, 10);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
		waitTime(3000);
		
		verifyElementPresentAndClick(HipiHomePage.objCommentICON,"Comment Icon");
		if(verifyElementDisplayed(HipiHomePage.objAddAComment))
		{
			logger.info("User is able to comment on vidoes of this creator if the creator has set 'Who can comment on your videos' to 'Everyone'");	
			extent.extentLoggerPass("Feed screen", "User is able to comment on vidoes of this creator if the creator has set 'Who can comment on your videos' to 'Everyone'");
		}else {
			logger.info("User is unable to comment on vidoes of this creator if the creator has set 'Who can comment on your videos' to 'Everyone'");	
			extent.extentLoggerFail("Feed screen", "User is unable to comment on vidoes of this creator if the creator has set 'Who can comment on your videos' to 'Everyone'");
		}
		navigateToHomePage();
}
}
public void  verifyUserAbleToShareVideoOverSocialMedia_T772(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to share his profile over various social media platforms(Facebook, whatsapp, telegram, messanger, Hangout, twitter and instagram are top priorities)");
		System.out.println("T772");
		extent.extentLogger("Creator", "T772");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		if(verifyElementPresentAndClick(HipiSettingsPage.objShareProfile,"Share Profile"))
		{
			logger.info("User is able to share his/her profile over social media platforms using 'Share profile' option");	
			extent.extentLoggerPass("Feed screen", "User is able to share his/her profile over social media platforms using 'Share profile' option");
		}else {
			logger.info("User is unable to share his/her profile over social media platforms using 'Share profile' option");	
			extent.extentLoggerFail("Feed screen", "User is unable to comment on vidoes of this creator if the creator has set 'Who can comment on your videos' to 'Everyone'");
		}
		navigateToHomePage();
	 }
}
//Check if for the UI of Help center screen_T778
public void  verifyUiOfHelpCenterScreen_T778(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to share his profile over various social media platforms(Facebook, whatsapp, telegram, messanger, Hangout, twitter and instagram are top priorities)");
		System.out.println("T778");
		extent.extentLogger("Creator", "T778");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objHelpCenter,"help Center");
		waitTime(2000);
if(verifyElementPresent(HipiSettingsPage.objHipiLogo,"Hipi Logo"))
{
	verifyElementPresent(HipiSettingsPage.objHelpCenterTitle,"Help center Title");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objSearchFieldInHelpCenter,"Help center Search Field");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objgettingstarted,"Getting Started");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objGettingStartedFirstLink,"Get to Know Hipi");
	waitTime(2000);
	Swipe("UP",1);
	verifyElementPresent(HipiSettingsPage.objmyaccountHipi,"My account");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objMyaccountFirstLink,"How do I sign in For HiPI");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objstepitup,"Step It Up");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objStepItUpFirstLink,"Perform a hipi action");
	waitTime(2000);
	Swipe("UP",1);
	verifyElementPresent(HipiSettingsPage.objneedhelp,"Need Help");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objNeedHelpFirstLink,"My Hipi Account");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objquicklinks,"Quick Links");
	waitTime(2000);
	verifyElementPresent(HipiSettingsPage.objQuickLinksFirstLink,"Community standards");
	waitTime(2000);
	Swipe("UP",1);
	verifyElementPresent(HipiSettingsPage.objConnectWithUs,"Connect With Us");
	verifyElementPresent(HipiSettingsPage.objConnectWithUsFacebook,"Connect With Us facebook");
	verifyElementPresent(HipiSettingsPage.objConnectWithUsTwitter,"Connect With Us Twitter");
	verifyElementPresent(HipiSettingsPage.objConnectWithUsInstagram,"Connect With Us Instagram");
	verifyElementPresent(HipiSettingsPage.objRightsReserved,"@2020 Zee Digital All rights reserved");
}
navigateToHomePage();
	 }
}
//Check if the available hyperlinks are landing user to relevant information_T780
public void  verifyHiperLinksOfHelpCentre_T780(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if the available hyperlinks are landing user to relevant information");
		System.out.println("T780");
		extent.extentLogger("Creator", "T780");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objHelpCenter,"help Center");
		waitTime(3000);
		verifyElementPresentAndClick(HipiSettingsPage.objGettingStartedFirstLink,"Get to Know Hipi");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objLandingScreenHiperlinkOfHelpCentre))
		{
			logger.info("User is able to redirected to relevant information based on the hyperlink on what user has tapped");	
			extent.extentLoggerPass("Settings page", "User is redirected to relevant information based on the hyperlink on what user has tapped");
		}else {
			logger.info("User is unable to redirected to relevant information based on the hyperlink on what user has tapped");	
			extent.extentLoggerFail("Settings page", "User is unable to redirected to relevant information based on the hyperlink on what user has tapped");	
			
		}
		navigateToHomePage();
	 }
}
//Check if tapping on "Terms Of USe" is taking user to specific screen with relevant information_T787
public void  verifyNavigationOfTermsOfUse_T787(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if tapping on Terms Of USe is taking user to specific screen with relevant information");
		System.out.println("T787");
		extent.extentLogger("Creator", "T787");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objTermsOfUse,"Terms Of Use");
		waitTime(5000);
		if(verifyElementDisplayed(HipiSettingsPage.objTermsOfUseHeaderScreen))
		{
			logger.info("Tapping on 'Terms of Use' user is able to navigate to respective screen with community guidelines details");	
			extent.extentLoggerPass("Settings page", "Tapping on 'Terms of Use' user is able to navigate to respective screen with community guidelines details");
		}else {
			logger.info("Tapping on 'Terms of Use' user is unable to navigate to respective screen with community guidelines details");	
			extent.extentLoggerFail("Settings page", "Tapping on 'Terms of Use' user is unable to navigate to respective screen with community guidelines details");
		}
		navigateToHomePage();
	 }
}
//Check if back button available on top left corner is functional for user_T790
public void  verifyUserIsNavigatedToSettingsScreenByTappingBackButton_T790(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if back button available on top left corner is functional for user");
		System.out.println("T790");
		extent.extentLogger("Creator", "T790");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objTermsOfUse,"Terms Of Use");
		waitTime(5000);
		verifyElementPresent(HipiSettingsPage.objTermsOfUseHeaderScreen,"Terms of use Header Screen");
		verifyElementPresentAndClick(HipiSettingsPage.objTermsOfUseBackButton,"Terms Of Use Back Button");
		if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy))
		{
			logger.info("User is able to move back to 'Setting ad Privacy' screen after tapping on back button icon on top left corner of the screen.");	
			extent.extentLoggerPass("Settings page", "User is able to move back to 'Setting ad Privacy' screen after tapping on back button icon on top left corner of the screen.");
		}else {
			logger.info("User is unable to move back to 'Setting ad Privacy' screen after tapping on back button icon on top left corner of the screen.");	
			extent.extentLoggerFail("Settings page", "User is unable to move back to 'Setting ad Privacy' screen after tapping on back button icon on top left corner of the screen.");
		}
		navigateToHomePage();
	 }
}


public void  verifyUserLandsOnChangePasswordScreen_T745(String userType) throws Exception {	
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check for the CTA nature of change your password");
		System.out.println("T745");
		extent.extentLogger("Creator", "T745");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objChangePasswordHeader))
			{
				logger.info("User is able to land on change password screen");	
				extent.extentLoggerPass("Settings screen", "User is able to land on change password screen");
			}else {
				logger.info("User is unable to land on change password screen");	
				extent.extentLoggerFail("Settings screen", "User is unable to land on change password screen");
			}	
		navigateToHomePage();
	 }
}



public void  verifyUsercanCreatePasswordWithLettersNumbersAndSpecialCharacters_T752(String userType) throws Exception {
	String oldPassword="123456";
	String newPassword="abc@123";
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to create a password using combination of all 3 categories :: letters. numbers and special characters");
		System.out.println("T752");
		extent.extentLogger("Creator", "T752");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objChangePasswordHeader))
			{
				logger.info("User is able to land on change password screen");	
				extent.extentLoggerPass("Settings screen", "User is able to land on change password screen");
			}else {
				logger.info("User is unable to land on change password screen");	
				extent.extentLoggerFail("Settings screen", "User is unable to land on change password screen");
			}	
		verifyElementPresentAndClick(HipiSettingsPage.objOldPasswordField,"Old Pasword");
		type(HipiSettingsPage.objOldPasswordField,oldPassword,"old password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objNewPasswordField,"New Pasword");
		type(HipiSettingsPage.objNewPasswordField,newPassword,"New password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit button");
		if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy)) 
		{
			logger.info("User is able to create a new password using combination of all 3 categories : letters. numbers and special characters");	
			extent.extentLoggerPass("Settings screen", "User is able to create a new password using combination of all 3 categories : letters. numbers and special characters");
		}else {
			logger.info("User is unable to create a new password using combination of all 3 categories : letters. numbers and special characters");	
			extent.extentLoggerFail("Settings screen", "User is unable to create a new password using combination of all 3 categories : letters. numbers and special characters");
		}	
		navigateToHomePage();	
		resetPassword(newPassword,oldPassword);
		
	 }
}
public void resetPassword(String oldpword,String Newpword) throws Exception
{
	click(AMDHomePage.objProfileIcon,"Profile");
	waitTime(1000);
	click(HipiProfilePage.objThreeDots,"Three Dots");
	waitTime(1000);
	click(HipiSettingsPage.objChangePassword,"Change Password");
	waitTime(1000);
	click(HipiSettingsPage.objOldPasswordField,"Old Pasword");
	type(HipiSettingsPage.objOldPasswordField,oldpword,"old password");
	waitTime(1000);
	click(HipiSettingsPage.objNewPasswordField,"New Pasword");
	type(HipiSettingsPage.objNewPasswordField,Newpword,"New password");
	waitTime(1000);
	click(HipiSettingsPage.objSubmit,"Submit button");
	if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy)) 
	{
		logger.info("User is able to reset password");	
		extent.extentLoggerPass("Settings screen", "User is unable to reset password");
	}else {
		logger.info("User is able to reset password");	
		extent.extentLoggerFail("Settings screen", "User is unable to reset password");
	}	
	navigateToHomePage();
}

public void  verifyUsercanCreatePasswordWithLettersAndNumbers_T753(String userType) throws Exception {
	String oldPassword="123456";
	String newPassword="abc123";
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("User should be able to create a new password using combination of 2 categories : letters and numbers");
		System.out.println("T753");
		extent.extentLogger("Creator", "T753");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objChangePasswordHeader))
			{
				logger.info("User is able to land on change password screen");	
				extent.extentLoggerPass("Settings screen", "User is able to land on change password screen");
			}else {
				logger.info("User is unable to land on change password screen");	
				extent.extentLoggerFail("Settings screen", "User is unable to land on change password screen");
			}	
		verifyElementPresentAndClick(HipiSettingsPage.objOldPasswordField,"Old Pasword");
		type(HipiSettingsPage.objOldPasswordField,oldPassword,"old password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objNewPasswordField,"New Pasword");
		type(HipiSettingsPage.objNewPasswordField,newPassword,"New password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit button");
		if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy)) 
		{
			logger.info("User is able to create a new password using combination of 2 categories : letters and numbers");	
			extent.extentLoggerPass("Settings screen", "User is able to create a new password using combination of 2 categories : letters and numbers");
		}else {
			logger.info("User is unable to create a new password using combination of 2 categories : letters and numbers");	
			extent.extentLoggerFail("Settings screen", "User is unable to create a new password using combination of 2 categories : letters and numbers");
		}	
		navigateToHomePage();	
		resetPassword(newPassword,oldPassword);
		
	 }
}
public void  verifyUsercanCreatePasswordWithLettersAndSpecialCharacters_T754(String userType) throws Exception {
	String oldPassword="123456";
	String newPassword="abc@##";
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to create a password using combination of only 2 categories :: letters and special characters");
		System.out.println("T754");
		extent.extentLogger("Creator", "T754");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objChangePasswordHeader))
			{
				logger.info("User is able to land on change password screen");	
				extent.extentLoggerPass("Settings screen", "User is able to land on change password screen");
			}else {
				logger.info("User is unable to land on change password screen");	
				extent.extentLoggerFail("Settings screen", "User is unable to land on change password screen");
			}	
		verifyElementPresentAndClick(HipiSettingsPage.objOldPasswordField,"Old Pasword");
		type(HipiSettingsPage.objOldPasswordField,oldPassword,"old password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objNewPasswordField,"New Pasword");
		type(HipiSettingsPage.objNewPasswordField,newPassword,"New password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit button");
		if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy)) 
		{
			logger.info("User is able to create a new password using combination of 2 categories : letters and special characters");	
			extent.extentLoggerPass("Settings screen", "User is able to create a new password using combination of 2 categories : letters and special characters");
		}else {
			logger.info("User is unable to create a new password using combination of 2 categories : letters and special characters");	
			extent.extentLoggerFail("Settings screen", "User is unable to create a new password using combination of 2 categories : letters and special characters");
		}	
		navigateToHomePage();	
		resetPassword(newPassword,oldPassword);		
	 }
}
//Check if user is able to create a password using combination of only 2 categories :: numbers and special characters_T755
public void  verifyUsercanCreatePasswordWithNumbersAndSpecialCharacters_T755(String userType) throws Exception {
	String oldPassword="123456";
	String newPassword="123@##";
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to create a password using combination of only 2 categories :: Numbers and special characters");
		System.out.println("T755");
		extent.extentLogger("Creator", "T755");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objChangePasswordHeader))
			{
				logger.info("User is able to land on change password screen");	
				extent.extentLoggerPass("Settings screen", "User is able to land on change password screen");
			}else {
				logger.info("User is unable to land on change password screen");	
				extent.extentLoggerFail("Settings screen", "User is unable to land on change password screen");
			}	
		verifyElementPresentAndClick(HipiSettingsPage.objOldPasswordField,"Old Pasword");
		type(HipiSettingsPage.objOldPasswordField,oldPassword,"old password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objNewPasswordField,"New Pasword");
		type(HipiSettingsPage.objNewPasswordField,newPassword,"New password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit button");
		if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy)) 
		{
			logger.info("User is able to create a new password using combination of 2 categories : Numbers and special characters");	
			extent.extentLoggerPass("Settings screen", "User is able to create a new password using combination of 2 categories : Numbers and special characters");
		}else {
			logger.info("User is unable to create a new password using combination of 2 categories : Numbers and special characters");	
			extent.extentLoggerFail("Settings screen", "User is unable to create a new password using combination of 2 categories : Numbers and special characters");
		}	
		navigateToHomePage();	
		resetPassword(newPassword,oldPassword);		
	 }
}
public static int countCharacters(String a) {      
    int count = 0;    
        
    //Counts each character except space    
    for(int i = 0; i < a.length(); i++) {    
        if(a.charAt(i) != ' ')    
            count++;    
    }    
        
    //returns the total number of characters present in the given string    
    return count;   
}    
   
//Check if User is able to create a password with less than 6 chacarter_T747
public void  verifyUsercanCreatePasswordWithLessThanSixCharacter_T747(String userType) throws Exception {
	String oldPassword="123456";
	String newPassword="1234";
	 if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("Check if user is able to create a password using combination of only 2 categories :: Numbers and special characters");
		System.out.println("T747");
		extent.extentLogger("Creator", "T747");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objThreeDots,"Three Dots");
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
		waitTime(2000);
		if(verifyElementDisplayed(HipiSettingsPage.objChangePasswordHeader))
			{
				logger.info("User is able to land on change password screen");	
				extent.extentLoggerPass("Settings screen", "User is able to land on change password screen");
			}else {
				logger.info("User is unable to land on change password screen");	
				extent.extentLoggerFail("Settings screen", "User is unable to land on change password screen");
			}	
		verifyElementPresentAndClick(HipiSettingsPage.objOldPasswordField,"Old Pasword");
		type(HipiSettingsPage.objOldPasswordField,oldPassword,"old password");
		waitTime(1000);
		verifyElementPresentAndClick(HipiSettingsPage.objNewPasswordField,"New Pasword");
		type(HipiSettingsPage.objNewPasswordField,newPassword,"New password");
		waitTime(1000);
		int count=countCharacters(newPassword);
		waitTime(2000);
		verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit button");
		if(count<6 && verifyElementDisplayed(HipiSettingsPage.objWrongPasswordPopup)) 
		{
			logger.info("User is not able to change password successfully as number of chacraters are less than 6");	
			extent.extentLoggerPass("Settings screen", "User is not able to change password successfully as number of chacraters are less than 6");
		}else {
			logger.info("User is able to change password successfully as number of chacraters are less than 6");	
			extent.extentLoggerFail("Settings screen", "User is able to change password successfully as number of chacraters are less than 6");
		}	
		navigateToHomePage();		
	 }
}
//=====================================Profile(P2)===================================================================

public void VerifyuserisabletoclickonallowctaAllowZee5HiPiaccessyourcontact__T1223(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode(" Logged in user - Check user is able to click on allow cta Allow Zee5 HiPi access your contact _ T1223");
		System.out.println("T1223");
		extent.extentLogger("Profile", "T1223");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindContact, "Find Contact Text");
		allowPermissions();
		waitTime(5000);
		if(verifyElementExist(HipiDiscoverPage.objListOFContact, "List of contact")){
			logger.info("Pop-up should get disappear and users contact list should be displayed");	
			extent.extentLoggerPass("", "Pop-up should get disappear and users contact list should be displayed");
			}
		else if(verifyElementExist(HipiProfilePage.objNoContactAvalible, "no contact contact"))
		{
			logger.info("Pop-up should get disappear and no contact avalible should be displayed");	
			extent.extentLoggerPass("", "Pop-up should get disappear and no contact avalible should be displayed");
			}
		}
		else {
			logger.info("Pop-up not disappear and users contact list not displayed");	
			extent.extentLoggerFail("", "Pop-up not disappear and users contact list not displayed");	
		}
		
		navigateToHomePage();
		
	}

public void VerifyuserisabletoclickonallowctaAllowZee5HiPiaccessyourAllFriends__T1208(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode(" Logged in user - Check user is able to click on allow cta Allow Zee5 HiPi access your All friends _ T1208");
		System.out.println("T1208");
		extent.extentLogger("Profile", "T1208");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriendsText, "Invite Friends Text");
		allowPermissions();
		waitTime(5000);
		if(verifyElementPresent(HipiDiscoverPage.objAllFriends, "All Friends")){
			logger.info("Pop-up should get disappear and users Friends list should be displayed");	
			extent.extentLoggerPass("", "Pop-up should get disappear and users Friends list should be displayed");
		}else {
			logger.info("Pop-up not disappear and users Friends list not displayed");	
			extent.extentLoggerFail("", "Pop-up not disappear and users Friends list not displayed");	
		}
		
		navigateToHomePage();
		
	}
}

public void Verifythehashtagisremovedfromprofilefavourites__T1173(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode(" Logged in user -Check the hashtag is removed from profile favourites _ T1173");
		System.out.println("T1173");
		extent.extentLogger("Profile", "T1173");
		longPress(HipiHomePage.objPlayerScreen);
		Thread.sleep(5000);
		verifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "Add To Favourites");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Save Video");
		verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "Hashtags tab");
		String HashTagName = getText(HipiDiscoverPage.objhashtagepageasSearchresultpage);
		System.out.println(HashTagName);
		verifyElementPresentAndClick(HipiDiscoverPage.objhashtagepageasSearchresultpage, "Hashtags image");
		verifyElementPresentAndClick(HipiDiscoverPage.objAddedToFavouritesbutton,"Added to Favourites " );
		verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
		if(HashTagName != null)
		{
			logger.info("Hashtag not removed from profile favourites");	
			extent.extentLoggerFail("", "Hashtag not removed from profile favourites");
		}else {
			logger.info("Hashtag should be removed from profile favourites");	
			extent.extentLoggerPass("", "Hashtag should be removed from profile favourites");	
		}
		
		navigateToHomePage();			
	}
}

public void VerifyifDraftvideosofloggedinuserarenotvisibleforNormalUser__T1133(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode(" Logged in user -Check if Draft videos of logged in user are not visible for Normal User _ T1133");
		System.out.println("T1133");
		extent.extentLogger("Profile", "T1133");
		addvideoDraft();
		logOut();
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		
		verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
		
		String Username = getParameterFromXML("NonsubscribedUserName1");
		String Password = getParameterFromXML("NonsubscribedPassword1");
		
//		Thread.sleep(5000);
//		hideKeyboard();
		verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		
		click(AMDLoginScreen.objEmailIdField, "Email field");
		hideKeyboard();

		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		hideKeyboard();
		
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		hideKeyboard();

		type(AMDLoginScreen.objPasswordField, Password, "Password field");
//		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		
		waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
		//click on feed button
		verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
		
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
		verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		waitTime(4000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
		String val = getParameterFromXML("Kartheek9");
		type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
		verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
		verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser, "First user");
		if(checkElementExist(HipiProfilePage.objDraftVideos,"Draft Video"))
		{
			logger.info("Draft videos of logged in user are  visible for Normal User");	
			extent.extentLoggerFail("", "Draft videos of logged in user are  visible for Normal User");
		}else {
			logger.info("Draft videos of logged in user are not visible for Normal User");	
			extent.extentLoggerPass("", "Draft videos of logged in user are not visible for Normal User");	
		}
		
		navigateToHomePage();	
	}
}

public void checkWhetherSoundIsRemovedFromFavoriteOrNot_T1172(String userType) throws Exception //Jira ID
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check whether sound is removed from favorite or not_T1172");
		System.out.println("T1172");
		extent.extentLogger("profile_Bookmark", "T1172 ");
		addToFavrite(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
		verifyElementPresentAndClick(HipiProfilePage.objBookmarkIcon, "Bookmark Icon");
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundsTab, "Sounds Tab");
		String HashTagName = getText(HipiDiscoverPage.objhashtagepageasSearchresultpage);
		System.out.println(HashTagName);
		click(HipiDiscoverPage.objThreeLinesDetailsInSoundTab, "Sounds");
		
		verifyElementPresentAndClick(HipiDiscoverPage.objAddedToFavouritesbutton,"Added to Favourites " );
		verifyElementPresentAndClick(HipiSoundDetailPage.objBackArrow, "Back Arrow");
		if(HashTagName != null)
		{
			logger.info("Hashtag not removed from profile favourites");	
			extent.extentLoggerFail("", "Hashtag not removed from profile favourites");
		}else {
			logger.info("Hashtag should be removed from profile favourites");	
			extent.extentLoggerPass("", "Hashtag should be removed from profile favourites");	
		}
		
		navigateToHomePage();
}
}

public void checkUserIsAbleToSeeAllHisPrivateVideo_T1184(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to see all his private video");
		System.out.println("T1184");
		extent.extentLogger("Profile_Private-video", "T1184 ");
		addprivatevideo(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		if(verifyElementPresent(HipiProfilePage.objPrivateTabVideoSelect, "Private Tab Video"))
			{
				logger.info("All private videos is displayed under private tab");
		extent.extentLoggerPass("Profile_Private-video", "All private videos is displayed under private tab");
		}else {
		logger.info("All private videos is not displayed under private tab");
		extent.extentLoggerFail("Profile_Private-video", "All private videos is not displayed under private tab");
		
			}
		navigateToHomePage();
}
}

public void checkWhetherPopupGetsDisappearByTappingDeviceBackButton_T1192(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check whether pop-up gets disappear by tapping device back button_T1192");
		System.out.println("T1192");
		extent.extentLogger("Profile_Private-video", "T1192 ");
//		addprivatevideo(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		waitTime(5000);
		click(HipiProfilePage.objPrivateTabVideoSelect, "Private Tab Video");
		waitTime(5000);
		longPress(HipiHomePage.objPlayerScreen);
		
		Back(1);
		waitTime(3000);
		if(verifyElementExist(HipiProfilePage.objOptionsInPrivateTab, "Options In Private Tab"))
		{
			logger.info("pop-up is not getting disappeared by tapping on device back");
			extent.extentLoggerFail("Profile_Private-video", "pop-up is not getting disappeared by tapping on device back");
		}
		else {
			logger.info("pop-up is getting disappeared by tapping on device back");
			extent.extentLoggerPass("Profile_Private-video", "pop-up is getting disappeared by tapping on device back");
		}
		
		navigateToHomePage();
}
}


public void checkUserCanLikePrivateVideoOrNot_T1193(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user can like private video or not_T1193");
		System.out.println("T1193");
		extent.extentLogger("Profile_Private-video", "T1193 ");
//		addprivatevideo(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		click(HipiProfilePage.objPrivateTabVideo, "Private Tab Video");
		String countbeforereliking=getAttributValue("text",HipiProfilePage.objLikeButtonText );
		System.out.println(countbeforereliking);
		verifyElementPresentAndClick(HipiProfilePage.objLikeIcon, "Like Button");
		String countafterliking=getAttributValue("text",HipiProfilePage.objLikeButtonText );
		System.out.println(countafterliking);
		if(!countbeforereliking.equals(countafterliking))
		{
			logger.info("user is able to like the private video");
			extent.extentLoggerPass("Profile_Private-video", "user is able to like the private video");
		}
		else {
			logger.info("user is not able to like the private video");
			extent.extentLoggerFail("Profile_Private-video", "user is not able to like the private video");
		}
		navigateToHomePage();
		
}
}

public void checkIfUserCanCommentOnPrivateVideo_T1194(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check if user can comment on private video_T1194");
		System.out.println("T1194");
		extent.extentLogger("Profile_Private-video", "T1194");
//		addprivatevideo(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
//		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
		waitTime(5000);
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		click(HipiProfilePage.objPrivateTabVideo, "Private Tab Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objCommentButtonInPrivateTab, "Comment Button ");
		verifyElementPresent(HipiProfilePage.objCommentTitleInPrivateTab, "Comment Title");
		waitTime(3000);
		click(HipiProfilePage.objAddToComments, "Add To Comments");
		
		type(HipiProfilePage.objAddToComments, "HI", "Comment Bar");
		String textbeforecommenting	= getText(HipiProfilePage.objAddToComments);
		System.out.println(textbeforecommenting);
		waitTime(3000);
		click(HipiProfilePage.objAddingPost, "Adding Post");
		String textaftercommenting	= getText(HipiProfilePage.objCommentBoxText);
		System.out.println(textaftercommenting);
		if(textaftercommenting.contains(textbeforecommenting))
		{
			logger.info("own user is able to comment on  video");
			extent.extentLoggerPass("Profile_Private-video", "own user is able to comment on  video");
		}
		else {
			logger.info("own user is not able to comment on  video");
			extent.extentLoggerFail("Profile_Private-video", "own user is not able to comment on  video");
		}
		navigateToHomePage();
	
	

}
}



public void checkWhetherCommentScreenGetClosedByTappingCrossButtonInPrivateVideo_T1196(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check whether comment screen get closed by tapping cross button in private video_T1196");
		System.out.println("T1196");
		extent.extentLogger("Profile_Private-video", "T1196");
//		addprivatevideo(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		click(HipiProfilePage.objPrivateTabVideo, "Private Tab Video");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objCommentButtonInPrivateTab, "Comment Button ");
		verifyElementPresent(HipiProfilePage.objCommentTitleInPrivateTab, "Comment Screen");
		verifyElementPresentAndClick(HipiProfilePage.objCommentCloseButton, "Close Button");
		if(verifyElementExist(HipiProfilePage.objCommentTitleInPrivateTab, "Comment Title"))
		{
			logger.info("comment screen is not getting disappeared by tapping on cross button");
			extent.extentLoggerFail("Profile_Private-video", "comment screen is not getting disappeared by tapping on cross button");
		}
		else {
			logger.info("comment screen is  getting disappeared by tapping on cross button");
			extent.extentLoggerPass("Profile_Private-video", "comment screen is getting disappeared by tapping on cross button");
		}
		navigateToHomePage();
}
}

public void checkUserIsAbleToSeeShareButtonInPrivateVideoOrNot_T1197(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user -Check user is able to see share button in private video or not_T1197");
		System.out.println("T1197");
		extent.extentLogger("Profile_Private-video", "T1197");
//		addprivatevideo(userType);
		waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		//waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		click(HipiProfilePage.objPrivateTabVideo, "Private Tab Video");
		waitTime(3000);
		
		if(verifyElementPresent(HipiProfilePage.objShareOption, "Share Option "))
		{
			
				logger.info("share option of the private video is getting displayed");
				extent.extentLoggerPass("Profile_Private-video", "share option of the private video is getting displayed");
			
		}
			else
			{
				logger.info("share option of the private video is not getting displayed");
				extent.extentLoggerFail("Profile_Private-video", "share option of the private video is not getting displayed");
			}
		navigateToHomePage();

}
}

public void checkByTappingDeviceBackShareOptionShouldGetDisappear_T1200(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check by tapping device back share option should get disappear_T1200");
		System.out.println("T1200");
		extent.extentLogger("Profile_Private-video", "T1200");
//		addprivatevideo(userType);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
		click(HipiProfilePage.objPrivateTabVideo, "Private Tab Video");
		waitTime(3000);
		click(HipiProfilePage.objShareOption, "Share Option");
		waitTime(6000);
		Back(1);
		waitTime(4000);
		if(verifyElementExist(HipiProfilePage.objShareOption, "Share Option"))
		{
			logger.info("when user taps on device back button share widget is getting disappeared");
			extent.extentLoggerPass("Profile_Private-video", "when user taps on device back button share widget is getting disappeared");
			
		}else
		{
			logger.info("when user taps on device back button share widget is not getting disappeared");
			extent.extentLoggerFail("Profile_Private-video", "when user taps on device back button share widget is not getting disappeared");
		}
		navigateToHomePage();
}
}


public void checkUserIsAbleToClickOnAllowCtaOnAllowZee5HipiTakePictureAndRecordVideo_T1207(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on Allow cta on Allow Zee5 HiPi take picture and record video_T1207");
		System.out.println("T1207");
		extent.extentLogger("Profile_Invite Friends","T1207");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
		waitTime(3000);
		if(verifyElementPresent(HipiCreateVideoPage.objCreateAllow, "Allow Permissions"))
			click(HipiCreateVideoPage.objCreateAllow, "Allow Button");
		waitTime(2000);
			String AllowPermission=getText(HipiCreateVideoPage.objCreateAllow);
			System.out.println(AllowPermission);
		if(verifyElementPresent(HipiCreateVideoPage.objCreateAllow, "Allow Permission Text"))
		{
			logger.info("user is navigated to access your contact popup "+AllowPermission);
			extent.extentLoggerPass("Profile_Invite Friends", "user is navigated to access your contact popup "+AllowPermission);
			click(HipiProfilePage.objAllowButton,"Allow Button");

		}else
		{
			logger.info("user is not navigated to access your contact popup ");
			extent.extentLoggerFail("Profile_Invite Friends", "user is not navigated to access your contact popup");
		}	

//		navigateToHomePage();
}
	
	
}

public void checkUserIsAbleToClickOnDenyCtaOnAllowZee5HipiTakePictureAndRecordVideo_T1210(String userType) throws Exception //Doubt
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on Deny cta on Allow Zee5 HiPi take picture and record video _T1210");
		System.out.println("T1210");
		extent.extentLogger("Profile_Invite Friends","T1210");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objCreateAllow, "Allow Permissions");
		for(int i=0;i<=15;i++)
		{
			waitTime(2000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
		{
			verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny");
		}else
		{
			break;
		}
		}
		if(verifyElementPresent(HipiCreateVideoPage.objAlertAfterDenying,"Deny Permission popup"))
		{
			logger.info("User permissions required to continue cta popup is getting displayed");
			extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
			
			click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
		}else
		{
			logger.info("User permissions required to continue  cta popup is not getting displayed");
			extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed");
		}	
//			click(HipiProfilePage.objDenyButton, "Deny Button");
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText, "Allow permission");
		
//		String AllowPermission=getText(HipiProfilePage.objAllowPermissionText);
//		System.out.println(AllowPermission);
//		click(HipiProfilePage.objDenyButton, "Deny Button");
//		if(verifyElementPresent(HipiProfilePage.objAllowPermissionText, "Allow Permission Text"))
//		{
//		
//			click(HipiProfilePage.objAllowButton,"Allow Button");
//			waitTime(2000);
//			click(HipiProfilePage.objPermissionsOkButton,"Ok");
//
//		}else
//		
//			{
//				
//			}	
//			click(HipiProfilePage.objDenyButton," ");
//			
//			navigateToHomePage();
		
}
}

public void checkUserIsAbleToClickOnDenyCtaAllowZee5HipiAccessYourContact_T1211(String userType) throws Exception//Doubt 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on Deny cta Allow Zee5 HiPi access your contact_T1211");
		System.out.println("T1211");
		extent.extentLogger("Profile_Invite Friends","T1211");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText, "Allow permission");
//		click(HipiProfilePage.objDenyButton, "Deny Button");
//		waitTime(1000);
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText, "Allow permission");
//		click(HipiProfilePage.objDenyButton, "Deny Button");
//		String Permissions=getText(HipiProfilePage.objpermissionsRequiredText);
//		System.out.println(Permissions);
//		if(verifyElementPresent(HipiProfilePage.objPermissionsOkButton, "Permissions Ok Button"))
		verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow PopUp ");
		for(int i=0;i<=15;i++)
		{
			waitTime(2000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
		{
			verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny");
		}else
		{
			break;
		}
		}
		waitTime(3000);
		if(verifyElementPresent(HipiCreateVideoPage.objAlertAfterDenying,"Deny Permission popup"))
		{
			logger.info("User permissions required to continue cta popup is getting displayed");
			extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
			
			click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
		}else
		{
			logger.info("User permissions required to continue  cta popup is not getting displayed");
			extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed");
		}	
		
//		navigateToHomePage();

}
}


public void checkUserIsAbleToClickOnAllowCtaOnAllowZee5HipiAccessYourContact_T1208(String userType) throws Exception//Doubt 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on allow cta Allow Zee5 HiPi access your contact_T1208");
		System.out.println("T1208");
		extent.extentLogger("Profile_Invite Friends","T1208");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile screen");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends ");
		if(verifyElementPresent(HipiProfilePage.objDenyButton, "Allow PopUp"))
			allowPermissions();

//			click(HipiProfilePage.objAllowButton, "Allow Button");
//		String AllowPermission=getText(HipiProfilePage.objAllowPermissionText);
//		System.out.println(AllowPermission);
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText, "Allow permission");
//		click(HipiProfilePage.objAllowButton, "Allow Button");
		waitTime(3000);
		if(verifyElementPresent(HipiProfilePage.objInviteFriendsHeaders, "Invite Friends Header"))
		{
			logger.info("popup is getting disappeared and users friends list is displayed");
			extent.extentLoggerPass("Profile_Invite Friends", "popup is getting disappeared and users friends list is displayed");
		}else
		{
			logger.info("popup is visible and users friends list is not displayed");
			extent.extentLoggerFail("Profile_Invite Friends", "popup is visible and users friends list is not displayed");
		}	
//		navigateToHomePage();
}
}
public void checkWhetherPermissionPopupGetsDisplayedOrNot_T1213(String userType) throws Exception//Doubt //covered
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check whether permission pop-up gets displayed or not_T1213");
		System.out.println("T1213");
		extent.extentLogger("Profile_Invite Friends","T1213");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends ");
		allowPermissions();
		waitTime(2000);
		if(verifyElementPresent(HipiProfilePage.objInviteFriendsHeaders, "Invite Friends Header"))
{
//		if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hipi to take pictures and record video?"))
//		{
//			logger.info("Permission dialog:"+ "Allow hipi to take pictures and record video?");
//			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
//			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
//			logger.info("Allow hipi to take pictures and record video-"+ "Allow button clicked");
//			extent.extentLoggerPass("Profile_InviteFriends", "user is getting permission pop-up  ");
//
//			Thread.sleep(5000);
//		}else {
//			logger.info("User is not getting permission pop-up  ");	
//			extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
//	
//		}	
//			if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hiPi access your contacts?")) {
//			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");		
//			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow hiPi access your contacts? and"+ "Permission popup has been displayed");
			extent.extentLoggerPass("Profile_InviteFriends", "Allow hiPi access your contacts? and"+ "Permission popup has been displayed");
//
//			Thread.sleep(5000);
			}else {
				logger.info("User is not getting permission pop-up  ");	
				extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
//			
			}
		
//		navigateToHomePage();
	}
}

public void checkIfUserIsAbleToClickOnCTAOnAllowAllRequiredPermissionPopup_T1220(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on OK CTA on allow all required permission pop up _T1220");
		System.out.println("T1220");
		extent.extentLogger("Profile_Invite Friends","T1220");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("User is navigated to profile Screen");	
			extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
		}else {
			logger.info("user is not navigated to profile screen");	
			extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
		}
		verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
		waitTime(3000);
		for(int i=0;i<=15;i++)
		{
			waitTime(2000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
		{
			verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny Permission");
		}else
		{
			break;
		}
		}
//		verifyElementPresent(HipiProfilePage.objAllowHipiTakePictures,"Allow Hipi Take Pictures");
//		click(HipiProfilePage.objDenyButton, "Deny Button");
//		waitTime(3000);
//		verifyElementPresent(HipiProfilePage.objAllowHipiAccessContacts, "Allow Hipi Access Contacts");
//		click(HipiProfilePage.objDenyButton,"Deny Button");
		verifyElementPresentAndClick(HipiProfilePage.objPermissionsOkButton, "Permissions Ok Button");
		waitTime(3000);
		if(verifyElementPresent(HipiProfilePage.objAppInfo, "AppInfo Header")){
			logger.info("User is navigated to app info screen");	
			extent.extentLoggerPass("Profile_InviteFriends", "User is navigated to app info screen");
		}else {
			logger.info("User is not navigated to app info screen");	
			extent.extentLoggerFail("Profile_InviteFriends", "User is not navigated to app info screen");	
		}
//		navigateToHomePage();
	}
}
public void checkWhetherPermissionPopupGetsDisplayedOrNot_T1221(String userType) throws Exception//Doubt //covered in Tc T1213
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check whether permission pop-up gets displayed or not_T1221");
		System.out.println("T1221");
		extent.extentLogger("Profile_Invite Friends","T1221");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindContacts, "Find Contacts");
		if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hipi to take pictures and record video?"))
		{
			logger.info("Permission dialog:"+ "Allow hipi to take pictures and record video?");
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow hipi to take pictures and record video-"+ "Allow button clicked");
			extent.extentLoggerPass("Profile_InviteFriends", "user is getting permission pop-up  ");

			Thread.sleep(5000);
		}else {
			logger.info("User is not getting permission pop-up  ");	
			extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
	
		}	
			if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hiPi access your contacts?")) {
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");		
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow hiPi access your contacts?"+ "Allow button clicked");
			extent.extentLoggerPass("Profile_InviteFriends", "user is getting permission pop-up  ");

			Thread.sleep(5000);
			}else {
				logger.info("User is not getting permission pop-up  ");	
				extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
			
			}
		
//		navigateToHomePage();

}
}
public void checkWhetherPermissionPopupGetsDisplayedOrNot_T1222(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on Allow cta on Allow Zee5 HiPi take picture and record video ?_T1222");
		System.out.println("T1222");
		extent.extentLogger("Profile_Invite Friends","T1222");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objFindContacts, "Find Contacts");
		waitTime(3000);
		verifyElementPresent(HipiCreateVideoPage.objCreateAllow, "Allow permission");
//		allowPermissions();
		click(HipiCreateVideoPage.objCreateAllow, "Allow Button");
		String AllowPermission=getText(HipiCreateVideoPage.objCreatePermissionVideo);
		System.out.println(AllowPermission);
		if(verifyElementPresent(HipiCreateVideoPage.objCreateAllow, "Allow Permission"))
		{
			logger.info("user is navigated to access your contact popup "+AllowPermission);
			extent.extentLoggerPass("Profile_Invite Friends", "user is navigated to access your contact popup");
//			click(HipiProfilePage.objAllowButton,"Allow Button");
		}else
		
			{
				logger.info("user is navigated to access your contact popup "+AllowPermission);
				extent.extentLoggerFail("Profile_Invite Friends", "user is navigated to access your contact popup");
			}	
			
//			click(HipiProfilePage.objPermissionsOkButton," ");
//			navigateToHomePage();

}
}

public void checkUserIsAbleToClickOnAllowCtaAllowZee5HipiAccessYourContact_T1223(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on allow cta Allow Zee5 HiPi access your contact_T1223");
		System.out.println("T1223");
		extent.extentLogger("Profile_Invite Friends","T1223");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objFindContacts, "Find Contacts");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objCreateAllow, "Allow permission");
		click(HipiCreateVideoPage.objCreateAllow, "Allow Button");
		allowPermissions();
		waitTime(3000);
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText, "Allow permission");
//		click(HipiProfilePage.objAllowButton, "Allow Button");
//		waitTime(3000);
		if(verifyElementPresent(HipiProfilePage.objInviteFriendsHeaders, "invite friends headline"))
		{
			logger.info("popup is getting disappeared and users contact list is displayed");
			extent.extentLoggerPass("Profile_Invite Friends", "popup is getting disappeared and users contact list is displayed");
		}else
		{
			logger.info("popup is not getting disappeared and users contact list is not displayed");
			extent.extentLoggerFail("Profile_Invite Friends", "popup is not getting disappeared and users contact list is not displayed");
		}	
//		navigateToHomePage();
	}
}
public void checkWhetherPermissionPopupGetsDisplayedOrNot_T1224(String userType) throws Exception //iFindContact --> Find Contacts 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check whether permission pop-up gets displayed or not_T1224");
		System.out.println("T1224");
		extent.extentLogger("Profile_Invite Friends","T1224");
		waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Invite Icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindContacts, "Find Contacts");
		if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hipi to take pictures and record video?"))
		{
			logger.info("Permission dialog:"+ "Allow hipi to take pictures and record video?");
			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
			click(HipiCreateVideoPage.objCreateAllow, "Allow button ");
			logger.info("Allow hipi to take pictures and record video-has been displayed");
			extent.extentLoggerPass("Profile_InviteFriends", "Allow hipi to take pictures and record video-has been displayed");

			Thread.sleep(2000);
		}else {
			logger.info("User is not getting permission pop-up  ");	
			extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
	
		}	
			if(verifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow hiPi access your contacts?")) {
//			verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");		
			click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow hiPi access your contacts? has been displayed");
			extent.extentLoggerPass("Profile_InviteFriends", "Allow hiPi access your contacts? has been displayed");

			Thread.sleep(2000);
			}else {
				logger.info("User is not getting permission pop-up  ");	
				extent.extentLoggerFail("Profile_InviteFriends", "User is not getting permission pop-up ");
			
			}
		
		navigateToHomePage();

}
}

public void checkUserIsAbleToClickOnDenyCtaOnAllowZee5HipiTakePictureAndRecordVideo_T1225(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on Deny cta on  Allow Zee5 HiPi take picture and record video ?_T1225");
		System.out.println("T1225");
		extent.extentLogger("Profile_Invite Friends","T1225");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("User is navigated to profile Screen");	
			extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
		}else {
			logger.info("user is not navigated to profile screen");	
			extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
		}
		verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindContacts, "Find Contacts");
		verifyElementPresent(HipiCreateVideoPage.objCreatePermissionVideo,"Allow Permission");
		click(HipiProfilePage.objDenyButton, "Deny Button");
		String AllowPermission=getText(HipiCreateVideoPage.objCreatePermissionVideo);
		System.out.println(AllowPermission);
		if(verifyElementPresent(HipiCreateVideoPage.objCreatePermissionVideo, "Allow Permission Popup"))
		{
			logger.info("user is navigated to access your contact popup and"+AllowPermission + " is displayed" );
			extent.extentLoggerPass("Profile_Invite Friends", "user is navigated to access your contact popup");
			Back(1);
//			click(HipiProfilePage.objAllowButton,"Allow Button");
			click(HipiProfilePage.objPermissionsOkButton," Okay Button");
		}else
		
			{
				logger.info("user is navigated to access your contact popup "+AllowPermission + " is not displayed");
				extent.extentLoggerFail("Profile_Invite Friends", "user is navigated to access your contact popup");
			}	
			
//		navigateToHomePage();
		
}
}
public void checkUserIsAbleToClickOnDenyCtaOnAllowZee5HipiAccessYourContact_T1226(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to click on Deny cta Allow Zee5 HiPi access your contact_T1226");
		System.out.println("T1226");
		extent.extentLogger("Profile_Invite Friends","T1226");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
			logger.info("User is navigated to profile Screen");	
			extent.extentLoggerPass("Profile_InviteFriends", "user is navigated to profile screen ");
		}else {
			logger.info("user is not navigated to profile screen");	
			extent.extentLoggerFail("Profile_InviteFriends", "user is not navigated to profile screen");	
		}
		verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find frinds icon");
		verifyElementPresentAndClick(HipiProfilePage.objFindContacts, "Find Contacts");
		verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button ");
		for(int i=0;i<=15;i++)
		{
			waitTime(2000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objCreateAllow))
		{
			verifyElementPresentAndClick(HipiCreateVideoPage.objCreateDeny, "Deny");
		}else
		{
			break;
		}
		}
		if(verifyElementPresent(HipiCreateVideoPage.objAlertAfterDenying,"Deny Permission popup"))
			{
				logger.info("User permissions required to continue cta popup is getting displayed");
				extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
				click(HipiProfilePage.objPermissionsOkButton," ok button");
			}else
			{
				logger.info("User permissions required to continue  cta popup is not getting displayed");
				extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed");
			}
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText,"Allow permission");
//		click(HipiProfilePage.objDenyButton, "Deny Button");
//		verifyElementPresent(HipiProfilePage.objAllowPermissionText,"Allow permission");
//		click(HipiProfilePage.objDenyButton, "Deny Button");
//		String Permissions=getText(HipiProfilePage.objpermissionsRequiredText);
//		System.out.println(Permissions);
//		if(verifyElementPresent(HipiProfilePage.objPermissionsOkButton, "Permissions Ok Button"))
//		{
//			logger.info("User permissions required to continue cta popup is getting displayed"+Permissions);
//			extent.extentLoggerPass("Profile_Invite Friends", "User permissions required to continue  cta popup is getting displayed");
//			click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
//		}else
//		{
//			logger.info("User permissions required to continue  cta popup is not getting displayed");
//			extent.extentLoggerFail("Profile_Invite Friends", "User permissions required to continue  cta popup is not getting displayed"+Permissions);
//		}
//		navigateToHomePage();
		}
}

public void checkUserIsAbleToRemoveVideoFromDraftListOfLoggedInUserForUpload_T1116(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user- Check draft video is not deleted when tapped on No_T1116");
		System.out.println("T1116");
		extent.extentLogger("Profile_Draft","T1116");
		
//		waitTime(8000);
// 		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
// 		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
// 		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
// 		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo,2000);
// 		for(int i=1;i<=1;i++)
// 		{
// 			verifyElementExist(HipiProfilePage.objDraftsVideo, "draft video");
// 			
// 			verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
// 			}
// 			else
// 			{
// 			Back(1);
// 			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
// 			break;
// 			}
// 		}
// 		verifyElementPresent(HipiProfilePage.objDraftpage, "Draft Page");
// 		 for(int i=1; i<=30; i++) {	
// 			 if (verifyElementExist(HipiProfilePage.objVideoDraftPage,"Video Draft Page")) {
// 				 longPress(HipiProfilePage.objVideoDraftPage);
// 			 		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup");
// 			 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
// 			 }
// 			 else
// 			 {
// 				 break;
// 			 }
// 		 }
// 			 navigateToHomePage();
 		String desc=addvideoDrafted();
 			waitTime(8000);
 			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 			click(HipiProfilePage.objDraftsVideo, "Drafts video");
 			String videos = getText(HipiProfilePage.objDraftsPageVideo);
 		System.out.println(videos);
 		if(verifyElementDisplayed(HipiProfilePage.objVerifyDraft(desc)))
 		{
 			logger.info("video saved as Draft has been displayed ");
 			extent.extentLoggerPass("Draft","video saved as Draft has been displayed ");
 		}
 		longPress(HipiProfilePage.objVideoDraftedPage);
 		verifyElementPresent(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup ");
 		verifyElementPresentAndClick(HipiProfilePage.objDeleteNoButton, "Delete No Button");
 		waitTime(3000);
 		String videosAfterClickOnNo = getText(HipiProfilePage.objDraftsPageVideo);
 		if (videos.equals(videosAfterClickOnNo)) {
 			logger.info("Drafted video is not able to deleted when user tap on No");
 			extent.extentLoggerPass("Draft","Drafted video is not able to deleted when user tap on No");
 			}else{
 			logger.info("Drafted video is to be deleted when user tap on No ");
 			extent.extentLoggerPass("Draft","Drafted video is to be deleted when user tap on No ");
 			}
 			navigateToHomePage();	
 			}	
 		}
public String addvideoDrafted() throws Exception {
	
	 verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
	allowPermissions(); 
	verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton, 4000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objNextButton, "Next Button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 4000);
	verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription, "Description input");
	String postDescription = "user"+Math.random();
	type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
	waitTime(3000);
	hideKeyboard();
	waitTime(3000);
//	verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//	waitTime(3000);
	if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
	{
		click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//		click(HipiCreateVideoPage.objDoneCTC, "Done Button");
	}else {
		logger.info("User is unable to See Language Options");
		extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
		
	}
	verifyElementPresentAndClick(HipiCreateVideoPage.objsaveasdraft,"Save as Draft");
	waitUntilElementDisplayed(HipiHomePage.objForYou, 4000);
	//verifyElementPresent(HipiHomePage.objForYou, "For you");
	
	return postDescription; 
	}



public void checkUserIsAbleToDeleteASingleVideoSavedInDraft_T1114(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user- Check if user is able to delete a single video saved in draft_T1114");
		System.out.println("T1114");
		extent.extentLogger("Profile_Draft","T1114");
		String desc=addvideoDrafted();
		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		PartialSwipe("down", 2);
		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo, 10);
		verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
//		verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
//		longPress(HipiProfilePage.objVideoDraftPage);
// 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
// 		deleteDraftVideo(userType);
		verifyElementExist(HipiProfilePage.objVideoDraftedPage,"Video Draft Page");
			 longPress(HipiProfilePage.objVideoDraftedPage);
		 		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup icon");
		 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
		 		waitTime(3000);
		 		if(verifyElementDisplayed(HipiProfilePage.objVerifyDraft(desc)))
		 		{
		 			logger.info("user is unable to delete the Draft Video");
					extent.extentLoggerFail("", "user is unable to delete the Draft Video");	
		 		}else {
				logger.info("user is able to delete the Draft Video");
				extent.extentLoggerPass("", "user is able to delete the Draft Video");
		 		}
 		navigateToHomePage();
 		}

}

public void checkIfUserIsRedirectedToAccountDetailScreenWhenTappedOnBack_T1117(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user- Check if user redirected to acoount detail screen when tapped on back_T1117");
		System.out.println("T1117");
		extent.extentLogger("Profile_Draft","T1117");
//		addvideoDraft();
		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
// 		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
// 		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo,2000);
 		
 		verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
 		click(HipiProfilePage.objBackButton, "Back Button");
 		waitTime(2000);
// 		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
 		if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header"))
		{
			logger.info("user is redirected to account detail screen when tapped on back from draft screen");
			extent.extentLoggerPass("Profile_Draft", "user is redirected to account detail screen when tapped on back from draft screen");
//			click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
		}else
		{
			logger.info("user is redirected to account detail screen when tapped on back from draft screen");
			extent.extentLoggerFail("Profile_Draft", "user is redirected to account detail screen when tapped on back from draft screen");
		}
 		navigateToHomePage();

}
}


public void checkIfUserIsAbleToViewAllHisDraftVideo_T1130(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user- Check if user is able to view all his Draft videos_T1130");
		System.out.println("T1130");
		extent.extentLogger("Profile_Draft","T1130");
//		addvideoDraft();
//		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
 		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
// 		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
 		
 			verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Tab");
 			
// 		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo,2000);
// 		verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
// 		List<WebElement> draftVideos = getDriver().findElements(HipiProfilePage.objVideoDraftPage);
 		
 		if(verifyElementPresent(HipiProfilePage.objVideoDraftedPage, "Draft video"))
		{
			logger.info("user is able to view all draft videos");
			extent.extentLoggerPass("Profile_Draft", "user is able to view all draft videos");
//			click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
		}else
		{
			logger.info("user is not able to view all draft videos");
			extent.extentLoggerFail("Profile_Draft", "user is not able to view all draft videos");
		}
 		navigateToHomePage();
 		
}
}
public void checkIfOnTappingVideoWillNavigateTheUserToVideoUploadingScreen_T1131(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user- Check if on tapping video will navigate the user to video uploading screen(post screen)_T1131");
		System.out.println("T1131");
		extent.extentLogger("Profile_Draft","T1131");
		addvideoDraft();
		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
 		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
 		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
// 		verifyElementExist(HipiProfilePage.objDraftsVideo, "draft video");
//			
			verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
// 		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
// 		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo,2000);
 		
// 		verifyElementPresentAndClick(HipiProfilePage.objDraftsVideo, "Drafts Video");
 		verifyElementPresent(HipiProfilePage.objDraftpage, "Draft Screen");
 		verifyElementPresentAndClick(HipiProfilePage.objVideoDraftedPage, "Drafted video");
		waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

 		if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader, "Post screen"))
		{
			logger.info("user is navigated to the uploading screen(post screen)");
			extent.extentLoggerPass("Profile_Draft", "user is navigated to the uploading screen(post screen)");
//			click(HipiProfilePage.objPermissionsOkButton,"permission ok button");
		}else
		{
			logger.info("user is not navigated to the uploading screen(post screen)");
			extent.extentLoggerFail("Profile_Draft", "user is not navigated to the uploading screen(post screen)");
		}
 		navigateToHomePage();
 }
}
public void checkIfDraftedVideoIsDeletedWhenUserTapsOnYesOnTheDeletePopup_T1135(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check if drafted video is deleted when user taps on Yes on the delete popup_T1135");
		System.out.println("T1135");
		extent.extentLogger("Profile-Draft", "T1135");
		String desc=addvideoDrafted();
		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Screen");
		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
		
		verifyElementPresent(HipiProfilePage.objDraftpage, "Draft Page");
		 longPress(HipiProfilePage.objVideoDraftedPage);
	 		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup icon");
	 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
//		longPress(HipiProfilePage.objVideoDraftPage);
//		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup icon");
//		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
//		deleteDraftVideo(userType);
//		 for(int i=1; i<=30; i++) {	
//			 if (verifyElementExist(HipiProfilePage.objVideoDraftedPage,"Video Draft Page")) {
//				 longPress(HipiProfilePage.objVideoDraftedPage);
//			 		verifyElementPresentAndClick(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup icon");
//			 		verifyElementPresentAndClick(HipiProfilePage.objDeleteyesbutton, "Delete yes button");
//			 }
//			 else
//			 {
//				 break;
//			 }
//		 }
	 		waitTime(3000);
		if(verifyElementDisplayed(HipiProfilePage.objVerifyDraft(desc)))
		{
			logger.info("Drafted video is deleted when tap on yes button, and is not  visible in draft tab or local memory");
			extent.extentLoggerFail("Profile-Draft","Drafted video is deleted when tap on yes button, and is not  visible in draft tab or local memory");
			}else
			{
				logger.info("Drafted video is deleted when tap on yes button, and is not  visible in draft tab or local memory");
				extent.extentLoggerPass("Profile-Draft","Drafted video is deleted when tap on yes button, and is not  visible in draft tab or local memory");
			}
		navigateToHomePage();	
		 }	
		}
public void checkIfDraftedVideoIsNotDeletedWhenHeTapOnNo_T1136(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user- Check if drafted video is not deleted when he tap on No_T1136");
		System.out.println("T1136");
		extent.extentLogger("Profile", "T1136");
		String desc=addvideoDrafted();
		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage, "Draft In Profile Page");
		verifyElementPresent(HipiProfilePage.objDraftpage, "Draft Page");
//		String videodes = getText(HipiProfilePage.objDraftsPageVideo);
//		System.out.println(videodes);
		longPress(HipiProfilePage.objVideoDraftedPage);
		verifyElementPresent(HipiProfilePage.objDeletedraftpopupicon, "Delete draft popup ");
		verifyElementPresentAndClick(HipiProfilePage.objDeleteNoButton, "Delete No Button");
//		String videodesAfterClickOnNo = getText(HipiProfilePage.objDraftsPageVideo);
		if (verifyElementDisplayed(HipiProfilePage.objVerifyDraft(desc))) {
			logger.info("Drafted video is not able to deleted when user tap on No");
			extent.extentLoggerPass("Draft","Drafted video is not able to deleted when user tap on No");
			}else{
			logger.info("Drafted video is to be deleted when user tap on No ");
			extent.extentLoggerPass("Draft","Drafted video is to be deleted when user tap on No ");
			}
			navigateToHomePage();	
			}	
		}
public void checkTheVideoSavedAsDraftIsDisplayedInProfileOrAccountDetailScreen_T1137(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user -Check the video saved as draft is displayed in profile/account detail screen_T1137");
		System.out.println("T1137");
		extent.extentLogger("Profile-Draft", "T1137");
		String desc=addvideoDrafted();
		waitTime(8000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		click(HipiProfilePage.objDraftsVideo, "Drafts video");
//		String text= getText(HipiProfilePage.objDraftsText);
//		String totalvideos=getText(HipiProfilePage.objTotalVideos);
		if(verifyElementDisplayed(HipiProfilePage.objVerifyDraft(desc)))
		{
			logger.info("video saved is displayed in profile/account detail screen ");
			extent.extentLoggerPass("Profile-Draft","video saved is displayed in profile/account detail screen");
			}else
			{
			logger.info("video saved is not displayed in profile/account detail screen");
			extent.extentLoggerFail("Profile-Draft","video saved is not displayed in profile/account detail screen");
			}
		navigateToHomePage();	
		 }	
}



public void checkUserIsAbleToSeeTheLikeCountsInProfileScreen_T1163(String userType) throws Exception//doubt
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user -Check user is able to see the like counts in profile screen_T1163");
		System.out.println("T1163");
		extent.extentLogger("Profile-Likes", "T1163");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		String text=getText(HipiProfilePage.objLikeValue);
		System.out.println(text);
		if(verifyElementPresent(HipiProfilePage.objLikeValue, "Like Value"))
		{
			logger.info("user is able to see the like counts next to followers and the counts are "+text);
			extent.extentLoggerPass("Profile-Likes","user is able to see the like counts next to followers and the counts are "+text);
			}else
			{
			logger.info("user is not able to see the like counts next to followers");
			extent.extentLoggerFail("Profile-Likes","user is not able to see the like counts next to followers");
			}
		navigateToHomePage();
		

}
}
public void checkUserIsAbleToSeeBookMarkIconOnProfile_T1164(String userType) throws Exception//doubt
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check user is able to see bookmark icon on profile_T1164");
		System.out.println("T1164");
		extent.extentLogger("Profile-Bookmark", "T1164");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		if(verifyElementPresent(HipiProfilePage.objBookmarkIcon, "BookMark Icon"))
		{
			logger.info("user is able to see the bookmark icon next to edit profile");
			extent.extentLoggerPass("Profile-Bookmark","user is able to see the bookmark icon next to edit profile");
			}else
			{
			logger.info("user is not able to see the bookmark icon next to edit profile");
			extent.extentLoggerFail("Profile-Bookmark","user is not able to see the bookmark icon next to edit profile");
			}
		navigateToHomePage();
		
}
}
public void checkThatIfMultiplePeopleLikeTheVideoThenThumbnailOfTheProfilePictureOfTheLatestTwoUserShouldDisplayed_T1153(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check that if multiple people like the video then thumbnail of the profile picture of the latest two user should displayed_T1153");
		System.out.println("T1153");
		extent.extentLogger("profile_Notification", "T1153");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
		verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
		verifyElementPresent(HipiProfilePage.objAllActivityTitle, "All Activity ");
		int count=0;
		int i;
		for( i=1;i<=2;i++) {
			
			verifyElementExist(HipiProfilePage.objThumbnailImage(i), "Image");
			count++;
//			logger.info(i);
			}
//		System.out.println(count);
		if(count==2)
		{
			logger.info("thumbnail of the latest two user is getting displayed ");
			extent.extentLoggerPass("profile_Notification","thumbnail of the latest two user is getting displayed");
			}else
			{
			logger.info("thumbnail of the latest two user is getting displayed");
			extent.extentLoggerFail("profile_Notification","thumbnail of the latest two user is getting displayed");
			}
		navigateToHomePage();
	}
}
public void checkWhetherHashtagIsRemovedFromFavoriteOrNot_T1174(String userType) throws Exception 
{
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		String beforeaddinghashtag = null;
		String afteraddinghashtag;
		extent.HeaderChildNode("Logged in user - Check the hashtag is added to profile favourites_T1174");
		System.out.println("T1174");
		extent.extentLogger("profile_Hashtag-favorite", "T1174");
//		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
//		
//		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 30);
//		verifyElementPresentAndClick(HipiProfilePage.objBookmarkIcon, "Bookmark Icon");
//		verifyElementPresentAndClick(HipiProfilePage.objHashTagsButton, "HashTags Button");
		//List<WebElement> beforeremovinghashtags = getDriver().findElements(HipiProfilePage.objHashhtags);
		//int countafterremoving = Favrt1.size();
//		removeFavoriteHashtags(userType);
//		navigateToHomePage();
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		String value=getParameterFromXML("Searchbar");
		type(HipiProfilePage.objFollowersSearch, value, "Search Field");
		
//		waitUntilElementDisplayed(HipiDiscoverPage.objSearchResult, 2000);
		click(HipiDiscoverPage.objSearchResult, "Search Result");
		waitTime(2000);
		click(HipiDiscoverPage.objHashtagsButton, "Hashtags Button");
		waitTime(3000);

		click(HipiDiscoverPage.objHashhtags,"Hashtag");
		for(int i=2;i<=7;i++)
		{
		if(verifyElementDisplayed(HipiDiscoverPage.objAddToFavoriteText)){
			beforeaddinghashtag=getText(HipiDiscoverPage.objHashhtagged);
			System.out.println(beforeaddinghashtag);
			click(HipiDiscoverPage.objAddToFavorite,"Add to Favorites");
			break;
		}
		else if(verifyElementDisplayed(HipiProfilePage.objAddedToFavorite))
		{
			beforeaddinghashtag=getText(HipiDiscoverPage.objHashhtagged);
			System.out.println(beforeaddinghashtag);
//			click(HipiDiscoverPage.objAddToFavorite,"Added to Favorites");
//			waitTime(2000);
//			click(HipiDiscoverPage.objAddToFavorite,"Add to Favorites");
			break;
		}
		else
		{
			Back(1);
			click(HipiDiscoverPage.objHashhtagsIteratable(i), "Hashtags Button");
		}
		}
//		waitTime(3000);
//		click(HipiDiscoverPage.objAddToFavorite, "Add To Favorite");
		navigateToHomePage();
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		
		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
		verifyElementPresentAndClick(HipiProfilePage.objBookmarkIcon, "Bookmark Icon");
		verifyElementPresentAndClick(HipiProfilePage.objHashTagsButton, "HashTags Button");
		waitTime(2000);
		 afteraddinghashtag=getText(HipiProfilePage.objFirstHashtag);
//		System.out.println(afteraddinghashtag);
		if(beforeaddinghashtag.equals(afteraddinghashtag))
		{
			logger.info("hashtag is added to profile favourites");
			extent.extentLoggerPass("profile_Hashtag-favorite","hashtag is added to profile favourites");
		}else
			{
			logger.info("hashtag is not added to profile favourites");
			extent.extentLoggerFail("profile_Hashtag-favorite","hashtag is not added to profile favourites");
			}	
		navigateToHomePage();
	}
	}
public void checkIfTappingBackButtonUserWillNavigateToVideosListing_T1179(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check if tapping back button user will navigate to videos listing_T1179");
		System.out.println("T1179");
		extent.extentLogger("profile_All", "T1179");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, " Video");
//		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
//		waitTime(3000);
//		for(int i=1;i<=1;i++)
//			{
//				if()
//				{
//					break;
//				}
//				else
//				{
//					navigateToHomePage();
//					addPublishedVideo(userType);
//					waitTime(8000);
//					verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
//					waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 10);
//				}
//			}
			
//		deletePublishedVideos(userType);
//		waitTime(3000);
//		click(HipiProfilePage.objFirstVideo, "First Video");
//		waitTime(3000);
		verifyElementPresent(HipiHomePage.objPlayerScreen, " Player Screen  ");
		waitTime(2000);
//		click(HipiProfilePage.objBackToImage, "Back Button");
		Back(1);
		if(verifyElementPresent(HipiProfilePage.objFirstVideo, "Video"))
		{
			logger.info("user is redirected to videos listing Page ");
			extent.extentLoggerPass("profile_All","user is redirected to videos listing page ");
			}else
			{
			logger.info("user is not redirected to videos listing page ");
			extent.extentLoggerFail("profile_All","user is not redirected to videos listing page");
			}
		navigateToHomePage();
}
}
public void checkIfThereIsAnOptionToDeleteAnPublishedVideos_T1181(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Check if there is an option to delete an published videos_T1181");
		System.out.println("T1181");
		extent.extentLogger("profile_All", "T1181");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
		waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 10);
		waitTime(3000);
//		deletePublishedVideos(userType);
//		for(int i=1;i<=1;i++)
//		{
//			if(verifyElementExist(HipiProfilePage.objFirstVideo, "First Video"))
//			{
//				break;
//			}
//			else
//			{
//				navigateToHomePage();
//				addPublishedVideo(userType);
//				waitTime(8000);
//				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
//				waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 10);
//				
//			}
//		}
//		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
		waitTime(2000);
		verifyElementPresent(HipiHomePage.objPlayerScreen, " Full Screen Player Preview");
		longPress(HipiHomePage.objPlayerScreen);
		waitTime(3000);
		if(verifyElementPresent(HipiProfilePage.objDeleteOption, "Delete Option"))
		{
			logger.info("user is getting popup displays with option delete ");
			extent.extentLoggerPass("profile_All","user is getting popup displays with option delete ");
			}else
			{
			logger.info("user is not getting popup displays with option delete ");
			extent.extentLoggerFail("profile_All","user is not getting popup displays with option delete ");
			}
		navigateToHomePage();
	}
}


//Used To Add The Private Video
public void addprivatevideo(String userType) throws Exception
{
	 verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions(); 
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera Icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton, 4000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objNextButton, "Next Button");
		waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 4000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription, "Description Input");
		String postDescription = "Description";
		type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
		waitTime(3000);
		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objvisibilityPublicButtonAndMeAndFrinds, "Visiblity");
		waitTime(3000);
		click(HipiCreateVideoPage.objPrivateButton, "Private Button");
		waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			click(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objuploadpost, "Upload Button");
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
//		waitUntilElementDisplayed(HipiHomePage.objForYou, 4000);
		verifyElementPresent(HipiHomePage.objForYou, "For you");
		waitTime(10000);
}

//Used To Delete The Sound From Favorite Tab
public void removefavoritesounds(String userType) throws Exception
{
	for(;;)
	{
		if(verifyElementExist(HipiProfilePage.objSoundsInProfile, "Sounds"))
		{
		click(HipiProfilePage.objSoundsInProfile,"Sounds ");
		click(HipiDiscoverPage.objAddToFavouriteOfSoundTab, "Added To Favorite");
		Back(2);
		click(HipiProfilePage.objBookmarkIcon, "Bookmark Icon");
		click(HipiProfilePage.objSoundsInProfile, "Sounds");
		}
		else {
	    Back(1);
		break;
	}
		
		
	
}
}
public void removefavoritehashtags(String userType) throws Exception
{
	for(;;)
	{
		if(verifyElementExist(HipiProfilePage.objHashhtagsName, "Hashtag"))
		{
			click(HipiProfilePage.objHashhtagsName, "Hashtag");
			waitTime(3000);
			click(HipiProfilePage.objAddToFavorite, "Add to favorite");
			Back(1);
			Swipe("DPWN", 1);
//			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
//			verifyElementPresentAndClick(HipiProfilePage.objHashtags, "HashTags Button");
		}
		else
		{
			Back(2);
			break;
		}
	}
}




public void tappingOnShareOption__T1689(String userType) throws Exception {
	
	
		extent.HeaderChildNode("T1689 - Check by tapping on share option from \"Feed\" screen to share the video User gets the  \"Pop up\"  screen to share  via social media (As a sender)__T1689");
		System.out.println("T1689");
		extent.extentLogger("Feed Screen", "T1689");
	waitUntilElementDisplayed(HipiHomePage.objShareICON, 5);
		verifyElementPresentAndClick(HipiHomePage.objShareICON, "Share Icon");
		waitTime(2000);
		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objShareOptionsEffectPage);
		if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptionsEffectPage).size();
			if (shareOptions == 0) {
				extent.extentLoggerFail("Verify share options", "Share Options are not available");
				logger.info("Share Options are not available");
			} else {
				for (int i = 2; i <= shareOptions; i++) {
					String shareOptionName = getText(AMDMoreMenu.objShareoptions(i));
					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName + "\" is available to share");
				}
			}
		} else {
			logger.info("Share Options are not displayed after clicking on Share CTA");
			extent.extentLoggerFail("Share through options screen",
					"Share Options are not displayed after clicking on Share CTA");
		}
		navigateToHomePage();
	
		
	
	
	
	
}

	public void tappingOnnAnySocialMediaIcon__T1690(String userType) throws Exception {
		extent.HeaderChildNode("T1690 - Check by tapping on any social media icon from the Pop up screen User navigates to the particular platform (As a sender)__T1690");
		System.out.println("T1690");
		extent.extentLogger("Feed Screen", "T1690");
		
//		clearFacebookData();
		verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share icon");
		 
		navigateToGmail();
		waitTime(4000);
		hideKeyboard();
		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		if(verifyElementPresent(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button")){
			logger.info("User is navigates to the particular platform by tapping on any social media icon from the pop up screen");
			extent.extentLoggerPass("","User is navigates to the particular platform by tapping on any social media icon from the pop up screen");
			}else{
			logger.info("User is not navigates to the particular platform by tapping on any social media icon from the pop up screen");
			extent.extentLoggerFail("","User is not navigates to the particular platform by tapping on any social media icon from the pop up screen");
			}
		
		navigateToHomePage();
		
	} 

	public void VerifyParticularPlatformByTappingonAnySocialMediaIcon() throws Exception{
		
		navigateToGmail();
//		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		waitTime(3000);
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		if(verifyElementPresent(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button")){
			logger.info("User is navigates to the particular platform by tapping on any social media icon from the pop up screen");
			extent.extentLoggerPass("","User is navigates to the particular platform by tapping on any social media icon from the pop up screen");
			}else{
			logger.info("User is not navigates to the particular platform by tapping on any social media icon from the pop up screen");
			extent.extentLoggerFail("","User is not navigates to the particular platform by tapping on any social media icon from the pop up screen");
			}
		
	}
	public void CheckByTappingOnShareProfileUserGetsPopUpScreenToShareViaSocialMedia_T1695(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1695 - Logged  in user - Check by tapping on share profile on Settings & privacy screen  User gets the Pop up screen  to share  via social media_T1695");
			System.out.println("T1695");
			extent.extentLogger("Profile_Settings & privacy","T1695");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSettingsPage.objShareProfile,"Share Profile");
			waitTime(3000);
			boolean isShareOption = verifyIsElementDisplayed(HipiSettingsPage.objShareOptionsSettings);
			if (isShareOption) {
				logger.info("User is navigated share options screen");
				extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
				int shareOptions = getDriver().findElements(HipiSettingsPage.objShareOptionsSettings).size();
				if (shareOptions == 0) {
					extent.extentLoggerFail("Verify share options", "Share Options are not available");
					logger.info("Share Options are not available");
				} else {
					for (int i = 2; i <= shareOptions; i++) {
						String shareOptionName = getText(HipiSettingsPage.objShareoptionsSettings(i));
						logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
						extent.extentLoggerPass("Share Option ",
								"Share Option : \"" + shareOptionName + "\" is available to share");
					}
				}
			} else {
				logger.info("Share Options are not displayed after clicking on Share CTA");
				extent.extentLoggerFail("Share through options screen",
						"Share Options are not displayed after clicking on Share CTA");
			}
			navigateToHomePage();
		}
	}
//	public void verifyToastMessage() throws Exception {
//		String foundToast = false;
//		waitTime(2000);
//		getDriver().manage().timeouts().implicitlyWait(1, TimeUnit.MICROSECONDS);
//		for (int i = 0; i < 200; i++) {
//			try {
//				getDriver().findElement(<Locator>);
//				foundToast=true;
//				break;
//			} catch (Exception e) {}
//		}
//		if(foundToast) {
//			extent.info
//			logger info
//		}
//		else {
//			extent.error/info
//			logger error/info
//		}
//	}

	
	
	public void discoveButton__T1327__T1337(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User: Verify for discover option postion on application");
			System.out.println("T1327");
			extent.extentLogger("Discover", "T1327");
			}else {
				extent.HeaderChildNode("Logged In User: Verify for discover option postion on application");
				System.out.println("T1337");
				extent.extentLogger("Discover", "T1337");
			}	
		
		
		WebElement disc=findElement(By.xpath("//*[@id='navigation_discovery']"));
		int discX=disc.getLocation().getX();
		System.out.println(discX);
		WebElement home=findElement(By.xpath("//*[@resource-id='com.zee5.hipi:id/navigation_home']"));
		int homeX=home.getLocation().getX();
		System.out.println(homeX);
		if(discX>homeX) {
			logger.info("The discover option postion is beside Home tab right side on bottom sheet menu");
			extent.extentLoggerPass("","The discover option postion is beside Home tab right side on bottom sheet menu");
			}else
			{
			logger.info("The discover option postion is not beside Home tab right side on bottom sheet menu");
			extent.extentLoggerFail("","The discover option postion is not beside Home tab right side on bottom sheet menu");
			}
		
		
		
		
	}

	public void tappingOnFollowButton__T1922(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T1922 - Guest User - Check by tapping on follow button in \"Feed\"  screen User should get login pop-up");
			System.out.println("T1922");
			extent.extentLogger("", "T1922");
		
		verifyElementPresentAndClick(HipiHomePage.objFollowButton, "Follow Button");
		VerifyLoginPopUp();
		navigateToHomePage();
			
		}
	}
	
	public void listOfActionsPresentByTappingOnShare__T1783(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1783 - Logged in User - Check the list of actions present by tapping on share option ");
			System.out.println("T1783");
			extent.extentLogger("", "T1783");
		
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			
			verifyElementPresent(HipiShareScreen.objAddToFavourites, "Add To Favourites option");
			verifyElementPresent(HipiShareScreen.objSaveVideo, "Save Video option");
			verifyElementPresent(HipiShareScreen.objReport, "Report option");
			verifyElementPresent(HipiShareScreen.objNotInterested, "Not Interested option");
			verifyElementPresent(HipiShareScreen.objDuet, "Duet option");
			navigateToHomePage();
			
		}
	}
	
	public void ableToTapOnDuetOption__T1785(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1785 - Logged in User - Duet video - Check wheater User is able to tap on \"Duet\" option");
			System.out.println("T1785");
			extent.extentLogger("", "T1785");
			
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			waitTime(5000);
			verifyElementPresentAndClick(HipiShareScreen.objDuet, "Duet option");
		
		allowPermissions();
		waitTime(5000);
		waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
			if(verifyElementPresent(HipiCreateVideoPage.objRecordIcon, "Record icon")){
				logger.info("User is able to tap on Duet option");
				extent.extentLoggerPass("","User is able to tap on Duet option");
				}else
				{
				logger.info("User is not able to tap on Duet option");
				extent.extentLoggerFail("","User is not able to tap on Duet option");
				}
			navigateToHomePage();
			}
	}
	
	
	public void openGmailApp() throws Exception{
		logger.info("Launching Gmail");
		extent.extentLogger("", "Launching Gmail");
		Runtime.getRuntime().exec("adb shell am start -n com.google.android.gm/com.google.android.gm.ConversationListActivityGmail");
		waitTime(3000);
		waitTime(6000);
	}
	
	public void openPlaystore() throws Exception{
		logger.info("Launching Play store");
		extent.extentLogger("", "Launching Play store");
		Runtime.getRuntime().exec("adb shell am start -n com.google.android.gm");
		waitTime(3000);
		}

	
	public void changeGmailAccountAndVerifyUrlAndClickonHipiBrowser(String userType) throws Exception {
		
//		verifyElementPresentAndClick(HipiShareScreen.objAccountLogo, "Gmail account logo");
//		waitTime(5000);
//		verifyElementPresentAndClick(HipiShareScreen.objIgs2Mail, "Another gmail account");
		
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(2000);
		}
		
		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "I Enjoyed Watching On Hipi");
		 String link = getText(HipiShareScreen.objLinkInbox);
//		verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		
		verifyElementPresentAndClick(HipiShareScreen.objBrowserOption, "Browser");
		getDriver().quit();
		waitTime(4000);
		 new com.business.zee.Zee5ApplicasterHipiNeoBusinessLogic("chrome");
		
		 getDriver().get(link);
//			
		waitTime(5000);
		waitUntilElementDisplayed(HipiHomePage.objForYouInBrowser, 20);
		if(verifyElementPresent(HipiHomePage.objForYouInBrowser, "For You In Browser Screen")){
			logger.info("Receiver is redirected to Hipi browser when he taps on received video link url");
			extent.extentLoggerPass("","Receiver is redirected to Hipi browser when he taps on received video link url");
			}else
			{
			logger.info("Receiver is not redirected to Hipi browser when he taps on received video link url");
			extent.extentLoggerFail("","Receiver is not redirected to Hipi browser when he taps on received video link url");
			}
		
		
		relaunch(false); 
		
	}
	
	
public void changeGmailAccountAndVerifyUrlAndClickonHipiApp(String userType) throws Exception {
		
//		verifyElementPresentAndClick(HipiShareScreen.objAccountLogo, "Gmail account logo");
//		waitTime(5000);
//		verifyElementPresentAndClick(HipiShareScreen.objIgs2Mail, "Another gmail account");
		
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(2000);
		}
		
		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "I Enjoyed Watching On Hipi");
//		verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		
		if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
			logger.info("Logo is displayed");
			extent.extentLoggerPass("","Logo is displayed");
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
			}else
			{
			logger.info("Logo is not displayed");
			extent.extentLoggerFail("","Logo is not displayed");
			}//		String afterShare = getText(HipiHomePage.objDescription);
		waitTime(4000);
			verifyElementPresent(HipiHomePage.objDescription, "Video Description");
			
	}
	public void navigateToGmail() throws Exception {
		
		if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
			click(HipiShareScreen.objGmailOption, "Gmail option");
		}else {
			swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
			if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
				click(HipiShareScreen.objGmailOption, "Gmail option");
			}else {
				verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
				if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
					logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
					verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
					click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
					logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
//					waitUntilElementDisplayed(HipiShareScreen.objGmailOption, 100);
					}else {
						logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
						
					}
			waitUntilElementDisplayed(HipiShareScreen.objGmailOption, 2);
				if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
					click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					swipeRail(HipiShareScreen.objAfterMoreButton, "Left",1);
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					swipeRail(HipiShareScreen.objAfterMoreButton, "Left",1);
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
				}
					
					
				
			}
			}
			}
		}
		waitUntilElementDisplayed(HipiShareScreen.objToField, 20);
	}
	public void shareWithGmail() throws Exception {
		
//		verifyElementPresentAndClick(HipiHomePage., "Share Icon");
		
		navigateToGmail();
		waitTime(4000);
		hideKeyboard();
		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		String newMail = getParameterFromXML("NewMailId");
		verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
		type(HipiShareScreen.objToField, newMail, "New mail");
		hideKeyboard();
		
		verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
		
		waitTime(5000);
		
		
	}	
		
	
	public void textMessageUrl__T1691(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1691 - Check User should able to see the text message,Url and video  while sending the video link through the socail media (As a sender)");
			System.out.println("T1691");
			extent.extentLogger("", "T1691");
		
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			
			navigateToGmail();
			waitTime(4000);
			hideKeyboard();
			verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			 String link = getText(HipiShareScreen.objShareLinkGmailpage);
			
			 if (link.contains("Check out this video I enjoyed watching on Hipi")) {
				 	logger.info("User is able to see Text message(Check out this video I enjoyed watching on Hipi ");
					extent.extentLoggerPass("","User is able to see Text message(Check out this video I enjoyed watching on Hipi ");
					}else
					{
					logger.info("User is not able to see Text message(Check out this video I enjoyed watching on Hipi ");
					extent.extentLoggerFail("","User is not able to see Text message(Check out this video I enjoyed watching on Hipi ");
					}
			
			 	if (link.contains("utm_source=Android&utm_medium=Feed&utm_campaign=hipi_shared_link")) {
				 	logger.info("User is able to see  Long URL");
					extent.extentLoggerPass("","User is able to see  Long URL");
					}else
					{
					logger.info("User is not able to see  Long URL");
					extent.extentLoggerFail("","User is not able to see  Long URL");
					}
			 navigateToHomePage();
			 
		}
	}
	
	public void textMessageUrlAndVideoAfterReceiving__T1692(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1692 - Check receiver is able see the text message,Url and video after receiving (As a receiver)");
			System.out.println("T1692");
			extent.extentLogger("", "T1692");
		 	String beforeShare = getText(HipiHomePage.objDescription);
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			shareWithGmail();
			openGmailApp();
		
			
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
			
			verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
			verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "I Enjoyed Watching On Hipi");
//			verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerFail("","Logo is not displayed");
				}			String afterShare = getText(HipiHomePage.objDescription);
//			verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon ");
			if (beforeShare.equals(afterShare)) {
				logger.info("Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
				extent.extentLoggerPass("","Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
				}else
				{
				logger.info("Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
				extent.extentLoggerFail("","Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
				}
			navigateToHomePage();
		}
	} 
	
	public void linkUrlUserShouldRedirectedToHipiApp__T1694(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1694 - Check if he taps on the video link url User should redirected to \"Hipi\" app(As a receiver) and the video is started playing");
			System.out.println("T1694");
			extent.extentLogger("", "T1694");
			
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			shareWithGmail();
			openGmailApp();
			changeGmailAccountAndVerifyUrlAndClickonHipiApp(userType);
			navigateToHomePage();
			
			
		}
	}
	
	public void linkUrlUserShouldRedirectedToHipiBrowser__T1693(String userType) throws Exception {
		
		extent.HeaderChildNode("Check if he taps on the video link url User should redirected to \"Hipi\" browser(As a receiver) and the video is started playing");
		System.out.println("T1693");
		extent.extentLogger("", "T1693");
		
		verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
		shareWithGmail();
		openGmailApp();
		changeGmailAccountAndVerifyUrlAndClickonHipiBrowser(userType);
		
		
	}
	
	public void tappingShareIconOnSoundScreen__T1725(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1725 - Check User gets Pop up by tapping share icon on Sound screen to share via social media (As a sender)");
		System.out.println("T1725");
		extent.extentLogger("", "T1725");
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
		waitTime(2000);
		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon");
		waitTime(10000);
		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
		if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptionsEffectPage).size();
			if (shareOptions == 0) {
				extent.extentLoggerFail("Verify share options", "Share Options are not available");
				logger.info("Share Options are not available");
			} else {
				for (int i = 2; i <= shareOptions; i++) {
					String shareOptionName = getText(AMDMoreMenu.objShareoptions(i));
					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName + "\" is available to share");
				}
			}
		} else {
			logger.info("Share Options are not displayed after clicking on Share CTA");
			extent.extentLoggerFail("Share through options screen",
					"Share Options are not displayed after clicking on Share CTA");
		}
		navigateToHomePage();
		}
	}
	public void socialMediaIconFromThePopUpScreen__T1726(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1726 - Check by tapping on any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
		System.out.println("T1726");
		extent.extentLogger("", "T1726");
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
		waitTime(2000);
		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon");
		
		VerifyParticularPlatformByTappingonAnySocialMediaIcon();
		
		navigateToHomePage();	
		
		}
		
	}
	
	public void  urlWhileSendingTheSoundThrough__T1727(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1727 - Check User should able to see the text message,Url  while sending the sound through the socail media (As a sender)");
		System.out.println("T1727");
		extent.extentLogger("", "T1727");
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
		waitTime(2000);
		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon");
		navigateToGmail();
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		 String link = getText(HipiShareScreen.objShareLinkGmailpage);
		
		 if (link.contains("Check out this sound I liked on Hipi")) {
			 	logger.info("User is see Check out this sound I liked on Hipi");
				extent.extentLoggerPass("","User is see Check out this sound I liked on Hipi");
				}else
				{
				logger.info("User is not see Check out this sound I liked on Hipi");
				extent.extentLoggerFail("","User is not see Check out this sound I liked on Hipi");
				}
		
		 	if (link.contains("https://")) {
			 	logger.info("User is able to see  Long URL");
				extent.extentLoggerPass("","User is able to see  Long URL");
				}else
				{
				logger.info("User is not able to see  Long URL");
				extent.extentLoggerFail("","User is not able to see  Long URL");
				}
		 navigateToHomePage();
		}
	}
	
	
	public void receiverIsAbleSeeTheTextMessage__T1728(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1728 - Check receiver is able see the text message,Url  after receiving (As a receiver)");
		System.out.println("T1728");
		extent.extentLogger("", "T1728");
		
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
		waitTime(2000);
		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon");
		
		navigateToGmail();
//		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		String newMail = getParameterFromXML("NewMailId");
		verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
		type(HipiShareScreen.objToField, newMail, "New mail");
		hideKeyboard();
		
		verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
		
		waitTime(5000);
		
		openGmailApp();
		
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(2000);
		}
		
//		verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
		verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "Check out this sound I liked on Hipi");
//		verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		
		if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
			logger.info("Logo is displayed");
			extent.extentLoggerPass("","Logo is displayed");
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
			}else
			{
			logger.info("Logo is not displayed");
			extent.extentLoggerFail("","Logo is not displayed");
			}		waitTime(4000);
		verifyElementPresent(HipiSoundDetailPage.objTitle, "Sound Title");
		navigateToHomePage();
		
		}
	}
		
	public void openChrome() throws Exception {
		
		logger.info("Launching Chrome");
		extent.extentLogger("", "Launching Chrome");
		Runtime.getRuntime().exec("adb shell am start -n com.android.chrome/com.google.android.apps.chrome.Main");
		waitTime(3000);
		
//		getDriver().get("https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link");
//		
//		verifyElementPresentAndClick(HipiShareScreen.objOpenOptioninChrome, "Open option");
		
		
		
	}
	
	public void tappingShareIconOnEffect__T1731(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T1731 - Check User gets Pop up by tapping share icon on Effect screen to share via social media (As a sender)");
		System.out.println("T1731");
		extent.extentLogger("", "T1731");
		
//		openChrome();
//		
//		getDriver().get("https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link");
//		waitUntilElementDisplayed(HipiShareScreen.objOpenOptioninChrome, 100);
//		verifyElementPresentAndClick(HipiShareScreen.objOpenOptioninChrome, "Open option");
////		waitUntilElementDisplayed(HipiHomePage.objEffectOption, 20);
//		waitTime(20000);
//		verifyElementPresentAndClick(HipiHomePage.objEffectOption, "Effect option");
//		
//		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
//		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
//		if (isShareOption) {
//			logger.info("User is navigated share options screen");
//			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
//			int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
//			if (shareOptions == 0) {
//				extent.extentLoggerFail("Verify share options", "Share Options are not available");
//				logger.info("Share Options are not available");
//			} else {
//				for (int i = 2; i <= shareOptions; i++) {
//					String shareOptionName = getText(HipiHomePage.objShareoptions(i));
//					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
//					extent.extentLoggerPass("Share Option ",
//							"Share Option : \"" + shareOptionName + "\" is available to share");
//				}
//			}
//		} else {
//			logger.info("Share Options are not displayed after clicking on Share CTA");
//			extent.extentLoggerFail("Share through options screen",
//					"Share Options are not displayed after clicking on Share CTA");
//		}
		navigateToFeedEffects(userType);
//		waitTime(60000);
		verifyElementPresent(HipiEffectPage.objEffectHeader, "Effect Header");
		String afterShare = getText(HipiEffectPage.objEffectHeader);
		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
//		waitTime(30000);
		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objShareOptionsEffectPage);
		if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptionsEffectPage).size();
			if (shareOptions == 0) {
				extent.extentLoggerFail("Verify share options", "Share Options are not available");
				logger.info("Share Options are not available");
			} else {
				for (int i = 2; i <= shareOptions; i++) {
					String shareOptionName = getText(AMDMoreMenu.objShareoptions(i));
					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName + "\" is available to share");
				}
			}
		} else {
			logger.info("Share Options are not displayed after clicking on Share CTA");
			extent.extentLoggerFail("Share through options screen",
					"Share Options are not displayed after clicking on Share CTA");
		}
		navigateToHomePage();
		
		}	
	}
	
	
	
	public void tappingOnAnySocialMediaIcon__T1732(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1732 - Check by tapping on any social media icon from the \"Pop up\" screen User navigates to the particular platform (As a sender)");
			System.out.println("T1732");
			extent.extentLogger("", "T1732");
		
			
			navigateToEffectScreen(userType);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			VerifyParticularPlatformByTappingonAnySocialMediaIcon();
			navigateToHomePage();	
		}
		
	}
	
	
	
	public void seeTheTextMessageUrl__T1733(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1733 - Check User should able to see the text message,Url  while sending the Effect through the socail media (As a sender)");
			System.out.println("T1733");
			extent.extentLogger("", "T1733");
		
			
			navigateToEffectScreen(userType);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			navigateToGmail();
			
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			 String link = getText(HipiShareScreen.objShareLinkGmailpage);
			
			 if (link.contains("Check out the effect Heart Crown I liked on Hipi")) {
				 	logger.info("User is see Check out the effect Heart Crown I liked on Hipi");
					extent.extentLoggerPass("","User is see Check out the effect Heart Crown I liked on Hipi");
					}else
					{
					logger.info("User is not see Check out the effect Heart Crown I liked on Hipi");
					extent.extentLoggerFail("","User is not see Check out the effect Heart Crown I liked on Hipi");
					}
			
			 	if (link.contains("https://")) {
				 	logger.info("User is able to see  Long URL");
					extent.extentLoggerPass("","User is able to see  Long URL");
					}else
					{
					logger.info("User is not able to see  Long URL");
					extent.extentLoggerFail("","User is not able to see  Long URL");
					}
			 navigateToHomePage();
			
		}
		
	} 
	
	public void navigateToEffectScreen(String userType) throws Exception {
		
		if (verifyElementExist(HipiHomePage.objEffectOption, "Effect Option")) {
			verifyElementPresentAndClick(HipiHomePage.objEffectOption, "Effect option");
			
//			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
		}else {
			navigateToFeedEffects(userType);
//			openChrome();
//			
//			getDriver().get("https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link");
//			
//			verifyElementPresentAndClick(HipiShareScreen.objOpenOptioninChrome, "Open option");
//			waitTime(4000);
//			getDriver().close();
//			relaunch(false);
//			verifyElementPresentAndClick(HipiHomePage.objEffectOption, "Effect option");
			
//			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			
		}
	}
	
	public void textMessageUrlAfterReceiving__T1734(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1734 - Check receiver is able see the text message,Url  after receiving (As a receiver)");
			System.out.println("T1734");
			extent.extentLogger("", "T1734");
			navigateToEffectScreen(userType);
			String beforeShare = getText(HipiEffectPage.objEffectHeader);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			navigateToGmail();
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			String newMail = getParameterFromXML("NewMailId");
			verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
			type(HipiShareScreen.objToField, newMail, "New mail");
			hideKeyboard();
			
			verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
			
			waitTime(5000);
			
			openGmailApp();
		
			
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
			
//			verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
			verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "Check out this sound I liked on Hipi");
//			verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerFail("","Logo is not displayed");
				}			waitTime(4000);
			verifyElementPresent(HipiEffectPage.objEffectHeader, "Effect Header");
			String afterShare = getText(HipiEffectPage.objEffectHeader);
			if (beforeShare.equals(afterShare)) {
				logger.info("Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
				extent.extentLoggerPass("","Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
				}else
				{
				logger.info("Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
				extent.extentLoggerFail("","Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
				}
			navigateToHomePage();
			}
	}
	
	
	public void navigateToFilterScreen() throws Exception {
		if (verifyElementExist(HipiHomePage.objFilterOption, "Filter Option")) {
			click(HipiHomePage.objFilterOption, "Filter option");
			
//			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
		}else {
			openChrome();
			
//			getDriver().get("https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link");
//			
//			verifyElementPresentAndClick(HipiShareScreen.objOpenOptioninChrome, "Open option");
			
			verifyElementPresentAndClick(HipiHomePage.objFilterOption, "Filter Option");
			
//			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			
		}
		
	}
	
	public void  tappingShareIconOnFilterScreen__T1737(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1737 - Check User gets Pop up by tapping share icon on Filter screen to share via social media (As a sender)");
			System.out.println("T1737");
			extent.extentLogger("", "T1737");
			navigateToFeedFilters(userType);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objShareOptionsEffectPage);
			if (isShareOption) {
				logger.info("User is navigated share options screen");
				extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
				int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptionsEffectPage).size();
				if (shareOptions == 0) {
					extent.extentLoggerFail("Verify share options", "Share Options are not available");
					logger.info("Share Options are not available");
				} else {
					for (int i = 2; i <= shareOptions; i++) {
						String shareOptionName = getText(AMDMoreMenu.objShareoptions(i));
						logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
						extent.extentLoggerPass("Share Option ",
								"Share Option : \"" + shareOptionName + "\" is available to share");
					}
				}
			} else {
				logger.info("Share Options are not displayed after clicking on Share CTA");
				extent.extentLoggerFail("Share through options screen",
						"Share Options are not displayed after clicking on Share CTA");
			}
			navigateToHomePage();
			}
	} 
	
	public void tappingOnAnySocialMediaUserNavigatesToTheParticularPlatform__T1738(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1738 - Check by tapping on any social media icon from the \"Pop up\" screen User navigates to the particular platform (As a sender)");
			System.out.println("T1738");
			extent.extentLogger("", "T1738");
			navigateToFeedFilters(userType);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			VerifyParticularPlatformByTappingonAnySocialMediaIcon();
			navigateToHomePage();	
		}
	}
	
	public void textMessageUrlWhileSendingTheFilterThroughTheSocailMedia__T1739(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1739 - Check User should able to see the text message,Url  while sending the Filter through the socail media (As a sender)");
			System.out.println("T1739");
			extent.extentLogger("", "T1739");
			navigateToFeedFilters(userType);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			navigateToGmail();
			waitTime(4000);
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			 String link = getText(HipiShareScreen.objShareLinkGmailpage);
			
			 if (link.contains("Check out the filter Valentines  I liked on Hipi")) {
				 	logger.info("User is see Check out the filter Valentines  I liked on Hipi");
					extent.extentLoggerPass("","User is see Check out the filter Valentines  I liked on Hipi");
					}else
					{
					logger.info("User is not see Check out the filter Valentines  I liked on Hipi");
					extent.extentLoggerFail("","User is not see Check out the filter Valentines  I liked on Hipi");
					}
			
			 	if (link.contains("https://")) {
				 	logger.info("User is able to see  Long URL");
					extent.extentLoggerPass("","User is able to see  Long URL");
					}else
					{
					logger.info("User is not able to see  Long URL");
					extent.extentLoggerFail("","User is not able to see  Long URL");
					}
			 navigateToHomePage();
			}
	}
	
	public void textMessageUrlAfterReceivingFilter__T1740(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1740 - Check receiver is able see the text message,Url  after receiving (As a receiver)");
			System.out.println("T1740");
			extent.extentLogger("", "T1740");
			
				
			navigateToFeedFilters(userType);
			String beforeShare = getText(HipiEffectPage.objFilterHeaderr);
			verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon ");
			navigateToGmail();
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			String newMail = getParameterFromXML("NewMailId");
			verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
			type(HipiShareScreen.objToField, newMail, "New mail");
			hideKeyboard();
			
			verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
			
			waitTime(5000);
			
			openGmailApp();
//			Swipe("DOWN", 5);
			
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
			
//			verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video");
//			verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "Check out this sound I liked on Hipi");
//			verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerFail("","Logo is not displayed");
				}			waitTime(4000);
			verifyElementPresent(HipiEffectPage.objFilterHeaderr, "Filter Header");
			String afterShare = getText(HipiEffectPage.objFilterHeaderr);
			if (beforeShare.equals(afterShare)) {
				logger.info("Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
				extent.extentLoggerPass("","Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
				}else
				{
				logger.info("Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
				extent.extentLoggerFail("","Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
				}
			navigateToHomePage();
			
		}
	}
	
	public void navigateToFeedEffects(String userType) throws Exception {
		
		if (verifyElementExist(HipiHomePage.objEffectOption, "Effect option")) {
			click(HipiHomePage.objEffectOption, "Effect option");
		}else {
		verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
		navigateToGmail();
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		String newMail = getParameterFromXML("NewMailId");
		verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
		type(HipiShareScreen.objToField, newMail, "New mail");
		hideKeyboard();
		
		clearField(HipiShareScreen.objShareLinkGmailpage, "Link");
		type(HipiShareScreen.objShareLinkGmailpage, "https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link", "URL");
		verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
		waitTime(5000);
		openGmailApp();
//		Swipe("DOWN", 5);
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}
		waitTime(4000);
		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		waitTime(3000);
		if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
			logger.info("Logo is displayed");
			extent.extentLoggerPass("","Logo is displayed");
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
			}else
			{
			logger.info("Logo is not displayed");
			extent.extentLoggerFail("","Logo is not displayed");
			}
//		String afterShare = getText(HipiHomePage.objDescription);
//		verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon ");
		waitTime(7000);
		waitUntilElementDisplayed(HipiHomePage.objEffectOption, 5);
		waitTime(5000);
		verifyElementPresentAndClick(HipiHomePage.objEffectOption, "Effect option");
		waitTime(5000);
		String beforeShare = getText(HipiEffectPage.objEffectHeader);
		System.out.println(beforeShare);
		waitTime(5000);
		}
	 }
//		verifyElementPresent(HipiEffectPage.objEffectHeader, "Effect Header");
//		String afterShare = getText(HipiEffectPage.objEffectHeader);
//		if (beforeShare.equals(afterShare)) {
//			logger.info("Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
//			extent.extentLoggerPass("","Receiver is redirected to Hipi app when he taps on received Url link and particular Filter is open");
//			}else
//			{
//			logger.info("Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
//			extent.extentLoggerFail("","Receiver is not redirected to Hipi app when he taps on received Url link and particular Filter is not open");
//			}
//		waitTime(6000);
	
	
public void navigateToFeedFilters(String userType) throws Exception {
		
		if (verifyElementExist(HipiHomePage.objFilterOption, "Filter option")) {
			click(HipiHomePage.objFilterOption, "Filter option");
		}else {
		verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
		navigateToGmail();
		waitTime(4000);
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		String newMail = getParameterFromXML("NewMailId");
		verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
		type(HipiShareScreen.objToField, newMail, "New mail");
		hideKeyboard();
		
		clearField(HipiShareScreen.objShareLinkGmailpage, "Link");
		waitTime(4000);
		type(HipiShareScreen.objShareLinkGmailpage, "https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link", "URL");
		waitTime(4000);
		verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
		waitTime(5000);
		openGmailApp();
//		Swipe("DOWN", 5);
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(5000);
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(5000);
		}
		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		
		if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
			logger.info("Logo is displayed");
			extent.extentLoggerPass("","Logo is displayed");
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
			}else
			{
			logger.info("Logo is not displayed");
			extent.extentLoggerPass("","Logo is not displayed");
			}//		String afterShare = getText(HipiHomePage.objDescription);
//		waitTime(4000);
//		verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon ");
//		waitTime(5000);
		waitUntilElementDisplayed(HipiHomePage.objFilterOption, 1);
		verifyElementPresentAndClick(HipiHomePage.objFilterOption, "Filter option");
		String beforeShare = getText(HipiEffectPage.objFilterHeaderr);
		System.out.println(beforeShare);
	 }
	
}
	

	public void userShouldRedirectedToHipiBrowserSound__T1729(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Check if he taps on the link url User should redirected to Hipi browser and particular sound page is opened (As a receiver)");
			System.out.println("T1729");
			extent.extentLogger("", "T1729");
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			String soundNameHomeScreen = getText(HipiHomePage.objMusicButtonBelowLeftSide);
			System.out.println(soundNameHomeScreen);
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
		waitTime(2000);
		verifyElementPresentAndClick(HipiEffectPage.objShareIcon, "Share Icon");
		
		navigateToGmail();
		verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
		String newMail = getParameterFromXML("NewMailId");
		verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
		type(HipiShareScreen.objToField, newMail, "New mail");
		hideKeyboard();
		
		verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
		
		waitTime(5000);
		
		openGmailApp();
		
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(2000);
		}
		
		verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "Check out this sound I liked on Hipi");
		 String link = getText(HipiShareScreen.objLinkInbox);
		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		verifyElementPresentAndClick(HipiShareScreen.objBrowserOption, "Browser");	
		waitTime(4000);
		getDriver().quit();
		waitTime(4000);
		 new com.business.zee.Zee5ApplicasterHipiNeoBusinessLogic("chrome");
		
		 getDriver().get(link);
//			
		waitTime(5000);
		String soundName = getText(HipiShareScreen.objSoundNameChromeBrowser);
		System.out.println(soundName);
		if(soundNameHomeScreen.equalsIgnoreCase(soundName)){
			logger.info("Receiver is redirected to Hipi browser when he taps on received Url link and particular sound is open");
			extent.extentLoggerPass("","Receiver is redirected to Hipi browser when he taps on received Url link and particular sound is open");
			}else{
			logger.info("Receiver is not redirected to Hipi browser when he taps on received Url link and particular sound is not open");
			extent.extentLoggerFail("","Receiver is not redirected to Hipi browser when he taps on received Url link and particular sound is not open");
			}
		
//		relaunch(false);
		
		}
		
		
	}

	
	
	public void detailsLikeEffectsFiltersSoundUserRedirectsToParticularPage__T1943(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T1943 - Check by tappping on any details like Effects,Filters,Sound User redirects to particular detail screen");
			System.out.println("T1943");
			extent.extentLogger("", "T1943");
			
//			waitTime(20000);
			if (verifyElementExist(HipiHomePage.objEffectOption, "Effect option")) {
				click(HipiHomePage.objEffectOption, "Effect option");
			}else {
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			navigateToGmail();
			waitTime(4000);
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			waitTime(4000);
			String newMail = getParameterFromXML("NewMailId");
			verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
			type(HipiShareScreen.objToField, newMail, "New mail");
			hideKeyboard();
			clearField(HipiShareScreen.objShareLinkGmailpage, "Link");
			waitTime(4000);
			type(HipiShareScreen.objShareLinkGmailpage, "https://www.hipi.co.in/video/c94cc35f-ee39-46f1-9110-7d43bac2afa2?utm_source=Android&utm_medium=User_Profile&utm_campaign=hipi_shared_link", "URL");
			waitTime(4000);
			verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
			waitTime(5000);
			openGmailApp();
//			Swipe("DOWN", 5);
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitUntilElementDisplayed(HipiShareScreen.objLinkInbox, 5);
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
				waitUntilElementDisplayed(HipiShareScreen.objLinkInbox, 5);
			}
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerFail("","Logo is not displayed");
				}
			waitUntilElementDisplayed(HipiHomePage.objLikeICON, 4);
			String beforeShare = getText(HipiHomePage.objEffectOption);
			System.out.println(beforeShare);
			waitTime(5000);
			verifyElementPresentAndClick(HipiHomePage.objEffectOption, "Effect option");
			waitTime(5000);
			waitTime(3000);
			verifyElementPresent(HipiEffectPage.objEffectHeader, "Effect Header");
			String effectHeader = getText(HipiEffectPage.objEffectHeader);
			System.out.println(effectHeader);
			if ("Heart Crown".equalsIgnoreCase(effectHeader)) {
				logger.info("User is redirect for  particular Effect detail screen");
				extent.extentLoggerPass("","User is redirect for  particular Effect detail screen");
				}else
				{
				logger.info("User is not redirect for  particular Effect detail screen");
				extent.extentLoggerFail("","User is not redirect for  particular Effect detail screen");
				}
//			navigateToHomePage();
			Back(1);
			String filterNameHomescreen = getText(HipiHomePage.objFilterOption);
			System.out.println(filterNameHomescreen);
			verifyElementPresentAndClick(HipiHomePage.objFilterOption, "Filter option");
		
			waitTime(4000);
			verifyElementPresent(HipiEffectPage.objFilterHeaderr, "Filter Header");
			String filterName = getText(HipiEffectPage.objFilterHeaderr);
			System.out.println(filterName);
			if ("Valentines ".equalsIgnoreCase(filterName)) {
				logger.info("User is redirect for  particular Filter detail screen");
				extent.extentLoggerPass("","User is redirect for  particular Filter detail screen");
				}else
				{
				logger.info("User is not redirect for  particular Filter detail screen");
				extent.extentLoggerFail("","User is not redirect for  particular Filter detail screen");
				}
			}
			navigateToHomePage();
		}
	}

	//=========================================Creator New=================================
	
	public void verifyUiOfEditScreen_T1653(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1653 - Logged in User - Check UI of EditScreen");
			System.out.println("T1653");
			extent.extentLogger("Creator", "T1653");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext)) {
				logger.info("User is able to navigate to the video edit screen");
		    	extent.extentLoggerPass("video edit Screen", "User is able to navigate to the video edit screen");
		    }else {
		    	logger.info("User is unable to navigate to the video edit screen");
		    	extent.extentLoggerFail("video edit Screen", "User is unable to navigate to the video edit screen"); 
			}
			if(verifyElementPresent(HipiCreateVideoPage.objeditvideobackbtn,"Back button"))
			{
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditFilter,"filter");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objtrim,"Trim");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objvolumebtn,"Volume");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"Sound");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker");
				waitTime(2000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
				discardPopup();
			}
			
		}
	}
	
	public void verifyUserCanNavigateToEditClipScreen_T1654(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1654 - Logged in User - Check by tapping on Edit clip on Edit screen User navigates to \"Edit clips\" screen");
			System.out.println("T1654");
			extent.extentLogger("Creator", "T1654");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipscreenTick)) {
				logger.info("User is able navigate to Edit clips screen by tapping  Edit clip on Edit screen");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able navigate to Edit clips screen by tapping  Edit clip on Edit screen");
		    }else {
		    	logger.info("User is unable navigate to Edit clips screen by tapping  Edit clip on Edit screen");
		    	extent.extentLoggerFail("Edit clip Screen", "User is unable navigate to Edit clips screen by tapping  Edit clip on Edit screen"); 
			}
			discardPopup();
		}
	}
	public void verifyClipInEditClipScreen_T1656(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1656 - Logged in User - Check User all clips recorded seen in Edit clips screen");
			System.out.println("T1656");
			extent.extentLogger("Creator", "T1656");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipVideo)) {
				logger.info("User is able to see all clips recorded in Edit clips screen");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able to see all clips recorded in Edit clips screen");
		    }else {
		    	logger.info("User is unable to see all clips recorded in Edit clips screen");
		    	extent.extentLoggerFail("Edit clip Screen", "User is unable to see all clips recorded in Edit clips screen"); 
			}
			discardPopup();
		}
	}
	public void verifyUserNavigatedToMediaScreenByTappinOnPlusIconOfEditClipScreen_T1657(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1657 - Logged in User - Check by tapping on + button on the Edit clips screen User navigates to Select media screen of the device");
			System.out.println("T1657");
			extent.extentLogger("Creator", "T1657");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			if(verifyElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup)) {
				logger.info("User is able to navigate to Select media screen of the device by tapping  + button on the Edit clips screen");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able to navigate to Select media screen of the device by tapping  + button on the Edit clips screen");
		    }else {
		    	logger.info("User is unable to navigate to Select media screen of the device by tapping  + button on the Edit clips screen");
		    	extent.extentLoggerFail("Edit clip Screen", "User is unable to navigate to Select media screen of the device by tapping  + button on the Edit clips screen"); 
			}
			discardPopup();
		}
	}
	
	public void verifyUserNavigatedToMediaScreenByTappinOnRightPlusIconOfEditClipScreen_T1659(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1659 - Logged in User - Check by tapping plus button on right hand side of the particular clip User can add photo or video at right hand side only");
			System.out.println("T1659");
			extent.extentLogger("Creator", "T1659");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenRightPlusIcon,"Right Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			String arr[]= {"","First video","second video"};
			for(int i=1;i<=2;i++)
			{
				verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(i),arr[i]);
				Swipe("LEFT",1);
			}

				logger.info("User is able to  add photo or video at right hand side only by tapping + button on right hand side of the particular clip");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able to  add photo or video at right hand side only by tapping + button on right hand side of the particular clip");
		   
		}
		discardPopup();
	}
	
	public void verifyUserNavigatedToMediaScreenByTappinOnLeftPlusIconOfEditClipScreen_T1660(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1660 - Logged in User - Check by tapping + button on left hand side of the particular clip User can add photo or video at left hand side only");
			System.out.println("T1660");
			extent.extentLogger("Creator", "T1660");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			String arr[]= {"","First video","second video"};
			for(int i=1;i<=2;i++)
			{
				verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(i),arr[i]);
				Swipe("RIGHT",1);
			}

				logger.info("User is able to  add photo or video at Left hand side only by tapping + button on right hand side of the particular clip");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able to  add photo or video at Left hand side only by tapping + button on right hand side of the particular clip");
		   
		}
		discardPopup();
	}
	
	public void verifyUserCanDeletePhotoInEditClipScreen_T1673(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1673 - Logged in User - Check User able to delete the photo by tapping on delete button");
			System.out.println("T1673");
			extent.extentLogger("Creator", "T1673");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst picture");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			String arr[]= {"","First video","second Picture"};
			for(int i=1;i<=2;i++)
			{
				verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(i),arr[i]);
				Swipe("LEFT",1);
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipDeleteButton,"Delete");
			waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipSecondVideo)) {
				logger.info("User is  unable to delete the photo by tapping on delete button ");
		    	extent.extentLoggerFail("Edit clip Screen", "User is  unable to delete the photo by tapping on delete button ");
		    }else {
		    	logger.info("User is  able to delete the photo by tapping on delete button ");
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to delete the photo by tapping on delete button "); 
			}
			discardPopup();	}
	}
	//------------04/02/20222---------------------

	//Logged in User - Check User able to delete multiple video by tapping on delete button_T1680
	public void verifyUserCanDeleteMultiplePhotoInEditClipScreen_T1680(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1680 - Logged in User - Check User able to delete multiple video by tapping on delete button");
			System.out.println("T1680");
			extent.extentLogger("Creator", "T1680");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst picture");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipCopy,"Copy");
			waitTime(2000);
			for(int i=1;i<=10;i++)
			{
				if(verifyElementDisplayed(HipiCreateVideoPage.objEditClipKeepAtleastPopup))
				{
					logger.info("User is  able to delete the photo by tapping on delete button ");
			    	extent.extentLoggerPass("Edit clip Screen", "User is  able to delete the photo by tapping on delete button "); 
			    	break;
				}else
				{
					verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipDeleteButton,"Delete");
					waitTime(1000);
				}
			}
			discardPopup();
		}
	}
	//Logged in User - Check User navigated to  trim  screen  by  tapping on trim button_T1684
	public void verifyUserCanNavigateToTrimScreen_T1684(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1684 - Logged in User - Check User navigated to  trim  screen  by  tapping on trim button");
			System.out.println("T1684");
			extent.extentLogger("Creator", "T1684");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst picture");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			Swipe("LEFT",1);	
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipTrim,"Trim");
			if(verifyElementPresent(HipiCreateVideoPage.objEditClipDurationInfo,"Duraton Info")) {
				logger.info("User is able to Navigate to trim screen");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able to Navigate to trim screen");
		    }else {
		    	logger.info("User is unable to Navigate to trim screen");
		    	extent.extentLoggerFail("Edit clip Screen", "User is unable to Navigate to trim screen"); 
			}
			discardPopup();
	}
	}
	public void verifyUserCanDragVideoInTrimScreen_T1685(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1685 - Logged in User - Check User is able to drag the video in trim screen");
			System.out.println("T1685");
			extent.extentLogger("Creator", "T1685");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst Video");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			Swipe("LEFT",1);	
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipTrim,"Trim");
			String Actualtext=getText(HipiCreateVideoPage.objEditClipDurationInfo);
//			Actualtext.replaceAll("The total duration after triming is ","");
			System.out.println(Actualtext);
			WebElement TrimSlider=getDriver().findElement(By.xpath("//*[@id='leftHandleImage']"));
			Point elementHeight=TrimSlider.getLocation();
			int xaxis=elementHeight.getX();
			trimVideo(TrimSlider,200,xaxis,"Trim left slider");
			String Expectedtext=getText(HipiCreateVideoPage.objEditClipDurationInfo);
//			Expectedtext.replaceAll("The total duration after triming is ","");
			System.out.println(Expectedtext);
			if(Actualtext!=Expectedtext)
			{
				logger.info("User is able to trim the video by dragging the trim option by end of the screen");
		    	extent.extentLoggerPass("Trim Screen", "User is able to trim the video by dragging the trim option by end of the screen");
		    }else {
		    	logger.info("User is unable to trim the video by dragging the trim option by end of the screen");
		    	extent.extentLoggerFail("Trim Screen", "User is unable to trim the video by dragging the trim option by end of the screen"); 
			}
			discardPopup();
		}
	}
	public void verifyUserCanSplitVideoOnEditClipScreen_T1681(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1681 - Logged in User - Check User is able to split the video in Edit clip  screen");
			System.out.println("T1681");
			extent.extentLogger("Creator", "T1681");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst Video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			Swipe("LEFT",1);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipSplit,"Split");
			waitTime(2000);
			WebElement source=getDriver().findElement(By.xpath("//*[@class='android.widget.ImageView' and ./parent::*[@id='topHandle']]"));
			Point elementHeight=source.getLocation();
			int xaxis=elementHeight.getX();
			trimVideo(source,200,xaxis,"split handler");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipSlipscreenTick,"Tick icon");
			waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipSecondVideo)) {
				logger.info("User is  able to split the video ");
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to split the video ");
		    }else {
		    	logger.info("User is  unable to split the video ");
		    	extent.extentLoggerFail("Edit clip Screen", "User is  unable to split the video "); 
			}
			discardPopup();
			
		}
	}
	
	public void verifyUserCanNavigateToCreatorScreenOnTappingShareDuet_T1786(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1786 - Logged in User - Duet video - Check  User navigates to Creator screen by tapping on Duet option");
			System.out.println("T1786");
			extent.extentLogger("Creator", "T1786");
			verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
			waitTime(2000);
			allowPermissions();
			waitTime(5000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
	 		waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord, 5);
	 		if(verifyElementDisplayed(HipiHomePage.objDuetScreenRecord)) {
				logger.info("User is  able to navigate to creator screen on tapping Share to duet the video ");
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to navigate to creator screen on tapping Share to duet the video ");
		    }else {
		    	logger.info("User is  unable to navigate to creator screen on tapping Share to duet the video ");
		    	extent.extentLoggerFail("Edit clip Screen", "User is  unable to navigate to creator screen on tapping Share to duet the video "); 
			}
	navigateToHomePage();
		}
	}
	//Logged in User - Duet video - Check if User gets #duet with @Userhandle' is to be populated by default in description of "post" screen_T1790
	public void verifyUserHandlerIsAddedOnPostScreenByDuetWithUserHandler_T1790(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1790 - Logged in User - Duet video - Check if User gets #duet with @Userhandle' is to be populated by default in description of \"post\" screen");
			System.out.println("T1790");
			extent.extentLogger("Creator", "T1790");
			String Username=getText(HipiHomePage.objUserName);
			String actual="#duet with "+Username;
			System.out.println(actual);
			verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
			waitTime(2000);
			allowPermissions();
			waitForElementNotDisplayed(HipiCreateVideoPage.objDownloadProgressBar);
	 		waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord, 1);
	 		waitTime(3000);
	 		verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
	 		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 3);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,3);
			String Expected=getText(HipiCreateVideoPage.objadddescription);
			System.out.println(Expected);
			if(actual.contains(Expected))
			{
				logger.info("User is able to get #duet with @Userhandle' is to be populated by default in description  field of post screen");
				extent.extentLoggerPass("Edit clip Screen", "User is able to get #duet with @Userhandle' is to be populated by default in description  field of post screen");
			}else {
				logger.info("User is unable to get #duet with @Userhandle' is to be populated by default in description  field of post screen");
				extent.extentLoggerFail("Edit clip Screen", "User is unable to get #duet with @Userhandle' is to be populated by default in description  field of post screen"); 
			}
			discardPopup();
		}
	}
	//Logged in User - Duet video- Check User is not able to see  "Allow others to duet" on the UI of the "post" screen for the video which he was duetted from other creators_T1792
	public void verifyUserDuetIsDisbledInPostScreenWhileDuetingWithOtherUsers_T1792(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1792 - Logged in User - Duet video- Check User is not able to see  Allow others to duet on the UI of the post screen for the video which he was duetted from other creators");
			System.out.println("T1792");
			extent.extentLogger("Creator", "T1792");
			verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
			waitTime(2000);
			allowPermissions();
			waitForElementNotDisplayed(HipiCreateVideoPage.objDownloadProgressBar);
	 		waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord, 1);
	 		waitTime(3000);
	 		verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
	 		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");

			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 10);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,30);
			if(verifyElementDisplayed(HipiCreateVideoPage.objPostScreenAllowduetDisabled))
			{
					logger.info(" Allow others to duet has been disabled on the UI of the post screen for the video which he was duetted from other creators");
			    	extent.extentLoggerPass("Edit clip Screen", " Allow others to duet has been disabled on the UI of the post screen for the video which he was duetted from other creators");
			    }else {
			    	logger.info(" Allow others to duet is  enabled on the UI of the post screen for the video which he was duetted from other creators");
			    	extent.extentLoggerFail("Edit clip Screen", " Allow others to duet is  enabled on the UI of the post screen for the video which he was duetted from other creators"); 
			}
			discardPopup();
		}
	}
	//Logged in user - Check user able to tap on "Post"  cta in "Post Hipit" screen_T711
	public void verifyUserCanSplitVideoOnEditClipScreen_T711(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T711 - Logged in user - Check user able to tap on Post  cta in Post Hipit screen");
			System.out.println("T711");
			extent.extentLogger("Creator", "T711");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditScreenNext, 30, "Next");
			waitTime(15000);
			hideKeyboard();
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
			waitTime(5000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitUntilElementDisplayed(HipiHomePage.objForYou,30);
			if(verifyElementDisplayed(HipiHomePage.objForYou))
			{
					logger.info("User is able to post video  by tapping Post cta");
			    	extent.extentLoggerPass("Edit clip Screen", "User is able to post video  by tapping Post cta");
			    }else {
			    	logger.info("User is unable to post video  by tapping Post cta");
			    	extent.extentLoggerFail("Edit clip Screen", "User is unable to post video  by tapping Post cta"); 
			}
			discardPopup();

		}
	}
	//Logged in User - Check by tapping on 'Effect' Icon User is navigated to Effect screen_T1794
	public void verifyUserCanNavigateToEffectScreen_T1794(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1794 - Logged in user - Check user able to tap on Post  cta in Post Hipit screen");
			System.out.println("T1794");
			extent.extentLogger("Creator", "T1794");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effect icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objEffectsFirstEffect, 2);
			if(verifyElementDisplayed(HipiCreateVideoPage.objEffectsFirstEffect))
			{
					logger.info("User is able to navigate to effect screen  by tapping effecf icon");
			    	extent.extentLoggerPass("Effect Screen", "User is able to navigate to effect screen  by tapping effecf icon");
			    }else {
			    	logger.info("User is unable to navigate to effect screen  by tapping effecf icon");
			    	extent.extentLoggerFail("Effect Screen", "User is unable to navigate to effect screen  by tapping effecf icon"); 
			}
			navigateToHomePage();
		}
	}
	public void verifyUserCanNavigateToShareToScreen_T1701_T1713(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1701 - Check by  tapping the share option on the video on creators profile User should get the \"pop up\" screen  to share  via social media (As a sender)");
			System.out.println("T1701");
			extent.extentLogger("Creator Profile", "T1701");
		}else if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1713 - Check by  tapping the share option on the video on creators profile User should get the \\\"pop up\\\" screen  to share  via social media (As a sender)");
			System.out.println("T1713");
			extent.extentLogger("Creator", "T1713");
		}
//			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			verifyElementPresentAndClick(HipiHomePage.objDescription, "Description");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share");
			waitTime(2000);
			if(verifyElementDisplayed(HipiProfilePage.objprivateTabShareToTitle))
			{
					logger.info("User is able to navigate to effect screen  by tapping effecf icon");
			    	extent.extentLoggerPass("Effect Screen", "User is able to navigate to effect screen  by tapping effecf icon");
			    }else {
			    	logger.info("User is unable to navigate to effect screen  by tapping effecf icon");
			    	extent.extentLoggerFail("Effect Screen", "User is unable to navigate to effect screen  by tapping effecf icon"); 
			}
			navigateToHomePage();

		}
	//Check by tapping on any social media icon from the "Pop up" screen User navigates to the particular platform (As a sender)_T1702
	public void	verifyUserNavigatesToRespectiveSocialMediaScreenOntappingShareeOptionInCreatorsProfileVideo_T1702(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1702 - Check by tapping on any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
			System.out.println("T1702");
			extent.extentLogger("Creator Profile","T1702");
			verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Profile Picture");
			waitTime(5000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
			waitTime(5000);
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			navigateToGmail();
			}if(verifyElementDisplayed(HipiShareScreen.objSendButtonGmailShareScreen))
			{
				logger.info("User is able to see  any social media icon from the \"Pop up\" screen User navigates to the particular platform (As a sender)");
		    	extent.extentLoggerPass("Search Result Page", "User is able to see  any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
		    }else { 
		    	logger.info("User is unable to see  any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
		    	extent.extentLoggerFail("Search Result Page","User is able to see  any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
		}
			navigateToHomePage(); 					
}
//Check if he taps on the link url User should redirected to "Hipi" app and the particular video is opened(As a receiver)_T1706		
	public void	verifyUserNavigatesToRespectiveApplicationOntappingLinkReceived_T1706(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1706 - Check if he taps on the link url User should redirected to Hipi app and the particular video is opened(As a receiver)");
			System.out.println("T1706");
			extent.extentLogger("Creator Profile","T1706");
			verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Profile Picture");
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
			waitTime(4000);
			String actual=getText(HipiProfilePage.objVideoScreenDisc);
			System.out.println(actual);
			waitTime(1000);
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			shareWithGmail();
			openGmailApp();
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
				waitTime(5000);
				verifyElementPresentAndClick(HipiShareScreen.objVerifyUrl, "Url");
				if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
					logger.info("Logo is displayed");
					extent.extentLoggerPass("","Logo is displayed");
					click(HipiShareScreen.objHipiLogo, "Hipi Logo");
					}else
					{
					logger.info("Logo is not displayed");
					extent.extentLoggerFail("","Logo is not displayed");
					}				waitTime(5000);
				String Expected=getText(HipiProfilePage.objVideoScreenDisc);
				System.out.println(Expected);
				
				if(actual.contains(Expected))
				{
					logger.info("User is able to Navigate To Particualar video in hipi as tapped on the Link received ");
			    	extent.extentLoggerPass("Social media page", "User is able to Navigate To Particualar video in hipi as tapped on the Link received ");
			    }else { 
			    	logger.info("User is unable to Navigate To Particualar video in hipi as tapped on the Link received ");
			    	extent.extentLoggerFail("Social media page","User is unable to Navigate To Particualar video in hipi as tapped on the Link received ");					
				}
				navigateToHomePage();
		}
	}
	public void verifyUserCanNavigateBackToVideoEditScreenFromTrimScreen_T1686(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1686 - Logged in User - Check User able to navigate back towrads Edit clip screen when he taps on finsih button in Trim screen");
			System.out.println("T1686");
			extent.extentLogger("Creator", "T1686");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst Video");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			Swipe("LEFT",1);	
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipTrim,"Trim");
			waitTime(4000);
			WebElement element = getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle);
		    String xDuration = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
		    System.out.println(xDuration);
		    int endX = Integer.parseInt(xDuration) - 50;
		    SwipeAnElement(element, endX, 0);
		    Dimension size1= getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle).getSize();
		    System.out.println(size1);
		    String xDuration2 = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
		    System.out.println(xDuration2);
		    if(xDuration.equals(xDuration2) == false){
		    	logger.info("User is able to trim Video from trimming screen");
				extent.extentLoggerPass("", "User is able to trim Video from trimming screen");
		    }else {
		    	logger.error("User is NOT able to trim Video from trimming screen");
				extent.extentLoggerFail("", "User is NOT able to trim Video from trimming screen");
		    }
			
			
//			WebElement TrimSlider=getDriver().findElement(By.xpath("//*[@id='leftHandleImage']"));
//			trimVideo(TrimSlider,200,1742,"Trim left slider");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick icon");
			if(verifyElementDisplayed(HipiCreateVideoPage.objTrimscreenHeader))
			{
				logger.info(" User is able to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen");
		    	extent.extentLoggerPass("Trim Screen", " User is able to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen");
		    }else {
		    	logger.info(" User is unable to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen");
		    	extent.extentLoggerFail("Trim Screen", " User is unable to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen"); 
			}
			discardPopup();
		}
	}
	
	public void verifyUserCanNavigateBackToVideoEditScreenByTappingDeviceBackButtonTrimScreen_T1687(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("v - Logged in User - Check User able to navigate back towrads  Edit clip screen when he taps on app button in  Trim screen");
			System.out.println("T1687");
			extent.extentLogger("Creator", "T1687");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst Video");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			Swipe("LEFT",1);	
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipTrim,"Trim");
			waitTime(4000);
			Back(1);
			if(verifyElementDisplayed(HipiCreateVideoPage.objTrimscreenHeader))
			{
				logger.info(" User is able to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen");
		    	extent.extentLoggerPass("Trim Screen", " User is able to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen");
		    }else {
		    	logger.info(" User is unable to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen");
		    	extent.extentLoggerFail("Trim Screen", " User is unable to navigate back towrads Edit clip screen when user taps on finsih button in  Trim screen"); 
			}
			discardPopup();
		}
	}
	
	//Logged in User - check User is able to see text message in trim screen while trimming a video_T1688
	public void verifyUserTextInTrimScreenIsDisplayed_T1688(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1688 - Logged in User - check User is able to see text message in trim screen while trimming a video");
			System.out.println("T1688");
			extent.extentLogger("Creator", "T1688");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst picture");
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			Swipe("LEFT",1);	
			waitTime(4000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipTrim,"Trim");
			waitTime(4000);
			WebElement element = getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle);
		    String xDuration = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
		    System.out.println(xDuration);
		    int endX = Integer.parseInt(xDuration) - 50;
		    SwipeAnElement(element, endX, 0);
		    Dimension size1= getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle).getSize();
		    System.out.println(size1);
		    String xDuration2 = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
		    System.out.println(xDuration2);
		    if(xDuration.equals(xDuration2) == false){
		    	logger.info("User is able to trim Video from trimming screen");
				extent.extentLoggerPass("", "User is able to trim Video from trimming screen");
		    }else {
		    	logger.error("User is NOT able to trim Video from trimming screen");
				extent.extentLoggerFail("", "User is NOT able to trim Video from trimming screen");
		    }

			if(verifyElementDisplayed(HipiCreateVideoPage.objEditClipDurationInfo))
			{
				logger.info("User is able to see the text message as The total duration after  trimming is  00.00.00");
		    	extent.extentLoggerPass("Trim Screen", "User is able to see the text message as The total duration after  trimming is  00.00.00");
		    }else {
		    	logger.info("User is unable to see the text message as The total duration after  trimming is  00.00.00");
		    	extent.extentLoggerFail("Trim Screen", "User is unable to see the text message as The total duration after  trimming is  00.00.00"); 
			}
			discardPopup();
		}
	}
	//Check User able to see text message "Uploading to Hipi" on "Feed" screen after tapping on "post" CTA in post video screen_T1645
	public void	verifyUserCanSeeTextUploadingWhilePostingVideo_T1645(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1645 - Check User able to see text message Uploading to Hipi on Feed screen after tapping on post CTA in post video screen");
			System.out.println("T1645");
			extent.extentLogger("Post ","T1645");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.obj90sec, "90 sec");
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
//			waitTime(5000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn,30);
			click(HipiCreateVideoPage.objVideoEditNextBtn, "Next Button");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			click(HipiCreateVideoPage.objuploadpost, "Post Button");
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			boolean verify=verifyElementDisplayed(HipiCreateVideoPage.objUploadPopupuploatindText);
			String text=getText(HipiCreateVideoPage.objUploadPopupuploatindText);
			if(verify==true)
			{
				logger.info("User is able to see text "+text+" message Uploading to Hipi on Feed screen after tapping on post CTA in post video screen");
		    	extent.extentLoggerPass("Feed Screen", "User is able to see text "+text+" message Uploading to Hipi on Feed screen after tapping on post CTA in post video screen");
		    }else {
		    	logger.info("User is unable to see text "+text+" message Uploading to Hipi on Feed screen after tapping on post CTA in post video screen");
		    	extent.extentLoggerFail("Feed Screen", "User is unable to see text "+text+" message Uploading to Hipi on Feed screen after tapping on post CTA in post video screen"); 
		}					
		navigateToHomePage();
		}
	}
//Check by tapping on any social media icon from the "Pop up" screen User navigates to the particular platform (As a sender)_T1714	
	public void	verifyByTappingOnCreatorsShareIconUserNavigatesToSocialMediaPage_T1714(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1714 - Check by tapping on any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
			System.out.println("T1714");
			extent.extentLogger("Creator Profile","T1714");
//			verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Profile Picture");
			verifyElementPresentAndClick(HipiHomePage.objUserName, "User name");
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiProfilePage.objThreeDotsOtherUser, "Three dots Other user");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objShearIcon, "Share Icon");
			waitTime(4000);
			if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
				click(HipiShareScreen.objGmailOption, "Gmail option");
			}else {
				swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
				if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
					click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
					if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
						logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
						verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
						click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
						logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
						Thread.sleep(5000);
						}else {
							logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
							
						}
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
					}else {
							
					}	
				}
			}
			waitUntilElementDisplayed(HipiShareScreen.objSendButtonGmailShareScreen, 10);
			if(verifyElementDisplayed(HipiShareScreen.objSendButtonGmailShareScreen))
			{
				logger.info("User is able to see social media icon from the Pop up screen and  User navigates to the particular platform (As a sender)");
		    	extent.extentLoggerPass("Search Result Page", "User is able to see social media icon from the Pop up screen and  User navigates to the particular platform (As a sender)");
		    }else { 
		    	logger.info("User is unable to see social media icon from the Pop up screen and  User navigates to the particular platform (As a sender)");
		    	extent.extentLoggerFail("Search Result Page","User is unable to see social media icon from the Pop up screen and  User navigates to the particular platform (As a sender)");
		}
			navigateToHomePage(); 
		}
	}
//Check User should able to see the text message,Url  while sending the profile  through the socail media (As a sender)_T1715
	public void	verifyUserCanSeeTextmessageandUrlIsVisibleAsSenderEnd_T1715(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1715 - Check User should able to see the text message,Url  while sending the profile  through the socail media (As a sender)");
			System.out.println("T1715");
			extent.extentLogger("Creator Profile","T1715");
			verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Profile Picture");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDotsOtherUser, "Three dots Other user");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objShareButton, "Share Button");
			if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
				click(HipiShareScreen.objGmailOption, "Gmail option");
			}else {
				swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
				if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
					click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
					if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
						logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
						verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
						click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
						logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
						Thread.sleep(5000);
						}else {
							logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
							
						}
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
					}else {
							
					}	
				}
			}
			String Text=getText(HipiShareScreen.objGmailDescriptionField);
			if(verifyElementExist(HipiShareScreen.objCheckOutMyProfile(Text), Text))
			{
				waitTime(1000);
				verifyElementExist(HipiShareScreen.objVerifyUrl, "Url");
				logger.info("User is able to see Text and Url As a Receiver in respective social media platform");
		    	extent.extentLoggerPass("Social Media page", "User is able to see Text and Url As a Receiver in respective social media platform");
		    }else { 
		    	logger.info("User is unable to see Text and Url As a Receiver in respective social media platform");
		    	extent.extentLoggerFail("Social Media page","User is unable to see Text and Url As a Receiver in respective social media platform");					
			}
			navigateToHomePage(); 
		}
	}
//Check receiver is able see the text message,Url  after receiving (As a receiver)_T1716
	public void	verifyUserTextAndUrlIsVisibleAsAreceiverEnd_T1716(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1716 - Check receiver is able see the text message,Url  after receiving (As a receiver)");
			System.out.println("T1716");
			extent.extentLogger("Creator Profile","T1716");
			verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Profile Picture");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDotsOtherUser, "Three dots Other user");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objShearIcon, "Share Icon");
			if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
				click(HipiShareScreen.objGmailOption, "Gmail option");
			}else {
				swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
				if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
					click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
					if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
						logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
						verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
						click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
						logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
						Thread.sleep(5000);
						}else {
							logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
							
						}
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
					}else {
							
					}
				}
			}						
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			String newMail = getParameterFromXML("NewMailId");
			verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
			type(HipiShareScreen.objToField, newMail, "New mail");
			hideKeyboard();
			verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
			waitTime(2000);
			openGmailApp();
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
				waitTime(2000);
				if(verifyElementExist(HipiShareScreen.objCheckOutMyProfile, "Check out my profile"))
				{
					waitTime(1000);
					verifyElementExist(HipiShareScreen.objVerifyUrl, "Url");
					logger.info("User is able to see Text and Url As a Receiver in respective social media platform");
			    	extent.extentLoggerPass("Social Media page", "User is able to see Text and Url As a Receiver in respective social media platform");
			    }else { 
			    	logger.info("User is unable to see Text and Url As a Receiver in respective social media platform");
			    	extent.extentLoggerFail("Social Media page","User is unable to see Text and Url As a Receiver in respective social media platform");					
				}
				navigateToHomePage();
			
		}
	}
//Check if he taps on the link url User should redirected to "Hipi" app and the particular  profile is opened (As a receiver)_T1718		
	public void	verifyByTappingOnSharedLinkProfileIsOpened_T1718(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1718 - Check if he taps on the link url User should redirected to Hipi app and the particular  profile is opened (As a receiver)");
			System.out.println("T1718");
			extent.extentLogger("Creator Profile","T1718");
			verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Profile Picture");
			waitTime(2000);
			String actual=getText(HipiProfilePage.objProfileHeader);
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDotsOtherUser, "Three dots Other user");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objShareButton, "Share Button");
			if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
				click(HipiShareScreen.objGmailOption, "Gmail option");
			}else {
				swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
				if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
					click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
					if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
						logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
						verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
						click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
						logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
						Thread.sleep(5000);
						}else {
							logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
							
						}
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
					}else {
							
					}
				}
			}						
			verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
			String newMail = getParameterFromXML("NewMailId");
			verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
			type(HipiShareScreen.objToField, newMail, "New mail");
			hideKeyboard();
			verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
			waitTime(2000);
			openGmailApp();
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
				waitTime(2000);
				verifyElementPresentAndClick(HipiShareScreen.objVerifyUrl, "Url");
				if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
					logger.info("Logo is displayed");
					extent.extentLoggerPass("","Logo is displayed");
					click(HipiShareScreen.objHipiLogo, "Hipi Logo");
					}else
					{
					logger.info("Logo is not displayed");
					extent.extentLoggerFail("","Logo is not displayed");
					}				waitTime(5000);
				String Expected=getText(HipiProfilePage.objProfileHeader);
				if(actual.contains(Expected))
				{
					logger.info("Receiver is able to redirected to Hipi app and the Particular profile is opened");
			    	extent.extentLoggerPass("Social Media page", "Receiver is able to redirected to Hipi app and the Particular profile is opened");
			    }else { 
			    	logger.info("Receiver is unable to redirected to Hipi app and the Particular profile is opened");
			    	extent.extentLoggerFail("Social Media page","Receiver is unable to redirected to Hipi app and the Particular profile is opened");					
				}
				navigateToHomePage();

		}
	}
	
	public void	verifyUserCanSeeUrlTextAndVideoAsSender_T1703(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1703 - Check User should able to see the text message,Url and video  while sending the profile link through the socail media (As a sender)");
			System.out.println("T1703");
			extent.extentLogger("Creator Profile","T1703");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objShareProfile, "Share Profile");
			if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
				click(HipiShareScreen.objGmailOption, "Gmail option");
			}else {
				swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
				if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
					click(HipiShareScreen.objGmailOption, "Gmail option");
				}else {
					verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
					if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
						logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
						verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
						click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
						logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
						Thread.sleep(5000);
						}else {
							logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
							
						}
					if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
						click(HipiShareScreen.objGmailOption, "Gmail option");
					}else {
							
					}
				}
			}
			
			if(verifyElementExist(HipiShareScreen.objCheckOutMyProfile, "Check out my profile"))
			{
				waitTime(1000);
				verifyElementExist(HipiShareScreen.objVerifyUrl, "Url");
				waitTime(1000);
				logger.info("User is able to see Text ,Video and Url As a sender in respective social media platform");
		    	extent.extentLoggerPass("Search Result Page", "User is able to see Text ,Video and Url As a sender in respective social media platform");
		    }else { 
		    	logger.info("User is unable to see Text, video and Url As a sender in respective social media platform");
		    	extent.extentLoggerFail("Search Result Page","User is unable to see Text,video and Url As a sender in respective social media platform");					
			}
			navigateToHomePage(); 				

		}
	}
	
	public void verifyUserCanEditvideoBeforeNavigatingToPostScreen_T1962(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1962 - Check by tapping on back arrow on Edit video without doing any edit User get redirected to Post video screen");
			System.out.println("T1962");
			extent.extentLogger("Edit Screen Video", "T1962");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Tab");
			waitUntilElementDisplayed(HipiProfilePage.objDraftsPageVideo, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDraftsPageVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objPostScreenEdit,"Edit");
			waitUntilElementDisplayed(HipiProfilePage.objPostScreenTrimVideoTitle,30);
			verifyElementPresent(HipiProfilePage.objPostScreenTrimVideoTitle,"Trim video screen");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objPostScreenTrimsTick,"Tick");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
//			waitUntilElementDisplayed(null, retryCount)
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
			hideKeyboard();
			if(verifyElementDisplayed(HipiCreateVideoPage.objpostbtn))
			{
					logger.info("User is able to navigate to post screen  by clicking back Arrow Without doing any changes in edit video");
			    	extent.extentLoggerPass("Post Screen", "User is able to navigate to post screen  by clicking back Arrow Without doing any changes in edit video");
			    }else {
			    	logger.info("User is unable to navigate to post screen  by clicking back Arrow Without doing any changes in edit video");
			    	extent.extentLoggerFail("Post Screen", "User is unable to navigate to post screen  by clicking back Arrow Without doing any changes in edit video"); 
			}
			discardPopup();	
		}
	}
	
	public void verifyUserCanNavigateToFeedScreenByTappingOnPost_T1637(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1637 , Check User navigates to Feed screen by tapping on post CTA on post video screen");
			System.out.println("T1637");
			extent.extentLogger("Post", "T1637");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions(); 
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
//			waitTime(5000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 20);
			
			hideKeyboard();
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
			waitTime(5000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
				if (verifyIsElementDisplayed(HipiHomePage.objForYou))
				{
					logger.info("User is able to navigate to effect screen  by tapping effecf icon");
			    	extent.extentLoggerPass("Effect Screen", "User is able to navigate to effect screen  by tapping effecf icon");
			    }else {
			    	logger.info("User is unable to navigate to effect screen  by tapping effecf icon");
			    	extent.extentLoggerFail("Effect Screen", "User is unable to navigate to effect screen  by tapping effecf icon"); 
			}
				navigateToHomePage();	
	
		}
				
	}
	
	
	//========================Discover========================
	public void verifyCommentBoxIsVisibleInDiscoverScreen_T1810_T1811(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1810 - Check if Guest User is able to see Comment box at the bottom of the video screen in Discover");
			System.out.println("T1810");
			extent.extentLogger("Discover", "T1810");
		} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1811 - Check if Guest User is able to see Comment box at the bottom of the video screen in Discover");
			System.out.println("T1811");
			extent.extentLogger("Discover", "T1811");
		}
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
			waitTime(2000);
			if(verifyElementPresent(HipiDiscoverPage.objCommentBox,"Comment Box"))
			{
				logger.info("User is able to see a comment box at the bottom of the video screen in Discover");
		    	extent.extentLoggerPass("Discover Screen", "User is able to see a comment box at the bottom of the video screen in Discover");
		    }else {
		    	logger.info("User is unable to see a comment box at the bottom of the video screen in Discover");
		    	extent.extentLoggerFail("Discover Screen", "User is unable to see a comment box at the bottom of the video screen in Discover"); 
		}
			navigateToHomePage();
		}
//Check if Guest User Login popup is displayed whenever User tries on Like CTA beside comments added by other Users_T1837
	public void verifyUserCanLikeTheComments_T1837(String userType,String userName) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1837 - Check if Guest User Login popup is displayed whenever User tries on Like CTA beside comments added by other Users");
			System.out.println("T1837");
			extent.extentLogger("Discover", "T1837");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
			waitTime(2000);
			type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");			
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage,"Video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
			waitUntilElementDisplayed(HipiHomePage.objLikeIconCommentScreen, 5);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Comment Like");
			if(verifyElementPresent(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email"))
			{
				logger.info("User is able to see Login popup whenever User tries on Like CTA beside comments added by other Users");
		    	extent.extentLoggerPass("Discover Screen", "User is able to see Login popup whenever User tries on Like CTA beside comments added by other Users");
		    }else {
		    	logger.info("User is unable to see Login popup whenever User tries on Like CTA beside comments added by other Users");
		    	extent.extentLoggerFail("Discover Screen", "User is unable to see Login popup whenever User tries on Like CTA beside comments added by other Users"); 
		}
		} 
		navigateToHomePage();

	}
	
	//Check if Login popup is displayed whenever User tries to post a comment as Guest User_T1834
		public void verifyUserCanAddComments_T1834(String userType,String userName) throws Exception 
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T1834 - Check if Login popup is displayed whenever User tries to post a comment as Guest User");
				System.out.println("T1834");
				extent.extentLogger("Discover", "T1834");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
				waitTime(2000);
				type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");			
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
				waitUntilElementDisplayed(HipiDiscoverPage.objFirstVideoBannerPage, 5);
				verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage,"Video");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
				waitTime(2000);
			click(HipiHomePage.objCommentscreenTextField,"Comment TextField");
			type(HipiHomePage.objCommentscreenTextField,userName,"Type value");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objCommentPostIcon, "Comment post button");
			waitTime(2000);
			if(verifyElementPresent(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email"))
				{
					logger.info("User is able to see Login popup whenever User tries to post a comment as Guest User");
			    	extent.extentLoggerPass("Discover Screen", "User is able to see Login popup whenever User tries to post a comment as Guest User");
			    }else {
			    	logger.info("User is unable to see Login popup whenever User tries to post a comment as Guest User");
			    	extent.extentLoggerFail("Discover Screen", "User is unable to see Login popup whenever User tries to post a comment as Guest User"); 
			}
			} 
			navigateToHomePage();

		}
//Check if comment screen is opened when User clicks on the comment box_T1839
		public void verifyUserCanNavigateToCommentScreen_T1839(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T1839 - Check if comment screen is opened when User clicks on the comment box");
				System.out.println("T1839");
				extent.extentLogger("Discover", "T1839");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
				if(verifyElementPresent(HipiHomePage.objCommentscreenTextField,"Comment screen"))
				{
					logger.info("comment screen has been opened when User clicks on the comment box");
			    	extent.extentLoggerPass("comment Screen", "comment screen has been opened when User clicks on the comment box");
			    }else {
			    	logger.info("comment screen is not opened when User clicks on the comment box");
			    	extent.extentLoggerFail("comment Screen", "comment screen is not opened when User clicks on the comment box"); 
			}
				navigateToHomePage();
			}
		}
//Guest User - Check by tapping on follow button in "Discover"  screen User should get login pop-up_T1925	
		public void verifyByTappingOnFollowUserGetsLoginPopUp_T1925(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T1925- Guest User - Check by tapping on follow button in Discover  screen User should get login pop-up");
				System.out.println("T1925	");
				extent.extentLogger("Discover", "T1925	");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objPlusFollowICON, "Plus Icon");
				waitTime(2000);
				if(verifyElementPresent(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email"))
				{
					logger.info("User is able to see Login popup whenever User tries to tap on follow/plus icon");
			    	extent.extentLoggerPass("Discover Screen", "User is able to see Login popup whenever User tries to tap on follow/plus icon");
			    }else {
			    	logger.info("User is unable to see Login popup whenever User tries to tap on follow/plus icon");
			    	extent.extentLoggerFail("Discover Screen", "User is unable to see Login popup whenever User tries to tap on follow/plus icon"); 
			}
			navigateToHomePage();
}
}
		
//Check by tapping any shoppable video on the "Discover" page User redirects to video playing screen_T1936
		public void verifyByTappingOnFollowUserGetsLoginPopUp_T1936(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1936 - Check by tapping any shoppable video on the Discover page User redirects to video playing screen");
				System.out.println("T1936	");
				extent.extentLogger("Discover", "T1936	");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				SwipeUntilFindElement(HipiDiscoverPage.objBucketIcon, "UP");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Shop Bucket");
				waitTime(2000);
				if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen"))
				{
					logger.info("User is able to redirect to video player screen by tapping any shoppable video on Discover page");
			    	extent.extentLoggerPass("Discover Screen", "User is able to redirect to video player screen by tapping any shoppable video on Discover page");
			    }else {
			    	logger.info("User is unable to redirect to video player screen by tapping any shoppable video on Discover page");
			    	extent.extentLoggerFail("Player screen", "User is unable to redirect to video player screen by tapping any shoppable video on Discover page"); 
			}
			navigateToHomePage();
			}
		}
//Check by tapping any profile rail on "Discover" page User navigates to User handle profile screen_T1940
		public void verifyByTappingProfileUserNavigatesToProfileScreen_T1940(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1940 - Check by tapping any profile rail on Discover page User navigates to User handle profile screen");
				System.out.println("T1940	");
				extent.extentLogger("Discover", "T1940	");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objProfileFromRail, "Profile On rails");
				waitTime(5000);
				if(verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header"))
				{
					logger.info("User is able to navigate to creator profile screen by tapping any profile rail on Discover page");
			    	extent.extentLoggerPass("profile Screen", "User is able to navigate to creator profile screen by tapping any profile rail on Discover page");
			    }else {
			    	logger.info("User is unable to navigate to creator profile screen by tapping any profile rail on Discover page");
			    	extent.extentLoggerFail("profile Screen", "User is unable to navigate to creator profile screen by tapping any profile rail on Discover page"); 
			}
			navigateToHomePage();
			}
		}
//Check by tapping shoppale video on creators profile in rails User redirected to "video player" screen_T1941
		public void verifyByTappingProfileUserNavigatesToProfileScreen_T1941(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1941 - Check by tapping shoppale video on creators profile in rails User redirected to video player screen");
				System.out.println("T1941	");
				extent.extentLogger("Discover", "T1941	");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objProfileFromRail, "Profile On rails");
				waitTime(2000);
				SwipeUntilFindElement(HipiDiscoverPage.objBucketIcon, "UP");
				verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Shop Bucket");
				waitTime(2000);
				if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen"))
				{
					logger.info("User is able to redirected to video player screen by tapping shoppale video on creators profile in rails");
			    	extent.extentLoggerPass("Discover Screen", "User is able to redirected to video player screen by tapping shoppale video on creators profile in rails");
			    }else {
			    	logger.info("User is unable to redirected to video player screen by tapping shoppale video on creators profile in rails");
			    	extent.extentLoggerFail("Player screen", "User is unable to redirected to video player screen by tapping shoppale video on creators profile in rails"); 
			}
			navigateToHomePage();
			}
		}
		
		
		//----------detail screen--------------------//
		//Check if Logged-In User is able to view comment - popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens_T1863
				public void verifyUserCanViewCommentPopup_T1863(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("T1863 - Check if Logged-In User is able to view comment - popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
						System.out.println("T1863");
						extent.extentLogger("All Detail", "T1863");
						verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
						waitTime(5000);
						verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
						waitTime(2000);
						verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
						waitTime(2000);
						verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
						waitTime(3000);
						if(verifyElementPresent(HipiHomePage.objCommentScreen,"Comment screen"))
						{
							logger.info("Logged-In User is able view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
					    	extent.extentLoggerPass("comment Screen", "Logged-In User is able view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens"); 
						}else {
							logger.info("Logged-In User is unable to view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
							extent.extentLoggerFail("comment Screen", "Logged-In User is unable to view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
							 
					    	}
						navigateToHomePage();
					}
				}
		//Check if User is able to like existing/new comments added by other Users_T1868
				public void verifyUserCanLikeExistingComments_T1868(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Check if User is able to like existing/new comments added by other Users");
						System.out.println("T1868");
						extent.extentLogger("All Detail", "T1868");
						verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
						waitTime(5000);
						verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
						waitTime(2000);
//						for(int i=1;i<10;i++)
//						{
//						verifyElementPresentAndClick(HipiProfilePage.objFirstVideoIteratable(i),"First video");
//						waitTime(2000);
//						String verify=getText(HipiHomePage.objCommentCount);
//						int a=Integer.parseInt(verify);
//						if(a>0)
//						{
//							break;
//						}else
//						{
//							Back(1);
//						}
//						}
//						verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");				
//						String actual=getText(HipiHomePage.objLikeCountCommentScreen);
//						verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
//						waitTime(2000);
//						String expected=getText(HipiHomePage.objLikeCountCommentScreen);
//						if(actual!=expected)
//						{
//							logger.info("User is able to like comments added by other Users");
//					    	extent.extentLoggerPass("comment Screen", "User is able to like comments added by other Users");
//					    }else {
//					    	logger.info("User is unable to like comments added by other Users");
//					    	extent.extentLoggerFail("comment Screen", "User is unable to like comments added by other Users"); 
//					}
						
						verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
						waitTime(4000);
						
						verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");				
						String postDescription = "Desc"+GeneratingRandomString(7);
				 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
				 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
				 		hideKeyboard();				
				 		String actual=getText(HipiHomePage.objLikeCountCommentScreen);
						verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
						waitTime(2000);
						String expected=getText(HipiHomePage.objLikeCountCommentScreen);
						if(actual!=expected)
						{
							logger.info("User is able to like comments added by other Users");
					    	extent.extentLoggerPass("comment Screen", "User is able to like comments added by other Users");
					    }else {
					    	logger.info("User is unable to like comments added by other Users");
					    	extent.extentLoggerFail("comment Screen", "User is unable to like comments added by other Users"); 
					}
				 		navigateToHomePage();
					}
				}	
		//Check if User is able to dislike existing/new comments added by other Users_T1869
				public void verifyUserCanDislikeExistingComments_T1869(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Check if User is able to dislike existing/new comments added by other Users");
						System.out.println("T1869");
						extent.extentLogger("All Detail", "T1869");
						verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
						waitTime(5000);
						verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
						waitTime(2000);
//						for(int i=1;i<10;i++)
//						{
//						verifyElementPresentAndClick(HipiProfilePage.objFirstVideoIteratable(i),"video");
//						waitTime(2000);
//						String verify=getText(HipiHomePage.objCommentCount);
//						int a=Integer.parseInt(verify);
//						if(a>0)
//						{
//							break;
//						}else
//						{
//							Back(1);
//						}
//						}
//						verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");				
//						String actual=getText(HipiHomePage.objLikeCountCommentScreen);
//						verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
//						waitTime(3000);
//						verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
//						waitTime(2000);
//						String expected=getText(HipiHomePage.objLikeCountCommentScreen);
//						if(actual.contains(expected))
//						{
//							logger.info("User is able to dislike existing/new comments added by other Users");
//					    	extent.extentLoggerPass("comment Screen", "User is able to dislike existing/new comments added by other Users");
//					    }else { 
//					    	logger.info("User is unable to dislike existing/new comments added by other Users");
//					    	extent.extentLoggerFail("comment Screen", "User is unable to dislike existing/new comments added by other Users"); 
//					}
						

						verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
						waitTime(4000);
						
						verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");				
						String postDescription = "Desc"+GeneratingRandomString(7);
				 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
				 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
				 		hideKeyboard();				
				 		String actual=getText(HipiHomePage.objLikeCountCommentScreen);
						verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
						waitTime(3000);
						verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
						waitTime(2000);
						String expected=getText(HipiHomePage.objLikeCountCommentScreen);
						if(actual.contains(expected))
						{
							logger.info("User is able to dislike existing/new comments added by other Users");
					    	extent.extentLoggerPass("comment Screen", "User is able to dislike existing/new comments added by other Users");
					    }else { 
					    	logger.info("User is unable to dislike existing/new comments added by other Users");
					    	extent.extentLoggerFail("comment Screen", "User is unable to dislike existing/new comments added by other Users"); 
					}
						
						navigateToHomePage();
					}

				}		
				
		//Check display of latest comment appears on top and time is changed after few min for Logged-In User in all detail screens_T1875
				public void verifyUserAddedCommentsTimeGetsUpdated_T1875(String userType,String userName) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("T1875 - Check display of latest comment appears on top and time is changed after few min for Logged-In User in all detail screens");
						System.out.println("T1875");
						extent.extentLogger("Detail screen", "T1875");
						verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
						waitTime(5000);
						verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
						waitTime(2000);
						verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
						waitTime(2000);
						verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
						waitTime(2000);
					click(HipiHomePage.objCommentscreenTextField,"Comment TextField");
					waitTime(3000);
					type(HipiHomePage.objCommentscreenTextField,userName,"Type value");
					waitTime(2000);
					verifyElementPresentAndClick(HipiHomePage.objCommentPostIcon, "Comment post button");
					waitTime(2000);
					System.out.println("Waiting For 1 Minuite To lapse");
					waitTime(1000*60);
					Back(2);
					verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
					waitTime(2000);
					if(verifyElementDisplayed(HipiDiscoverPage.objCommentOneMinuteAgo))
						{
							logger.info("Display of comment time has been changed from 'just now' to <numberof min> minutes ago");
					    	extent.extentLoggerPass("Comment Screen", "Display of comment time has been changed from 'just now' to <numberof min> minutes ago");
					    }else {
					    	logger.info("Display of comment time is not changed from 'just now' to <numberof min> minutes ago");
					    	extent.extentLoggerFail("Discover Screen", "Display of comment time is not changed from 'just now' to <numberof min> minutes ago"); 
					}
					navigateToHomePage();
					} 
				}	
		
//				----------------PRofile P0 new Tc's------------------------
				//Check if Logged-In User is able to add comment to own profile video on tapping comment box at the bottom of the screen over the video playing/paused_T1867	
						public void verifyUserCanAddCommenOnOwnProfileVideo_T1867(String userType,String userName) throws Exception 
						{
							if(userType.equalsIgnoreCase("NonSubscribedUser"))
							{
								extent.HeaderChildNode("T1867 - Logged-In User is able to add comment to own profile video on tapping comment box at the bottom of the screen over the video playing/paused");
								System.out.println("T1867");
								extent.extentLogger("Profile", "T1867");
								verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
								waitTime(2000);
								verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
								waitTime(2000);
								verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
								waitTime(2000);
								String actual=getText(HipiDiscoverPage.objCommentTitle);
							click(HipiHomePage.objCommentscreenTextField,"Comment TextField");
							type(HipiHomePage.objCommentscreenTextField,userName,"Type value");
							waitTime(2000);
							hideKeyboard();
							verifyElementPresentAndClick(HipiHomePage.objCommentPostIcon, "Comment post button");
							waitTime(5000);
							String Expected=getText(HipiDiscoverPage.objCommentTitle);
							if(actual!=Expected)
							{
								logger.info("Logged-In User is able to add comment to own profile video on tapping comment box at the bottom of the screen over the video playing/paused");
						    	extent.extentLoggerPass("Edit clip Screen", "Logged-In User is able to add comment to own profile video on tapping comment box at the bottom of the screen over the video playing/paused");
						    }else {
						    	logger.info("Logged-In User is unable to add comment to own profile video on tapping comment box at the bottom of the screen over the video playing/paused");
						    	extent.extentLoggerFail("Edit clip Screen", "Logged-In User is unable to add comment to own profile video on tapping comment box at the bottom of the screen over the video playing/paused"); 
							
							}
							navigateToHomePage();
							}
						}		
				//Check if User is able to like/Dislike own profile comments_T1870
								public void verifyUserCanDislikeOwnProfileVideo_T1870(String userType) throws Exception 
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1870 - Check if User is able to like/Dislike own profile comments");
										System.out.println("T1870");
										extent.extentLogger("Profile", "T1870");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										waitTime(2000);
										verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
										waitTime(2000);
										verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
//										verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
										waitUntilElementDisplayed(HipiHomePage.objAddAComment, 10);
										verifyElementPresentAndClick(HipiHomePage.objAddAComment, "Add a comment");
								 		waitTime(3000);
								 		String postDescription = "Desc"+GeneratingRandomString(7);
								 		type(HipiHomePage.objAddAComment, postDescription, "Type Comment");
								 		click(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
								 		hideKeyboard();
										waitTime(2000);			
										String actual=getText(HipiHomePage.objLikeCountCommentScreen);
										verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
										waitTime(3000);
										verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
										waitTime(2000);
										String expected=getText(HipiHomePage.objLikeCountCommentScreen);
										if(actual.contains(expected))
										{
											logger.info("User is able to dislike existing/new comments added by other Users");
									    	extent.extentLoggerPass("comment Screen", "User is able to dislike existing/new comments added by other Users");
									    }else { 
									    	logger.info("User is unable to dislike existing/new comments added by other Users");
									    	extent.extentLoggerFail("comment Screen", "User is unable to dislike existing/new comments added by other Users"); 
									}
										navigateToHomePage();
									}
								}
								//check by tapping on any social media icon from the "Pop up" screen User navigates to the particular platform (As a sender)_T1696
								public void	verifyUserNavigatesToRespectiveSocialMediaScreenOntappingShareeOption_T1696(String userType) throws InterruptedException, Exception
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1696 - check by tapping on any social media icon from the \"Pop up\" screen User navigates to the particular platform (As a sender)");
										System.out.println("T1696");
										extent.extentLogger("Settings & privacy","T1696");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										waitTime(4000);
										verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
										waitTime(1000);
										verifyElementPresentAndClick(HipiSettingsPage.objShareProfile, "Share Profile");
										if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
											click(HipiShareScreen.objGmailOption, "Gmail option");
										}else {
											swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
											if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
												click(HipiShareScreen.objGmailOption, "Gmail option");
											}else {
												verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
												if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
													logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
													verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
													click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
													logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
													Thread.sleep(5000);
												}else {
													logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");

												}
												if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
													click(HipiShareScreen.objGmailOption, "Gmail option");
												}else {

												}
											}
											
										}
										waitTime(5000);
										if(verifyElementDisplayed(HipiShareScreen.objSendButtonGmailShareScreen))
										{
											logger.info("User is able to see  any social media icon from the \"Pop up\" screen User navigates to the particular platform (As a sender)");
											extent.extentLoggerPass("Search Result Page", "User is able to see  any social media icon from the \\\"Pop up\\\" screen User navigates to the particular platform (As a sender)");
										}else { 
											logger.info("User is unable to see  any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");
											extent.extentLoggerFail("Search Result Page","User is able to see  any social media icon from the Pop up screen User navigates to the particular platform (As a sender)");


										}
										navigateToHomePage(); 				
										}
								}
					//Check User should able to see the text message,Url  while sending the profile link through the socail media (As a sender)_T1697
								public void	verifyUserCanSeeUrlAndTextWhileSharingProfile_T1697(String userType) throws InterruptedException, Exception
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1697 - Check User should able to see the text message,Url  while sending the profile link through the socail media (As a sender)");
										System.out.println("T1697");
										extent.extentLogger("Profile","T1697");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
										waitTime(1000);
										verifyElementPresentAndClick(HipiSettingsPage.objShareProfile, "Share Profile");
										if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
											click(HipiShareScreen.objGmailOption, "Gmail option");
										}else {
											swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
											if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
												click(HipiShareScreen.objGmailOption, "Gmail option");
											}else {
												verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
												if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
													logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
													verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
													click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
													logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
													Thread.sleep(5000);
													}else {
														logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
														
													}
												if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
													click(HipiShareScreen.objGmailOption, "Gmail option");
												}else {
														
												}
											}
										}
										String Text=getText(HipiShareScreen.objGmailDescriptionField);
										if(verifyElementExist(HipiShareScreen.objCheckOutMyProfile(Text), "Check out my profile"))
										{
											waitTime(1000);
											verifyElementExist(HipiShareScreen.objVerifyUrl, "Url");
											logger.info("User is able to see Text and Url As a sender in respective social media platform");
									    	extent.extentLoggerPass("Search Result Page", "\"User is able to see Text and Url As a sender in respective social media platform\"");
									    }else { 
									    	logger.info("User is unable to see Text and Url As a sender in respective social media platform");
									    	extent.extentLoggerFail("Search Result Page","User is unable to see Text and Url As a sender in respective social media platform");					
										}
										navigateToHomePage(); 				

									}
								}
					//Check receiver is able see the text message,Url  after receiving (As a receiver)_T1698
								public void	verifyUserhasReceivedTextAndUrlBysharingProfile_T1698(String userType) throws InterruptedException, Exception
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1698 - Check receiver is able see the text message,Url  after receiving (As a receiver)");
										System.out.println("T1698");
										extent.extentLogger("Profile","T1698");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 5);
										verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
										waitTime(1000);
										verifyElementPresentAndClick(HipiSettingsPage.objShareProfile, "Share Profile");
										waitTime(3000);
										if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
											click(HipiShareScreen.objGmailOption, "Gmail option");
										}else {
											swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
											if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
												click(HipiShareScreen.objGmailOption, "Gmail option");
											}else {
												verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
												if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
													logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
													verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
													click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
													logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
													Thread.sleep(5000);
													}else {
														logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
														
													}
												if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
													click(HipiShareScreen.objGmailOption, "Gmail option");
												}else {
														
												}
											}
										}
										waitUntilElementDisplayed(HipiShareScreen.objShareLinkGmailpage, 10);
										verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
										String newMail = getParameterFromXML("NewMailId");
										verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
										type(HipiShareScreen.objToField, newMail, "New mail");
										hideKeyboard();
										
										verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
										waitTime(1000);
										openGmailApp();
										if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
											Back(1);
											Swipe("DOWN", 5);
											verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
										}else {
											Swipe("DOWN", 5);
											verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
											waitTime(2000);
										}
											waitTime(2000);
											if(verifyElementExist(HipiShareScreen.objCheckOutMyProfile, "Check out my Profile"))
											{
												waitTime(1000);
												verifyElementExist(HipiShareScreen.objVerifyUrl, "Url");
												logger.info("User is able to see Text and Url As a Receiver in respective social media platform");
										    	extent.extentLoggerPass("Search Result Page", "User is able to see Text and Url As a Receiver in respective social media platform\"");
										    }else { 
										    	logger.info("User is unable to see Text and Url As a Reciever in respective social media platform");
										    	extent.extentLoggerFail("Search Result Page","User is unable to see Text and Url As a Receiver in respective social media platform");					
											}
											navigateToHomePage(); 
										}
									}
					//Check if he taps on the link url User should redirected to "Hipi" app and the particular profile is opened(As a receiver)_T1700
								public void	verifyUserCanNavigateToHipiScreenBytappIngOnRecevedLink_T1700(String userType) throws InterruptedException, Exception
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1700 - Check if he taps on the link url User should redirected to \"Hipi\" app and the particular profile is opened(As a receiver)");
										System.out.println("T1700");
										extent.extentLogger("Profile","T1700");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
										waitTime(1000);
										verifyElementPresentAndClick(HipiSettingsPage.objShareProfile, "Share Profile");
										waitTime(1000);
										if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
											click(HipiShareScreen.objGmailOption, "Gmail option");
										}else {
											swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
											if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
												click(HipiShareScreen.objGmailOption, "Gmail option");
											}else {
												verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
												if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
													logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
													verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
													click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
													logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
													Thread.sleep(5000);
													}else {
														logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
														
													}
												if (verifyElementExist(HipiShareScreen.objGmailOption, "Gmail option")) {
													click(HipiShareScreen.objGmailOption, "Gmail option");
												}else {
														
												}
											}
										}
										waitUntilElementDisplayed(HipiShareScreen.objShareLinkGmailpage, 10);
											verifyElementPresent(HipiShareScreen.objShareLinkGmailpage, "Link");
										String newMail = getParameterFromXML("NewMailId");
										verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
										type(HipiShareScreen.objToField, newMail, "New mail");
										hideKeyboard();
										
										verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
										waitTime(1000);
										openGmailApp();
										if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
											Back(1);
											Swipe("DOWN", 5);
											verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
										}else {
											Swipe("DOWN", 5);
											verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
											waitTime(2000);
										}
											waitTime(2000);
											verifyElementPresentAndClick(HipiShareScreen.objVerifyUrl, "Url");
											if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
												logger.info("Logo is displayed");
												extent.extentLoggerPass("","Logo is displayed");
												click(HipiShareScreen.objHipiLogo, "Hipi Logo");
												}else
												{
												logger.info("Logo is not displayed");
												extent.extentLoggerFail("","Logo is not displayed");
												}
											if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy)||verifyElementDisplayed(HipiProfilePage.objProfileHeader))
											{
												logger.info("User is able to Navigate To Hipiscreen as tapping on the Link received ");
										    	extent.extentLoggerPass("Social media page", "User is able to Navigate To Hipiscreen as tapping on the Link received ");
										    }else { 
										    	logger.info("User is unable to Navigate To Hipiscreen as tapping on the Link received ");
										    	extent.extentLoggerFail("Social media page","User is unable to Navigate To Hipiscreen as tapping on the Link received ");					
											}
											
									}
									navigateToHomePage();
								}
						
								//Check by tapping on any social media icon from the "Pop up" screen User navigates to the particular platform (As a sender)_T1708
								public void checkWhenUserTapToshareVideoUserNavigatedToRespectiveSocialMediaScreen_T1708(String userType) throws InterruptedException, Exception
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1708 - Check by tapping on any social media icon from the pop up screen User navigates to the particular platform (As a sender)");
										System.out.println("T1708");
										extent.extentLogger("Profile","T1708");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										waitUntilElementDisplayed(HipiProfilePage.objFirstVideo, 2);
										verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First video");
										waitUntilElementDisplayed(HipiHomePage.objShareIcon, 2);
										verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
										navigateToGmail();
										waitTime(5000);
										hideKeyboard();
										if(verifyElementPresent(HipiShareScreen.objVideoGmailSharingScreen, "Video"))
										{
											logger.info("User is able to Navigate To Respective screen While sharing profile video over Social media Platform ");
											extent.extentLoggerPass("Social media page", "User is able to Navigate To Respective screen While sharing profile video over Social media Platform ");
										}else { 
											logger.info("User is unable to Navigate To Respective screen While sharing profile video over Social media Platform ");
											extent.extentLoggerFail("Social media page","User is unable to Navigate To Respective screen While sharing profile video over Social media Platform ");					
										}
										navigateToHomePage();

									}
								}
					//Check User should able to see the text message,Url and video while sending the video through the socail media (As a sender)_T1709
								public void VerifyUrlTextAndVideoIsDisplayedWhileSharingOwnProfileVideoAsSender_T1709(String userType) throws InterruptedException, Exception
								{
									if(userType.equalsIgnoreCase("NonSubscribedUser"))
									{
										extent.HeaderChildNode("T1709 - Check User should able to see the text message,Url and video while sending the video through the socail media (As a sender)");
										System.out.println("T1709");
										extent.extentLogger("Profile","T1709");
										verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
										waitTime(2000);
										verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First video");
										waitTime(2000);
										verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
										
										navigateToGmail();
//										waitTime(3000);
										waitUntilElementDisplayed(HipiShareScreen.objShareLinkGmailpage, 10);

										hideKeyboard();
										String Text=getText(HipiShareScreen.objGmailDescriptionField);
										if(verifyElementExist(HipiShareScreen.objCheckOutMyProfile(Text), "Check out my profile"))
										{
											waitTime(1000);
											verifyElementExist(HipiShareScreen.objVerifyUrl, "Url");
											waitTime(1000);
											verifyElementExist(HipiShareScreen.objVideoGmailSharingScreen, "Video");
											logger.info("User is able to see Text, video and Url As a Receiver in respective social media platform");
									    	extent.extentLoggerPass("Search Result Page", "User is able to see Text, video and Url As a Receiver in respective social media platform");
									    }else { 
									    	logger.info("User is unable to see Text, video and Url As a Receiver in respective social media platform");
									    	extent.extentLoggerFail("Search Result Page","User is unable to see Text, video and Url As a Receiver in respective social media platform");					
										}
										navigateToHomePage(); 
									}
								}
								///=------------------Post-----------------------------
								//Check by tapping  video discription on saved draft video User get navigates to "Post video" screen_T1947
										public void verifyUserByClickingDescriptionOnPostScreenUserNavigatesToPostScreen_T1947(String userType) throws Exception 
										{
											if(userType.equalsIgnoreCase("NonSubscribedUser"))
											{
												extent.HeaderChildNode("T1947 - Check by tapping  video discription on saved draft video User get navigates to Post video screen");
												System.out.println("T1947");
												extent.extentLogger("Post", "T1947");
												verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
												waitTime(1000);
												verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Tab");
												waitTime(1000);
												verifyElementPresentAndClick(HipiProfilePage.objDraftsPageVideo,"Description");
												waitTime(1000);
												waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

												if(verifyElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader))
												{
													logger.info("User is able to navigate to Post video screen by tapping video discription on saved draft videos");
											    	extent.extentLoggerPass("Comment Screen", "User is able to navigate to Post video screen by tapping video discription on saved draft videos");
											    }else {
											    	logger.info("User is unable to navigate to Post video screen by tapping video discription on saved draft videos");
											    	extent.extentLoggerFail("Discover Screen", "User is unable to navigate to Post video screen by tapping video discription on saved draft videos"); 
											}
											navigateToHomePage();
											}
										}
										public void CheckByTappingOnShareOptionOnTheVideoUserGetsPopUpScreen_T1707(String userType) throws Exception
										{
											if(userType.equalsIgnoreCase("NonSubscribedUser"))
											{
												extent.HeaderChildNode("T1707 - Logged  in user - Check by  tapping the share option on the video on his own profile User should get the pop up screen  to share  via social media_T1707");
												System.out.println("T1707");
												extent.extentLogger("Profile_Settings & privacy","T1707");
												verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
												waitTime(3000);
												verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
												waitTime(3000);
												verifyElementPresentAndClick(HipiProfilePage.objShareOption, "Share Option");
												waitTime(3000);
												boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
												if (isShareOption) {
													logger.info("User is navigated share options screen");
													extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
													int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptionsEffectPage).size();
													if (shareOptions == 0) {
														extent.extentLoggerFail("Verify share options", "Share Options are not available");
														logger.info("Share Options are not available");
													} else {
														for (int i = 2; i <= shareOptions; i++) {
															String shareOptionName = getText(AMDMoreMenu.objShareoptions(i));
															logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
															extent.extentLoggerPass("Share Option ",
																	"Share Option : \"" + shareOptionName + "\" is available to share");
														}
													}
												} else {
													logger.info("Share Options are not displayed after clicking on Share CTA");
													extent.extentLoggerFail("Share through options screen",
															"Share Options are not displayed after clicking on Share CTA");
												}
												navigateToHomePage();
												

											}
										}
														
										public void CheckByTappingOnInviteFriendsUserAbleToRedirectToInviteFriendsScreen_T1743(String userType) throws Exception
										{
											if(userType.equalsIgnoreCase("NonSubscribedUser"))
											{
												extent.HeaderChildNode("T1743 - Logged  in user - Check by  tapping the share option on the video on his own profile User should get the pop up screen  to share  via social media_T1743");
												System.out.println("T1743");
												extent.extentLogger("Profile_Find-Friends","T1743");
												verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile ");
												waitTime(3000);
												verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Find Friends Icon");
												waitTime(2000);
												verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
												allowPermissions();
												waitTime(2000);
												if(verifyElementPresent(HipiProfilePage.objInviteFriendsHeaders, "Invite Friends Header"))
												
													{
														logger.info("User is redirected to Invite Friends screen by tapping on invite friends");
														extent.extentLoggerPass("Profile_Find-Friends", "User is redirected to Invite Friends screen by tapping on invite friends");
													}else
													{
														logger.info("User is not redirected to Invite Friends screen by tapping on invite friends");
														extent.extentLoggerFail("Profile_Find-Friends", "User is not redirected to Invite Friends screen by tapping on invite friends");
													}	
													navigateToHomePage();
												}
										
										
											
									}
										public void CheckHistoryOfMessageGetsDisplayedInProfileScreen_T1755(String userType) throws Exception
										{
											if(userType.equalsIgnoreCase("NonSubscribedUser"))
											{
												extent.HeaderChildNode("T1755 - Logged in User - Check history of message gets displayed in Profile screen_T1755");
												System.out.println("T1755");
												extent.extentLogger("Profile_Messagebutton","T1755");
												sendMessageToUser();
												verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
												waitTime(3000);
												verifyElementPresentAndClick(HipiProfilePage.objMessageButton, "Message Button");
												waitTime(3000);
												click(HipiProfilePage.objUserHandle, "User Handle");
												if(verifyElementPresent(HipiProfilePage.objMessage, "Message"))
												{
													logger.info("User is able to see the history of messages in profile screen ");
													extent.extentLoggerPass("Profile_Messagebutton", "User is able to see the history of messages in profile screen ");
												}else{
													logger.info("User is not able to see the history of messages in profile screen ");
													extent.extentLoggerFail("Profile_Messagebutton", "User is not able to see the history of messages in profile screen ");
												}	
												navigateToHomePage();
												}
										}																		
										public String name;
										public void sendMessageToUser() throws Exception 
										{
											
											click(HipiHomePage.objDiscoverButton, "Discover Button");
											waitTime(2000);
											click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
											waitTime(2000);
											verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
											String val = getParameterFromXML("Himanshi");
											type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
											waitTime(2000);
											verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
											waitTime(2000);
											click(HipiDiscoverPage.objUserTab,"User Tab");
											waitTime(2000);
											click(HipiDiscoverPage.objFirstSearchedResultSoundTab,"First User");
											name = getText(HipiProfilePage.objUserName);
											click(HipiProfilePage.objMessageButton, "Message Button");
											waitTime(3000);
											click(HipiProfilePage.objMessageBox, "Message Box");
											String text =getParameterFromXML("reportProfileDescription");
											type(HipiProfilePage.objMessageBox, text, "Message Box");
											waitTime(2000);
											click(HipiProfilePage.objSendMessageButton, "Send Button");
											waitTime(2000);
											navigateToHomePage();
										}				
										//---------------login po---------------
										//Check if User is able to see the "Login with OTP" in Log in with Phone number screen_T1766
												public void verifyUserCanSeeLoginWithOTPInLoginPopUp_T1766(String userType) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T1766 - Check if User is able to see the Login with OTP in Log in with Phone number screen");
														System.out.println("T1766");
														extent.extentLogger("Login", "T1766");	
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
														waitTime(2000);
														if(verifyElementDisplayed(HipiLoginPage.objLoginWithOTPButton))
														{
															logger.info("User is able to see the Login with OTP in Login with Phone Number screen");
													    	extent.extentLoggerPass("Login Screen", "User is able to see the Login with OTP in Login with Phone Number screen");
													    }else {
													    	logger.info("User is unable to see the Login with OTP in Login with Phone Number screen");
													    	extent.extentLoggerFail("Login Screen", "User is unable to see the Login with OTP in Login with Phone Number screen"); 
												
														}
														navigateToHomePage();
													}
												}
										//Check if User is able to enter the Phone Number in Phone Number field in Login with OTP screen_T1768
												public void verifyUserCanEnterPhoneNumberInLoginWithOTPScreen_T1768(String userType) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T1768 - Check if User is able to enter the Phone Number in Phone Number field in Login with OTP screen");
														System.out.println("T1768");
														extent.extentLogger("Login", "T1768");	
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
														click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
														 String Number = getParameterFromXML("PhoneNumber");
														type(HipiLoginPage.objPhoneNumberTextField,Number,"Type value");
														verifyElementPresentAndClick(HipiLoginPage.objSendOTP,"Send Otp");
														waitTime(5000);
														if(verifyElementDisplayed(HipiLoginPage.objVerifyOTPCTA))
														{
															logger.info("User is able to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    	extent.extentLoggerPass("Login Screen", "User is able to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    }else {
													    	logger.info("User is unable to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    	extent.extentLoggerFail("Login Screen", "User is unable to enter the Phone Number in the Phone Number field in Login with OTP screen"); 
												
														}
														navigateToHomePage();
													}
												}
										//Check if User is able to remove the entered phone number by tapping on cross icon in Login with OTP screen for Phone number_T1769
												public void verifyByTappingCrossIconEnteredDataIsRemoved_T1769(String userType ) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T1769 - Check if User is able to remove the entered phone number by tapping on cross icon in Login with OTP screen for Phone number");
														System.out.println("T1769");
														extent.extentLogger("Login", "T1769");	
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
														click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
														 String Number = getParameterFromXML("PhoneNumber");
														type(HipiLoginPage.objPhoneNumberTextField,Number,"Type value");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objLoginWithOtpScreenCrossIcon,"Cross Icon");
														waitTime(5000);
														String result=getText(HipiLoginPage.objPhoneNumberTextField);
														if(Number!=result)
														{
															logger.info("User is able to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    	extent.extentLoggerPass("Login Screen", "User is able to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    }else {
													    	logger.info("User is unable to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    	extent.extentLoggerFail("Login Screen", "User is unable to enter the Phone Number in the Phone Number field in Login with OTP screen"); 
												
														}
														navigateToHomePage();
													}
												}	
										//Check the app throwing an error message  when User enters an OTP before  the auto filled of OTP gets happens_T1774
												public void verifyByTappingCrossIconEnteredDataIsRemoved_T1774(String userType) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T1774 - Check if User is able to remove the entered phone number by tapping on cross icon in Login with OTP screen for Phone number");
														System.out.println("T1774");
														extent.extentLogger("Login", "T1774");	
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
														click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
														 String Number = getParameterFromXML("PhoneNumber");
														type(HipiLoginPage.objPhoneNumberTextField,Number,"Type value");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objSendOTP,"Send Otp");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA,"Verify Otp");
														waitTime(500);
														if(verifyElementDisplayed(HipiLoginPage.objLoginWithOtpScreenInvalidOtpPopup))
														{
															logger.info("User is able to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    	extent.extentLoggerPass("Login Screen", "User is able to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    }else {
													    	logger.info("User is unable to enter the Phone Number in the Phone Number field in Login with OTP screen");
													    	extent.extentLoggerFail("Login Screen", "User is unable to enter the Phone Number in the Phone Number field in Login with OTP screen"); 
												
														}
														navigateToHomePage();
													}
												}
										//Check if User is able to tap on Forgot password ? in login screen_T1775
												public void verifyUserAbleToTapOnForgetPasswordButton_T1775(String userType) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T1775 - Check if U ser is able to tap on Forgot password ? in login screen");
														System.out.println("T1775");
														extent.extentLogger("Login", "T1775");	
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forget Password");
														waitTime(2000);
														if(verifyElementDisplayed(HipiLoginPage.objForgotPasswordResetScreen))
														{
															logger.info("User is able to navigate to Reset  screen ");
													    	extent.extentLoggerPass("Login Screen", "User is able to navigate to Reset  screen ");
													    }else {
													    	logger.info("User is unable to navigate to Reset  screen ");
													    	extent.extentLoggerFail("Login Screen", "User is unable to navigate to Reset  screen "); 
												
														}
														navigateToHomePage();
													}
												}
										//Check the app throwing an error message  when User enters an OTP before  the auto filled of OTP gets happens_T1782
												public void verifyErrorMessageOnTapping_T1782(String userType) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T1782 - Check the app throwing an error message  when User enters an OTP before  the auto filled of OTP gets happen");
														System.out.println("T1782");
														extent.extentLogger("Login", "T1782");	
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forget Password");
														waitTime(2000);
														if(verifyElementDisplayed(HipiLoginPage.objForgotPasswordResetScreen))
														{
															logger.info("User is able to navigate to Reset  screen ");
															extent.extentLoggerPass("Login Screen", "User is able to navigate to Reset  screen ");
														}else {
															logger.info("User is unable to navigate to Reset  screen ");
															extent.extentLoggerFail("Login Screen", "User is unable to navigate to Reset  screen "); 
														}
														click(HipiLoginPage.objResetScreenPhoneNumberTextField,"Phone Number TextField");
														String Number = getParameterFromXML("PhoneNumber");
														type(HipiLoginPage.objResetScreenPhoneNumberTextField,Number,"Type value");
														waitTime(2000);
														verifyElementPresentAndClick(HipiLoginPage.objResetButton,"Reset button");
														waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 10);
								
														verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA,"Verify Otp");
//														waitTime(2000);
														if(verifyElementDisplayed(HipiLoginPage.objLoginWithOtpScreenInvalidOtpPopup))
														{
															logger.info("User is able to get the Invalid code message before  the OTP gets  auto filled when he taps on Verify OTP CTA.");
															extent.extentLoggerPass("Reset Screen", "User is able to get the Invalid code message before  the OTP gets  auto filled when he taps on Verify OTP CTA.");
														}else {
															logger.info("User is unable to get the Invalid code message before  the OTP gets  auto filled when he taps on Verify OTP CTA.");
															extent.extentLoggerFail("Reset Screen", "User is unable to get the Invalid code message before  the OTP gets  auto filled when he taps on Verify OTP CTA."); 

														}
														navigateToHomePage();
													}
												}	
												
												//Guest User - Check whether user is able to land on feed screen post tapping the deeplink_T1886	
												public void	verifyByTappingOnDeepLinkFromWhatsAppUserNavigatedToFeedScreen_T1886(String userType) throws InterruptedException, Exception
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("Guest User - Check whether user is able to land on feed screen post tapping the deeplink");
														System.out.println("T1886");
														extent.extentLogger("Deeplink","T1886");
														verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
														waitTime(1000);
														shareWithWhatsApp("Guest");
														openWhatsApp();
														waitTime(2000); 
														Back(1);
														verifyElementPresentAndClick(HipiShareScreen.objWhatsappUser, "User");
														waitTime(1000);
														verifyElementPresentAndClick(HipiShareScreen.objVerifyUrl, "Link");
														waitTime(1000);
														Back(1);
														if(verifyElementExist(HipiHomePage.objForYou, "Feed screen"))
														{
															logger.info("User is able to land on HiPi feed screen on tapping the deeplink for HiPi video");
													    	extent.extentLoggerPass("Feed screen", "User is able to land on HiPi feed screen on tapping the deeplink for HiPi video");
													    }else { 
													    	logger.info("User is unable to land on HiPi feed screen on tapping the deeplink for HiPi video");
													    	extent.extentLoggerFail("Feed screen","User is unable to land on HiPi feed screen on tapping the deeplink for HiPi video");					
														}
														Swipe("UP",1);
														navigateToHomePage();
													}
												}
												public void verifyUserRemovePhoneNumberByTappingOnCrossIcon_T813(String userType) throws Exception 
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("T813 - Check if user is able to remove the entered phone number by tapping on cross icon in login screen");
														System.out.println("T813");
														extent.extentLogger("Login/Signup screen", "T813");
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
												        waitTime(1000);
												        verifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
												        waitTime(1000);
												        verifyElementPresentAndClick(HipiLoginPage.objResetScreenPhoneNumberTextField,"PhoneNumber TextField");
												        waitTime(1000);
												        String Number=getParameterFromXML("NewNumber");
												        type(HipiLoginPage.objResetScreenPhoneNumberTextField,Number,"PhoneNumber TextField");
												        String Actual= getText(HipiLoginPage.objResetScreenPhoneNumberTextField);
												        waitTime(1000);
												        verifyElementPresentAndClick(HipiLoginPage.objLoginWithOtpScreenCrossIcon,"Cross icon");
												        String Expected= getText(HipiLoginPage.objResetScreenPhoneNumberTextField);
												    	if(Actual!=Expected)
														{
															logger.info("User is able to remove the entered phone number by tapping on cross icon");
													    	extent.extentLoggerPass("", "User is able to remove the entered phone number by tapping on cross icon");
													        }else {
													    	logger.info("User is unable to remove the entered phone number by tapping on cross icon");
													    	extent.extentLoggerFail("", "User is unable to remove the entered phone number by tapping on cross icon"); 
														}
														navigateToHomePage();	
													}
												}
									//Guest User - Check whether user is not shown with back button on watching video for the deeplink_T1890
												public void	verifyBackButtonIsNotPresentWhileTappingVideoSharedInWhatsapp_T1890(String userType) throws InterruptedException, Exception
												{
													if(userType.equalsIgnoreCase("Guest"))
													{
														extent.HeaderChildNode("Guest User - Check whether user is able to land on feed screen post tapping the deeplink");
														System.out.println("T1890");
														extent.extentLogger("Deeplink","T1890");
														verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
														waitTime(1000);
														shareWithWhatsApp("Guest");
														openWhatsApp();
														waitTime(2000); 
														Back(1);
														verifyElementPresentAndClick(HipiShareScreen.objWhatsappUser, "User");
														waitTime(1000);
														verifyElementPresentAndClick(HipiShareScreen.objVerifyUrl, "Link");
														waitTime(1000);
														Back(1);
														if(verifyElementDisplayed(HipiHomePage.objBackButton))
														{
															logger.info("User is unable to watch video for the deeplink with no back button displaying on feed screen");
													    	extent.extentLoggerFail("Feed screen", "User is unable to watch video for the deeplink with no back button displaying on feed screen");
													    }else { 
													    	logger.info("User is able to watch video for the deeplink with no back button displaying on feed screen");
													    	extent.extentLoggerPass("Feed screen","User is able to watch video for the deeplink with no back button displaying on feed screen");					
														}
														navigateToHomePage();
													}
												}
												//Check User is navigated to respected  page ,post tap on recieved deeplink_T1912/
												public void	verifySharedVideoIsDIsplayedWhenUserTapsOnLinkInWhatsapp_T1912(String userType) throws InterruptedException, Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("Check User is navigated to respected  page ,post tap on recieved deeplink");
														System.out.println("T1912");
														extent.extentLogger("Deeplink","T1912");
														String Actual=getText(HipiHomePage.objDescription);
														verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
														waitTime(1000);
														shareWithWhatsApp("NonSubscribedUser");
														openWhatsApp();
														waitTime(2000); 
														Back(1);
														verifyElementPresentAndClick(HipiShareScreen.objWhatsappUser, "User");
														waitTime(1000);
														verifyElementPresentAndClick(HipiShareScreen.objWhatsAppLink, "Link");
														waitTime(1000);
														Back(1);
														String Expected=getText(HipiHomePage.objDescription);
														if(Actual.contains(Expected))
														{
															logger.info("User is able to see the particular video when he tap on recieved deeplink ");
													    	extent.extentLoggerPass("Feed screen", "User is able to see the particular video when he tap on recieved deeplink ");
													    }else { 
													    	logger.info("User is unable to see the particular video when he tap on recieved deeplink ");
													    	extent.extentLoggerFail("Feed screen","User is unable to see the particular video when he tap on recieved deeplink ");					
														}
														navigateToHomePage();
													}
												}
												public void shareWithWhatsApp(String userType) throws Exception {
													
													verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
													
													if (verifyElementExist(HipiShareScreen.objWhatsappOption, "WhatsApp option")) {
														click(HipiShareScreen.objWhatsappOption, "WhatsApp option");
													}else {
														swipeRail(HipiShareScreen.objListOfShareOptions, "Left",2);
														if (verifyElementExist(HipiShareScreen.objWhatsappOption, "Whatsapp option")) {
															click(HipiShareScreen.objWhatsappOption, "Whatsapp option");
														}else {
															verifyElementPresentAndClick(HipiShareScreen.objMoreButton, "More Buttion");
															if (verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
																logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
																verifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
																click(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
																logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
																Thread.sleep(5000);
																}else {
																	logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
																	
																}
															if (verifyElementExist(HipiShareScreen.objWhatsappOption, "Whatsapp option")) {
																click(HipiShareScreen.objWhatsappOption, "Whatsapp option");
															}else {
																	
															}
														}
													}
													verifyElementPresentAndClick(HipiShareScreen.objWhatsappSearchIcon, "Search Icon");
													waitTime(1000);
													verifyElementPresentAndClick(HipiShareScreen.objWhatsappSearchTextField,"Search Text Field");
													type(HipiShareScreen.objWhatsappSearchTextField,"Igs", "User Name");
													hideKeyboard();				
													verifyElementPresentAndClick(HipiShareScreen.objWhatsappRecentUser, "First Suggesion");
													verifyElementPresentAndClick(HipiShareScreen.objWhatsappSendArrow, "Send");
													waitTime(1000);
													verifyElementPresentAndClick(HipiShareScreen.objWhatsappSendArrow, "Send");
													waitTime(1000);
													
												}	
												public void openWhatsApp() throws Exception{
													logger.info("Launching WhatsApp");
													extent.extentLogger("", "Launching WhatsApp");
													Runtime.getRuntime().exec("adb shell am start -n com.whatsapp/com.whatsapp.Main");
													waitTime(3000);
												}
												
								
										//===================================Muthu========================================================		
												public void CheckUserAbleToSeeMessageButtonInProfileScreenNextToBookMarkIcon_T1748(String userType) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1748 - Logged in User - Check User able to see message button  in Profile screen next to bookmark icon_T1748 ");
														System.out.println("T1748");
														extent.extentLogger("Profile_Messagebutton","T1748");
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
														waitTime(3000);
														if(verifyElementPresent(HipiProfilePage.objMessageButton, "Message Button"))
														{
															logger.info("User is able to see message button next to bookmark icon in profile ");
															extent.extentLoggerPass("Profile_Messagebutton", "User is able to see message button next to bookmark icon in profile ");
														}else
														{
															logger.info("User is not able to see message button next to bookmark icon in profile ");
															extent.extentLoggerFail("Profile_Messagebutton", "User is not able to see message button next to bookmark icon in profile ");
														}	
														navigateToHomePage();
														}
												
														}
												public void CheckTheMostRecentMessageShownInTop_T1754(String userType) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1754 - Logged in User - Check the most recent message shown in top_T1754");
														System.out.println("T1754");
														extent.extentLogger("Profile_Messagebutton","T1754");
//														sendMessageToUser();
														click(HipiHomePage.objDiscoverButton, "Discover Button");
														waitTime(2000);
														click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
														waitTime(2000);
														verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
														String val = getParameterFromXML("Himanshi");
														type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
														waitTime(2000);
														verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
														waitTime(5000);
														click(HipiDiscoverPage.objUserTab,"User Tab");
														waitTime(2000);
														click(HipiDiscoverPage.objFirstSearchedResultSoundTab,"First User");
														String name = getText(HipiProfilePage.objUserName);
														String name1 = name.replaceAll("\\s+","");
														System.out.println(name1);
														click(HipiProfilePage.objMessageButton, "Message Button");
														waitTime(3000);
														click(HipiProfilePage.objMessageBox, "Message Box");
														String text =getParameterFromXML("reportProfileDescription");
														type(HipiProfilePage.objMessageBox, text, "Message Box");
														waitTime(2000);
														click(HipiProfilePage.objSendMessageButton, "Send Button");
														waitTime(2000);
														navigateToHomePage();
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
														waitTime(3000);
														verifyElementPresentAndClick(HipiProfilePage.objMessageButton, "Message Button");
														waitTime(3000);
														String username=getText(HipiProfilePage.objUserHandle);
														System.out.println(username);
														String[] name2 = username.split("@");
														System.out.println(name2[1]);
														if(name1.equalsIgnoreCase(name2[1]))
														{
														logger.info("User is able to see the most recent message at top of the screen when the taps on message button in profile screen");
														extent.extentLoggerPass("Profile_Messagebutton", "User is able to see the most recent message at top of the screen when the taps on message button in profile screen");
														}else
														{
															logger.info("User is not able to see the most recent message at top of the screen when the taps on message button in profile screen");
															extent.extentLoggerFail("Profile_Messagebutton", "User is not able to see the most recent message at top of the screen when the taps on message button in profile screen");
														}	
														navigateToHomePage();
														}
												
												}
												
												public void CheckIfUserIsAbleToViewCommentPopUpOnTappingCommentBoxOverVideoPlayingOrPaused_T1866(String userType) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1866 - Logged in User- Check if User is able to view comment - popup on tapping comment box at bottom of the screen over video playing/paused in own profile detail screen_T1866");
														System.out.println("T1866");
														extent.extentLogger("MyProfile_Comments","T1866");
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
														waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 1);
														verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Detail Screen");
														waitUntilElementDisplayed(HipiProfilePage.objFirstVideo, 1);
														verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
														waitUntilElementDisplayed(HipiHomePage.objCommentICON, 1);
														verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
														waitTime(3000);
														if(verifyElementPresent(HipiHomePage.objCommentTitle, "Comment PopUp"))
														{
															logger.info("User is able to view comment-popup on tapping comment box over video playing");
														}
														else
														{
															logger.info("User is not able to view comment-popup on tapping comment box over video playing");
														}
														Back(1);
														PausePlayer();
														verifyElementPresent(HipiHomePage.objplaybutton, "Play Button");
														waitTime(3000);
														verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
														if(verifyElementPresent(HipiHomePage.objCommentTitle, "Comment PopUp"))
														{
															logger.info("User is able to view comment-popup on tapping comment box over video paused");
														}
														else
														{
															logger.info("User is not able to view comment-popup on tapping comment box over video paused");
														}
														navigateToHomePage();
													}
													
												}
												
												public void CheckIfUserAbleToCommentToOwnProfileVideoOnTappingCommentBoxWhenTheCommentIsDisabled_T1873(String userType) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1873 - Logged in User- Check If User is able to add comment to own profile video on tapping comment box , if comment is disabled while posting the video or comment is disabled in global settings_T1873");
														System.out.println("T1873");
														extent.extentLogger("OwnProfile-Comments","T1873");
														verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
														allowPermissions();
														verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record Icon");
														waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
														verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
														waitTime(3000);
														verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
														waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
														hideKeyboard();
														verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenCommentsEnabled,"Allow Comments Disabled");
														waitTime(2000);
//														verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//														waitTime(3000);
														if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
														{
															click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//															click(HipiCreateVideoPage.objDoneCTC, "Done Button");
														}else {
															logger.info("User is unable to See Language Options");
															extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
															
														}
														verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");	
														waitTime(5000);
														if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
															Back(1);
														}else {
															logger.info("User is unable to See Share Sheet");
															extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
														}
														verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
														videoPublishing();
//														verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
														verifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
														if(verifyElementPresent(HipiProfilePage.objCommentOff, "Comment Turned Off PopUp"))
															
														{
															logger.info("User is not able to add comment on tapping comment box if comment is disabled while posting the video");
															extent.extentLoggerPass("Profile_Messagebutton", "User is not able to add comment on tapping comment box if comment is disabled while posting the video");
														}else
														{
															logger.info("User is able to add comment on tapping comment box if comment is disabled while posting the video");
															extent.extentLoggerFail("OwnProfile-Comments", "User is able to add comment on tapping comment box if comment is disabled while posting the video");
														}	
														navigateToHomePage();
													}
												}															
												
												public void verifyMessageBoxInProfileScreen() throws Exception {
													
													if(verifyElementPresent(HipiProfilePage.objMessageButton, "Message Button"))
													{
														logger.info("User able to see message button next to Follow CTA in creator profile");
														extent.extentLoggerPass("Feed-Creator-Profile", "User able to see message button next to Follow CTA in creator profile");
													}else
													{
														logger.info("User not able to see message button next to Follow CTA in creator profile");
														extent.extentLoggerFail("Feed-Creator-Profile", "User not able to see message button next to Follow CTA in creator profile");
													}	
													
												}
												
												public void CheckIfUserAbleToSeeMessageButtonOrCreatorProfileWhenUserTapsOnUsernameInFeedScreen_T1746(String userType) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1746 - Logged in User - Check User able to see message button on creator profile when he taps on Username in Feed screen_T1746");
														System.out.println("T1746");
														extent.extentLogger("Feed-Creator-Profile","T1746");	
														waitTime(3000);
														verifyElementPresentAndClick(HipiHomePage.objUserName, "User Name");
														waitTime(4000);
														verifyMessageBoxInProfileScreen();
														navigateToHomePage();
														
														}
													}
																
												
												public void CheckIfUserAbleToSeeMessageButtonOrCreatorProfileWhenUserTapsOnthumbnailInFeedScreen_T1747(String userType) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1747 - Logged in User - Check User able to see message button on creator profile when he taps on thumbnail  in Feed screen_T1747");
														System.out.println("T1747");
														extent.extentLogger("Feed-Creator-Profile","T1747");	
														waitTime(3000);
														verifyElementPresentAndClick(HipiHomePage.objProfilePicture, "Profile Picture");
														verifyMessageBoxInProfileScreen();
														navigateToHomePage();
													}
												}
												public void CheckUserAbleToComposeANewMessageAndSendToCreator_T1750(String userType,String Text) throws Exception
												{
													if(userType.equalsIgnoreCase("NonSubscribedUser"))
													{
														extent.HeaderChildNode("T1750 - Logged in User - Check User able to compose a new message and send  to creator_T1750");
														System.out.println("T1750");
														extent.extentLogger("Feed-Creator-Profile","T1750");	
														waitTime(3000);
														verifyElementPresentAndClick(HipiHomePage.objUserName, "User Name");
														waitTime(3000);
														verifyElementPresentAndClick(HipiProfilePage.objMessageButton, "Message Button");
														waitUntilElementDisplayed(HipiProfilePage.objMessageBox, 2);
														click(HipiProfilePage.objMessageBox, "Message Box");
														waitTime(3000);
														type(HipiProfilePage.objMessageBox, Text, "Message Box");
														String text = getText(HipiProfilePage.objMessageBox);
														System.out.println(text);
														click(HipiProfilePage.objSendMessageButton, "Send Button");
														waitTime(3000);
														String text1=getText(HipiProfilePage.objMessage);
														System.out.println(text1);
														if((Text.equals(text))&&(text.equals(text1)))
														{
															logger.info("User is able to compose a new message and send ");
															extent.extentLoggerPass("Feed-Creator-Profile", "User is able to compose a new message and send ");
														}
														else
														{
															logger.info("User is not able to compose a new message and send ");
															extent.extentLoggerFail("Feed-Creator-Profile", "User is not able to compose a new message and send ");
														}	
														navigateToHomePage();
														}
												}
																															
												//===================================Muthu End========================================================											
												
																			
			//========================================Feed(K(p1))===================================



	public void  userAbleToSeeFollowButtonNextToUserhandle__T1923__T1924(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1923 - Guest User - Check  User  able to see follow  button next to Userhandle in \"Feed\" screen");
			System.out.println("T1923");
			extent.extentLogger("","T1923");
		} else{
			extent.HeaderChildNode("T1924 - Logged in User - Check  User  able to see follow  button next to Userhandle in \"Feed\" screen");
			System.out.println("T1924");
			extent.extentLogger("", "T1924");
		}
			SwipeUntilFindElement(HipiHomePage.objFollowButton, "UP");
			if(verifyElementPresent(HipiHomePage.objFollowButton, "Follow")){
				logger.info("Follow buttin is present next to Userhandle in Feed screen");
				extent.extentLoggerPass("", "Follow buttin is present next to Userhandle in Feed screen");
			}else{
				logger.info("Follow buttin is present next to Userhandle in Feed screen");
				extent.extentLoggerFail("", "Follow buttin is present next to Userhandle in Feed screen");
			}	
		} 
	
	//=============================P1(Deep link )======================================
	
	public void  ableToSeeCommentBoxAtTheBottomOfTheScreen__T1865(String userType) throws Exception {
	
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1865 - Check if Logged-In User is able to see comment box at the bottom of the screen over the video playing/paused on tapping video shared over deeplink");
			System.out.println("T1865");
			extent.extentLogger("","T1865");	
		
			
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			shareWithGmail();
			openGmailApp();
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
			verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "I Enjoyed Watching On Hipi");
			 String link = getText(HipiShareScreen.objLinkInbox);
//			verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerFail("","Logo is not displayed");
				}			waitTime(4000);
			if (verifyElementPresent(HipiDiscoverPage.objCommentBox, "Comment Box")) {
				logger.info("Logged-In User is able to see comment box at the bottom of the screen");
				extent.extentLoggerPass("", "Logged-In User is able to see comment box at the bottom of the screen");
			}else{
				logger.info("Logged-In User is not able to see comment box at the bottom of the screen");
				extent.extentLoggerFail("", "Logged-In User is not able to see comment box at the bottom of the screen");
			}	
			navigateToHomePage();
			
		
		}
		
	}
	
	
	public void commentBoxSharedFromSoundDetailScreen__T1879(String userType) throws Exception {
		

			extent.HeaderChildNode("T1879 - Check if Logged-In User/Guest User is able to view comment box at the bottom of the screen if video is shared from Sound Detail screen");
			System.out.println("T1879");
			extent.extentLogger("","T1879");	
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
			waitTime(2000);
			verifyElementPresentAndClick(HipiSoundDetailPage.objVerifyVideo, "First video");
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			navigateToGmail();
			String newMail = getParameterFromXML("NewMailId");
			type(HipiShareScreen.objToField, newMail, "New mail");
			hideKeyboard();
			verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
			waitTime(4000);
			openGmailApp();
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
			verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "I Enjoyed Watching On Hipi");
			 String link = getText(HipiShareScreen.objLinkInbox);
//			verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerPass("","Logo is not displayed");
				}	
			waitTime(4000);
			if (verifyElementPresent(HipiDiscoverPage.objCommentBox, "Comment Box")) {
				logger.info("Logged-In User is able to see comment box at the bottom of the screen");
				extent.extentLoggerPass("", "Logged-In User is able to see comment box at the bottom of the screen");
			}else{
				logger.info("Logged-In User is not able to see comment box at the bottom of the screen");
				extent.extentLoggerFail("", "Logged-In User is not able to see comment box at the bottom of the screen");
			}	
			navigateToHomePage();
		
		
	}
	
	public void navigateToHashtagRailVideo() throws Exception
	{
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		click(HipiDiscoverPage.objAnyHipiVideo, "Video");
		waitTime(5000);
	}
	
	public void tappingCommentBoxAtTheBottomOfTheScreenIfVideo__T1881(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1881 - Check if Logged-In User is able to add comment on tapping comment box at the bottom of the screen if video is shared from discover to social media");
			System.out.println("T1881");
			extent.extentLogger("","T1881");	
			navigateToHashtagRailVideo();
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
			
			navigateToGmail();
			openGmailApp();
			if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
				Back(1);
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			}else {
				Swipe("DOWN", 5);
				verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
				waitTime(2000);
			}
			verifyElementPresent(HipiShareScreen.objIEnjoyedWatchingOnHipi, "I Enjoyed Watching On Hipi");
			 String link = getText(HipiShareScreen.objLinkInbox);
//			verifyElementPresent(HipiShareScreen.objLinkInbox, "Link inbox");
			verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
			if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
				logger.info("Logo is displayed");
				extent.extentLoggerPass("","Logo is displayed");
				click(HipiShareScreen.objHipiLogo, "Hipi Logo");
				}else
				{
				logger.info("Logo is not displayed");
				extent.extentLoggerFail("","Logo is not displayed");
				}			waitTime(4000);
			if (verifyElementPresent(HipiDiscoverPage.objCommentBox, "Comment Box")) {
				logger.info("Logged-In User is able to see comment box at the bottom of the screen");
				extent.extentLoggerPass("", "Logged-In User is able to see comment box at the bottom of the screen");
			}else{
				logger.info("Logged-In User is not able to see comment box at the bottom of the screen");
				extent.extentLoggerFail("", "Logged-In User is not able to see comment box at the bottom of the screen");
			}	
			navigateToHomePage();
			}
		
	}	
	
	
	public void socialMediaPlatformUserAbleToGetTheTextMessage__T1745(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1745 - Check by inviting through any social media platform User able to get the text message");
			System.out.println("T1745");
			extent.extentLogger("","T1745");	
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile ");
			waitUntilElementDisplayed(HipiProfilePage.objInviteIcon, 1);
			verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Find Friends Icon");
			waitUntilElementDisplayed(HipiProfilePage.objInviteFriends, 1);
			verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
			allowPermissions();
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objSMSIcon, "SMS");
			waitTime(4000);
			click(HipiShareScreen.objKarteek, "Any Number");
			waitTime(4000);
			click(HipiShareScreen.objDone, "Done Button");
			waitTime(4000);
			waitUntilElementDisplayed(HipiShareScreen.objMessageTextBox, 1);
			 String link = getText(HipiShareScreen.objMessageTextBox);
				System.out.println(link);
			 if (link.contains("Join me on Hipi! Enjoy the trending short videos. Download Hipi app now:")) {
				 	logger.info("User is see Join me on Hipi! Enjoy the trending short videos. Download Hipi app now:");
					extent.extentLoggerPass("","User is see Join me on Hipi! Enjoy the trending short videos. Download Hipi app now:");
					}
			 		else
					{
					logger.info("User is not see Join me on Hipi! Enjoy the trending short videos. Download Hipi app now:i");
					extent.extentLoggerFail("","User is not see Join me on Hipi! Enjoy the trending short videos. Download Hipi app now:");
					}
			
			 	if (link.contains("https://")) {
				 	logger.info("User is able to see  Long URL");
					extent.extentLoggerPass("","User is able to see  Long URL");
					}else
					{
					logger.info("User is not able to see  Long URL");
					extent.extentLoggerFail("","User is not able to see  Long URL");
					}
			 navigateToHomePage();
			
		}
		
	}
	public void verifyCommentBox() throws Exception 
	{
		verifyElementPresent(HipiHomePage.objCommentICON, "Comment Icon");
		
		if(verifyElementPresent(HipiDiscoverPage.objCommentBox, "Comment Box"))
		{
			logger.info("User able to see a comment box at the bottom of the video screen ");
			extent.extentLoggerPass("Discover_Comments", "User able to see a comment box at the bottom of the video screen ");
		}else
		{
			logger.info("User not able to see a comment box at the bottom of the video screen ");
			extent.extentLoggerFail("Discover_Comments", "User not able to see a comment box at the bottom of the video screen");
		}	
		
	}
	public void commentBoxFilterDetailScreen__T1850__T1860(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if Guest User is able to see comment box at bottom of the screen over video playing/paused in Filter Detail screen");
			System.out.println("T1850");
			extent.extentLogger("", "T1850");
			}else {
				extent.HeaderChildNode("Check if Logged-In User is able to see comment box at bottom of the screen over video playing/paused in Filter Detail screen");
				System.out.println("T1860");
				extent.extentLogger("", "T1860");
			}	
		navigateToFeedFilters(userType);
		
		
		waitTime(2000);
		verifyElementPresentAndClick(HipiSoundDetailPage.objVerifyVideo, "First video");
		waitTime(4000);
		verifyCommentBox();
		
		navigateToHomePage();
	}
	
	public void  commentBoxEffectDetailScreen__T1849__T1859(String userType) throws Exception {
		
		

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Check if Guest User is able to see comment box at bottom of the screen over video playing/paused in Effect Detail screen");
			System.out.println("T1849");
			extent.extentLogger("", "T1849");
			}else {
				extent.HeaderChildNode("Check if Logged-In User is able to see comment box at bottom of the screen over video playing/paused in Effect Detail screen");
				System.out.println("T1859");
				extent.extentLogger("", "T1859");
			}		
		navigateToFeedEffects(userType);
		
		
		waitTime(2000);
		verifyElementPresentAndClick(HipiSoundDetailPage.objVerifyVideo, "First video");
		waitTime(4000);
		verifyCommentBox();
		
		navigateToHomePage();
		
		
	} 
	
	//===================================Discover===================================
	public void navigateToHashTagRailVideoViaMoreBtn() throws Exception 
	{
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		click(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "Expand Button");
		waitTime(3000);
		click(HipiDiscoverPage.objAnyHipiVideo, "Video");
	}
	public void navigateToProfileRailVideo() throws Exception
	{
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		click(HipiDiscoverPage.objFirstRailImage, "Profile");
		waitTime(3000);
		click(HipiProfilePage.objFirstVideo, "Video");
		waitUntilElementDisplayed(HipiDiscoverPage.objCommentBox, 3);
	}
	public void navigateToProfileRailVideoViaMoreBtn() throws Exception
	{
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(2000);
		click(HipiDiscoverPage.objMoreButtonProfile, "Expand Button");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUserHandle, "User");
		
		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
		verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile Header");
		waitTime(3000);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "Video");
		waitUntilElementDisplayed(HipiHomePage.objMusicButtonBelowLeftSide, 4);
	}
	public void CheckUserIsAbleTOSeeCommentBoxInVideoRails_T1816_T1827(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1816 - Guest User-Check If User is able to see Comment box in video screen in Discover video rails_T1816");
			System.out.println("T1816");
			extent.extentLogger("Discover_Comments","T1816");
		}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T1827 - Logged in User-Check If User is able to see Comment box in video screen in Discover video rails_T1827");
			System.out.println("T1827");
			extent.extentLogger("Discover_Comments","T1827");
		}
		navigateToHashTagRailVideoViaMoreBtn();
		verifyCommentBox();
		navigateToHomePage();
	}
	
	public void ChecKUserIsAbleTOSeeCommentBoxInVideoRails_T1817_T1828(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1817 - Guest User-Check If User is able to see Comment box in video screen in Discover Profile rails_T1817");
			System.out.println("T1817");
			extent.extentLogger("Discover_Comments","T1817");
		}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T1828 - Logged in User-Check If User is able to see Comment box in video screen in Discover Profile rails_T1828");
			System.out.println("T1828");
			extent.extentLogger("Discover_Comments","T1828");
		}	
		navigateToProfileRailVideo();
		verifyCommentBox();
		navigateToHomePage();
	
	}
	
	public void ChecKUserIsAbleTOSeeCommentBoxInVideoRails_T1818_T1829(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1818 - Guest User-Check If User is able to see Comment box in video screen in Discover Profile rails_T1818");
			System.out.println("T1818");
			extent.extentLogger("Discover_Comments","T1818");
		}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T1829 - Logged in User-Check If User is able to see Comment box in video screen in Discover Profile rails_T1829");
			System.out.println("T1829");
			extent.extentLogger("Discover_Comments","T1829");
		}	
		navigateToProfileRailVideoViaMoreBtn();
		verifyCommentBox();
		navigateToHomePage();
	}
	public void ChecKUserIsAbleTOSeeCommentBoxInSoundDetailScreen_T1819_T1830(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1819 - Guest User-Check If User is able to see Comment box in video screen in sound details screen_T1819");
			System.out.println("T1819");
			extent.extentLogger("Discover_Comments","T1819");
		}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T1830 - Logged in User-Check If User is able to see Comment box in video screen in sound details screen_T1830");
			System.out.println("T1830");
			extent.extentLogger("Discover_Comments","T1830");
		}	
		navigateToProfileRailVideoViaMoreBtn();
		waitTime(4000);
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
		verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Sound Title");
		click(HipiDiscoverPage.objAnyHipiVideo, "Video");
		verifyCommentBox();
		navigateToHomePage();
	}
	
	public void ChecKUserIsAbleTOSeeCommentBoxInSoundDetailScreen_T1820_T1831(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1820 - Guest User-Check If User is able to see Comment box in video screen in sound details screen_T1820");
			System.out.println("T1820");
			extent.extentLogger("Discover_Comments","T1820");
		}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T1831 - Logged in User-Check If User is able to see Comment box in video screen in sound details screen_T1831");
			System.out.println("T1831");
			extent.extentLogger("Discover_Comments","T1831");
		}	
		navigateToHashtagRailVideo();
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
		waitTime(5000);
		verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Sound Title");
		click(HipiDiscoverPage.objAnyHipiVideo, "Video");
		verifyCommentBox();
		navigateToHomePage();
		}
	
	public void ChecKIfLoginPopUpIsDisplayedWheneverUserTriesToPostAComment_T1835(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1835 - Guest User-Check if Login popup is displayed whenever User tries to post a comment_T1835");
			System.out.println("T1835");
			extent.extentLogger("Discover_Comments","T1835");
			navigateToProfileRailVideo();
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox, "Comment Box");
			String type=getParameterFromXML("reportProfileDescription");
			type(HipiHomePage.objAddAComment, type, "Comment Box");
			click(HipiHomePage.objCommentPostIcon, "Post Button");
			VerifyLoginPopUp();
			navigateToHomePage();
		}
	}
	
	public void ChecKIfUserIsAbleToSeeCommentsPostedByOtherUsersOnTappingOnCommentBox_T1836(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1836 - Guest User-Check if User is able to see Comments posted by other Users on tapping on comment box in video screen_T1836");
			System.out.println("T1836");
			extent.extentLogger("Discover_Comments","T1836");
			navigateToProfileRailVideo();
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox, "Comment Box");
			verifyOtherUserComments(userType);
			if(verifyElementPresent(HipiHomePage.objFirstCommentUserName, "Comments"))
			{
				logger.info("User able to see Comments posted by other Users on tapping on comment box");
				extent.extentLoggerPass("Discover_Comments", "User able to see Comments posted by other Users on tapping on comment box");
			}else
			{
				logger.info("User not able to see Comments posted by other Users on tapping on comment box");
				extent.extentLoggerFail("Discover_Comments", "User not able to see Comments posted by other Users on tapping on comment box");
			}	
			
				navigateToHomePage();
		}
	}
	
	
	public void ChecKIfLoginPopUpIsDisplayedWheneverUserTriesOnUserHandleOrThumbnailBesideComment_T1838(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1838 - Guest User-Check if Login popup is displayed whenever User tries on User handle/ thumbnail beside comment_T1838");
			System.out.println("T1838");
			extent.extentLogger("Discover_Comments","T1838");
			navigateToProfileRailVideo();
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox, "Comment Box");
			verifyOtherUserComments(userType);
			verifyElementPresentAndClick(HipiHomePage.objFirstCommentUserName, "Comments");
			VerifyLoginPopUp();
			navigateToHomePage();
		}
	}
	
	public void CheckIfUserIsAbleToLikeTheCommentsAddedAndLikeCTAShouldBeTurnedRedWithCountIncrementedAsLoggedInUser_T1844(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged-In User-Check if User is able to like the comments added and Like CTA should be turned red with count incremented as logged in User_T1844");
			System.out.println("T1844");
			extent.extentLogger("Discover_Comments","T1844");
			navigateToProfileRailVideo();
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox, "Comment Box");
			verifyOtherUserComments(userType);
			String beforelike = getText(HipiHomePage.objLikeCountCommentScreen);
			System.out.println(beforelike);
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentLike, "Like");
			String afterlike = getText(HipiDiscoverPage.objCommentLikeCount);
			System.out.println(afterlike);
			if(!beforelike.equals(afterlike))
			{
				logger.info("User able to like the comments added and Like CTA is turned red with count displayed below");
				extent.extentLoggerPass("Discover_Comments", "User able to like the comments added and Like CTA is turned red with count displayed below");
			}else{
				logger.info("User not able to like the comments added and Like CTA is not turned red with count displayed below");
				extent.extentLoggerFail("Discover_Comments", "User not able to like the comments added and Like CTA is not turned red with count displayed below");
			}	
			navigateToHomePage();
			}
	}
	
	
	public void ChecKIfUserIsAbleToNavigateToProfileDetailsScreenOnTappingUserHandleOrThumbnailInComments_T1845(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1845 - Logged in User-Check if User is able to navigate to profile details screen on tapping thumbnail/ Userhandle in comments screen_T1845");
			System.out.println("T1845");
			extent.extentLogger("Discover_Comments","T1845");
			navigateToProfileRailVideo();
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox, "Comment Box");
			verifyOtherUserComments(userType);
			verifyElementPresentAndClick(HipiHomePage.objFirstCommentUserName, "Comments");
			waitTime(4000);
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User able to navigate to profile details screen on tapping thumbnail/ Userhandle in comments screen");	
				extent.extentLoggerPass("Discover_Comments", "User able to navigate to profile details screen on tapping thumbnail/ Userhandle in comments screen");
			}else {
				logger.info("User able to navigate to profile details screen on tapping thumbnail/ Userhandle in comments screen");	
				extent.extentLoggerFail("Discover_Comments", "User able to navigate to profile details screen on tapping thumbnail/ Userhandle in comments screen");	
			}
			navigateToHomePage();
		}
	}
	
	public void ChecKIfUserIsAbleToNavigateToProfileDetailsScreenOnTappingUserHandleOrThumbnailInComments_T1933(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1933 - Logged in User -Check if User following any creator follow button should not be visible in Creator profile in discover_T1933");
			System.out.println("T1933");
			extent.extentLogger("Discover_Following","T1933");
			navigateToHashtagRailVideo();
			for(int i=0;i<1;i++)
			{
				if(verifyElementExist(HipiProfilePage.objFollowCTAText, "Follow"))
				{
					click(HipiProfilePage.objFollowCTAText, "Follow");
				}else {
					break;
				}
			}
			click(HipiHomePage.objUserName, "User Handle");
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")&&(verifyElementPresent(HipiProfilePage.objFollowingbutton, "Following CTA"))){
				logger.info("User navigates to creator profile  and following cta is visible");	
				extent.extentLoggerPass("Discover_Following", "User navigates to creator profile  and following cta is visible");
			}else {
				logger.info("User not navigates to creator profile  and following cta is not visible");	
				extent.extentLoggerFail("Discover_Following", "User  not navigates to creator profile  and following cta is not visible");	
			}
			navigateToHomePage();
			}
	}
	
	public void  verifyUserCanSeeCommentBoxInDiscoverSearchResult_T1812_T1823(String userType,String userName) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))

	{
		extent.HeaderChildNode("T1812 - Check if Guest User is able to see Comment box at the bottom of the video screen in Discover searched results");
		System.out.println("T1812");
		extent.extentLogger("Discover", "T1812");
	}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("T1823 - Check if Logged in User is able to see Comment box at the bottom of the video screen in Discover serached results");
		System.out.println("T1823");
		extent.extentLogger("Discover", "T1823");
		
	}
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(2000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
		waitTime(5000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage,"Video");
		waitTime(2000);
		if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
			{
				logger.info("User is able to see a comment box at the bottom of the video screen in Discover searched results");
	    	extent.extentLoggerPass("Search Result Page", "User is able to see a comment box at the bottom of the video screen in Discover searched results");
	    }else { 
	    	logger.info("User is unable to see a comment box at the bottom of the video screen in Discover searched results");
	    	extent.extentLoggerFail("Search Result Page", "User is unable to see a comment box at the bottom of the video screen in Discover searched results");
				
			}
		navigateToHomePage();
	}
	

	public void  verifyUserCanSeeCommentBoxInSearchedProfileVideo_T1813_T1824(String userType,String userName) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))

	{
		extent.HeaderChildNode("T1813 - Check if Guest User is able to see Comment box at the bottom of the video screen in profile deatils screen");
		System.out.println("T1813");
		extent.extentLogger("Discover", "T1813");
	}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("T1824 - Check if Logged in User is able to see Comment box at the bottom of the video screen in Discover serached results");
		System.out.println("T1824");
		extent.extentLogger("Discover", "T1824");
		
	}
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(2000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");			
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objFirstuserProfile, "First Profile");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
		if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
			{
				logger.info("User is able to see a comment box at the bottom of the video screen in Discover searched results");
	    	extent.extentLoggerPass("Search Result Page", "User is able to see a comment box at the bottom of the video screen in Discover searched results");
	    }else { 
	    	logger.info("User is unable to see a comment box at the bottom of the video screen in Discover searched results");
	    	extent.extentLoggerFail("Search Result Page", "User is unable to see a comment box at the bottom of the video screen in Discover searched results");
				
			}
		navigateToHomePage();
	}
	
	public void  verifyUserCanSeeCommentBoxInBytappingDifferentTabs_T1814_T1825(String userType,String userName) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))

	{
		extent.HeaderChildNode("T1814 - Check if Guest User is able to see Comment box at the bottom of the video screen in Discover searched results");
		System.out.println("T1814");
		extent.extentLogger("Discover", "T1814");
	}
		else if(userType.equalsIgnoreCase("NonSubscribedUser")){
		extent.HeaderChildNode("T1825 - Check if Logged in User is able to see Comment box at the bottom of the video screen in Discover serached results");
		System.out.println("T1825");
		extent.extentLogger("Discover", "T1825");
		
	}
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(2000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");			
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User Tab");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objHashtagsTab, "HashTag Tab");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds Tab");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objVideostabinSearchresultpage, "Videos Tab");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objVideoTabFirstVideo, "First Video");
		if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
			{
				logger.info("User is able to see a comment box at the bottom of the video screen in Discover searched results");
	    	extent.extentLoggerPass("Search Result Page", "User is able to see a comment box at the bottom of the video screen in Discover searched results");
	    }else { 
	    	logger.info("User is unable to see a comment box at the bottom of the video screen in Discover searched results");
	    	extent.extentLoggerFail("Search Result Page", "User is unable to see a comment box at the bottom of the video screen in Discover searched results");
				
			}
		navigateToHomePage();

	}		
//Check if Guest User is able to see Comment box at the bottom of the video screen in Discover video rails_T1815
	public void  verifyUserCanSeeCommentBoxInRailsProfileVideos_T1815_T1826(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))

	{
		extent.HeaderChildNode("T1815 - Check if Guest User is able to see Comment box at the bottom of the video screen in Discover video rails");
		System.out.println("T1815");
		extent.extentLogger("Discover", "T1815");
	}
		else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("T1826 - Check if Logged in User is able to see Comment box at the bottom of the video screen in Discover video rails");
			System.out.println("T1826");
			extent.extentLogger("Discover", "T1826");	
		}
		navigateToProfileRailVideoViaMoreBtn();
		if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
			{
				logger.info("User Is able to see a comment box at the bottom of the video screen in Discover video rails");
	    	extent.extentLoggerPass("Search Result Page", "User Is able to see a comment box at the bottom of the video screen in Discover video rails");
	    }else { 
	    	logger.info("User Is unable to see a comment box at the bottom of the video screen in Discover video rails");
	    	extent.extentLoggerFail("Search Result Page", "User Is unable to see a comment box at the bottom of the video screen in Discover video rails");
				
			}
		navigateToHomePage();
	}
	
	
/////////////////////////P2(Discover)////////////////////////////////////////////////////////
	public void verifyUserAddCommentAsGuest_T1852(String userType,String userName) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1852 - Check if Guest User is able to view comment - popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
			System.out.println("T1852");
			extent.extentLogger("Detail screen", "T1852");
			waitUntilElementDisplayed(HipiHomePage.objUserName, 3);
			verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
			waitTime(2000);
		click(HipiHomePage.objCommentscreenTextField,"Comment TextField");
		waitTime(4000);
		type(HipiHomePage.objCommentscreenTextField,userName,"Type value");
		waitTime(2000);
		hideKeyboard();
		verifyElementPresentAndClick(HipiHomePage.objCommentPostIcon, "Comment post button");
		waitTime(2000);
		if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
		{
			logger.info("Guest User is able view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
	    	extent.extentLoggerPass("comment Screen", "Guest User is able view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
	    }else {
	    	logger.info("Guest User is unable view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
	    	extent.extentLoggerFail("comment Screen", "Guest User is unable view comment popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens"); 
		}
		navigateToHomePage();
		}
	}
	
	public void CheckIfUserIsAbleToViewCommentBoxInHashtagBannerVideos_T1842(String userType) throws Exception
	{
			extent.HeaderChildNode("Check if User is able to view comment box in hashtag banner videos_T1842");
			System.out.println("T1842");
			extent.extentLogger("Discover_Comments","T1842");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiDiscoverPage.objBannerPictures, "Banner Image");
			navigateToBannerDetailsPage(userType);
			verifyElementPresent(HipiDiscoverPage.objHashTagNameInBannerPictures, "Hashtag Detail Screen");
			click(HipiDiscoverPage.objAnyHipiVideo, "Video");
			waitTime(3000);
			verifyCommentBox();
			navigateToHomePage();
		
	}
	
	
	public void CheckIfUserIsAleToViewCommentBox_T1843(String userType) throws Exception
	{
			extent.HeaderChildNode("Check if User is able to view comment box in Discover videos banner_T1843");
			System.out.println("T1843");
			extent.extentLogger("Discover_Comments","T1843");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			waitTime(3000);
			verifyElementPresentAndClick(HipiDiscoverPage.objBannerPictures, "Banner Image");
			waitTime(2000);
			click(HipiDiscoverPage.objVideoThumbnail, "Video");
			verifyCommentBox();
			navigateToHomePage();
		}
	
	public void CheckUIOfTheVideoPlayerScreenByTappingAnyVideoOnDiscoverPage_T1937(String userType) throws Exception
	{
			extent.HeaderChildNode("Check the UI of the video player screen by tapping any video on Discover page_T1937");
			System.out.println("T1937");
			extent.extentLogger("Discover_Videoplayerscreen","T1937");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			for(int i=0;i<=10;i++)
			{
				if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
				{
					verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
					break;
				}else
				{
					Swipe("UP", 2);
				}
			}
			verifyIconsInFeedScreen();
			navigateToHomePage();
	}
	
	public void verifyIconsInFeedScreen() throws Exception
	{
	
		verifyElementPresent(HipiHomePage.objProfilePicture, "Thumbnail Image");
		verifyElementPresent(HipiHomePage.objLikeICON, "Like");
		verifyElementPresent(HipiHomePage.objCommentICON, "Comment Box");
		verifyElementPresent(HipiHomePage.objShareICON, "Share");
//		verifyElementPresent(HipiHomePage.objSaveLook, "Save the Look CTA");
		verifyElementPresent(HipiDiscoverPage.objCommentBox, "Comment Section");
	}
	
	
	
	public void CheckTheUIOfTheVideoPlayerScreen_T1942(String userType) throws Exception
	{
			extent.HeaderChildNode("Check the UI of the video player screen_T1942");
			System.out.println("T1942");
			extent.extentLogger("Discover_Videoplayerscreen","T1942");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(3000);
			click(HipiDiscoverPage.objFirstRailImage, "Profile");
			for(int i=0;i<=10;i++)
			{
				if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
				{
					verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
					break;
				}else
				{
					Swipe("UP", 2);
				}
			}
			verifyIconsInFeedScreen();
			verifyElementPresent(HipiHomePage.objUserName, "User Handle");
			verifyElementPresent(HipiHomePage.objFollowButton, "Follow CTA");
			verifyElementPresent(HipiHomePage.objHashtagButtonDescription, "Description");
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
			navigateToHomePage();		
	}
	
	
/////////////////////////////////////////////////P2(Profile)//////////////////////////////////////////////////////////
	public void CheckTheUIOfInviteFriendsScreen_T1744(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check the UI of Invite Friends screen_T1744");
			System.out.println("T1744");
			extent.extentLogger("Profile_Find-Friends","T1744");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile ");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objInviteIcon, "Find Friends Icon");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objInviteFriends, "Invite Friends");
			allowPermissions();
			waitTime(2000);
			logger.info("User Able To See The Following");
			verifyElementPresent(HipiProfilePage.objWhatsappIcon, "Whatsapp");
			verifyElementPresent(HipiProfilePage.objFacebookIcon, "FaceBook");
			verifyElementPresent(HipiProfilePage.objSMSIcon, "SMS");
			verifyElementPresent(HipiProfilePage.objCopyLinkIcon, "Copy Link");
			verifyElementPresent(HipiProfilePage.objOthersIcon, "Others");
			navigateToHomePage();
		}
	}
	
	public void ChecKIfUserIsAbleTOSeeCommentBoxOnTheVideoScreenPlayingOrPausedInProfileDetailScreen_T1848_T1858(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-ChecK If User Is Able TO See Comment Box On The Video Screen PlayingOrPaused In Profile Detail Screen_T1848");
			System.out.println("T1848");
			extent.extentLogger("Profile-Detail_Comments","T1848");
		}
		else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged-In User-ChecK If User Is Able TO See Comment Box On The Video Screen PlayingOrPaused In Profile Detail Screen_T1858");
			System.out.println("T1858");
			extent.extentLogger("User-Details_Comments","T1858");
		}
			verifyElementPresentAndClick(HipiHomePage.objUserName, "User Handle");
			verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
			click(HipiProfilePage.objFirstVideo, "Video");
			verifyCommentBox();
			navigateToHomePage();
			}
	
	
	
	public void ChecKIfUserIsAbleTOSeeCommentBoxOnTheVideoScreenPlayingOrPausedInProfileScreen_T1861(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged-In User-ChecK If User Is Able TO See Comment Box On The Video Screen PlayingOrPaused In Profile Screen_T1861");
			System.out.println("T1861");
			extent.extentLogger("My-Profile_Comments","T1861");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header");
			click(HipiProfilePage.objFirstVideo, "Video");
			verifyCommentBox();
			navigateToHomePage();
		}
	}
	public void CheckUserIsAbleTOSeeCommentBoxInSoundDetailScreen_T1846_T1856(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Check If User is able to see Comment box in video screen in Sound detail screen_T1845");
			System.out.println("T1846");
			extent.extentLogger("Sound-detail_Comments","T1846");
		}else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in User-Check If User is able to see Comment box in video screen in Sound detail screen_T1856");
			System.out.println("T1856");
			extent.extentLogger("Sound-detail_Comments","T1856");
			SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound Option");
			waitTime(2000);
			verifyElementPresent(HipiSoundDetailPage.objMusicTitle, "Sound Title");
			verifyElementPresentAndClick(HipiSoundDetailPage.objVerifyVideo, "First video");
			verifyCommentBox();
			navigateToHomePage();
		}
		}
	
	
	
	public void CheckForTheUIOfOTPScreen_T1779(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Check For The UI Of OTP Screen_T1779");
			System.out.println("T1779");
			extent.extentLogger("Login_Forgotten-Password","T1779");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail, "Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot Password button");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
			String phoneNumber = getParameterFromXML("PhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
			hideKeyboard();
			verifyElementPresentAndClick(HipiLoginPage.objResetButton, "Reset Button");
			verifyElementPresent(HipiLoginPage.objBackButton, "Back Button");
			verifyElementPresent(HipiLoginPage.objEnterFourDigitOTP, "EnterFourDigitOTP");
		 		
			verifyElementPresent(HipiLoginPage.objFirstDigit, "First Digit");
			verifyElementPresent(HipiLoginPage.objSecondDigit, "Second Digit");
			verifyElementPresent(HipiLoginPage.objThirdDigit, "Third Digit");
			verifyElementPresent(HipiLoginPage.objFourthDigit, "Fourth Digit");
			verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
			
			 
			 verifyElementPresent(HipiLoginPage.objVerifyOTPScreenMetadata, "Your code was messaged to 91-91xxxxxxx10 [text]");
				String MessagedText = getText(HipiLoginPage.objVerifyOTPScreenMetadata);
				if (MessagedText.equals("Your OTP was  messaged to 91-9059995072")) {
			    logger.info(MessagedText + " is displayed");	
				extent.extentLoggerPass("", MessagedText + " is displayed" );
			     }
			    else {
			   	logger.info(MessagedText + " is not displayed");	
			    extent.extentLoggerPass("", MessagedText + " is not displayed" );
				}
				waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 60);
				verifyElementPresent(HipiLoginPage.objHavntRecivedOTPSendAgain, "Havn't Recived OTP Send Again");
				
			navigateToHomePage();
		}
	}
	
	
	public void verifyFeedGUI() throws Exception
	{
		verifyElementPresent(HipiHomePage.objProfilePicture, "Thumbnail Image");
		verifyElementPresent(HipiHomePage.objLikeICON, "Like");
		verifyElementPresent(HipiHomePage.objCommentICON, "Comment Box");
		verifyElementPresent(HipiHomePage.objShareICON, "Share");
		verifyElementPresent(HipiHomePage.objUserName, "User Handle");
		verifyElementPresent(HipiHomePage.objFollowButton, "Follow CTA");
		verifyElementPresent(HipiHomePage.objHashtagButtonDescription, "Description");
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
//		verifyElementPresent(HipiHomePage.objSaveLook, "Save the Look CTA");
		verifyElementPresent(HipiHomePage.objHomeIcon, "Home Tab");
		verifyElementPresent(HipiHomePage.objDiscoverButton, "Discover Tab");
		verifyElementPresent(HipiHomePage.objShopButton, "Shop CTA");
		verifyElementPresent(HipiHomePage.objVideoCreateIcon, "Create Tab");
		verifyElementPresent(AMDHomePage.objProfileIcon, "Profile Tab");
		verifyElementPresent(HipiHomePage.objFollowingButton, "Following Tab");
		verifyElementPresent(HipiHomePage.objForYou, "For You Tab");
		
	}
	public void CheckTheUIOfFeedScreenForAShoppableVideo_T1934(String userType) throws Exception
	{
			extent.HeaderChildNode("Check the UI of the Feed screen for a shoppable video_T1934");
			System.out.println("T1934");
			extent.extentLogger("Feed_Discover-The-Look","T1934");
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			verifyFeedGUI();
//			String text = getText(HipiHomePage.objSaveLook);
//			System.out.println(text);
//			if(text.equals("DISCOVER\nTHE LOOK")){
//				logger.info("User Is Able To See The Following Details");
//				extent.extentLoggerPass("Feed_Discover-The-Look", "User Is Able To See The Following Details");
//			}else{
//				logger.info("User Is Able To See The Following Details");
//				extent.extentLoggerFail("Feed_Discover-The-Look", "User Is Able To See The Following Details");
//			}	
			navigateToHomePage();
	}
	
	//=========================================creatorNewP1==========================================
	
	
	
	public void verifyUserCanAddMultipleMediaInEditClipScreen_T1661(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1661 - Logged in User - Check User can select multiple videos and photos on Select Media screen");
			System.out.println("T1661");
			extent.extentLogger("Creator", "T1661");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
			String arr[]= {"","First video","second video","Third Video"};
			for(int i=1;i<=2;i++)
			{
				verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(i),arr[i]);
				Swipe("RIGHT",1);
				waitTime(3000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
				waitTime(2000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo(i),arr[i]);
				waitTime(2000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			}
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst picture");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(2000);
				logger.info("User is able to select multiple video and photos from Select Media screen");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able to select multiple video and photos from Select Media screen");
		   
		}
		discardPopup();
	}
	
	
	public void verifyUserCanSeeAddMediaCTA_T1662(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1662 - Logged in User - Check by tapping any photo or video on Select media screen User gets Add Media CTA on the bottom of the screen");
			System.out.println("T1662");
			extent.extentLogger("Creator", "T1662");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst video");
			waitTime(2000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objEditClipAddMedia))
			{
				logger.info("User is able to get Add Media CTA on the bottom of the screen by tapping any photo or video on Select media screen ");
		    	extent.extentLoggerPass("Reset Screen", "User is able to get Add Media CTA on the bottom of the screen by tapping any photo or video on Select media screen ");
		    }else {
		    	logger.info("User is unable to get Add Media CTA on the bottom of the screen by tapping any photo or video on Select media screen ");
		    	extent.extentLoggerFail("Media Screen", "User is unable to get Add Media CTA on the bottom of the screen by tapping any photo or video on Select media screen "); 
	
			}
			discardPopup();
		}
	}	
	
	public void verifyOnTappingAddMediaUserNavigatesToEditclipScreenAndMediaIsUploaded_T1663(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1663 - Logged in User - Check by tapping on Add Media CTA  option  on Select media screen User gets redirect to Edit clips screen and added video or photo is uploaded");
			System.out.println("T1663");
			extent.extentLogger("Creator", "T1663");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus Icon");
			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup,30);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"FIrst video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitTime(3000);				
			if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipscreenTick)) {
				verifyElementPresent(HipiCreateVideoPage.objEditclipSecondVideo,"Media");
				logger.info("User is able navigate to Edit clips screen by tapping  Edit clip on Edit screen");
		    	extent.extentLoggerPass("Edit clip Screen", "User is able navigate to Edit clips screen by tapping  Edit clip on Edit screen");
		    }else {
		    	logger.info("User is unable navigate to Edit clips screen by tapping  Edit clip on Edit screen");
		    	extent.extentLoggerFail("Edit clip Screen", "User is unable navigate to Edit clips screen by tapping  Edit clip on Edit screen"); 
			}
			discardPopup();	
		}
	}	
	
	
	public void verifyUiOfDuetsCreatorScreen_T1787(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1787 - Logged in User- Duet video - Check for the UI for the \"Creator\" screen");
			System.out.println("T1787");
			extent.extentLogger("Creator", "T1787");
			verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
				allowPermissions();
				waitTime(5000);
				waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
	 		if(verifyElementDisplayed(HipiHomePage.objDuetScreenRecord)) {
				logger.info("User is  able to navigate to creator screen on tapping Share to duet the video ");
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to navigate to creator screen on tapping Share to duet the video ");
		    }else {
		    	logger.info("User is  unable to navigate to creator screen on tapping Share to duet the video ");
		    	extent.extentLoggerFail("Edit clip Screen", "User is  unable to navigate to creator screen on tapping Share to duet the video "); 
			}
	 		if(verifyElementPresent(HipiCreateVideoPage.objCreateDuetLeftScreen,"Left screen"))
	 		{
				waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objCreateDuetRightScreen,"Right screen");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objSpeedButton,"Speed ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objbeautytoggle,"Beauty ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objCreateVideoFlash,"Flash ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objCreateVideoFlip,"Flip camera ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objeffect,"Effect");
				logger.info("User is  able to View All the components of DuetVideo Creator screen"); 
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo Creator screen");
	
	 		}
	navigateToHomePage();
		}
	}
	
	public void verifyUiOfDuetsPostScreen_T1791(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1791 - Logged in User- Duet video - Check for the UI for the Creator screen");
			System.out.println("T1791");
			extent.extentLogger("Creator", "T1791");
			verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
			waitTime(4000);
			allowPermissions();
			waitTime(5000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
			verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(8000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,10);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
		
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,10);
	 		if(verifyElementPresent(HipiCreateVideoPage.objPostscreenHashtag,"Hash tag"))
	 		{
				waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objPostScreenFriendsBotton,"Friends");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objPostscreenWhoCanViewThisVideo,"Who Can View This Video ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objPostScreenComments,"Allow Comments ");
//	 			waitTime(2000);
//	 			verifyElementPresent(HipiCreateVideoPage.objPostScreenLikes,"Allow Likes ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduet,"Allow Duet ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save To Device");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objSaveasDraft,"Save As Draft");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objpostbtn,"Post");
				logger.info("User is  able to View All the components of DuetVideo Post screen"); 
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo Post screen");
	
	 		}
			discardPopup();
		}
	}

	public void verifyUiOfDuetsEditScreen_T1789(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1789 - Logged in User - Duet video - Check the UI of the Edit screenLogged in User - Duet video - Check the UI of the Edit screen");
			System.out.println("T1789");
			extent.extentLogger("Creator", "T1789");
			verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
			waitTime(3000);
			verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
			waitTime(4000);
			allowPermissions();
			waitTime(5000);
			waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
			verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(8000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditFilter,"Filter"))
	 		{
				waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objtrim,"Trim");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenVoulmebtn,"Volume ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text ");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
				logger.info("User is  able to View All the components of DuetVideo Creator screen"); 
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo Creator screen");
	
	 		}
			discardPopup();
		}
	}
	
	public void verifyUiOfDuetsEditScreen_T1796(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1796 - Logged in User - Check layout of effects screen");
			System.out.println("T1796");
			extent.extentLogger("Creator", "T1796");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			waitTime(4000);
			allowPermissions();
			waitTime(4000);
 			verifyElementPresentAndClick(HipiCreateVideoPage.objEffectIcon,"Effect Button");
// 			waitTime(5000);
 			waitUntilElementDisplayed(HipiCreateVideoPage.objEffectsFirstEffect, 10);
 			
			if(verifyElementPresent(HipiCreateVideoPage.objEffectsFirstEffect,"First Effect"))
	 		{
				waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objFIlterScreenClearIcon,"Clear Icon");
	 			waitTime(2000);
	 			verifyElementPresent(HipiCreateVideoPage.objeffectDownload,"Download Pin");
				logger.info("User is  able to View All the components of DuetVideo effects screen"); 
		    	extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo effects screen");
		}
			navigateToHomePage();

	}
}
	
	public void verifyEffectscreenClosedOnTappingPlateerscreen_T1798(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1798 - Logged in User  - Check  effect screen gets closed when User taps on creator screen");
			System.out.println("T1798");
			extent.extentLogger("Creator", "T1798");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
				allowPermissions();
 			verifyElementPresentAndClick(HipiCreateVideoPage.objEffectIcon,"Effect Button");
 			waitTime(3000);
// 			tapiOS_Middlepoint(1);
 			Swipe("DOWN", 1);
 			if(verifyElementDisplayed(HipiCreateVideoPage.objRecordIcon))
 			{
 				logger.info("User is able to view effect screen gets closed when User taps on creator screen");
		    	extent.extentLoggerPass("Video Edit Screen", "User is able to view effect screen gets closed when User taps on creator screen");
		    }else { 
		    	logger.info("User is unable to view effect screen gets closed when User taps on creator screen");
		    	extent.extentLoggerFail("Video Edit Screen", "User is unable to view effect screen gets closed when User taps on creator screen");
 				
 			}
			navigateToHomePage();
		}
	}
	public void verifyFilterIcon_T1802(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1802 - Logged in User  - Logged in User - Check by tapping on 'Filter' Icon User is navigated to filter screen");
			System.out.println("T1802");
			extent.extentLogger("Creator", "T1802");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
				allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter,"Filter");
			waitTime(2000);
				if(verifyElementPresent(HipiCreateVideoPage.objPlayerScreenForFilters,"player screen"))
				{
					logger.info("User is able to navigate to Filter screen on tapping 'Filter' Icon");
		    	extent.extentLoggerPass("Video Edit Screen", "User is able to navigate to Filter screen on tapping 'Filter' Icon");
		    }else { 
		    	logger.info("User is unable to navigate to Filter screen on tapping 'Filter' Icon");
		    	extent.extentLoggerFail("Video Edit Screen", "User is unable to navigate to Filter screen on tapping 'Filter' Icon");
				}
			navigateToHomePage();
		}
	}
	
	public void verifyFilterscreenClosedOnTappingPlayerscreen_T1806(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1806 - Logged in User  - Check  filter screen gets closed when User taps on creator screen");
			System.out.println("T1806");
			extent.extentLogger("Creator", "T1806");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
				allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objfilter,"Filter");
				waitTime(3000);
//				tapiOS_Middlepoint(1);
				Swipe("DOWN", 1);
 			if(verifyElementDisplayed(HipiCreateVideoPage.objRecordIcon))
 			{
 				logger.info("User is able to view Filter screen gets closed when User taps on Player screen");
		    	extent.extentLoggerPass("Video Edit Screen", "User is able to view Filter screen gets closed when User taps on Player screen");
		    }else { 
		    	logger.info("User is unable to view Filter screen gets closed when User taps on Player screen");
		    	extent.extentLoggerFail("Video Edit Screen", "User is unable to view Filter screen gets closed when User taps on Player screen");
 				
 			}
			navigateToHomePage();
		}
	}
	//================================LoginNew(P1)===================================================
	public void	verifyUserIsAbleToTapOnSendOtp_T1760(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1760 - Check if tapping on Send OTP  CTA is landing User to OTP screen");
			System.out.println("T1760");
			extent.extentLogger("SignUp and Login","T1760");
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
					waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
					verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
					waitTime(2000);
					verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
					click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
					 String Number = getParameterFromXML("PhoneNumber");
					type(HipiLoginPage.objPhoneNumberTextField,Number,"value");
					verifyElementPresentAndClick(HipiLoginPage.objSendOTP,"Send Otp");
					waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 3);
					if(verifyElementDisplayed(HipiLoginPage.objVerifyOTPCTA))
					{
						logger.info("User is able to tap On Send Otp");
				    	extent.extentLoggerPass("Login Screen", "User is able to tap On Send Otp");
				    }else {
				    	logger.info("User is unable to tap On Send Otp");
				    	extent.extentLoggerFail("Login Screen", "\"User is unable to tap On Send Otp\""); 
			
					}
					navigateToHomePage();
				}
	}
	
	public void	verifyOtpAutoFilled_T1762(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Check if OTP is getting autofilled");
			System.out.println("T1762");
			extent.extentLogger("SignUp and Login","T1762");
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
					waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
					verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
					waitTime(2000);
					verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
					click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
					//Change the PhoneNumber in Xml file
					 String Number = getParameterFromXML("PhoneNumberOtp");
					type(HipiLoginPage.objPhoneNumberTextField,Number,"value");
					verifyElementPresentAndClick(HipiLoginPage.objSendOTP,"Send Otp");
					waitTime(7000);
					if(verifyElementDisplayed(HipiHomePage.objForYou))
					{
						logger.info("Otp has been Succesfully Auto filled");
				    	extent.extentLoggerPass("Login Screen", "Otp has been Succesfully Auto filled");
				    }else {
				    	logger.info("Otp is Not able to Auto fill");
				    	extent.extentLoggerFail("Login Screen", "Otp is Not able to Auto fill"); 			
					}
					navigateToHomePage();
				}
	}
//Check the app throwing an error message  when User enters an OTP before  the auto filled of OTP gets happens_T1764
	public void	verifyInvalidOtpPopup_T1764(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1764 - Check the app throwing an error message  when User enters an OTP before  the auto filled of OTP gets happens");
			System.out.println("T1764");
			extent.extentLogger("SignUp and Login","T1764");
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
					waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
					verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
					waitTime(2000);
					verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
					click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
					//Change the PhoneNumber in Xml file
					 String Number = getParameterFromXML("PhoneNumber");
					type(HipiLoginPage.objPhoneNumberTextField,Number,"value");
					verifyElementPresentAndClick(HipiLoginPage.objSendOTP,"Send Otp");
					waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPCTA, 3);
					click(HipiLoginPage.objVerifyOTPCTA,"Verify Otp");
					if(verifyElementDisplayed(HipiLoginPage.objLoginWithOtpScreenInvalidOtpPopup))
					{
						logger.info("User is able to get the Invalid code message before  the OTP gets  auto filled when user taps on Verify OTP CTA.");
				    	extent.extentLoggerPass("Login Screen", "User is able to get the Invalid code message before  the OTP gets  auto filled when user taps on Verify OTP CTA.");
				    }else {
				    	logger.info("User is unable to get the Invalid code message before  the OTP gets  auto filled when user taps on Verify OTP CTA.");
				    	extent.extentLoggerFail("Login Screen", "User is unable to get the Invalid code message before  the OTP gets  auto filled when user taps on Verify OTP CTA."); 			
					}
					navigateToHomePage();
				}
	}
//Check if User is able to navigate to login with OTP screen after tapping on "Login with OTP" in Login screen_T1767
	public void	verifyInvalidOtpPopup_T1767(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1767 - Check if User is able to navigate to login with OTP screen after tapping on Login with OTP in Login screen");
			System.out.println("T1767");
			extent.extentLogger("SignUp and Login","T1767");
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
					waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
					verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
					waitTime(2000);
					verifyElementPresentAndClick(HipiLoginPage.objLoginWithOTPButton,"Login With Otp");
					if(verifyElementDisplayed(HipiLoginPage.objSendOTP))
					{
						logger.info("User is able to navigate to Login with OTP screen");
				    	extent.extentLoggerPass("Login Screen", "User is able to navigate to Login with OTP screen");
				    }else {
				    	logger.info("User is unable to navigate to Login with OTP screen");
				    	extent.extentLoggerFail("Login Screen", "User is unable to navigate to Login with OTP screen"); 			
					}
					navigateToHomePage();
				}
	}
//Check if User is able to enter the phone number in "Reset" screen_T1776
	public void	verifyUserAbleToEnterPhoneNumber_T1776(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1776 - Check if User is able to enter the phone number in Reset screen");
			System.out.println("T1776");
			extent.extentLogger("SignUp and Login","T1776");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot password");
			click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
			String Number = getParameterFromXML("PhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField,Number,"value");
			verifyElementPresentAndClick(HipiLoginPage.objResetButton,"Reset Button");
			if(verifyElementDisplayed(HipiLoginPage.objVerifyOTPCTA))
			{
				logger.info("User is able to enter the phone number in Reset screen");
		    	extent.extentLoggerPass("Login Screen", "User is able to enter the phone number in Reset screen");
		    }else {
		    	logger.info("User is unable to enter the phone number in Reset screen");
		    	extent.extentLoggerFail("Login Screen", "User is unable to enter the phone number in Reset screen"); 			
			}
			navigateToHomePage();
		}
	}
	public void	verifyUserAbleToEnterPhoneNumberAftertappingOnCrossIcon_T1777(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1777 - Check User is able to enter the phone number by tapping on cross icon in \"Reset\" screen");
			System.out.println("T1777");
			extent.extentLogger("SignUp and Login","T1777");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
			waitTime(2000);
			verifyElementPresentAndClick(HipiLoginPage.objForgotPasswordButton,"Forgot password");
			click(HipiLoginPage.objPhoneNumberTextField,"Phone Number TextField");
			String Number = getParameterFromXML("PhoneNumber");
			type(HipiLoginPage.objPhoneNumberTextField,Number,"value");
			String actual=getText(HipiLoginPage.objPhoneNumberTextField);
			verifyElementPresentAndClick(HipiLoginPage.objLoginWithOtpScreenCrossIcon,"Cross Icon");
			String Expected=getText(HipiLoginPage.objPhoneNumberTextField);
			if(actual!=Expected)
			{
				logger.info("User is able to remove the entered phone number by tapping on cross icon in Reset screen");
		    	extent.extentLoggerPass("Login Screen", "User is able to remove the entered phone number by tapping on cross icon in Reset screen");
		    }else {
		    	logger.info("User is unable to remove the entered phone number by tapping on cross icon in Reset screen");
		    	extent.extentLoggerFail("Login Screen", "User is unable to remove the entered phone number by tapping on cross icon in Reset screen"); 			
			}
			navigateToHomePage();					
		}
	}
	//=================================Post(P1)=====================================================
	
	public void	verifyAfterTappingOnSaveAsDraftUserNavigatesToFeedScreen_T1638(String userType) throws InterruptedException, Exception

	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1638 - Check User navigates to Feed screen by tapping on Save as Draft on Post video screen");
			System.out.println("T1638");
			extent.extentLogger("Post ","T1638");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitTime(5000);
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
			waitUntilElementDisplayed(HipiCreateVideoPage.objSaveasDraft, 5);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			click(HipiCreateVideoPage.objSaveasDraft,"Save As Draft");
			
			waitTime(3000);
			if(verifyElementDisplayed(HipiHomePage.objForYou))
			{
				logger.info("User is able to  navigated to Feed screen by tapping on Save as Draft on Post video screen");
		    	extent.extentLoggerPass("Feed Screen", "User is able to  navigated to Feed screen by tapping on Save as Draft on Post video screen");
		    }else {
		    	logger.info("User is unable to  navigated to Feed screen by tapping on Save as Draft on Post video screen");
		    	extent.extentLoggerFail("Feed Screen", "User is unable to  navigated to Feed screen by tapping on Save as Draft on Post video screen"); 			
			}
			discardPopup();
		}
	}
//Check User  gets navigates to  "Feed" screen and video uploading  starts in the background by tapping on "post" CTA in "post" video screen_T1639			
	public void	verifyAfterTappingOnPostButtonUserNavigatesToFeedScreenAndUploadProgressIsDisplayed_T1639(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1639 - Check User navigates to Feed screen by tapping on Save as Draft on Post video screen");
			System.out.println("T1639");
			extent.extentLogger("Post ","T1639");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitTime(5000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 20);
			click(HipiCreateVideoPage.objVideoEditNextBtn,"Next");

			waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objuploadpost,"Post Button");
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			if(verifyElementDisplayed(HipiCreateVideoPage.objuploadInProgressPopup))
			{
				verifyElementDisplayed(HipiHomePage.objForYou);
				logger.info("User Is able to see the video uploading starts in the background of Feed screen by tapping on Post CTA on Post  video screen");
		    	extent.extentLoggerPass("Feed Screen", "User Is able to see the video uploading starts in the background of Feed screen by tapping on Post CTA on Post  video screen");
		    }else {
		    	logger.info("User Is unable to see the video uploading starts in the background of Feed screen by tapping on Post CTA on Post  video screen");
		    	extent.extentLoggerFail("Feed Screen", "User Is unable to see the video uploading starts in the background of Feed screen by tapping on Post CTA on Post  video screen"); 			
			}
			discardPopup();
		}
	}
//Check User  gets navigates to  "Feed" screen and video uploading  starts in the background by tapping on "Save as Draft" CTA on "post" video screen_T1640			
	public void	verifyAfterTappingOnSaveAsDraftUserNavigatesToFeedScreenAndUploadProgressIsDisplayed_T1640(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1640 - Check User  gets navigates to  Feed screen and video uploading  starts in the background by tapping on Save as Draft CTA on post video screen");
			System.out.println("T1640");
			extent.extentLogger("Post ","T1640");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitTime(5000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn,30);
			click(HipiCreateVideoPage.objVideoEditNextBtn,"Next");
			waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 20);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}

			verifyElementPresentAndClick(HipiCreateVideoPage.objuploadpost,"Post Button");
//			verifyElementPresentAndClick(HipiCreateVideoPage.objSaveasDraft,"Save As Draft");
			if(verifyElementDisplayed(HipiCreateVideoPage.objuploadInProgressPopup))
			{
				logger.info("User is able to see the video uploading starts in the background of Feed screen by tapping on Save as Draft CTA on Post video screen");
		    	extent.extentLoggerPass("Feed Screen", "User is able to see the video uploading starts in the background of Feed screen by tapping on Save as Draft CTA on Post video screen");
		    }else {
		    	logger.info("User is unable to see the video uploading starts in the background of Feed screen by tapping on Save as Draft CTA on Post video screen");
		    	extent.extentLoggerFail("Feed Screen", "User is unable to see the video uploading starts in the background of Feed screen by tapping on Save as Draft CTA on Post video screen"); 			
			}
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			discardPopup();
		}
	}
//Check User see progress card of uploaded video status dissapears after few seconds ( 3 or more seconds)_T1647
	public void	verifyVideoUploadStatusPopUpDisappers_T1647(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1647 - Check User see progress card of uploaded video status dissapears after few seconds ( 3 or more seconds)");
			System.out.println("T1647");
			extent.extentLogger("Post ","T1647");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitTime(5000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn,10);
			click(HipiCreateVideoPage.objVideoEditNextBtn,"Next");
			waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}

			verifyElementPresentAndClick(HipiCreateVideoPage.objuploadpost,"Post Button");
			verifyElementPresent(HipiCreateVideoPage.objuploadInProgressPopup,"Upload in progress");
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitTime(4000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objuploadInProgressPopup))
			{
				logger.info("User is unable to see progress card of uploaded video status dissapears after few seconds ( 3 or more seconds)");
		    	extent.extentLoggerFail("Feed Screen", "User is unable to see progress card of uploaded video status dissapears after few seconds ( 3 or more seconds)");
		    }else {
		    	logger.info("User is able to see progress card of uploaded video status dissapears after few seconds ( 3 or more seconds)");
		    	extent.extentLoggerPass("Feed Screen", "User is able to see progress card of uploaded video status dissapears after few seconds ( 3 or more seconds)"); 			
			}
			discardPopup();
		}
	}
//Check by tapping on Cross icon(X) User get redirected to "Post video" screen_T1953
	public void	verifyTappingOnCrossIconUserNavigatesToPostScreen_T1953(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1953 - Check by tapping on Cross icon(X) User get redirected to Post video screen");
			System.out.println("T1953");
			extent.extentLogger("Post ","T1953");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objDrafttab, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitUntilElementDisplayed(HipiProfilePage.objDraftVideo, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 1);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostScreenEditButton, 1);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrimscreenCrossIcon, 1);
			verifyElementPresentAndClick(HipiCreateVideoPage.objTrimscreenCrossIcon,"cross icon");
//			waitTime(1000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 1);

			if(verifyElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader))
			{
				logger.info("User is able to navigate back to post screen after tapping on cross icon in edit screen");
		    	extent.extentLoggerPass("Post Screen", "User is able to navigate back to post screen after tapping on cross icon in edit screen");
		    }else {
		    	logger.info("User is unable to navigate back to post screen after tapping on cross icon in edit screen");
		    	extent.extentLoggerFail("Post Screen", "User is unable to navigate back to post screen after tapping on cross icon in edit screen"); 			
			}
			discardPopup();
		}
	}
//Check by taping on "Tick mark" icon User get redirected to "Edit video" screen_T1954
	public void	verifyTappingOnCrossIconUserNavigatesToPostScreen_T1954(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1954 - Check by taping on Tick mark icon User get redirected to Edit video screen");
			System.out.println("T1954");
			extent.extentLogger("Post ","T1954");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
			waitTime(1000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn))
			{
				logger.info("User is able to redirected to Edit video screen by tapping on Tick mark icon");
		    	extent.extentLoggerPass("Post Screen", "User is able to redirected to Edit video screen by tapping on Tick mark icon");
		    }else {
		    	logger.info("User is unable to redirected to Edit video screen by tapping on Tick mark icon");
		    	extent.extentLoggerFail("Post Screen", "User is unable to redirected to Edit video screen by tapping on Tick mark icon"); 			
			}
			discardPopup();
		}
	}
//Check by tapping back arrow on "Edit video" screen User gets the "Pop Up" screen_T1955	
	public void	verifyTappingOnBackArrowPopupIsDisplayed_T1955(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1955 - Check by tapping back arrow on \"Edit video\" screen User gets the \"Pop Up\" screen");
			System.out.println("T1955");
			extent.extentLogger("Post ","T1955");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn,"Back Arrow");
			waitTime(1000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objDiscardEdits))
			{
				logger.info("User is able to get the Pop Up screen by tapping on back arrow");
		    	extent.extentLoggerPass("Post Screen", "User is able to get the Pop Up screen by tapping on back arrow");
		    }else {
		    	logger.info("User is unable to get the Pop Up screen by tapping on back arrow");
		    	extent.extentLoggerFail("Post Screen", "User is unable to get the Pop Up screen by tapping on back arrow"); 			
			}
			discardPopup();
		}
	}
//Check UI of "Pop Up" screen by tapping on back arrow on "Edit video" screenCheck UI of "Pop Up" screen by tapping on back arrow on "Edit video" screen_T1956
	public void	verifyTappingOnBackArrowPopupComponentsAreDisplayed_T1956(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1956 - Check UI of Pop Up screen by tapping on back arrow on Edit video screenCheck UI of Pop Up screen by tapping on back arrow on Edit video screen");
			System.out.println("T1956");
			extent.extentLogger("Post ","T1956");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn,"Back Arrow");
			waitTime(1000);
			if(verifyElementPresent(HipiCreateVideoPage.objDiscardEdits,"Discard Edits"))
			{
				verifyElementPresent(HipiCreateVideoPage.objDiscardPopupkeepButton,"keep Button");
				waitTime(1000);
				String Text=getText(HipiCreateVideoPage.objDiscardText);
				verifyElementPresent(HipiCreateVideoPage.objDiscardText,Text);
				logger.info("User is able to get the Pop Up screen by tapping on back arrow");
		    	extent.extentLoggerPass("Trim Screen", "User is able to get the Pop Up screen by tapping on back arrow");
		    }else {
		    	logger.info("User is unable to get the Pop Up screen by tapping on back arrow");
		    	extent.extentLoggerFail("Trim Screen", "User is unable to get the Pop Up screen by tapping on back arrow"); 			
			}
			discardPopup();
		}
	}
//Check by tapping on "Discard Edit" CTA User redirects to "Trim video" screen_T1958	
	public void	verifyTappingOnKeepInDiscardEditPopupUserNavigatesToTrimScreen_T1958(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1958 - Check by tapping on Discard Edit CTA User redirects to Trim video screen");
			System.out.println("T1958");
			extent.extentLogger("Post ","T1958");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn,"Back Arrow");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardEdits,"Discard Edit");
			waitTime(1000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objTrimscreenCrossIcon))
			{
				logger.info("User is able to  redirect to Trim video screen by tapping on Discard Edit CTA");
		    	extent.extentLoggerPass("Trim Screen", "User is able to  redirect to Trim video screen by tapping on Discard Edit CTA");
		    }else {
		    	logger.info("User is unable to  redirect to Trim video screen by tapping on Discard Edit CTA");
		    	extent.extentLoggerFail("Trim Screen", "User is unable to  redirect to Trim video screen by tapping on Discard Edit CTA"); 			
			}
			discardPopup();
		}
	}
	
//Check the UI of "Edit video" screen_T1960
	public void	verifyTappingOnKeepInDiscardEditPopupUserNavigatesToTrimScreen_T1960(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1960 - Check the UI of Edit video screen");
			System.out.println("T1960");
			extent.extentLogger("Post ","T1960");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
			waitTime(1000);
			if(verifyElementPresent(HipiCreateVideoPage.objVideoEditFilter,"filter"))
			{
				verifyElementPresent(HipiCreateVideoPage.objtrim,"Trim");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objvolumebtn,"Volume");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"Sound");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objeditvideobackbtn,"Back Arrow");
				
				logger.info("User is able to  see all The components of Edit screen");
		    	extent.extentLoggerPass("Trim Screen", "User is able to  see all The components of Edit screen");
		    }else {
		    	logger.info("User is unable to  see all The components of Edit screen");
		    	extent.extentLoggerFail("Trim Screen", "User is unable to  see all The components of Edit screen"); 			
			}
			discardPopup();					
		}
	}
	
//////----------------All Detail P1 Tc's--------------------------
	
	public void verifyCommentPopupIsDisplayedWhileCommenting_T1853(String userType,String userName) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1853 - Check if Login/Signup popup is displayed if guest User tries to add comment on tapping send icon at bottom of the screen over video playing/paused in all detail screens");
			System.out.println("T1853");
			extent.extentLogger("All Detail", "T1853");
			verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
			waitTime(2000);
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
			waitTime(1000);
			verifyElementPresentAndClick(HipiHomePage.objCommentscreenTextField,"Comment screen");
			click(HipiHomePage.objCommentscreenTextField,"Comment TextField");
			type(HipiHomePage.objCommentscreenTextField,userName,"Type value");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objCommentPostIcon, "Comment post button");
			if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
			{
				logger.info("Guest User is unable to add comment on tapping comment box at bottom of the screen and Login/Signup popup has beeen displyed over video playing/paused in all detail screens");
		    	extent.extentLoggerPass("comment Screen", "Guest User is unable to add comment on tapping comment box at bottom of the screen and Login/Signup popup has beeen displyed over video playing/paused in all detail screens");
		    }else {
		    	logger.info("Guest User is unable to add comment on tapping comment box at bottom of the screen and Login/Signup popup is not displyed over video playing/paused in all detail screens");
		    	extent.extentLoggerFail("comment Screen", "Guest User is unable to add comment on tapping comment box at bottom of the screen and Login/Signup popup is not displyed over video playing/paused in all detail screens"); 
		}
			navigateToHomePage();
		}
	}
//Check if Login/Signup popup is displayed for Guest User whenever User tries on Like CTA beside comments added by other Users_T1854	
	public void verifyUserWhileLikingExistingCommentsLoginPopupIsDisplayed_T1854(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1854 - Check if Login/Signup popup is displayed for Guest User whenever User tries on Like CTA beside comments added by other Users");
			System.out.println("T1854");
			extent.extentLogger("All Detail", "T1854");
			verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
			waitTime(4000);
			for(int i=1;i<10;i++)
			{
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideoIteratable(i),"First video");
			waitTime(4000);
			String verify=getText(HipiHomePage.objCommentCount);
			int a=Integer.parseInt(verify);
			if(a>0)
			{
				break;
			}else
			{
				Back(1);
			}
			}
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");				
			waitTime(1000);
			verifyElementPresentAndClick(HipiHomePage.objLikeIconCommentScreen,"Like");
			if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
			{
				logger.info("Login/Signup popup has been displayed whenever User tries on Like CTA beside comments added by other Users");
		    	extent.extentLoggerPass("comment Screen", "Login/Signup popup has been displayed whenever User tries on Like CTA beside comments added by other Users");
		    }else {
		    	logger.info("Login/Signup popup has Not displayed whenever User tries on Like CTA beside comments added by other Users");
		    	extent.extentLoggerFail("comment Screen", "Login/Signup popup has Not displayed whenever User tries on Like CTA beside comments added by other Users"); 
		}
			navigateToHomePage();
		}
	}
//Check if Login/Signup popup is displayed for Guest Userwhenever User taps on User handle/ thumbnail beside comments added by other Users_T1855
	public void verifyGuestUserCanSeeLoginPopupOnTappingThumbnailOfUserCommented_T1855(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T1855 - Check if Login/Signup popup is displayed for Guest User whenever User tries on Like CTA beside comments added by other Users");
			System.out.println("T1855");
			extent.extentLogger("All Detail", "T1855");
			verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile Screen header");
			waitTime(5000);
			int count=0;
			for(int i=1;i<10;i++)
			{
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideoIteratable(i),"video");
			waitUntilElementDisplayed(HipiHomePage.objCommentCount, 10);
			String verify=getText(HipiHomePage.objCommentCount);
			int a=Integer.parseInt(verify);
			if(a>0)
			{
				break;
			}else
			{
				Back(1);
				count++;
			}
			if(count==5)
				Swipe("UP",1);
			}
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");				
			waitTime(1000);
			verifyElementPresentAndClick(HipiHomePage.objClickOnProfileInCommentScreen,"Profile Thumbnail");
			waitTime(3000);
			if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
			{
				logger.info("Login/Signup popup is displayed whenever User taps on User handle/ thumbnail beside comments added by other Users");
		    	extent.extentLoggerPass("comment Screen", "Login/Signup popup is displayed whenever User taps on User handle/ thumbnail beside comments added by other Users");
		    }else {
		    	logger.info("Login/Signup popup has not displayed whenever User taps on User handle/ thumbnail beside comments added by other Users");
		    	extent.extentLoggerFail("comment Screen", "Login/Signup popup has not displayed whenever User taps on User handle/ thumbnail beside comments added by other Users"); 
		}
			navigateToHomePage();
		}
	}
//On existing comments check 'time' on every comment present on the video for Logged-In User in all detail screens_T1874	
	public void verifyUserAddedCommentsTimeGetsUpdated_T1874(String userType,String userName) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1874 - On existing comments check 'time' on every comment present on the video for Logged-In User in all detail screens");
			System.out.println("T1874");
			extent.extentLogger("Detail screen", "T1874");
			verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile Screen header");
			waitTime(2000);
			for(int i=1;i<10;i++)
			{
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideoIteratable(i),"video");
			waitTime(9000);
			String verify=getText(HipiHomePage.objCommentCount);
			
			int a=Integer.parseInt(verify);
			if(a>0)
			{
				break;
			}else
			{
				Back(1);
			}
			}
			verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
		waitTime(2000);
		if(verifyElementDisplayed(HipiDiscoverPage.objCommentTime))
			{
				logger.info("User is able to view time of comment of another viewer");
		    	extent.extentLoggerPass("Comment Screen", "User is able to view time of comment of another viewer");
		    }else {
		    	logger.info("User is unable to view time of comment of another viewer");
		    	extent.extentLoggerFail("Discover Screen", "User is unable to view time of comment of another viewer"); 
		}
		navigateToHomePage();
		} 
	}
//Check if height of comment box is same as bottom navigation bar in all detail screens_T1862

	public void verifyHeightOfCommentBoxAndNavigationalBarIsSame_T1862(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1862 - Check if height of comment box is same as bottom navigation bar in all detail screens");
			System.out.println("T1862");
			extent.extentLogger("Detail screen", "T1862");
			verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
			waitTime(5000);
			verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
			waitTime(5000);
			WebElement commentBox=getDriver().findElement(By.xpath("//*[@id='comment_box']"));
			Dimension elementSize=commentBox.getSize();
			int width=elementSize.width;
			System.out.println("Comment Box Width = "+width);
			extent.extentLogger("Comment Box Width = "+width, "Comment Screen");
			WebElement navigationalBar=getDriver().findElement(By.xpath("//*[@id='exo_progress']"));
			Dimension elementSize1=navigationalBar.getSize();
			int width1=elementSize1.width;  
			System.out.println("Navigation bar Width = "+width1);
			extent.extentLogger("Navigation bar Width = "+width1, "Comment Screen");
			if(width==width1)
			{
				logger.info("The height of comment box is same as bottom navigation bar in all detail screens");
		    	extent.extentLoggerPass("Feed Screen", "The height of comment box is same as bottom navigation bar in all detail screens");
		    }else {
		    	logger.info("The height of comment box is not same as bottom navigation bar in all detail screens");
		    	extent.extentLoggerFail("Feed Screen", "The height of comment box is not same as bottom navigation bar in all detail screens"); 
		}
		navigateToHomePage();
		}
	}
	
	//==========================Draft(P1)==================================
	
	public void verifyUiOfPostScreen_T1948(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1948 - Check UI of the Post video screen by tapping on video discription of saved draft video");
			System.out.println("T1948");
			extent.extentLogger("Draft", "T1948");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftsPageVideo,"Description");
			waitTime(1000);
			if(verifyElementPresent(HipiProfilePage.objPostScreenEdit,"Edit Cta"))
			{
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objPostDescription,"Description");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objPostscreenHashtag,"HashTags button");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objPostScreenFriendsBotton,"Friends Button");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objVideoPostPrivacyBtn,"Who can view Privacy");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objPostScreenCommentsEnabled,"Allow Comments");
				waitTime(1000);
//				verifyElementPresent(HipiCreateVideoPage.objPostScreenLikesEnabled,"Allow Like");
//				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDeviceEnabled,"Save To Device");
				waitTime(1000);
				verifyElementPresent(HipiCreateVideoPage.objSaveasDraft,"Save as Draft");
				waitTime(1000);
//				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//				waitTime(3000);
				if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
				{
					click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//					click(HipiCreateVideoPage.objDoneCTC, "Done Button");
				}else {
					logger.info("User is unable to See Language Options");
					extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
					
				}
				verifyElementPresent(HipiCreateVideoPage.objpostbtn,"Post Button");
				if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
					Back(1);
				}else {
					logger.info("User is unable to See Share Sheet");
					extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
				}
			}
			navigateToHomePage();
		}
	}
//Check  by tapping on "Edit" CTA on "Post video" screen User navigates to "Trim video" screen_T1949	
	public void verifyUserNavigatesToTrimScreenFromPostScreenByTappinEditCta_T1949(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1949 - Check UI of the Post video screen by tapping on video discription of saved draft video");
			System.out.println("T1949");
			extent.extentLogger("Draft", "T1949");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftsPageVideo,"Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objPostScreenEdit,"Edit Cta");
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrimscreenCrossIcon, 10);
			if(verifyElementDisplayed(HipiCreateVideoPage.objTrimscreenCrossIcon))
			{
				logger.info("User is able to navigate to Trim video screen by tapping on Edit CTA ");
		    	extent.extentLoggerPass("Comment Screen", "User is able to navigate to Trim video screen by tapping on Edit CTA ");
		    }else {
		    	logger.info("User is unable to navigate to Trim video screen by tapping on Edit CTA ");
		    	extent.extentLoggerFail("Discover Screen", "User is unable to navigate to Trim video screen by tapping on Edit CTA "); 
		}
		navigateToHomePage();	
		}
	}
	
	//---------------------------Creator P2 Tc's-----------------------------
	
	//Logged in User - Check UI of "Edit Clips" screen_T1655
				public void verifyUiOfEditClipScreen_T1655(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check UI of Edit Clips screen");
						System.out.println("T1655");
						extent.extentLogger("Creator", "T1655");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(3000);
						if(verifyElementPresent(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus "))
					    {	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipscreenRightPlusIcon,"Right Plus ");	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipSlipscreenTickIcon,"Tick button");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipTrim,"Trim Icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipSplit,"Split Icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipCopy,"Copy Icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipDeleteButton,"Delete Button");
						}
						discardPopup();
					}
				}
	//Logged in User - Check UI of "Select media" screen_T1658	
				public void verifyUiOfSelectMediaScreen_T1658(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check UI of Edit Clips screen");
						System.out.println("T1658");
						extent.extentLogger("Creator", "T1658");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						if(verifyElementPresent(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab"))
					    {	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objSelectMediaAllTab,"All Tab");	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
						}
						discardPopup();
					}		 
					    }
	//Logged in User - Check UI of the "Edit clips" screen if User adds the photo_T1664
				public void verifyUiOfEditClipScreenWhilePhotoAdded_T1664(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check UI of the Edit clips screen if User adds the photo");
						System.out.println("T1664");
						extent.extentLogger("Creator", "T1664");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objSlectMediaFirstPhoto,"First Photo");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add media");
						waitTime(1000);
						Swipe("LEFT",1);
						if(verifyElementPresent(HipiCreateVideoPage.objEditClipDuration,"Duration"))
					    {	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipCopy,"Copy");	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipDeleteButton,"Delete Button");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipFirstVideo,"Recorded video");
						}
						discardPopup();
					}
				}
	//Logged in User - Check default value for duration would be 2 seconds if  User uploads the photo_T1665		
				public void verifyDefaultDurationOfUploadedPhotoIsByDefaultTwoSeconds_T1665(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check default value for duration would be 2 seconds if  User uploads the photo");
						System.out.println("T1665");
						extent.extentLogger("Creator", "T1665");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objSlectMediaFirstPhoto,"First Photo");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add media");
						waitTime(1000);
						Swipe("RIGHT",1);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipDuration,"Duration");
						waitTime(1000);
						if(verifyElementDisplayed(HipiCreateVideoPage.objEditClipDefaultDuration))
						{
							logger.info("User is able to get default value for duration is 2 seconds if he uploads the photo");
					    	extent.extentLoggerPass("Trim Screen", "User is able to get default value for duration is 2 seconds if he uploads the photo");
					    }else {
					    	logger.info("User is unable to get default value for duration is 2 seconds if he uploads the photo");
					    	extent.extentLoggerFail("Trim Screen", "User is unable to get default value for duration is 2 seconds if he uploads the photo"); 
					}
						discardPopup();
					}
				}
	//Logged in User - Check by tapping "Back" or"Tick" button on "Duration" screen User navigates to "Edit clips" screen_T1667
				public void verifyByClickingOnTickIconInDurationScreenUserNavigatesToEditClipScreen_T1667(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check by tapping \"Back\" or\"Tick\" button on \"Duration\" screen User navigates to \"Edit clips\" screen");
						System.out.println("T1667");
						extent.extentLogger("Creator", "T1667");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipPhotoTab,"Photo Tab");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objSlectMediaFirstPhoto,"First Photo");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add media");
						waitTime(1000);
						Swipe("RIGHT",1);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipDuration,"Duration");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objDurationScreenTick,"Duration screen Tick");
						waitTime(1000);
						if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipFirstVideo))
						{
							logger.info("User is able to navigate to Edit clips screen by tapping Back or Tick button on Duration screen");
					    	extent.extentLoggerPass("Trim Screen", "User is able to navigate to Edit clips screen by tapping Back or Tick button on Duration screen");
					    }else {
					    	logger.info("User is unable to navigate to Edit clips screen by tapping Back or Tick button on Duration screen");
					    	extent.extentLoggerFail("Trim Screen", "User is unable to navigate to Edit clips screen by tapping Back or Tick button on Duration screen"); 
					}
						discardPopup();
					}
				}
	//Logged in User - Check the UI of video in "Edit clip "  screen_T1678
				public void verifyUiOfEditClipScreenAfterAddingVideo_T1678(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check the UI of video in \"Edit clip \"  screen");
						System.out.println("T1678");
						extent.extentLogger("Creator", "T1678");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First Video");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add media");
						waitTime(1000);
						Swipe("RIGHT",1);
						if(verifyElementPresent(HipiCreateVideoPage.objEditTextScreenBackButton,"Back Icon"))
					    {	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipSecondVideo," Video");	
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipTrim,"Trim icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipSlipscreenTickIcon,"Tick Icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipSplit,"Split Icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditclipCopy,"Copy Icon");
							waitTime(1000);
							verifyElementPresent(HipiCreateVideoPage.objEditClipDeleteButton,"Delete Button");
						}
						discardPopup();
						
					}
				}
	//Logged  in User - Check User able  to navigate  back to the  "Edit clip" screen  when he taps on cross  icon  , back button  or finish button in split screen_T1682			
				public void verifyUsernavigatesBackToEditClipScreenWhenUserTapsOnTickIcon_T1682(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged  in User - Check User able  to navigate  back to the  Edit clip screen  when he taps on cross  icon  , back button  or finish button in split screen");
						System.out.println("T1682");
						extent.extentLogger("Creator", "T1682");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First Video");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add media");
						waitTime(1000);
						Swipe("RIGHT",1);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipSplit,"Split Icon");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipSlipscreenTick,"Tick Icon");
						if(verifyElementDisplayed(HipiCreateVideoPage.objEditclipHeader))
						{
							logger.info("User is able to navigate back to edit  clip screen  when he  taps on cross icon in  split screen");
					    	extent.extentLoggerPass("Trim Screen", "User is able to navigate back to edit  clip screen  when he  taps on cross icon in  split screen");
					    }else {
					    	logger.info("User is unable to navigate back to edit  clip screen  when he  taps on cross icon in  split screen");
					    	extent.extentLoggerFail("Trim Screen", "User is unable to navigate back to edit  clip screen  when he  taps on cross icon in  split screen"); 
					}
						discardPopup();
					 
				}
				}
	//Logged in User - Chek User able to navigate back to "Edit " screen when he taps back button "Edit clip" screen_T1683	
				public void verifyUserAbleToNavigateToEditScreenWhenBackButtonInEditClipScreenIsTapped_T1683(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged  in User - Check User able  to navigate  back to the  Edit clip screen  when he taps on cross  icon  , back button  or finish button in split screen");
						System.out.println("T1683");
						extent.extentLogger("Creator", "T1683");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
						waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditclipscreenLeftPlusIcon,"Left Plus ");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMediaVideoTab,"Video Tab");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First Video");
						waitTime(1000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add media");
						waitTime(1000);
						Swipe("RIGHT",1);
						Back(1);
						waitTime(2000);
						if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext))
						{
							logger.info("User is able to navigate back to edit  screen when he taps app back button from Edit clip screen");
					    	extent.extentLoggerPass("Trim Screen", "User is able to navigate back to edit  screen when he taps app back button from Edit clip screen");
					    }else {
					    	logger.info("User is unable to navigate back to edit  screen when he taps app back button from Edit clip screen");
					    	extent.extentLoggerFail("Trim Screen", "User is unable to navigate back to edit  screen when he taps app back button from Edit clip screen"); 
					}
						discardPopup();
					}		
				}
	//Logged in User - Check by tapping on device back button "Effect" screen pop-up gets closed_T1795
				public void verifyEffectPopupIsDisappearedWhenDeviceBackButtonIsTapped_T1795(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check by tapping on device back button Effect screen pop-up gets closed");
						System.out.println("T1795");
						extent.extentLogger("Creator", "T1795");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effect");
						waitTime(1000);
						verifyElementPresent(HipiCreateVideoPage.objEffectDownloadIconBeforeDownloading,"Effect Popup");
						waitTime(1000);
						Back(1);
						if(verifyElementDisplayed(HipiCreateVideoPage.objEffectDownloadIconBeforeDownloading))
						{
							logger.info("Effect screen  pop-up is not closed when User taps device back button");
					    	extent.extentLoggerFail("Effect Screen", "Effect screen  pop-up is not closed when User taps device back button");
					    }else {
					    	logger.info("Effect screen  pop-up has been closed when User taps device back button");
					    	extent.extentLoggerPass("Effect Screen", "Effect screen  pop-up has been closed when User taps device back button"); 
					}
						navigateToHomePage();
					}
				}
	//Logged in User - Check by tapping on device back button "Filter" screen pop-up gets closedLogged in User - Check by tapping on device back button "Filter" screen pop-up gets closed_T1803
				public void verifyFilterPopupIsDisappearedWhenDeviceBackButtonIsTapped_T1803(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check by tapping on device back button Filter screen pop-up gets closedLogged in User - Check by tapping on device back button \"Filter\" screen pop-up gets closed");
						System.out.println("T1803");
						extent.extentLogger("Creator", "T1803");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objfilter,"Filter");
						waitTime(1000);
						verifyElementPresent(HipiCreateVideoPage.objfirstfilterbeforedownlload,"Filter Popup");
						waitTime(1000);
						Back(1);
						if(verifyElementDisplayed(HipiCreateVideoPage.objfirstfilterbeforedownlload))
						{
							logger.info("Filter screen  pop-up has Not closed when User taps device back button");
					    	extent.extentLoggerFail("Filter Screen", "Filter screen  pop-up has Not closed when User taps device back button");
					    }else {
					    	logger.info("Filter screen  pop-up has been closed when User taps device back button");
					    	extent.extentLoggerPass("Filter Screen", "Filter screen  pop-up has been closed when User taps device back button"); 
					}
						navigateToHomePage();
					}
				}	
	//Logged in User - Check layout of Filter screen_T1804
				public void verifyUiOfFilterScreen_T1804(String userType) throws Exception 
				{
					if(userType.equalsIgnoreCase("NonSubscribedUser"))
					{
						extent.HeaderChildNode("Logged in User - Check layout of Filter screen");
						System.out.println("T1804");
						extent.extentLogger("Creator", "T1804");
						verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
						allowPermissions();
						waitTime(3000);
						verifyElementPresentAndClick(HipiCreateVideoPage.objfilter,"Filter");
						waitTime(1000);
						for(int i=1;i<=3;i++)
						{
							verifyElementPresent(HipiCreateVideoPage.filterTabsXpaths(i),"Filter layout");
							String verify2 = getText(HipiCreateVideoPage.filterTabsXpaths(i));
					    	logger.info(" FIlter layout "+verify2+"is displayed");
							extent.extentLoggerPass("FIlter layout", "FIlter layout "+verify2+" is displayed");
							verifyElementPresentAndClick(HipiCreateVideoPage.filterTabsFilters(i),"Filter ");
							waitTime(5000);
							String verify3 = getText(HipiCreateVideoPage.filterTabsFilters(i));
					    	logger.info(" FIlter "+verify3+"is displayed");
							extent.extentLoggerPass("FIlter", "FIlter "+verify3+" is displayed");
						}
						if(verifyElementPresent(HipiCreateVideoPage.objfilterImgClear,"Filter clear"))
						{
						waitTime(1000);
						verifyElementPresent(HipiCreateVideoPage.objfiltercategorydownloadbtn,"Download Pin");
						waitTime(1000);logger.info("User is able to view all the components of Filter screen");
				    	extent.extentLoggerPass("Filter Screen", "User is able to view all the components of Filter screen"); 
						}
					navigateToHomePage();
						}
					}
				
				
				//------------------------Post P2 Tc's=----------------------
				
				//Check if internet connection is off User gets the "Retry" and "Dismiss" CTA   on the progress bar with text as “Upload Failed”_T1649 	
							public void	verifyAfterTappingOnPostUploadfailedHasDisplayed_T1649(String userType) throws InterruptedException, Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check if internet connection is off User gets the Retry and Dismiss CTA   on the progress bar with text as Upload Failed");
									System.out.println("T1649");
									extent.extentLogger("Post ","T1649");
									verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
									allowPermissions();
									verifyElementPresentAndClick(HipiCreateVideoPage.obj60sec, "60 sec");
									verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
									waitTime(5000);
									waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
									waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//									verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//									waitTime(3000);
									if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
									{
										click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//										click(HipiCreateVideoPage.objDoneCTC, "Done Button");
									}else {
										logger.info("User is unable to See Language Options");
										extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
										
									}
									TurnOFFWifi();
									waitTime(3000);
									verifyElementPresent(HipiCreateVideoPage.objUploadDeleteIcon,"Delete Video");
									waitTime(1000);
									verifyElementPresent(HipiCreateVideoPage.objUploadFailed,"Upload Failed");
									waitTime(1000);
									if(verifyElementPresent(HipiCreateVideoPage.objUploadPopupRetry,"Retry"))
									{
										logger.info("User is able to get text as “Upload Failed” on progress bar with Retry and Dismiss CTA post turning off the internet");
								    	extent.extentLoggerPass("Feed Screen", "User is able to get text as “Upload Failed” on progress bar with Retry and Dismiss CTA post turning off the internet");
								    }else {
								    	logger.info("User is unable to get text as “Upload Failed” on progress bar with Retry and Dismiss CTA post turning off the internet");
								    	extent.extentLoggerFail("Feed Screen", "User is unable to get text as “Upload Failed” on progress bar with Retry and Dismiss CTA post turning off the internet"); 
								}		
									TurnONWifi();
								navigateToHomePage();				
								}
							}
				//Check by tapping on "Dismiss" CTA User is able to  cancel the upload and remove the video upload progress bar_T1651	
							public void	verifyByTappingOnDismissUploadPopupDisappear_T1651(String userType) throws InterruptedException, Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check by tapping on Dismiss CTA User is able to  cancel the upload and remove the video upload progress bar");
									System.out.println("T1651");
									extent.extentLogger("Post ","T1651");
									verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
									allowPermissions();
//									verifyElementPresentAndClick(HipiCreateVideoPage.obj90sec, "90 sec");
									verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
									waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn,90);
								
									click(HipiCreateVideoPage.objVideoEditNextBtn,"Next");

									waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//									verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//									waitTime(3000);
									if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
									{
										click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//										click(HipiCreateVideoPage.objDoneCTC, "Done Button");
									}else {
										logger.info("User is unable to See Language Options");
										extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
										
									}
									click(HipiCreateVideoPage.objuploadpost,"Post");
									
									TurnOFFWifi();
									waitTime(3000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objUploadDeleteIcon,"Delete Video");
									waitTime(2000);
									if(verifyElementDisplayed(HipiCreateVideoPage.objUploadDeleteIcon))       
									 {
										logger.info("User is unable to cancel the upload and remove the video upload progress bar by tapping on Dismiss CTA");
								    	extent.extentLoggerFail("Feed Screen", "User is unable to cancel the upload and remove the video upload progress bar by tapping on Dismiss CTA");
								    }else {
								    	logger.info("User is able to cancel the upload and remove the video upload progress bar by tapping on Dismiss CTA");
								    	extent.extentLoggerPass("Feed Screen", "User is able to cancel the upload and remove the video upload progress bar by tapping on Dismiss CTA"); 
								}	
									if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
										Back(1);
									}else {
										logger.info("User is unable to See Share Sheet");
										extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
									}
									TurnONWifi();
								navigateToHomePage();				
								}
							}
				//Check by tapping on "Retry" CTA User is able to reinitiate the upload_T1650		
							public void	verifyByTappingOnRetryUserReinitiateTheUploadProcess_T1650(String userType) throws InterruptedException, Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check by tapping on Retry CTA User is able to reinitiate the upload");
									System.out.println("T1650");
									extent.extentLogger("Post ","T1650");
									verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
									allowPermissions();
									verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
									waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn,90);
								
									click(HipiCreateVideoPage.objVideoEditNextBtn,"Next");
									waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//									verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//									waitTime(3000);
									if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
									{
										click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//										click(HipiCreateVideoPage.objDoneCTC, "Done Button");
									}else {
										logger.info("User is unable to See Language Options");
										extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
										
									}
									click(HipiCreateVideoPage.objuploadpost,"Post");
									TurnOFFWifi();
									waitTime(3000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objUploadPopupRetry,"Retry");
									waitTime(2000);
									if(verifyElementDisplayed(HipiCreateVideoPage.objUploadPopupuploatindText))
									{
										logger.info("User is able to reinitiate the upload by tapping on Retry CTA");
								    	extent.extentLoggerPass("Feed Screen", "User is able to reinitiate the upload by tapping on Retry CTA");
								    }else {
								    	logger.info("User is unable to reinitiate the upload by tapping on Retry CTA");
								    	extent.extentLoggerFail("Feed Screen", "User is unable to reinitiate the upload by tapping on Retry CTA"); 
								}		
									if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
										Back(1);
									}else {
										logger.info("User is unable to See Share Sheet");
										extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
									}
									TurnONWifi();
								navigateToHomePage();
								}
							}
				//Check  UI  of "Trim video" screen_T1951
							public void	verifyUiOfTrimVideoScreen_T1951(String userType) throws InterruptedException, Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check  UI  of Trim video screen");
									System.out.println("T1951");
									extent.extentLogger("Post ","T1951");
									verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
									waitTime(1000);
									verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
									waitTime(1000);
									verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
									waitTime(1000);
									String Text=getText(HipiCreateVideoPage.objTrimVideoScreenHeader);
									if(verifyElementPresent(HipiCreateVideoPage.objTrimVideoScreenHeader,Text))
									{
										String Text1=getText(HipiCreateVideoPage.objTrimVideoScreenDragText);
										waitTime(1000);
										verifyElementPresent(HipiCreateVideoPage.objTrimVideoScreenHeader,Text1);
										waitTime(1000);
										verifyElementPresent(HipiCreateVideoPage.objTrimscreenCrossIcon,"cross icon");
										waitTime(1000);
										verifyElementPresent(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick icon");
										waitTime(1000);
									}
									navigateToHomePage();
								}
							}
				//Check by tapping on "Keep" CTA User sees the "Pop Up" dismisses and "Edit video" screen displayed_T1957
							public void	verifyByTappingOnKeepCtaInDiscardPopupUserNavigatesToEditVideoScreen_T1957(String userType) throws InterruptedException, Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check by tapping on Keep CTA User sees the Pop Up dismisses and Edit video screen displayed");
									System.out.println("T1957");
									extent.extentLogger("Post ","T1957");
									verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
									waitTime(1000);
									verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
									waitTime(1000);
									verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick icon");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn,"Back Arrow");
									waitTime(1000);
									verifyElementPresent(HipiCreateVideoPage.objDiscardEdits,"Discard Popup");
									waitTime(1000);
									verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupkeepButton,"Keep Button");
									waitTime(1000);
									if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext))
									{
										logger.info("User  is able to see the Pop Up dismissed and Edit video screen displayed by tapping on Keep CTA");
								    	extent.extentLoggerPass("Post Screen", "User  is able to see the Pop Up dismissed and Edit video screen displayed by tapping on Keep CTA");
								    }else {
								    	logger.info("User  is unable to see the Pop Up dismissed and Edit video screen displayed by tapping on Keep CTA");
								    	extent.extentLoggerFail("Post Screen", "User  is unable to see the Pop Up dismissed and Edit video screen displayed by tapping on Keep CTA"); 
								}					
								discardPopup();
								}
							}
				//---------------------All Detail screen P2 Tcs-------------------------------

				//Check if Guest User is able to see video progressive bar on comment box in all detail screens_T1884_T1885
							public void verifyUserCanSeeProgressiveBar_T1884_T1885(String userType) throws Exception 
							{
								if(userType.equalsIgnoreCase("Guest"))
								{
									extent.HeaderChildNode("Check if Guest User is able to see video progressive bar on comment box in all detail screens");
									System.out.println("T1884");
									extent.extentLogger("All Detail", "T1884");
								}else if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check if Logged in user is able to see video progressive bar on comment box in all detail screens");
									System.out.println("T1885");
									extent.extentLogger("All Detail", "T1885");
								}
									verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
									waitTime(5000);
									verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
									waitTime(2000);
									verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
									waitTime(2000);
									if(verifyElementDisplayed(HipiDiscoverPage.objNavigationBar))
									{
										logger.info("Guest/Loogged in User is able to see video progressive bar in all detail screens");
								    	extent.extentLoggerPass("All detail Screen", "Guest/Loogged in User is able to see video progressive bar in all detail screens");
								    }else {
								    	logger.info("Guest/Loogged in User is unable to see video progressive bar in all detail screens");
								    	extent.extentLoggerFail("All detail Screen", "Guest/Loogged in User is unable to see video progressive bar in all detail screens"); 
								}					
								navigateToHomePage();
							}
//							--------------------Feed p2 Tc's-----------------------------
							
				//Logged in User -  Check if User following any creator  follow button should not be visible in "Creator"  profile_T1930
							public void verifyFollowedUserCanSeeFollowingCtaInCreatorScreen_T1930(String userType) throws Exception 
							{			
								if(userType.equalsIgnoreCase("NonSubscribedUser")){
									extent.HeaderChildNode("Logged in User -  Check if User following any creator  follow button should not be visible in Creator profile");
									System.out.println("T1930");
									extent.extentLogger("Feed", "T1930");
									String username=getText(HipiHomePage.objUserName);
									System.out.println("Following user "+username);
									extent.extentLogger("Following user"+username,"");
									verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
									waitTime(3000);
									verifyElementPresentAndClick(HipiProfilePage.objFollowUnfollow, "Follow button");
									Back(1);
									verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
									if(verifyElementDisplayed(HipiProfilePage.objFollowingbutton))
									{
										logger.info("User navigates to creator profile  and following cta is visible");
								    	extent.extentLoggerPass("Profile Screen", "User navigates to creator profile  and following cta is visible");
								    }else {
								    	logger.info("User navigates to creator profile  and following cta is not visible");
								    	extent.extentLoggerFail("Profile Screen", "User navigates to creator profile  and following cta is not visible"); 
								}					
								navigateToHomePage();
								}
							}
							public void trimVideo(WebElement source,int Xaxis,int yaxis, String validationText) throws Exception
							{
								try
								{
									System.out.println("Dragging The "+validationText);
									extent.extentLogger("Dragging The "+validationText, "");
									AndroidTouchAction touch = new AndroidTouchAction(getDriver());
									touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(source)))
											.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000))).moveTo(PointOption.point(Xaxis, yaxis))
											.release().perform();
//								action.longPress(ElementOption.element(source)).moveTo(ElementOption.element(Destination)).release().perform();
								}
								catch(Exception e)
								
								{
									System.out.println("Unable To drag The element "+validationText);
									extent.extentLoggerFail("Unable To drag The element "+validationText, "");
								}
							}
				//Check if height of the comment box is identical to the bottom navigation bar_T1841	
							public void verifyHeightOfCommentBoxIsSameAsNavigationalbar_T1841(String userType) throws Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check if height of the comment box is identical to the bottom navigation bar");
									System.out.println("T1841");
									extent.extentLogger(" Discover Screen", "T1841");
									verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
									waitTime(2000);
									verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "First Profile");
									waitTime(3000);
									click(HipiDiscoverPage.objAnyHipiVideo, "Video");
									waitTime(1000);
									verifyElementPresentAndClick(HipiDiscoverPage.objVideoScreenSoundAdded, "Sound");
									verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound, "Video");
									waitTime(5000);
									WebElement commentBox=getDriver().findElement(By.xpath("//*[@id='comment_box']"));
									Dimension elementSize=commentBox.getSize();
									int width=elementSize.width;
									System.out.println("Comment Box Width = "+width);
									extent.extentLogger("Comment Box Width = "+width, "Comment Screen");
									WebElement navigationalBar=getDriver().findElement(By.xpath("//*[@id='exo_progress']"));
									Dimension elementSize1=navigationalBar.getSize();
									int width1=elementSize1.width;  
									System.out.println("Navigation bar Width = "+width1);
									extent.extentLogger("Navigation bar Width = "+width1, "Comment Screen");
									if(width==width1)
									{
										logger.info("The height of comment box is same as bottom navigation bar in all detail screens");
								    	extent.extentLoggerPass("Discover Video Screen", "The height of comment box is same as bottom navigation bar in all detail screens");
								    }else {
								    	logger.info("The height of comment box is not same as bottom navigation bar in all detail screens");
								    	extent.extentLoggerFail("Discover Video Screen", "The height of comment box is not same as bottom navigation bar in all detail screens"); 
								}
								navigateToHomePage();
								}
							}
				//Check if height of the comment box is identical to the bottom navigation bar_T1840	
							public void verifyHeightOfCommentBoxIsSameAsNavigationalbarOfDiscoverScreenVideo_T1840(String userType) throws Exception
							{
								if(userType.equalsIgnoreCase("NonSubscribedUser"))
								{
									extent.HeaderChildNode("Check if height of the comment box is identical to the bottom navigation bar");
									System.out.println("T1840");
									extent.extentLogger(" Discover Screen", "T1840");
									verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
									waitTime(2000);
									verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage, "Video");
									waitTime(1000);
									waitTime(5000);
									WebElement commentBox=getDriver().findElement(By.xpath("//*[@id='comment_box']"));
									Dimension elementSize=commentBox.getSize();
									int width=elementSize.width;
									System.out.println("Comment Box Width = "+width);
									extent.extentLogger("Comment Box Width = "+width, "Comment Screen");
									WebElement navigationalBar=getDriver().findElement(By.xpath("//*[@id='exo_progress']"));
									Dimension elementSize1=navigationalBar.getSize();
									int width1=elementSize1.width;  
									System.out.println("Navigation bar Width = "+width1);
									extent.extentLogger("Navigation bar Width = "+width1, "Comment Screen");
									if(width==width1)
									{
										logger.info("Height of the comment box is  identical to the bottom navigation bar");
								    	extent.extentLoggerPass("Discover Video Screen", "Height of the comment box is  identical to the bottom navigation bar");
								    }else {
								    	logger.info("Height of the comment box is not identical to the bottom navigation bar");
								    	extent.extentLoggerFail("Discover Video Screen", "Height of the comment box is not identical to the bottom navigation bar"); 
								}
								navigateToHomePage();
								}
							}
							
							
//======================================Hashtag=========================================================================
							
							public void clickOnHashTag() throws Exception 
							{	
									System.out.println("Tapping On HashTag and Navigating To hastag screen, please wait");
								for(int i=0;i<=5;i++)
								{							
									waitTime(2000);
									if (verifyElementDisplayed(HipiHomePage.objShopButton)) {
										logger.info("user is able to see Shop button");
										extent.extentLoggerPass("", "user is able to see Shop button");
								
									}else {
										SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
									}
									if(verifyElementDisplayed(HipiHomePage.objFeedScreenHashTag))
									{
										waitTime(5000);
										WebElement element = findElement(By.xpath("//*[@id='text_view_video_description']"));
										element.click();
										if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
										{
											String text=getText(HipiFeedPage.objHashTagHeader);
											logger.info(text+" Hashtag is displayed");
									    	extent.extentLoggerPass("", text+" Hashtag is displayed");
											break;
										}else {
											waitTime(2000);
											Swipe("UP",1);
										}
									} 
									else if(verifyElementDisplayed(HipiHomePage.objFeedScreenMore))
									{
										waitTime(2000);
										WebElement element = findElement(By.xpath("//*[@id='text_view_video_description']"));
										element.click();
										waitTime(5000);
										element.click();
										waitTime(2000);
										if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
										{
											String text=getText(HipiFeedPage.objHashTagHeader);
											logger.info(text+" Hashtag is displayed");
									    	extent.extentLoggerPass("", text+" Hashtag is displayed");
											break;
										}else
										{
											waitTime(2000);
											Swipe("UP",1);
										}
								
									}
									else {
										waitTime(2000);
										Swipe("UP",1);
									}
								}
							}
							
							
		
							
//=================================New CheckList 04-04-2022========================================================
							
							
							
		public void userNameInSoundDetailPage__T2247(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
			extent.HeaderChildNode("T2247 - Logged in user - Check user able to tap on use this sound CTA in sound detail page");
			System.out.println("T2247");
			extent.extentLogger("", "T2247");
			
			navigateToHashtagRailVideo();
			verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
			waitTime(3000);
			verifyElementPresentAndClick(HipiSoundDetailPage.objUseThisSoundBtn, "Use This sound");
			waitTime(3000);
			allowPermissions();
			waitTime(4000);
			if(verifyElementPresent(HipiCreateVideoPage.objrecordbtn,"Record Button")){
				logger.info("User is able to tap on Use this Sound  CTA");
		    	extent.extentLoggerPass("", "User is able to tap on Use this Sound  CTA");
		    }else {
		    	logger.info("User is not able to tap on Use this Sound  CTA");
		    	extent.extentLoggerFail("", "User is not able to tap on Use this Sound  CTA"); 
		}
			discardPopup();
			}
		} 					
							
		
	
	//=============================================Creator New Sheet===========================================================
		
		public void ableToAddSoundForVideo__T2248(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2248 - Verify whether the user is able to add sound for a video & upload on Hipi app");
				System.out.println("T2248");
				extent.extentLogger("", "T2248");
				
				navigateToSoundScreenInCreatorPage();
				waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);

			verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
				waitTime(3000);				
				verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"Sounds");
				waitUntilElementDisplayed(HipiCreateVideoPage.objMusicScreenTickIcon,30);
				verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon,"Tick Icon");
				waitTime(3000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next Button");
//				waitTime(5000);
				waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

				if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader, "Post Screen Header")){
					logger.info("User is able to proceed to upload video by adding a sound in video edit screen");
			    	extent.extentLoggerPass("", "User is able to proceed to upload video by adding a sound in video edit screen");
			    }else {
			    	logger.info("User is able to proceed to upload video by adding a sound in video edit screen");
			    	extent.extentLoggerFail("", "User is able to proceed to upload video by adding a sound in video edit screen"); 
			}
				discardPopup();
				}
			}
		public void verifyHeightOfCommentBoxAndNavigationalBarIsSame_T1862_T1851(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1862 - Check if height of comment box is same as bottom navigation bar in all detail screens");
				System.out.println("T1862");
				extent.extentLogger("Detail screen", "T1862");
			}else if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T1851 - The height of comment box should be same as bottom navigation bar in all detail screens for Guest and Logged-In User");
				System.out.println("T1851");
				extent.extentLogger("Detail screen", "T1851");
			}
				verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
				waitTime(5000);
				verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
				waitTime(5000);
				WebElement commentBox=getDriver().findElement(By.xpath("//*[@id='comment_box']"));
				Dimension elementSize=commentBox.getSize();
				int width=elementSize.width;
				System.out.println("Comment Box Width = "+width);
				extent.extentLogger("Comment Box Width = "+width, "Comment Screen");
				WebElement navigationalBar=getDriver().findElement(By.xpath("//*[@id='exo_progress']"));
				Dimension elementSize1=navigationalBar.getSize();
				int width1=elementSize1.width;  
				System.out.println("Navigation bar Width = "+width1);
				extent.extentLogger("Navigation bar Width = "+width1, "Comment Screen");
				if(width==width1)
				{
					logger.info("The height of comment box is same as bottom navigation bar in all detail screens");
			    	extent.extentLoggerPass("Feed Screen", "The height of comment box is same as bottom navigation bar in all detail screens");
			    }else {
			    	logger.info("The height of comment box is not same as bottom navigation bar in all detail screens");
			    	extent.extentLoggerFail("Feed Screen", "The height of comment box is not same as bottom navigation bar in all detail screens"); 
			    }
			navigateToHomePage();
		}
		public void verifyUserAddComment_T1864(String userType,String userName) throws Exception 
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T1864 - Check display of latest comment appears on top and time is changed after few min for Logged-In User in all detail screens");
				System.out.println("T1864");
				extent.extentLogger("Detail screen", "T1864");
				waitUntilElementDisplayed(HipiHomePage.objUserName, 5);
				verifyElementPresentAndClick(HipiHomePage.objUserName, "UserHandler");
				waitTime(5000);
				verifyElementPresent(HipiProfilePage.objProfileHeader,"Profile SCreen header");
				waitTime(2000);
				verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First video");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objCommentBox,"Comment Box");
				waitTime(2000);
			click(HipiHomePage.objCommentscreenTextField,"Comment TextField");
			type(HipiHomePage.objCommentscreenTextField,userName,"Type value");
			waitTime(2000);
			verifyElementPresentAndClick(HipiHomePage.objCommentPostIcon, "Comment post button");
			if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
			{
				logger.info("Guest user is able to see Login popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
		    	extent.extentLoggerPass("comment Screen", "Guest user is able to see Login popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
		    }else {
		    	logger.info("Guest user is unable to see Login popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens");
		    	extent.extentLoggerFail("comment Screen", "Guest user is unable to see Login popup on tapping comment box at bottom of the screen over video playing/paused in all detail screens"); 
			}
			navigateToHomePage();
			}
		}
		
		public void verifyUserCanEditvideoBeforeNavigatingToPostScreen_T1961(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Check by tapping on Next CTA User get navigates to Post video screen");
				System.out.println("T1961");
				extent.extentLogger("Edit Screen Video", "T1961");
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Tab");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objDraftsPageVideo,"Draft Video");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objPostScreenEdit,"Edit");
				waitUntilElementDisplayed(HipiProfilePage.objPostScreenTrimVideoTitle,30);
				verifyElementPresent(HipiProfilePage.objPostScreenTrimVideoTitle,"Trim video screen");
				waitTime(3000);
				verifyElementPresentAndClick(HipiProfilePage.objPostScreenTrimsTick,"Tick");
				waitTime(2000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
				waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 20);
				if(verifyElementDisplayed(HipiCreateVideoPage.objpostbtn))
				{
						logger.info("User is able to navigate to effect screen  by tapping effecf icon");
				    	extent.extentLoggerPass("Effect Screen", "User is able to navigate to effect screen  by tapping effecf icon");
				    }else {
				    	logger.info("User is unable to navigate to effect screen  by tapping effecf icon");
				    	extent.extentLoggerFail("Effect Screen", "User is unable to navigate to effect screen  by tapping effecf icon"); 
				}
				navigateToHomePage();		
			}
		}

							
		public void ableToSeeSearchBarOnSoundsScreen__T2249(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2249 - Verify whether user is able to see search bar on sounds screen & its functioning");
				System.out.println("T2249");
				extent.extentLogger("", "T2249");						
				navigateToSoundScreenInCreatorPage();
				discardPopup();	
				}
		}
		
	
		
		
		
		
		
		public void   favouriteTabHasTheListOfSoundsAddedToFavourite__T2258(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2258 - Verify the favourite tab has the list of sounds added to favourite by user");
				System.out.println("T2258");
				extent.extentLogger("", "T2258");		
				navigateToSoundScreenInCreatorPage();
				verifyElementPresentAndClick(HipiCreateVideoPage.objFavoritesTab, "Favorites Tab");
				verifyElementPresent(HipiCreateVideoPage.objBookmarked, "Book mark");
				verifyElementPresent(HipiCreateVideoPage.objSoundsAnySound, "Sounds");
				discardPopup();
			}
		}
		
		
		public void differentCategoriesUnderDiscoverTab__T2259(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2259 - Verify if the user is able to see different categories under discover tab");
				System.out.println("T2259");
				extent.extentLogger("", "T2259");		
				navigateToSoundScreenInCreatorPage();
				waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);

				if(verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music")){
					logger.info("User is able to see categories under discover tab");
			    	extent.extentLoggerPass("", "User is able to see categories under discover tab");
			    }else {
			    	logger.info("User is not able to see categories under discover tab");
			    	extent.extentLoggerFail("", "User is not able to see categories under discover tab"); 
			}	
				discardPopup();
			}
		}
		
		public void   seeAllOptionGIvenAboveTheSoundCategories__T2260(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2260 - Verify whether there is a 'See All' option given above the sound categories");
				System.out.println("T2260");
				extent.extentLogger("", "T2260");		
				navigateToSoundScreenInCreatorPage();
				if(verifyElementPresent(HipiCreateVideoPage.objSeeAllButton, "See all button")){
					logger.info("User is able to see the 'See All' option for categories rail");
			    	extent.extentLoggerPass("", "User is able to see the 'See All' option for categories rail");
			    }else {
			    	logger.info("User is not able to see the 'See All' option for categories rail");
			    	extent.extentLoggerFail("", "User is not able to see the 'See All' option for categories rail"); 
			}	
				discardPopup();
			}
		}
		public void verifyHahtagIsDisplayedInDiscoverScreen_T1508(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
		
				extent.HeaderChildNode("T1508 - Logged in user - Check whether hashtag title is visible");
				System.out.println("T1508");
				extent.extentLogger("Discover", "T1508");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitUntilElementDisplayed(HipiDiscoverPage.objRelatedHashtagVideos, 2);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(5000);
				clickOnHashTag();
				if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
				{
					logger.info("user is able to see hashTag Screen in discover screen");
			    	extent.extentLoggerPass("Hashtag Screen", "user is able to see hashTag Screen in discover screen");
			    }else {
			    	logger.info("user is able to see hashTag Screen in discover screen");
			    	extent.extentLoggerFail("Hashtag Screen", "user is able to see hashTag Screen in discover screen"); 
				}
				navigateToHomePage();
			}
		}
		public void   tappedSeeAllOption__T2261(String userType) throws Exception {
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2261 - Verify whether user is able to see all categories when 'See All' option is tapped");
				System.out.println("T2261");
				extent.extentLogger("", "T2261");		
				navigateToSoundScreenInCreatorPage();
				verifyElementPresentAndClick(HipiCreateVideoPage.objSeeAllButton, "See all button");
				waitTime(3000);
				if(verifyElementPresentAndClick(HipiCreateVideoPage.objDetailedCategory, "Detailed Category")){
					logger.info("User is able to view the detailed category displaying on tapping 'See All' option");
			    	extent.extentLoggerPass("", "User is able to view the detailed category displaying on tapping 'See All' option");
			    }else {
			    	logger.info("User is not able to view the detailed category displaying on tapping 'See All' option");
			    	extent.extentLoggerFail("", "User is not able to view the detailed category displaying on tapping 'See All' option"); 
			}	
				discardPopup();
				
			}
		}
		
		
		
//==================================12-04-2022---------------------------------------------------------------
		public void verifyHahtagIsDisplayedInProfileScreen_T1178(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
		
				extent.HeaderChildNode("T1178 - Logged in user - Check posted hashtag video is displaying under profile screen");
				System.out.println("T1178");
				extent.extentLogger("Post", "T1178");
				verifyDescriptionAndHashtagPresentInNewVideo_T644("NonSubscribedUser");
				waitTime(3000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
				waitTime(3000);
				if(verifyElementDisplayed(HipiProfilePage.objVerifyHastag))
				{
					logger.info("user is able to See Hahtag video in Profile screen");
			    	extent.extentLoggerPass("Profile Screen", "user is able to See Hahtag video in Profile screen");
			    }else {
			    	logger.info("user is unable to See Hahtag video in Profile screen");
			    	extent.extentLoggerFail("Profile Screen", "user is unable to See Hahtag video in Profile screen"); 
				}
				navigateToHomePage();

			}
		}
		
		
		
		
		
		public void verifyUserCanViewHashTagDetailScreen_T046(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
		
				extent.HeaderChildNode("T046 - Logged in User - Check if user is able to view Hastag detail page by tapping on Hashtag in the description on played/paused video");
				System.out.println("T046");
				extent.extentLogger("Feed", "T046");
				clickOnHashTag();
				if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
				{
					logger.info("User is able to navigate to Hashtag details page");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able to navigate to Hashtag details page");
			    }else {
			    	logger.info("User is unable to navigate to Hashtag details page");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to navigate to Hashtag details page"); 
				}
				navigateToHomePage();
			}
		}
		
		
		public void verifyUserNavigatedToFeedScreenByTappingOnBackInHastagScreen_T048_T092(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
		
				extent.HeaderChildNode("T048 - Logged in User - Check if user is able to view Hastag detail page by tapping on Hashtag in the description on played/paused video");
				System.out.println("T048");
				extent.extentLogger("Feed", "T048");
			} else if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T092 - Guest User - Check if user is able is redirected to 'Feed' screen on tapping on back in HashTag Detail Screen");
				System.out.println("T092");
				extent.extentLogger("Feed", "T092");
			}
				clickOnHashTag();
				verifyElementPresentAndClick(HipiFeedPage.objHashTagBackButton, "Back Button ");
				waitTime(2000);
				if(verifyElementDisplayed(HipiFeedPage.objfollowingsinfeed))
				{
					logger.info("User is able to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
			    }else {
			    	logger.info("User is unable to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen"); 
				}
				navigateToHomePage();
		}
		public void verifyUserNavigatedToFeedScreenByTappingBackInHashTagScreen_T446(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T446 - Logged in user - Check if user is able is redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
				System.out.println("T446");
				extent.extentLogger("Feed", "T446");
				waitTime(2000);
				verifyElementPresentAndClick(HipiFeedPage.objfollowingsinfeed, "Following Tab");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiFeedPage.objHashTagBackButton, "Back Button ");
				waitTime(2000);
				if(verifyElementDisplayed(HipiFeedPage.objfollowingsinfeed))
				{
					logger.info("User is able to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
			    }else {
			    	logger.info("User is unable to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to redirected to 'Feed' screen on tapping on 'back' in HashTag Detail Screen"); 
				}
				
				navigateToHomePage();
				click(HipiHomePage.objForYou, "For you tab");
				
			}
		}				
//Logged in user - Check default thumbnail of hashtag should be_T1496 Discover P1
		public void verifyDafaultThumbnailOfHastagIsDisplayedInHashTagScreen_T1496(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1496 - Logged in user - Check default thumbnail of hashtag should be #");
				System.out.println("T1496");
				extent.extentLogger("Discover", "T1496");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitUntilElementDisplayed(HipiDiscoverPage.objRelatedHashtagVideos, 2);
				Swipe("UP", 2);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				if(verifyElementDisplayed(HipiFeedPage.objHashTagThumbnail))
				{
					logger.info("user is able to see hashTag Screen in discover screen");
			    	extent.extentLoggerPass("Hashtag Screen", "user is able to see hashTag Screen in discover screen");
			    }else {
			    	logger.info("user is unable to see hashTag Screen in discover screen");
			    	extent.extentLoggerFail("Hashtag Screen", "user is unable to see hashTag Screen in discover screen"); 
				}
				navigateToHomePage();
			}
		}
//Logged in user - Check user is able to navigate for creator screen from hashtag detail page_T1497	//Discover p1
		public void verifyUserNavigatedToCreatorScreenByTappingOnVideoInHashTagDetailScreen_T1497(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1497 - Logged in user - Check user is able to navigate for creator screen from hashtag detail page");
				System.out.println("T1497");
				extent.extentLogger("Discover", "T1497");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitUntilElementDisplayed(HipiDiscoverPage.objRelatedHashtagVideos, 2);
				Swipe("UP", 2);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiDiscoverPage.objCreateVideoButton,"Create Video");
				allowPermissions();
				waitTime(2000);
				if(verifyElementDisplayed(HipiCreateVideoPage.objrecordbtn))
				{
					logger.info("User is able to navigate to creator screen");
			    	extent.extentLoggerPass("Hashtag Screen", "user is able to see hashTag Screen in discover screen");
			    }else {
			    	logger.info("User is unable to navigate to creator screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to navigate to creator screen"); 
				}
				navigateToHomePage();
			}
		}
//Logged in user - Check user is able to view created hashtag in post screen description_T1499
		public void verifyUserCanCreateVideoWithHashTagDisplayedInFeedScreen_T1499(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1499 - Logged in user - Check user is able to view created hashtag in post screen description");
				System.out.println("T1499");
				extent.extentLogger("Discover", "T1499");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitUntilElementDisplayed(HipiDiscoverPage.objRelatedHashtagVideos, 2);
				Swipe("UP", 2);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiDiscoverPage.objCreateVideoButton,"Create Video");
				waitTime(2000);
				allowPermissions();
				verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record");
				waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
				waitTime(2000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");	
				waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn,30);
				if(verifyElementDisplayed(HipiProfilePage.objVerifyHastag))
				{
					logger.info("User is able to See HasTag in video Post screen");
			    	extent.extentLoggerPass("Hashtag Screen", "user is able to see hashTag Screen in discover screen");
			    }else {
			    	logger.info("User is unable to See HasTag in video Post screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to See HasTag in video Post screen"); 
				}
				discardPopup();
			}
		}
//------------------------HashTag Related Tc's P2-------------------------
		
//Logged in User - Check if user is able to view hastag in the description on played/paused video_T045 Feed p2
		public void verifyHahTagIsVisibleInFeedScreen_T045_T089(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in User - Check if user is able to view hastag in the description on played/paused video");
				System.out.println("T045");
				extent.extentLogger("Feed", "T045");
			}else if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("Guest User - Check if user is able to view hastag in the description on played/paused video");
				System.out.println("T089");
				extent.extentLogger("Feed", "T089");
			}
				waitTime(2000);
				for(int i=0;i<3;i++)
				{
				if(verifyElementDisplayed(HipiHomePage.objFeedScreenHashTag))
				{
					logger.info("User is able to See HasTag in Feed  screen");
			    	extent.extentLoggerPass("Feed Screen", "User is able to See HasTag in Feed  screen");
			    	break;
				}else if(verifyElementDisplayed(HipiHomePage.objFeedScreenMore))
				{
					click(HipiHomePage.objFeedScreenMore,"more");
					if(verifyElementDisplayed(HipiHomePage.objFeedScreenHashTag))
					{
						logger.info("User is able to See HasTag in Feed  screen");
				    	extent.extentLoggerPass("Feed Screen", "User is able to See HasTag in Feed  screen");
				    	break;
					}else {
						Swipe("UP",1);
					}
				}
				else {
					Swipe("UP",1);
				}
				}
		}
//Logged in user - Check if user is able to redirect to 'Feed' screen on tapping on device back button in Hashtag Detail Screen_T049	feed p2
		public void verifyUserNavigatedToFeedScreenByTappingDeviceBackInHashTagScreen_T049_T093(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check if user is able to redirect to 'Feed' screen on tapping on device back button in Hashtag Detail Screen");
				System.out.println("T049");
				extent.extentLogger("Feed", "T049");
			}else if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User - Check if user is able to redirect to 'Feed' screen on tapping on device back button in Hashtag Detail Screen");
				System.out.println("T093");
				extent.extentLogger("Feed", "T093");
				}
				clickOnHashTag();
				waitTime(2000);
				Back(1);
				waitTime(2000);
				if(verifyElementDisplayed(HipiFeedPage.objfollowingsinfeed))
				{
					logger.info("User is able to redirected to 'Feed' screen on tapping on 'Device back button' in HashTag Detail Screen");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able to redirected to 'Feed' screen on tapping on 'Device back button' in HashTag Detail Screen");
			    }else {
			    	logger.info("User is unable to redirected to 'Feed' screen on tapping on 'Device back button' in HashTag Detail Screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to redirected to 'Feed' screen on tapping on 'Device back button' in HashTag Detail Screen"); 
				}
				navigateToHomePage();
		}	
//Guest User - Check if user is able to see the "Login in to HiPi" pop-up/scrren by tapping on "Video" icon in the Hashtag details page_T090
		public void verifyLoginPopupIsDiplayedOnTappingCreateVideoInHastagDetailScreen_T090(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("Guest User -  Check if User is able to see the \"Login in to Hipi\" pop-up/screen by tapping on \"Create video\" CTA in the Hashtag details page");
				System.out.println("T090");
				extent.extentLogger("Feed", "T090");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiDiscoverPage.objCreateVideoButton,"Create Video");
				waitTime(2000);
				if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
				{
					logger.info("Login in to HiPi pop up has been displayed by tapping on Video icon in Hashtag detail page");
			    	extent.extentLoggerPass("Hashtag Screen", "Login in to HiPi pop up has been displayed by tapping on Video icon in Hashtag detail page");
			    }else {
			    	logger.info("Login in to HiPi pop up is not displayed by tapping on Video icon in Hashtag detail page");
			    	extent.extentLoggerFail("Hashtag Screen", "Login in to HiPi pop up is not displayed by tapping on Video icon in Hashtag detail page"); 
				}
				navigateToHomePage();
			}
		}	
	
//Guest User - Check if user is able to navigate to Hashtag detail page by tapping on Hashtag present in "For You" screen_T094	
		public void verifyUserCanTapOnHashTagInForYouTab_T094(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("Guest User - Check if user is able to navigate to Hashtag detail page by tapping on Hashtag present in For You screen");
				System.out.println("T094");
				extent.extentLogger("Feed", "T094");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objForYou,"For you Tab");
				waitTime(2000);
				clickOnHashTag();
				waitTime(2000);
				if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
				{
					logger.info("User is able to navigate to Hashtag details page by tapping on Hashtag present in For You tab");
			    	extent.extentLoggerPass("Feed Screen", "User is able to navigate to Hashtag details page by tapping on Hashtag present in For You tab");
			    }else {
			    	logger.info("User is unable to navigate to Hashtag details page by tapping on Hashtag present in For You tab");
			    	extent.extentLoggerFail("Feed Screen", "User is unable to navigate to Hashtag details page by tapping on Hashtag present in For You tab"); 
				}
				navigateToHomePage();
			}
		}
//Logged in User - Check if user is able to view short and full description on played/paused video_T436		
		public void verifyUserCanViwFullAndShortDescriptionInFeedScreen_T436(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in User - Check if user is able to view short and full description on played/paused video");
				System.out.println("T436");
				extent.extentLogger("Feed", "T436");
				waitTime(2000);
				for(int i=0;i<=5;i++)
				{
				if(verifyElementDisplayed(HipiHomePage.objFeedScreenMore))
				{
					verifyElementPresentAndClick(HipiHomePage.objFeedScreenMore,"More");
					waitTime(2000);
					verifyElementPresent(HipiHomePage.objFeedScreenLess,"Less");
					logger.info("User is able to view short description by default, on tapping SEE MORE - full description is displayed");
			    	extent.extentLoggerPass("Feed Screen", "User is able to view short description by default, on tapping SEE MORE - full description is displayed");
			    	break;
				}
				else {
					Swipe("DOWN",1);
				}
				}
			}
		}
//		-----------------------profile(hastagRelated_p2)------------------
		
//Logged in user - Check posted hashtag video is displaying under profile screen_T1175	covered in T1175
		public void verifyUserCanViwFullAndShortDescriptionInFeedScreen_T1175(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check posted hashtag video is displaying under profile screen");
				System.out.println("T1175");
				extent.extentLogger("profile", "T1175");
				waitTime(2000);
			}
		}
//Logged in user - Check the UI of hashtag detail page_T1495 //discover p2
		public void CheckUiOfHashTagSCreen_T1495(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check the UI of hashtag detail page");
				System.out.println("T1495");
				extent.extentLogger("Discover", "T1495");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				waitTime(3000);
				if(verifyElementPresent(HipiFeedPage.objHashTagHeader,"hashTag name "))
				{
					waitTime(1000);
					verifyElementPresent(HipiFeedPage.objHashTagBackButton,"Back Button");
					waitTime(1000);
					verifyElementPresent(HipiFeedPage.objHashTagThumbnail,"hashTag Thunbnail");
					waitTime(1000);
					verifyElementPresent(HipiDiscoverPage.objShareButtonInUserProfile,"hashTag Share");
					waitTime(1000);
					verifyElementPresent(HipiDiscoverPage.objViewsOfHashTag,"hashTag Views");
					waitTime(1000);
					verifyElementPresent(HipiDiscoverPage.objAddToFavorite,"Add to Favorites");
					waitTime(1000);
					verifyElementPresent(HipiDiscoverPage.objHashTagvideo,"Video");
					waitTime(1000);
					verifyElementPresent(HipiDiscoverPage.objHashTagvideoIcon,"Video Icon");
				}
				navigateToHomePage();
			}
		}
//Logged in user - Check user is able to create a video using particular hashtag from hashtag detail_T1498	
		public void CheckUserCanCreateVideoWithHashTag_T1498(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check user is able to create a video using particular hashtag from hashtag detail");
				System.out.println("T1498");
				extent.extentLogger("Discover", "T1498");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiDiscoverPage.objCreateVideoButton,"Create Video");
				waitTime(2000);
				allowPermissions();
				verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record");
				waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
				waitTime(2000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");	
				waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn,30);
				if(verifyElementDisplayed(HipiProfilePage.objVerifyHastag))
				{
					logger.info("User is able create a video from hashtag detail page");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able create a video from hashtag detail page");
			    }else {
			    	logger.info("User is unable to See HasTag in video Post screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to See HasTag in video Post screen"); 
				}
				discardPopup();
			}
		}
//Logged in user - Check user is able see widget screen from hashtag detail page_T1501	
		public void ChecckwidgetFromHashTagScreen_T1501(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check user is able see widget screen from hashtag detail page");
				System.out.println("T1501");
				extent.extentLogger("Discover", "T1501");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiDiscoverPage.objShareButtonInUserProfile,"hashTag Share");
				if(verifyElementDisplayed(HipiShareScreen.objSharescreenMoreRail))
				{
					logger.info("User is able create a video from hashtag detail page");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able create a video from hashtag detail page");
			    }else {
			    	logger.info("User is unable to See HasTag in video Post screen");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to See HasTag in video Post screen"); 
				}
				navigateToHomePage();
			}
		}
//Logged in user - Check widget pop-up gets disapper by tapping device back button_T1502	
		public void verifyUserNavigatesToHashTagScreenBytappingBackOnWidgetScreen_T1502(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check widget pop-up gets disapper by tapping device back button");
				System.out.println("T1502");
				extent.extentLogger("Discover", "T1502");
				waitTime(2000);
				clickOnHashTag();
				verifyElementPresentAndClick(HipiDiscoverPage.objShareButtonInUserProfile,"hashTag Share");
				Back(1);
				if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
				{
					logger.info("Widget has been disappered from hashtag detail page");
			    	extent.extentLoggerPass("Hashtag Screen", "Widget has been disappered from hashtag detail page");
			    }else {
			    	logger.info("Widget is not disappered from hashtag detail page");
			    	extent.extentLoggerFail("Hashtag Screen", "Widget is not disappered from hashtag detail page"); 
				}
				navigateToHomePage();
			}
		}
//Logged in user - Check whether view are visible_T1509
		public void verifyNoOfViewInHashTagScreenIsDisplayed_T1509(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in user - Check whether view are visible");
				System.out.println("T1509");
				extent.extentLogger("Discover", "T1509");
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button ");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Related Hastag Video");
				waitTime(2000);
				clickOnHashTag();
				if(verifyElementDisplayed(HipiDiscoverPage.objViewsOfHashTag))
				{
					logger.info("User is able to see hashtag views in hashtag detail page ");
			    	extent.extentLoggerPass("Hashtag Screen", "User is able to see hashtag views in hashtag detail page ");
			    }else {
			    	logger.info("User is unable to see hashtag views in hashtag detail page ");
			    	extent.extentLoggerFail("Hashtag Screen", "User is unable to see hashtag views in hashtag detail page "); 
				}
				navigateToHomePage();
			}
		}	
//Logged in User - Check the default details displayed on played/paused video_T031		
		public void verifyNoOfViewInHashTagScreenIsDisplayed_T031(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("Logged in User - Check the default details displayed on played/paused video");
				System.out.println("T031");
				extent.extentLogger("Feed", "T031");
				for(int i=0;i<5;i++) {
					if(verifyElementDisplayed(HipiHomePage.objFeedScreenMore))
					{
						click(HipiHomePage.objFeedScreenMore,"more");
						waitTime(1000);
//						verifyElementPresent();
					}else {
						Swipe("UP",1);
					}
				}
			}
		}
	
		//Check if user is able to add link in video description_T2132// Draft P0
		public void verifyUserCanPostVideoWithUrl_T2132(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2132 - Check if user is able to add link in video description");
				System.out.println("T2132");
				extent.extentLogger("Draft ", "T2132");
				verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
				allowPermissions();
				verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
				waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
				waitTime(3000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
				waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 100);
				waitTime(1000);
				String Url=getParameterFromXML("URL");
				type(HipiCreateVideoPage.objPostDescription,Url,"Url");
				waitTime(1000);
//				verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//				waitTime(3000);
				if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
				{
					click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//					click(HipiCreateVideoPage.objDoneCTC, "Done Button");
				}else {
					logger.info("User is unable to See Language Options");
					extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
					
				}
				verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
				waitTime(5000);
				if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
					Back(1);
				}else {
					logger.info("User is unable to See Share Sheet");
					extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
				}
				waitUntilElementDisplayed(HipiHomePage.objForYou, 20);
				waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"profile");
				for (int i = 0; i <= 50; i++) {
					PartialSwipe("DOWN", 2);
					if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
						Thread.sleep(2000);
						Back(1);
						Thread.sleep(2000);
						verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
					} else {
					
						click(HipiCreateVideoPage.objselectfirstVideo, "First video");
						waitTime(3000);
//					     expected=getText(HipiProfilePage.objHashTagDescription);
//						verifyElementExist(HipiCreateVideoPage.objSelectVideo(desc), "Video");
							if(verifyElementDisplayed(HipiProfilePage.objVerifyUrl)) {
								logger.info("User is able to add link in video description");
						    	extent.extentLoggerPass("Post screen", "User is able to add link in video description");
						    }else {
						    	logger.info("User is unable to add link in video description");
						    	extent.extentLoggerFail("Post screen", "User is unable to add link in video description"); 		
							}
						break;
					}
					}
				navigateToHomePage();
			}
		}
		public void addVideoUrl() throws Exception
		{
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
//			waitTime(3000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 10);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
			waitTime(1000);
			String Url=getParameterFromXML("URL");
			type(HipiCreateVideoPage.objPostDescription,Url,"Url");
			waitTime(1000);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
			
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
			waitTime(5000);
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"profile");
			for (int i = 0; i <= 10; i++) {
				PartialSwipe("DOWN", 2);
				if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
					Thread.sleep(2000);
					Back(1);
					Thread.sleep(2000);
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
				} else {
				
					click(HipiCreateVideoPage.objselectfirstVideo, "First video");
					waitTime(3000);
					break;
				}
		}
		}
//Logged-In User - Check if the link on video caption is non-clickable in sound detail screen_T2135		//profile p1		
		public void verifyLinkIsNonClickableInSoundDetailScreen_T2135(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2135 - Logged-In User - Check if the link on video caption is non-clickable in sound detail screen");
				System.out.println("T2135");
				extent.extentLogger("Draft ", "T2135");
				
				 addVideoUrl();
				
				verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
				waitTime(1000);
				verifyElementPresentAndClick(HipiCreateVideoPage.objselectfirstVideo, "First video");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objVerifyUrl,"Link");
				waitTime(4000);
				if(verifyElementDisplayed(HipiHomePage.objFeedScreenLess)) {
					logger.info("Link on video caption is non -clickable for Logged-In user in Sound detail screen");
			    	extent.extentLoggerPass("Post screen", "Link on video caption is non -clickable for Logged-In user in Sound detail screen");
			    }else {
			    	logger.info("Link on video caption is clickable for Logged-is user in Sound detail screen");
			    	extent.extentLoggerFail("Post screen", "Link on video caption is clickable for Logged-is user in Sound detail screen"); 		
				}
				navigateToHomePage();
			}
		}

//Verify the title for top creators accounts should be 'Trending creators'_T2148 //Feed
		public void verifyTrendingCreatorIsDisplayedInFollowingTab_T2148(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2148 - Verify the title for top creators accounts should be 'Trending creators'");
				System.out.println("T2148");
				extent.extentLogger("Feed ", "T2148");
				Thread.sleep(2000);
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(1000);
				if(verifyElementDisplayed(HipiHomePage.objFollowingTabCtreatorAccount)) {
					logger.info("User is able to see the 'Trending creators' header for top creators accounts");
			    	extent.extentLoggerPass("Post screen", "User is able to see the 'Trending creators' header for top creators accounts");
			    }else {
			    	logger.info("User is unable to see the 'Trending creators' header for top creators accounts");
			    	extent.extentLoggerFail("Post screen", "User is unable to see the 'Trending creators' header for top creators accounts"); 		
				}
				navigateToHomePage(); 
				click(HipiHomePage.objForYou, "For you tab");
			}
		}
//Guest User - Check whether user gets the login pop up on clicking the 'Follow' button on trending creators_T2150	//feed		
		public void verifyLoginPopupIsDisplayedOnTappingOnFollowButtonInTrendingCreatorscreen_T2150(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2150 - Guest User - Check whether user gets the login pop up on clicking the 'Follow' button on trending creators");
				System.out.println("T2150");
				extent.extentLogger("Feed ", "T2150");
				Thread.sleep(2000);
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(1000);
				verifyElementPresentAndClick(HipiHomePage.objFollowingTabFollowCta, "Follow Cta");
				waitTime(1000);
				if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail)) {
					logger.info("Guest User is able to see with login pop up on tapping 'Follow' button on trending creators screen");
			    	extent.extentLoggerPass("", "Guest User is able to see with login pop up on tapping 'Follow' button on trending creators screen");
			    }else {
			    	logger.info("Guest User is unable to see with login pop up on tapping 'Follow' button on trending creators screen");
			    	extent.extentLoggerFail("", "Guest User is unable to see with login pop up on tapping 'Follow' button on trending creators screen"); 		
				}
				navigateToHomePage(); 
				click(HipiHomePage.objForYou, "For you tab");

			}
		}
//Verify whether the user is able to click on 'Following' tab post successfull login_T2151 //feed 	add login relaunch
		public void verifyUserAbleToTapOnFollowingTabPostSuccesfulLogin_T2151(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2151 - Verify whether the user is able to click on 'Following' tab post successfull login");
				System.out.println("T2151");
				extent.extentLogger("Feed ", "T2151");
				Thread.sleep(2000);
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(1000);
				if(verifyElementDisplayed(HipiHomePage.objPlusFollowICON)) {
					logger.info("User is unable to tap on 'Following' tab post successful login to the application");
			    	extent.extentLoggerFail("", "User is unable to tap on 'Following' tab post successful login to the application");
			    }else {
			    	logger.info("User is able to tap on 'Following' tab post successful login to the application");
			    	extent.extentLoggerPass("", "User is able to tap on 'Following' tab post successful login to the application"); 		
				}
				navigateToHomePage();
				click(HipiHomePage.objForYou, "For you tab");

			}
		}
//Verify the user is able to see the text 'Follow an account to see the latest videos here' text on following screen_T2152	//feed
		public void verifyTextIsDispayedInFollowingTab_T2152(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2152 - Verify whether the user is able to click on 'Following' tab post successfull login");
				System.out.println("T2152");
				extent.extentLogger("Feed ", "T2152");
				unfollowUsers();
				Thread.sleep(2000);
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
				waitTime(1000);
				Swipe("DOWN", 1);
				String name=getText(HipiHomePage.objFollowingTabFollowText);
				if(verifyElementPresent(HipiHomePage.objFollowingTabFollowText,name)) {
					logger.info("User is able to see valid follow creators text - when user doesn't follow any creators before");
			    	extent.extentLoggerPass("", "User is able to see valid follow creators text - when user doesn't follow any creators before");
			    }else {
			    	logger.info("User is unable to see valid follow creators text - when user doesn't follow any creators before");
			    	extent.extentLoggerFail("", "User is unable to see valid follow creators text - when user doesn't follow any creators before"); 		
				}
				navigateToHomePage();
				click(HipiHomePage.objForYou, "For you tab");

			}
		}
public void unfollowUsers() throws Exception
{
verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
waitTime(5000);
verifyElementPresentAndClick(HipiDiscoverPage.objFollowingTab, "following Tab");	
waitTime(5000);
for(int i=1;i<=100;i++)
{
if(verifyElementDisplayed(HipiProfilePage.objFollowingTabErrorText))
{
break;
}else {
click(HipiProfilePage.objFollowingbutton_followingTab,"Following");
PartialSwipe("DOWN", 1);
}
}
navigateToHomePage();
}
//Logged in user -  Check the UI of the "Following" tab in "Feed" screen_T2153
public void checkUiOfFollowingTab_T2153_T2149(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2153 - Logged in user -  Check the UI of the Following tab in Feed screen");
		System.out.println("T2153");
		extent.extentLogger("Feed ", "T2153");
	} else if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2149 - Guest User - Check the UI of the Following tab in Feed screen");
		System.out.println("T2149");
		extent.extentLogger("Feed ", "T2149");
	}

	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		unfollowUsers();
	}
		verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
		waitTime(1000);
		if(verifyElementPresent(HipiHomePage.objFollowingButtonHighlighted, "Following Tab Highlighted"))
		{
			waitTime(2000);
			verifyElementPresent(HipiHomePage.objFollowingTabUsername, "Creator UserName");
			waitTime(2000);
			verifyElementPresent(HipiHomePage.objFollowingTabCtreatorAccount, "user Handler");
			waitTime(2000);
			verifyElementPresent(HipiHomePage.objFollowingTabFollowCta, "Follow Cta");
			waitTime(2000);
			verifyElementPresent(HipiHomePage.objFollowingTabUserprofile, "Profile Picture");
			waitTime(2000);
			String text=getText(HipiHomePage.objFollowingTabFollowText);
			verifyElementPresent(HipiHomePage.objFollowingTabFollowText,text);
			navigateToHomePage();
			click(HipiHomePage.objForYou, "For you tab");

}
}	
//Logged in user - User should be able to see the following user's video loading on refreshing the following feed_T2154
public void verifyUserCanSeeFollowingUserPostRefreshing_T2154(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2154 - Logged in user - User should be able to see the following user's video loading on refreshing the following feed");
System.out.println("T2154");
extent.extentLogger("Feed ", "T2154");
unfollowUsers();
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowingTabFollowCta, "Follow Cta");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitUntilElementDisplayed(HipiHomePage.objProfilePicture, 10);
if(verifyElementDisplayed(HipiHomePage.objProfilePicture)) {
logger.info("User is able to see the videos only from the following creators on following feed screen");
extent.extentLoggerPass("", "User is able to see the videos only from the following creators on following feed screen");
}else {
logger.info("User is unable to see the videos only from the following creators on following feed screen");
extent.extentLoggerFail("", "User is unable to see the videos only from the following creators on following feed screen"); 		
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in user - Check whether user is taken to the creator's profile when he click on the trending creators_T2155
public void verifyUsernavigates_T2155(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2155 - Logged in user - Check whether user is taken to the creator's profile when he click on the trending creators");
System.out.println("T2155");
extent.extentLogger("Feed ", "T2155");
unfollowUsers();
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowingTabUserprofile, "Profile Picture");
waitTime(1000);
if(verifyElementDisplayed(HipiProfilePage.objProfileHeader)) {
logger.info("User is able to navigate to trending creator profile screen on tapping the profile pic from following screen");
extent.extentLoggerPass("", "User is able to navigate to trending creator profile screen on tapping the profile pic from following screen");
}else {
logger.info("User is unable to navigate to trending creator profile screen on tapping the profile pic from following screen");
extent.extentLoggerFail("", "User is unable to navigate to trending creator profile screen on tapping the profile pic from following screen"); 		
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in user - User should start seeing videos from following creators soon after he tap on 'Follow' CTA_T2156
public void verifyByTappingOnFollowForTrendingCreatorFollowButtonChangedToFollowing_T2156(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2156 - Logged in user - User should start seeing videos from following creators soon after he tap on 'Follow' CTA");
System.out.println("T2156");
extent.extentLogger("Feed ", "T2156");
unfollowUsers();
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowingTabFollowCta, "Follow Cta");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitUntilElementDisplayed(HipiHomePage.objProfilePicture, 10);
if(verifyElementDisplayed(HipiHomePage.objProfilePicture)) {
logger.info("User is able to see the videos only from the following creators on following feed screen");
extent.extentLoggerPass("", "User is able to see the videos only from the following creators on following feed screen");
}else {
logger.info("User is unable to see the videos only from the following creators on following feed screen");
extent.extentLoggerFail("", "User is unable to see the videos only from the following creators on following feed screen"); 		
}
navigateToHomePage();
waitTime(3000);
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in user - User should be able to see the following button top creators profile details screen_T2157
public void verifyByTappingOnUserhandlerPostFolowingUserCanSeeFollowingInProfileSCreen_T2157(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2157 - Logged in user - User should be able to see the following button top creators profile details screen");
System.out.println("T2157");
extent.extentLogger("Feed ", "T2157");
unfollowUsers();
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowingTabFollowCta, "Follow Cta");
waitUntilElementDisplayed(HipiHomePage.objFollowingTabCtreatorAccount, 10);
verifyElementPresentAndClick(HipiHomePage.objFollowingTabCtreatorAccount, "UserHandler");
waitTime(3000);
if(verifyElementDisplayed(HipiProfilePage.objSubFollowingButton)) {
logger.info("User is able to see the following button in profile detail screen of following creators");
extent.extentLoggerPass("", "User is able to see the following button in profile detail screen of following creators");
}else {
logger.info("User is unable to see the following button in profile detail screen of following creators");
extent.extentLoggerFail("", "User is unable to see the following button in profile detail screen of following creators"); 		
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in user - User should be able to unfollow creator by tapping on following button in detail screen_T2158
public void verifyUserCanUnfollowFollowingUser_T2158(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2158 - Logged in user - User should be able to unfollow creator by tapping on following button in detail screen");
System.out.println("T2158");
extent.extentLogger("Feed ", "T2158");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitUntilElementDisplayed(HipiHomePage.objUserName, 10);
verifyElementPresentAndClick(HipiHomePage.objUserName, "User Handler");
waitTime(1000);
verifyElementPresentAndClick(HipiProfilePage.objFollowUnfollow, "Following");
waitTime(3000);
if(verifyElementDisplayed(HipiProfilePage.objFollowCTA)) {
logger.info("User is able to unfollow creator by tapping on 'Following' button in detail screen");
extent.extentLoggerPass("", "User is able to unfollow creator by tapping on 'Following' button in detail screen");
}else {
logger.info("User is unable to unfollow creator by tapping on 'Following' button in detail screen");
extent.extentLoggerFail("", "User is unable to unfollow creator by tapping on 'Following' button in detail screen"); 		
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in user - Check whether user is not shown with 'Following' button next to creator handle_T2217
public void verifyFollowingBesideUserhandlerIsNotDisplayed_T2217(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2217 - Logged in user - Check whether user is not shown with 'Following' button next to creator handle");
System.out.println("T2217");
extent.extentLogger("Feed ", "T2217");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
SwipeUntilFindElement(HipiHomePage.objPlusFollowICON, "UP");
if(verifyElementDisplayed(HipiHomePage.objFollowButton)) {
logger.info("User is unable to see following button next to user handle in feed screen");
extent.extentLoggerPass("", "User is unable to see following button next to user handle in feed screen");
}else {
logger.info("User is able to see following button next to user handle in feed screen");
extent.extentLoggerFail("", "User is able to see following button next to user handle in feed screen"); 		
}
navigateToHomePage();
}
}
//Logged in user - Check whether user is not shown with 'tick' mark creator profile icon_T2218
public void verifyTickmarkIsNotDisplayed_T2218(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2218 - Logged in user - Check whether user is not shown with 'tick' mark creator profile icon");
System.out.println("T2218");
extent.extentLogger("Feed ", "T2218");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
SwipeUntilFindElement(HipiHomePage.objPlusFollowICON, "UP");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objPlusFollowICON,"Plus Icon");
waitTime(5000);
if(verifyElementDisplayed(HipiHomePage.objPlusFollowICON)) {
logger.info("User is  able see [ + ] button under creator image in Feed screen ");
extent.extentLoggerFail("", "User is  able see [ + ] button under creator image in Feed screen ");
}else {
logger.info("User is  unable see [ + ] button under creator image in Feed screen ");
extent.extentLoggerPass("", "User is  unable see [ + ] button under creator image in Feed screen "); 		
}
navigateToHomePage();
}
}
//Logged in User - Check User able to see follow button next to Userhandle in "Feed" screen_T2219
public void verifyFollowIsDisplayedNextToUserhandler_T2219(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2219 - Logged in User - Check User able to see follow button next to Userhandle in Feed screen");
System.out.println("T2219");
extent.extentLogger("Feed ", "T2219");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
SwipeUntilFindElement(HipiHomePage.objPlusFollowICON, "UP");
if(verifyElementDisplayed(HipiHomePage.objPlusFollowICON)) {
logger.info("Follow button has been present next to Userhandle in Feed screen");
extent.extentLoggerPass("", "Follow button has been present next to Userhandle in Feed screen");
}else {
logger.info("Follow button is not present next to Userhandle in Feed screen");
extent.extentLoggerFail("", "Follow button is not present next to Userhandle in Feed screen"); 		
}
navigateToHomePage();
}
}
//Check whether user is able to start following creator by tapping on 'Follow' button_T2221	
public void verifyFollowIsDisplayedNextToUserhandler_T2221(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2221 - Check whether user is able to start following creator by tapping on 'Follow' button");
System.out.println("T2221");
extent.extentLogger("Feed ", "T2221");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
SwipeUntilFindElement(HipiHomePage.objPlusFollowICON, "UP");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowButton,"Follow");
waitTime(4000);
if(verifyElementDisplayed(HipiHomePage.objFollowButton)) {
logger.info("User is unable to see the follow button changes to 'Following', which disappears within seconds of time");
extent.extentLoggerFail("", "User is unable to see the follow button changes to 'Following', which disappears within seconds of time");
}else {
logger.info("User is able to see the follow button changes to 'Following', which disappears within seconds of time");
extent.extentLoggerPass("", "User is able to see the follow button changes to 'Following', which disappears within seconds of time"); 		
}
navigateToHomePage();
}
}
//Check whether user is able to start following creator by tapping on 'Follow' button_T2222
public void verifyByTappingOnFollowIconPlusIconDisappear_T2222(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2222 - Check whether user is able to start following creator by tapping on 'Follow' button");
System.out.println("T2222");
extent.extentLogger("Feed ", "T2222");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
SwipeUntilFindElement(HipiHomePage.objPlusFollowICON, "UP");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowButton,"Follow");
waitTime(3000);
if(verifyElementDisplayed(HipiHomePage.objPlusFollowICON)) {
logger.info("User is unable to see the '+' mark changes to 'tick', which disappears within seconds of time");
extent.extentLoggerFail("", "User is unable to see the '+' mark changes to 'tick', which disappears within seconds of time");
}else {
logger.info("User is able to see the '+' mark changes to 'tick', which disappears within seconds of time");
extent.extentLoggerPass("", "User is able to see the '+' mark changes to 'tick', which disappears within seconds of time"); 		
}
navigateToHomePage();
}
}
//Logged in User - Check the list of actions present by tapping on share option_T2223
public void verifyUiOfShareScreen_T2223(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2223 - Logged in User - Check the list of actions present by tapping on share option");
System.out.println("T2223");
extent.extentLogger("Feed ", "T2223");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share Icon");
waitTime(1000);
if(verifyElementPresent(HipiHomePage.objDuet,"Duet"))
{
verifyElementPresent(HipiHomePage.objShareScreenAddToFavorites,"Add To favorites");
waitTime(1000);	
verifyElementPresent(HipiHomePage.objShareScreenSaveVideo,"Save Video");
waitTime(1000);	
verifyElementPresent(HipiHomePage.objShareScreenReport,"Report");
waitTime(1000);	
verifyElementPresent(HipiHomePage.objShareScreenNotInterested,"Not Interested");
waitTime(1000);	
}			
navigateToHomePage();	
}
}
//Logged in User - Duet video - Check whether User is able to tap on "Duet" option_T2225
public void verifyUserCanTapOnDuet_T2225(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2225 - Logged in User - Duet video - Check whether User is able to tap on Duet option");
System.out.println("T2225");
extent.extentLogger("Feed ", "T2225");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");

verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share Icon");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(1000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,5);
if(verifyElementDisplayed(HipiHomePage.objDuetScreenRecord)) {
logger.info("User is able to tap on Duet option");
extent.extentLoggerPass("", "User is able to tap on Duet option");
}else {
logger.info("User is unable to tap on Duet option");
extent.extentLoggerFail("", "User is unable to tap on Duet option"); 		
}
navigateToHomePage();
}
}
//Logged in User - Check the list of actions present by tapping on share option_T2227
public void verifyUiOfShareScreenUnderFollowingTab_T2227(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2227 - Logged in User - Check the list of actions present by tapping on share option");
System.out.println("T2227");
extent.extentLogger("Feed ", "T2227");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share Icon");
waitTime(1000);
if(verifyElementPresent(HipiHomePage.objDuet,"Duet"))
{
verifyElementPresent(HipiHomePage.objShareScreenAddToFavorites,"Add To favorites");
waitTime(1000);	
verifyElementPresent(HipiHomePage.objShareScreenSaveVideo,"Save Video");
waitTime(1000);	
verifyElementPresent(HipiHomePage.objShareScreenReport,"Report");
waitTime(1000);	
verifyElementPresent(HipiHomePage.objShareScreenNotInterested,"Not Interested");
waitTime(1000);	
}	
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in User - Duet video - Check wheater User is able to tap on "Duet" option_T2229
public void verifyUserCanTapOnDuetInFollowingTab_T2229(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2229 - Logged in User - Duet video - Check wheater User is able to tap on Duet option");
System.out.println("T2229");
extent.extentLogger("Feed ", "T2229");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(4000);
verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share Icon");
waitTime(4000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(1000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,5);
if(verifyElementDisplayed(HipiHomePage.objDuetScreenRecord)) {
logger.info("User is able to tap on Duet option");
extent.extentLoggerPass("", "User is able to tap on Duet option");
}else {
logger.info("User is unable to tap on Duet option");
extent.extentLoggerFail("", "User is unable to tap on Duet option"); 		
}
navigateToHomePage();		
click(HipiHomePage.objForYou, "For you tab");
}
}
//Logged in User- Duet video - Check for the UI for the "Creator" screen_T2232
public void verifyUiOfDuetCreatorScreen_T2232(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2232 - Logged in User- Duet video - Check for the UI for the \"Creator\" screen");
System.out.println("T2232");
extent.extentLogger("Feed ", "T2232");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share Icon");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(1000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
if(verifyElementPresent(HipiHomePage.objDuetScreenRecord,"Record Button")) 
{
verifyElementPresent(HipiCreateVideoPage.objCreateDuetLeftScreen,"Left Screen");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objCreateDuetRightScreen,"Right Screen");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objSpeedButton,"Speed Button");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objbeautytoggle,"Beauty Toggle");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objfilter,"Filter Toggle");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer Toggle");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objFlashButton,"Flash Button");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objCameraFlipnew,"Flip button");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objeffect,"Effect button");
waitTime(1000);
}
navigateToHomePage();
}
}
//Logged in User- Duet video - Check for the UI for the "Creator" screen_T2233
public void verifyUiOfDuetCreatorScreenFromFollowinTab_T2233(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2233 - Logged in User- Duet video - Check for the UI for the \"Creator\" screen");
System.out.println("T2233");
extent.extentLogger("Feed ", "T2233");
followUser();
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objShareIcon,"Share Icon");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(1000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
if(verifyElementPresent(HipiHomePage.objDuetScreenRecord,"Record Button")) 
{
verifyElementPresent(HipiCreateVideoPage.objCreateDuetLeftScreen,"Left Screen");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objCreateDuetRightScreen,"Right Screen");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objSpeedButton,"Speed Button");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objbeautytoggle,"Beauty Toggle");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objfilter,"Filter Toggle");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objtimerbtn,"Timer Toggle");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objFlashButton,"Flash Button");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objCameraFlipnew,"Flip button");
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objeffect,"Effect button");
waitTime(1000);
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you Tab");
}
}
public void verifyUiOfDuetsEditScreen_T1789_T2236(String userType) throws Exception //replace code with T1789
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T1789_T2236 - Logged in User - Duet video - Check the UI of the Edit screenLogged in User - Duet video - Check the UI of the Edit screen");
System.out.println("T1789_T2236");
extent.extentLogger("Feed", "T1789_T2236");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
waitTime(8000);
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
if(verifyElementPresent(HipiCreateVideoPage.objVideoEditFilter,"Filter"))
{
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objtrim,"Trim");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenVoulmebtn,"Volume ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
logger.info("User is  able to View All the components of DuetVideo Creator screen"); 
extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo Creator screen");
}
discardPopup();
}
}
//Logged in User - Duet video - Check the UI of the "Edit" screen_T2237
public void verifyUiOfDuetsEditScreenFromFollowingTab_T2237(String userType) throws Exception //replace code with T1789
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2237 - Logged in User - Duet video - Check the UI of the Edit screen");
System.out.println("T2237");
extent.extentLogger("Feed", "T2237");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
waitTime(8000);
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
if(verifyElementPresent(HipiCreateVideoPage.objVideoEditFilter,"Filter"))
{
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objtrim,"Trim");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenVoulmebtn,"Volume ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoedittext,"Text ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenSticker,"Sticker");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
logger.info("User is  able to View All the components of DuetVideo Creator screen"); 
extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo Creator screen");

}
discardPopup();
click(HipiHomePage.objForYou, "For you tab");
}
}
//Logged in User - Duet video - Check if User gets #duet with @Userhandle' is to be populated by default in description of "post" screen_T2238
public void verifyUserCanSeeUserHandlerWhileDuetVideo_T2238(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2238 - Logged in User - Duet video - Check if User gets #duet with @Userhandle' is to be populated by default in description of post screen");
System.out.println("T2238");
extent.extentLogger("Feed", "T2238");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
String actualname=getText(HipiHomePage.objUserName);
verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(2000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
waitTime(12000);
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
//waitTime(12000);
waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);

waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,30);
if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(actualname)))
{
logger.info("User is able to get '#duet with @Userhandle' populated by default in description field of post screen");
extent.extentLoggerPass("", "User is able to get '#duet with @Userhandle' populated by default in description field of post screen");
}else {
logger.info("User is unable to get '#duet with @Userhandle' populated by default in description field of post screen");
extent.extentLoggerFail("", "User is unable to get '#duet with @Userhandle' populated by default in description field of post screen"); 		
}
discardPopup();
}
}
//Logged in User - Duet video - Check if User gets #duet with @Userhandle' is to be populated by default in description of "post" screen_T2239
public void verifyUserCanSeeUserHandlerWhileDuetVideoInFollowingTab_T2239(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2239 - Logged in User - Duet video - Check if User gets #duet with @Userhandle' is to be populated by default in description of post screen");
System.out.println("T2239");
extent.extentLogger("Feed", "T2239");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
String actualname=getText(HipiHomePage.objUserName);
verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(2000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
waitTime(12000);
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
waitTime(12000);
waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,30);
if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(actualname)))
{
logger.info("User is able to get '#duet with @Userhandle' populated by default in description field of post screen");
extent.extentLoggerPass("", "User is able to get '#duet with @Userhandle' populated by default in description field of post screen");
}else {
logger.info("User is unable to get '#duet with @Userhandle' populated by default in description field of post screen");
extent.extentLoggerFail("", "User is unable to get '#duet with @Userhandle' populated by default in description field of post screen"); 		
}
discardPopup();
click(HipiHomePage.objForYou, "For you tab");
}
}
//Logged in User - Check the UI of the "post" screen_T2241
public void verifyUiOfDuetsPostScreenFromFollowingTab_T2241(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2241 - Logged in User- Duet video - Check for the UI for the Creator screen");
System.out.println("T2241");
extent.extentLogger("Feed", "T2241");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
//waitTime(8000);
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
waitTime(5000);
waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,30);
if(verifyElementPresent(HipiCreateVideoPage.objPostscreenHashtag,"Hash tag"))
{
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objPostScreenFriendsBotton,"Friends");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objPostscreenWhoCanViewThisVideo,"Who Can View This Video ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objPostScreenComments,"Allow Comments ");
//waitTime(2000);
//verifyElementPresent(HipiCreateVideoPage.objPostScreenLikes,"Allow Likes ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduet,"Allow Duet ");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDevice,"Save To Device");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objSaveasDraft,"Save As Draft");
waitTime(2000);
verifyElementPresent(HipiCreateVideoPage.objpostbtn,"Post");
logger.info("User is  able to View All the components of DuetVideo Post screen"); 
extent.extentLoggerPass("Edit clip Screen", "User is  able to View All the components of DuetVideo Post screen");

}
discardPopup();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Logged in User - Duet video- Check User is not able to see "Allow others to duet" on the UI of the "post" screen for the video which he was duetted from other creators_T2243
public void verifyUserDuetIsDisbledInPostScreenWhileDuetingWithOtherUsersFromFollowingTab_T2243(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2243 - Logged in User - Duet video- Check User is not able to see Allow others to duet on the UI of the post screen for the video which he was duetted from other creators");
System.out.println("T2243");
extent.extentLogger("Feed", "T2243");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
waitTime(2000);
allowPermissions();
waitTime(5000);
waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
waitUntilElementDisplayed(HipiHomePage.objDuetScreenRecord,3);
verifyElementPresentAndClick(HipiHomePage.objDuetScreenRecord,"Duet Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
//waitTime(12000);
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip,30);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
waitTime(12000);
waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader,30);
if(verifyElementDisplayed(HipiCreateVideoPage.objPostScreenAllowduetDisabled))
{
logger.info(" Allow others to duet has been disabled on the UI of the post screen for the video which he was duetted from other creators");
extent.extentLoggerPass("Edit clip Screen", " Allow others to duet has been disabled on the UI of the post screen for the video which he was duetted from other creators");
}else {
logger.info(" Allow others to duet is  enabled on the UI of the post screen for the video which he was duetted from other creators");
extent.extentLoggerFail("Edit clip Screen", " Allow others to duet is  enabled on the UI of the post screen for the video which he was duetted from other creators"); 
}
discardPopup();
click(HipiHomePage.objForYou, "For you tab");

}
}
//Guest user - Check user able to see "Original Sound" with user name  on sound detail page_T2277
public void verifyOriginalSoundWithUserNameIsVisibleInSoundScreen_T2277_T2278(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("Guest"))
{
extent.HeaderChildNode("T2277 - Guest user - Check user able to see Original Sound with user name  on sound detail page");
System.out.println("T2277");
extent.extentLogger("Feed", "T2277");
}else if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2278 - Logged in user - Check user able to see Original Sound with user name  on sound detail page");
System.out.println("T2278");
extent.extentLogger("Feed", "T2278");
}
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
//for(int i=1;i<=10;i++)
//{
//String Temp=null;
//String actualname=getText(HipiHomePage.objUserName);
////String actualname=getText(HipiHomePage.objUserName).replaceAll("@","");
//
//System.out.println(actualname);
//if(verifyElementDisplayed(HipiCreateVideoPage.objSoundName(actualname)))
//{
verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");	
//break;
//}else{
//	
//actualname=Temp;
//Swipe("UP",1);
//}
//}
if(verifyElementPresent(HipiHomePage.objSoundscreenOriginal, "Origial Sound"))
{
waitTime(1000);
verifyElementPresent(HipiHomePage.objSoundAuthorName,"Author name");
logger.info("User is able to see the Original Sound  with user name in sound detail page ");
extent.extentLoggerPass("", "User is able to see the Original Sound  with user name in sound detail page ");
}else {
logger.info("User is unable to see the Original Sound  with user name in sound detail page ");
extent.extentLoggerFail("", "User is unable to see the Original Sound  with user name in sound detail page "); 
}
navigateToHomePage();
}
//Guest User - Check if User is able to view video created by "original sound" with user name  in "Feed" screen_T2279
public void verifyOriginalSoundisVisibleinFeedScreen_T2279_T2280(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("Guest"))
{
extent.HeaderChildNode("T2279 - Guest User - Check if User is able to view video created by \"original sound\" with user name  in \"Feed\" screen");
System.out.println("T2279");
extent.extentLogger("Feed", "T2279");
}else if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2280 - Logged in User - Check if User is able to view video created by \\\"original sound\\\" with user name  in \\\"Feed\\\" screen");
System.out.println("T2280");
extent.extentLogger("Feed", "T2280");
}
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
for(int i=1;i<=10;i++)
{
if(verifyElementDisplayed(HipiHomePage.objOriginalSoundText))
{
logger.info("User is able to see the Original Sound with user name in Feed screen");
extent.extentLoggerPass("", "User is able to see the Original Sound with user name in Feed screen");
break;
}else
{
Swipe("UP",1);
}	
}
}
public void navigateToRisingStar(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
click(HipiHomePage.objDiscoverButton, "Discover Button");	
waitTime(2000);
verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
waitTime(2000);
String name=getParameterFromXML("RisingStar");
type(HipiDiscoverPage.objDiscoverSearchInbox,name , "Type value");
waitTime(2000);
verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
click(HipiDiscoverPage.objUsertabinSearchresultpage,"User Tab");
waitTime(3000);
verifyElementPresentAndClick(HipiDiscoverPage.objUserPageFirstUser,"First Suggested user");
waitTime(2000);
if(verifyElementDisplayed(HipiProfilePage.objFollowCTAText)) 
{
click(HipiProfilePage.objFollowCTAText,"Follow Cta");
}else {
	logger.info("User is already following RisingStar");
	extent.extentLoggerPass("", "User is already following RisingStar");
}
navigateToHomePage();
}
}
//Guest User - Check if User is able to view video created by "original sound" with user name in "Feed" screen_T2281 //Wrong Steps for2281
public void verifyOriginalSoundisVisibleinFeedScreenUnderFollowingTab_T2282(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2282 - Logged in User - Check if User is able to view video created by original sound with user name  in Feed screen");
System.out.println("T2282");
extent.extentLogger("Feed", "T2282");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
if(verifyElementDisplayed(HipiHomePage.objFollowingTabFollowCta))
{
click(HipiHomePage.objFollowingTabFollowCta,"Follow");
}
for(int i=1;i<=10;i++)
{
if(verifyElementDisplayed(HipiHomePage.objOriginalSoundText))
{
logger.info("User is able to see the Original Sound with user name in Feed screen");
extent.extentLoggerPass("", "User is able to see the Original Sound with user name in Feed screen");
break;
}else
{
Swipe("DOWN",1);
}	
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");
}
}
//Check if user is unable to view "Following" button next to userhandle in "Following" Tab of Feed_T2295
public void verifyFollowingButtonIsNotVisibleInFollowingTab_T2295(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2295 - Check if user is unable to view Following button next to userhandle in Following Tab of Feed");
System.out.println("T2295");
extent.extentLogger("Feed", "T2295");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
if(verifyElementDisplayed(HipiHomePage.objFollowingTabFollowCta))
{
click(HipiHomePage.objFollowingTabFollowCta,"Follow Cta");
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
}else {
if(verifyElementDisplayed(HipiHomePage.objFollowingTabFollowingCta))
{
logger.info("User is able to see the Original Sound with user name in Feed screen");
extent.extentLoggerFail("", "User is able to see the Original Sound with user name in Feed screen");
}else
{
logger.info("User is able to see the Original Sound with user name in Feed screen");
extent.extentLoggerPass("", "User is able to see the Original Sound with user name in Feed screen");			}		
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");
}
}
//Check if user is unable to view "+" icon below Profile thumbnail in "Following" tab of Feed_T2296
public void verifyPlusIconIsNotVisibleInFollowingTab_T2296(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2296 - Check if user is unable to view + icon below Profile thumbnail in Following tab of Feed");
System.out.println("T2296");
extent.extentLogger("Feed", "T2296");
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
for(int i=0;i<5;i++)
{
if(verifyElementDisplayed(HipiHomePage.objPlusFollowICON))
{
logger.info("User is able to view + icon below Profile thumbnail in Following tab of Feed");
extent.extentLoggerFail("", "User is able to view + icon below Profile thumbnail in Following tab of Feed");	
}else {
Swipe("UP",1);
}
}
logger.info("User is unable to view + icon below Profile thumbnail in Following tab of Feed");
extent.extentLoggerPass("", "User is unable to view + icon below Profile thumbnail in Following tab of Feed");
}
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");

}
//Check if user should only see video from creators that he/she is following on the Following tab_T2297
public void verifyUserCanSeeVideosOnlyFromCreatorThatUserIsFollowing_T2297(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2297 - Check if user should only see video from creators that he/she is following on the Following tab");
System.out.println("T2297");
extent.extentLogger("Feed", "T2297");
unfollowUsers();
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(1000);
String name=getText(HipiHomePage.objFollowingTabCtreatorAccount);
verifyElementPresentAndClick(HipiHomePage.objFollowingTabFollowCta, "Follow Cta");
waitTime(3000);
verifyElementPresentAndClick(HipiHomePage.objForYou, "For you Tab");

verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
waitTime(5000);
for(int i=0;i<5;i++)
{
if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(name)))	
{
Swipe("UP",1);
}else {
logger.info("User is unable to see video from creators that user is following on the Following tab.");
extent.extentLoggerFail("", "User is unable to see video from creators that user is following on the Following tab.");
}
}
logger.info("User is able to see video from creators that user is following on the Following tab.");
extent.extentLoggerPass("", "User is able to see video from creators that user is following on the Following tab.");
navigateToHomePage();
click(HipiHomePage.objForYou, "For you tab");
}
}
//Check if user is able to see "Rising Star" tag above userhandle in Feed(For You&Following tag)_T2299
public void verifyUserCanSeeVideosOnlyFromCreatorThatUserIsFollowing_T2300(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser")) 
{
extent.HeaderChildNode("T2300 - Check if user is able to see Rising Star tag above userhandle in Feed(For You&Following tag)");
System.out.println("T2300");
extent.extentLogger("Feed", "T2300");
navigateToRisingStar(userType);
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
for(int i=0;i<10;i++)
{
if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
{
logger.info("User is able to see Rising Star tab above userhandle in Feed(For You&Following tab)");
extent.extentLoggerPass("", "User is able to see Rising Star tab above userhandle in Feed(For You&Following tab)");
break;
}else {
Swipe("DOWN",1);
if(i==9) {
logger.info("User is unable to see Rising Star tab above userhandle in Feed(For You&Following tab)");
extent.extentLoggerFail("", "User is unable to see Rising Star tab above userhandle in Feed(For You&Following tab)");	
}
}
}
navigateToHomePage();	
click(HipiHomePage.objForYou, "For you tab");

}
}

//Check if user is able to see "Rising Star" tag above userhandle over video in Sound Detail page_T2301_T2302//wrong Steps for 301
public void verifyUserCanSeeRisingStarInSoundDetailPage_T2302(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser")) 
{
extent.HeaderChildNode("T2302 - Check if user is able to see Rising Star tag above userhandle over video in Sound Detail page");
System.out.println("T2302");
extent.extentLogger("Feed", "T2302");
navigateToRisingStar(userType);
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
for(int i=0;i<30;i++)
{
if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
{
break;
}else {
Swipe("UP",1);
}
}
verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
waitTime(3000);
verifyElementPresentAndClick(HipiDiscoverPage.objFirstVideoBannerPage, "First Video");
waitTime(3000);
if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
{
logger.info("User is able to see Rising Star tag above userhandle over video in Sound Detail page");
extent.extentLoggerPass("", "User is able to see Rising Star tag above userhandle over video in Sound Detail page");
}else
{
logger.info("User is unable to see Rising Star tag above userhandle over video in Sound Detail page");
extent.extentLoggerFail("", "User is unable to see Rising Star tag above userhandle over video in Sound Detail page");			
}	
navigateToHomePage();	
}
}
//Check if user is able to see "Rising Star" tag below username in Profile Detail page_T2309_T2310
public void verifyUserCanSeeRisingStar_T2310(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser")) 
{
extent.HeaderChildNode("T2310 - Check if user is able to see Rising Star tag below username in Profile Detail page");
System.out.println("T2310");
extent.extentLogger("Feed", "T2310");
navigateToRisingStar(userType);
verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
for(int i=0;i<10;i++)
{
if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
{
break;
}else {
Swipe("UP",1);
}
}
verifyElementPresentAndClick(HipiHomePage.objUserName, "Userhandler");
waitTime(2000);
if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
{
logger.info("User is able to see Rising Star tag above userhandle over video in Sound Detail page");
extent.extentLoggerPass("", "User is able to see Rising Star tag above userhandle over video in Sound Detail page");
}else
{
logger.info("User is unable to see Rising Star tag above userhandle over video in Sound Detail page");
extent.extentLoggerFail("", "User is unable to see Rising Star tag above userhandle over video in Sound Detail page");			
}	
navigateToHomePage();	
}
}

//Creator module


//Logged in user - Check user able to trim the audio of the sound from local tab_T2213
public void verifyUserCanTrimMusicFromLocalTab_T2213(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2213 - Logged in user - Check user able to trim the audio of the sound from local tab");
System.out.println("T2213");
extent.extentLogger("Creator", "T2213");
waitTime(2000);
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions();
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn, "Sound");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalTab, "Local");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundFirstMusic, "First Music");
waitTime(1000);
//verifyElementPresentAndClick(HipiCreateVideoPage.objmusicplaypause, "pause");
waitTime(1000);
//String startTime=getText(HipiCreateVideoPage.objMusicTime);
//WebElement TrimSlider=getDriver().findElement(By.xpath("//*[@id='leftHandle']"));
//Point elementHeight=TrimSlider.getLocation();
//int xaxis=elementHeight.getX();
//trimVideo(TrimSlider,200,xaxis,"Trim left slider");
//String draggedTime=getText(HipiCreateVideoPage.objMusicTime);
//if(startTime!=draggedTime) 
//{
//logger.info("User is able to trim the audio smoothly by dragging");
//extent.extentLoggerPass("", "User is able to trim the audio smoothly by dragging");
//}else
//{
//logger.info("User is unable to trim the audio smoothly by dragging");
//extent.extentLoggerFail("", "User is unable to trim the audio smoothly by dragging");			
//}	
String songDuration=getText(HipiCreateVideoPage.objSongDuration);
System.out.println(songDuration);
swipeRail(HipiCreateVideoPage.objTrimSong, "Left",3);

String songDuration1=getText(HipiCreateVideoPage.objSongDuration);
System.out.println(songDuration1);
if (!songDuration.equals(songDuration1)) {
	logger.info("User is able to trim the audio smoothly by dragging");
	extent.extentLoggerPass("", "User is able to trim the audio smoothly by dragging");
	}else
	{
	logger.info("User is unable to trim the audio smoothly by dragging");
	extent.extentLoggerFail("", "User is unable to trim the audio smoothly by dragging");			
	}	
navigateToHomePage();		
}
}
//Logged in user - User must be able to cancel the trimming & exit from the song trimming screen_T2214
public void verifyUserExitFromTrimScreenByTappigOnCrossIcon_T2214(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2214 - Logged in user - User must be able to cancel the trimming & exit from the song trimming screen");
System.out.println("T2214");
extent.extentLogger("Creator", "T2214");
waitTime(2000);
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions();
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn, "Sound");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalTab, "Local");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundFirstMusic, "First Music");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objTrimscreenCrossIcon, "Cross icon");
waitTime(1000);	
if(verifyElementDisplayed(HipiCreateVideoPage.objLocalSoundsHeader)) 
{
logger.info("User is unable to cancel the trim & sound selection");
extent.extentLoggerFail("", "User is unable to cancel the trim & sound selection");	
}else
{
logger.info("User is able to cancel the trim & sound selection");
extent.extentLoggerPass("", "User is able to cancel the trim & sound selection");
}	
navigateToHomePage();		
}
}
//Logged in user - User must be able to select the local music to the video creation_T2215
public void verifyUserMusicAddedFromLocalSoundsIsDisplayedInTrimScreen_T2215(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2215 - Logged in user - User must be able to cancel the trimming & exit from the song trimming screen");
System.out.println("T2215");
extent.extentLogger("Creator", "T2215");
waitTime(2000);
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions();
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn, "Sound");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalTab, "Local");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundFirstMusic, "First Music");
waitTime(1000);
String songDuration=getText(HipiCreateVideoPage.objSongDuration);

swipeRail(HipiCreateVideoPage.objTrimSong, "Left",3);

String songDuration1=getText(HipiCreateVideoPage.objSongDuration);

if (!songDuration.equals(songDuration1)) {
	logger.info("User is able to see the selected local music title on video creation screen");
	extent.extentLoggerPass("", "User is able to see the selected local music title on video creation screen");
	}else
	{
	logger.info("User is unable to see the selected local music title on video creation screen");
	extent.extentLoggerFail("", "User is unable to see the selected local music title on video creation screen");			
	}	
	navigateToHomePage();	

//String trackName=getText(HipiCreateVideoPage.objLocalSoundsHeader);
//WebElement TrimSlider=getDriver().findElement(By.xpath("//*[@id='leftHandle']"));
//Point elementHeight=TrimSlider.getLocation();
//int xaxis=elementHeight.getX();
//trimVideo(TrimSlider,200,xaxis,"Trim left slider");
//verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundsTrimTick, "Tick icon");
//waitTime(3000);
//String expectedTrackName=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
//if(trackName.contains(expectedTrackName)) 
//{
//logger.info("User is able to see the selected local music title on video creation screen");
//extent.extentLoggerPass("", "User is able to see the selected local music title on video creation screen");
//}else
//{
//logger.info("User is unable to see the selected local music title on video creation screen");
//extent.extentLoggerFail("", "User is unable to see the selected local music title on video creation screen");			
//}	
//navigateToHomePage();	
}
}
//Logged in user - User msut be able to create video successfully using the selected local tab sound_T2216
public void verifyUserCanCreateVideoFromLocalSound_T2216(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2216 - Logged in user - User msut be able to create video successfully using the selected local tab sound");
System.out.println("T2216");
extent.extentLogger("Creator", "T2216");
waitTime(2000);
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions();
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoScreenSoundbtn, "Sound");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalTab, "Local");
waitTime(1000);
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundFirstMusic, "First Music");
waitTime(1000);
swipeRail(HipiCreateVideoPage.objTrimSong, "Left",3);
String songDuration=getText(HipiCreateVideoPage.objSongDuration);
swipeRail(HipiCreateVideoPage.objTrimSong, "Right",3);
String songDuration1=getText(HipiCreateVideoPage.objSongDuration);
if (!songDuration.equals(songDuration1)) {
	logger.info("User is able to see the selected local music title on video creation screen");
	extent.extentLoggerPass("", "User is able to see the selected local music title on video creation screen");
	}else
	{
	logger.info("User is unable to see the selected local music title on video creation screen");
	extent.extentLoggerFail("", "User is unable to see the selected local music title on video creation screen");			
	}	
	
verifyElementPresentAndClick(HipiCreateVideoPage.objLocalSoundsTrimTick, "Tick icon");
waitTime(3000);
verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
waitTime(3000);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 10);
String desc="https://www.google.com";
type(HipiCreateVideoPage.objPostDescription,desc , "value");
//verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//waitTime(3000);
if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
{
	click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//	click(HipiCreateVideoPage.objDoneCTC, "Done Button");
}else {
	logger.info("User is unable to See Language Options");
	extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
	
}
verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
	Back(1);
}else {
	logger.info("User is unable to See Share Sheet");
	extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
}
waitUntilElementDisplayed(HipiHomePage.objForYou, 1);
waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
waitTime(4000);
waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"profile");
for (int i = 0; i <= 50; i++) {
PartialSwipe("DOWN", 2);
if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
Thread.sleep(2000);
Back(1);
Thread.sleep(2000);
verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
} else {
click(HipiCreateVideoPage.objselectfirstVideo, "First video");
waitTime(3000);
 String expected = getText(HipiHomePage.objHashtagButtonDescription);
 System.out.println(expected);
 if(expected.contains("https://www.google.co ..MORE"))
 {
 	logger.info("User is able to add link in video description");
 	extent.extentLoggerPass("Post screen", "User is able to add link in video description");
 }else {
 	logger.info("User is unable to add link in video description");
 	extent.extentLoggerFail("Post screen", "User is unable to add link in video description"); 		
 }
//verifyElementExist(HipiCreateVideoPage.objSelectVideo(desc), "Video");
//if(verifyElementExist(HipiCreateVideoPage.objSelectVideo(desc), "Video"))
//{
//	logger.info("User is able to add link in video description");
//	extent.extentLoggerPass("Post screen", "User is able to add link in video description");
//}else {
//	logger.info("User is unable to add link in video description");
//	extent.extentLoggerFail("Post screen", "User is unable to add link in video description"); 		
//}
break;
}
}
navigateToHomePage();
}
}
public void navigateToSoundScreenInCreatorPage() throws Exception {
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions();
waitTime(3000);
verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
waitUntilElementDisplayed(HipiCreateVideoPage.objSoundInVideoRecord, 10);
verifyElementPresentAndClick(HipiCreateVideoPage.objSoundInVideoRecord, "Sound Icon");
waitTime(3000);

if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField, "Sound Search Field")) {
logger.info("User is able to see the search bar on sound screen ");
extent.extentLoggerPass("", "User is able to see the search bar on sound screen ");
}else {
logger.info("User is able to see the search bar on sound screen ");
extent.extentLoggerFail("", "User is able to see the search bar on sound screen "); 
}	



}


//Verify whether all search results will display in list view_T2253
public void verifySearchListInSearchedSoundResults_T2253(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2253 - Verify whether all search results will display in list view");
		System.out.println("T2253");
		extent.extentLogger("Creator", "T2253");
		waitTime(2000);
		navigateToSoundScreenInCreatorPage();
		click(HipiCreateVideoPage.objSoundScreenSearchField,"Search Field");
		waitTime(3000);
		type(HipiCreateVideoPage.objSoundScreenSearchField,"Badshah" , "Search Field");
		
		waitTime(5000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText , "Suggested Result");
		for(int i=1;i<3;i++)
		{
			String Resultname=getText(HipiCreateVideoPage.objSoundSearchedList(i));
			waitTime(1000);
			verifyElementPresent(HipiCreateVideoPage.objSoundSearchedList(i),Resultname );
		}
		discardPopup();
	}
}

//Verify if the search results has the thumbnail with play icon on it_T2254
public void verifysoundSearchResultHasThumbnailAndPlayIcon_T2254(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2254 - Verify if the search results has the thumbnail with play icon on it");
		System.out.println("T2254");
		extent.extentLogger("Creator", "T2254");
		waitTime(2000);
		navigateToSoundScreenInCreatorPage();
		
		click(HipiCreateVideoPage.objSoundScreenSearchField,"Search Field");
		waitTime(3000);
		type(HipiCreateVideoPage.objSoundScreenSearchField,"Badshah" , "Search Field");
		waitTime(1000);
		
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText , "Suggested Result");		
		for(int i=1;i<3;i++)
		{
			String Resultname=getText(HipiCreateVideoPage.objSoundSearchedList(i));
			waitTime(1000);
			verifyElementPresent(HipiCreateVideoPage.objSoundSearchedList(i),Resultname );
		}
		if(verifyElementPresent(HipiCreateVideoPage.objSoundSearchListPlayIcon , "Play Icon"))
		{
		waitTime(1000);
		verifyElementPresent(HipiCreateVideoPage.objSoundSearchListThumbnail , "Thumbnail");
		logger.info("User is able to see the searched audio/sound thumbnail along with the play icon");
    	extent.extentLoggerPass("", "User is able to see the searched audio/sound thumbnail along with the play icon");
        }else {
    	logger.info("User is unable to see the searched audio/sound thumbnail along with the play icon");
    	extent.extentLoggerFail("", "User is unable to see the searched audio/sound thumbnail along with the play icon"); 
    	}
		discardPopup();
	}
}
//Verify whether user is able to upload a video from device post selecting a sound_T2274
public void verifyUserCanUploadVideoPostSelectingSound_T2274(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2274 - Verify whether user is able to upload a video from device post selecting a sound");
System.out.println("T2274");
extent.extentLogger("Creator", "T2274");
waitTime(2000);
verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
waitTime(1000);
verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
waitTime(3000);
allowPermissions();
verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo, "Upload");
waitTime(4000);
verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo, "First Video");
waitTime(4000);
verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton, "Edit This Video");
waitTime(4000);
verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick Button");
waitTime(4000);
if(verifyElementDisplayed(HipiCreateVideoPage.objVideoEditScreenHeader))
{
logger.info("User is able to upload a video from device & land on video edit screen");
extent.extentLoggerPass("", "User is able to upload a video from device & land on video edit screen");
}else {
logger.info("User is unable to upload a video from device & land on video edit screen");
extent.extentLoggerFail("", "User is unable to upload a video from device & land on video edit screen"); 
}
discardPopup();
}
}
//Verify whether user is able to observe the selected sound getting applied for uploaded video_T2275
public void verifyUserCanUploadVideoPostSelectingSoundIsSame_T2275(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2275 - Verify whether user is able to observe the selected sound getting applied for uploaded video");
		System.out.println("T2275");
		extent.extentLogger("Creator", "T2275");
		waitTime(2000);
		String ActualSound=getText(HipiProfilePage.objSoundName);
		String str[]=ActualSound.split(" ");
		String name=str[0];
		verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
		waitTime(1000);
		System.out.println(name);
		waitTime(1000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo, "Upload");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo, "First Video");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton, "Edit This Video");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick Button");
		waitTime(2000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(name)))
		{
			logger.info("User is able to see the selected sound getting applied for uploaded video");
	    	extent.extentLoggerPass("", "User is able to see the selected sound getting applied for uploaded video");
	        }else {
	    	logger.info("User is unable to see the selected sound getting applied for uploaded video");
	    	extent.extentLoggerFail("", "User is unable to see the selected sound getting applied for uploaded video"); 
		}
		discardPopup();
	}
}
//Verify whether the user is able to replace the selected sound for uploaded video_T2276
public void verifyUserCanUploadVideoPostReplacingAddedMusic_T2276(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2276 - Verify whether the user is able to replace the selected sound for uploaded video");
		System.out.println("T2276");
		extent.extentLogger("Creator", "T2276");
		waitTime(2000);
		verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
		waitTime(1000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo, "Upload");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo, "First Video");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton, "Edit This Video");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick Button");
		waitTime(2000);
		String ActualSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenHeader, "Sound Title");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField, "Sound Search Field");
		waitTime(1000);
		type(HipiCreateVideoPage.objSoundScreenSearchField,"Badshah" , "Search Field");
//		click(HipiCreateVideoPage.objSoundScreenSearchField,"Search Field");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText , "Suggested Result");
		for(int i=1;i<2;i++)
		{
			String Resultname=getText(HipiCreateVideoPage.objSoundSearchedList(i));
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundSearchedList(i),Resultname );
		}
		waitTime(5000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon , "Tick icon");
		String ExpectedSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
		waitTime(2000);
		if(ActualSound!=ExpectedSound)
		{
			logger.info("User is able to see the previously selected sound getting replaced by added sound on video edit screen");
	    	extent.extentLoggerPass("", "User is able to see the previously selected sound getting replaced by added sound on video edit screen");
	        }else {
	    	logger.info("User is unable to see the previously selected sound getting replaced by added sound on video edit screen");
	    	extent.extentLoggerFail("", "User is unable to see the previously selected sound getting replaced by added sound on video edit screen"); 
		}
		discardPopup();
	}
}
//Verify if user is able to observe the bookmark symbol against each sound_T2264
public void verifyUserCanSeeBookmarkForSounds_T2264(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2264 - Verify if user is able to observe the bookmark symbol against each sound");
System.out.println("T2264");
extent.extentLogger("Creator", "T2264");
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions();
verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick Button");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenSoundbtn, 20);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenSoundbtn,"Sound Button");
waitUntilElementDisplayed(HipiCreateVideoPage.objSoundScreenFirstCategory, 20);
verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenFirstCategory,"First category");
waitTime(3000);
for(int i=1;i<6;i++)
{
String Soundname=getText(HipiCreateVideoPage.objSoundNameList(i));
waitTime(1000);
verifyElementPresent(HipiCreateVideoPage.objSoundCategoryFavoriteIcon(i),Soundname +"Bookmark symbol " );
}
discardPopup();
}
}
//Verify if the sound which has been added to favourite by user, displays under favourites tab_T2266
public void verifyUserBookmarkedSoundIsDisplayedUnderFavoritesTab_T2266(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2266 - Verify if the sound which has been added to favourite by user, displays under favourites tab");
		System.out.println("T2266");
		extent.extentLogger("Creator", "T2266");
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
		waitTime(5000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundInVideoRecord, "Sound Icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenFirstCategory,"First category");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenFirstBookmark,"First Bookmark");
		waitTime(1000);
		String musicnameActual=getText(HipiCreateVideoPage.objSoundScreenFirstBookmark);
		String[] str=musicnameActual.split("1");
		String actual=str[0];
		Back(1);
		verifyElementPresentAndClick(HipiCreateVideoPage.objFavoritesTab,"Favorites Tab");
		waitTime(1000);
		PartialSwipe("DOWN",1);
		if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(actual)))
		{
			logger.info("User is able to view the just bookmarked sound in favourite tab");
	    	extent.extentLoggerPass("", "User is able to view the just bookmarked sound in favourite tab");
	        }else {
	    	logger.info("User is unable to view the just bookmarked sound in favourite tab");
	    	extent.extentLoggerFail("", "User is unable to view the just bookmarked sound in favourite tab"); 
		}
		discardPopup();
	}
}
public void addSoundToFavorites() throws Exception
{
	click(HipiProfilePage.objSoundName,"Sounds");
	waitTime(2000);
	click(HipiProfilePage.objSoundsAddToFavorite,"Add to Favorites");
	waitTime(2000);
	 navigateToHomePage();

}
//Verify whether the favourite tab contains the sounds which are bookmarked from sound detail page as well_T2267
public void verifyMusicAddedIsDisplayedUnderFavoritesTab_T2267(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2267 - Verify whether the favourite tab contains the sounds which are bookmarked from sound detail page as well");
		System.out.println("T2267");
		extent.extentLogger("Creator", "T2267");
		String sound=getText(HipiProfilePage.objSoundName);
		addSoundToFavorites();
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundInVideoRecord, "Sound Icon");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objFavoritesTab,"Favorites Tab");
		waitTime(1000);
		PartialSwipe("UP",1);
		if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenFirstSound,"First Sound"))
		{
			verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(sound));
			logger.info("User is able to view the sounds under favourite tab which are bookmarked in either sound details or sound selection page");
	    	extent.extentLoggerPass("", "User is able to view the sounds under favourite tab which are bookmarked in either sound details or sound selection page");
	        }else {
	    	logger.info("User is unable to view the sounds under favourite tab which are bookmarked in either sound details or sound selection page");
	    	extent.extentLoggerFail("", "User is unable to view the sounds under favourite tab which are bookmarked in either sound details or sound selection page"); 
		}
		discardPopup();
	}
}
public void verifyUserCanSeeVolumeAsDefaultBy100_T2272(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2272 - Verify whether the user is able to see the volume of Music as 100 by default");
		System.out.println("T2272");
		extent.extentLogger("Creator", "T2272");
		verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
		waitTime(1000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
		waitTime(3000);
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenVoulmebtn,"Volume button");
		waitTime(1000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objAdjustVolume100)) {
			logger.info("User is able to view the volume of music as 100 by default");
			extent.extentLoggerPass("Post screen", "User is able to view the volume of music as 100 by default");
		}else {
			logger.info("User is unable to view the volume of music as 100 by default");
			extent.extentLoggerFail("Post screen", "User is unable to view the volume of music as 100 by default"); 		
		}
		discardPopup();
	}
}
//Verify whether user is able to Tap on 'Use this sound' CTA_T2268
public void verifyUserIsAbleTotapOnUseThisSoundCta_T2268(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2268 - Verify whether user is able to Tap on 'Use this sound' CTA");
System.out.println("T2268");
extent.extentLogger("Creator", "T2268");
SwipeUntilFindElement(HipiProfilePage.objSoundName, "UP");
verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
waitTime(1000);
verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
waitTime(1000);
allowPermissions();
if(verifyElementDisplayed(HipiCreateVideoPage.objuploadvideo))
{
logger.info("User is able to navigate to video creation screen with the selected sound displaying on screen");
extent.extentLoggerPass("", "User is able to navigate to video creation screen with the selected sound displaying on screen");
}else {
logger.info("User is unable to navigate to video creation screen with the selected sound displaying on screen");
extent.extentLoggerFail("", "User is unable to navigate to video creation screen with the selected sound displaying on screen"); 	
}
navigateToHomePage();
}
}
//Verify user is able to create a video post tapping on 'Use this sound' CTA_T2270
public void verifyUserIsAbleToCreateVideoPostUseThisSoundCta_T2270(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T2270 - Verify user is able to create a video post tapping on 'Use this sound' CTA");
System.out.println("T2270");
extent.extentLogger("Creator", "T2270");
verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
waitTime(1000);
verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
allowPermissions();
String ActualSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 5);
verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
waitTime(3000);
String ExpectedSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
if(ActualSound.contains(ExpectedSound))
{
logger.info("User is able to create a video using selected sound from feed screen");
extent.extentLoggerPass("", "User is able to create a video using selected sound from feed screen");
}else {
logger.info("User is unable to create a video using selected sound from feed screen");
extent.extentLoggerFail("", "User is unable to create a video using selected sound from feed screen"); 
}
discardPopup();
}
}
//Verify whether the user is able to observe the same sound selected while in video edit screen_T2271
public void verifyUserAbleToSeeVideoWithSameSoundSelectedInFeedScreen_T2271(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2271 - Verify whether the user is able to observe the same sound selected while in video edit screen");
		System.out.println("T2271");
		extent.extentLogger("Creator", "T2271");
		SwipeUntilFindElement(HipiProfilePage.objSoundName, "UP");
		String ActualSound=getText(HipiProfilePage.objSoundName);
		verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
		waitTime(1000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
		allowPermissions();
//		String[] str=ActualSound.split("1");
//		String name=str[0];
		System.out.println(ActualSound);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
		waitTime(3000);
		//String ExpectedSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
		waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 100);
//		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			click(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
		waitTime(5000);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
		waitUntilElementDisplayed(HipiHomePage.objForYou, 20);
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);
		click(AMDHomePage.objProfileIcon,"profile");
		waitTime(4000);
		for (int i = 0; i <= 50; i++) {
			PartialSwipe("DOWN", 2);
			if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
				Thread.sleep(2000);
				Back(1);
				Thread.sleep(2000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			} else {
			
				click(HipiCreateVideoPage.objselectfirstVideo, "First video");
				waitTime(3000);
					if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(ActualSound))) {
						logger.info("User is able to see the same selected sound has been applied for the recorded video");
				    	extent.extentLoggerPass("Post screen", "User is able to see the same selected sound has been applied for the recorded video");
				    }else {
				    	logger.info("User is unable to see the same selected sound has been applied for the recorded video");
				    	extent.extentLoggerFail("Post screen", "User is unable to see the same selected sound has been applied for the recorded video"); 		
					}
				break;
			}
			}
		navigateToHomePage();
	}
}
public void   discoverTabSelectedByDefault__T2257(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2257 - Verify the Discover tabs under sounds screen has different sounds curated from CMS");
		System.out.println("T2257");
		extent.extentLogger("", "T2257");		
		navigateToSoundScreenInCreatorPage();
		Swipe("UP", 2);
		if(verifyElementPresent(HipiCreateVideoPage.objByDefaultDiscoverTabSelected, "doscover Tab Selected By Default")){
			logger.info("User is able to see discover tab selected by default");
	    	extent.extentLoggerPass("", "User is able to see discover tab selected by default");
	    }else {
	    	logger.info("User is not able to see discover tab selected by default");
	    	extent.extentLoggerFail("", "User is not able to see discover tab selected by default"); 
	}	
		discardPopup();
	}
}

public void  userAbleseeTwoTabsUnderTheSoundScreen__T2256(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2256 - Verify whether the user is able to see two tabs under the sound screen");
		System.out.println("T2256");
		extent.extentLogger("", "T2256");		
		navigateToSoundScreenInCreatorPage();
		
		verifyElementPresent(HipiCreateVideoPage.objDiscoverTab,"Discover Tab");
		verifyElementPresent(HipiCreateVideoPage.objFavoritesTab,"Favorites Tab");
		verifyElementPresent(HipiCreateVideoPage.objLocalTab,"Local Tab");

		discardPopup();
		
	}
}
//Verify whether user is able to replace the previously selected sound used for recording_T2273
public void verifyUserCanReplaceMusicPostUseThisSound_T2273(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2273 - Verify whether user is able to replace the previously selected sound used for recording");
		System.out.println("T2273");
		extent.extentLogger("Creator", "T2273");
		verifyElementPresentAndClick(HipiProfilePage.objSoundName, "Sound Name");
		waitTime(1000);
		verifyElementPresentAndClick(HipiDiscoverPage.objUseThisSound, "Use This Sound Cta");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon, "Record icon");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
		waitTime(3000);
		String ActualSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenHeader, "Sound Title");
		waitTime(1000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundScreenSearchField, "Sound Search Field");
		waitTime(1000);
		type(HipiCreateVideoPage.objSoundScreenSearchField,"Badshah" , "Search Field");
		waitTime(3000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objSoundFirstSuggestedText , "Suggested Result");
		for(int i=1;i<2;i++)
		{
			String Resultname=getText(HipiCreateVideoPage.objSoundSearchedList(i));
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundSearchedList(i),Resultname );
		}
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objMusicScreenTickIcon , "Tick icon");
		String ExpectedSound=getText(HipiCreateVideoPage.objVideoEditScreenHeader);
		waitTime(2000);
		if(ActualSound!=ExpectedSound)
		{
			logger.info("User is able to replace the sound in video edit screen successfully");
	    	extent.extentLoggerPass("", "User is able to replace the sound in video edit screen successfully");
	        }else {
	    	logger.info("User is unable to replace the sound in video edit screen successfully");
	    	extent.extentLoggerFail("", "User is unable to replace the sound in video edit screen successfully"); 
		}
		discardPopup();
	}
}

//Guest User - Check by tapping on follow button in "Discover" screen User should get login pop-up_T2220
public void verifyOnTappingOnFOllowButtonUserGetsLoginPopup_T2220(String userType) throws Exception {

if(userType.equalsIgnoreCase("Guest")) {
extent.HeaderChildNode("T2220 - Guest User - Check by tapping on follow button in Discover screen User should get login pop-up");
System.out.println("T2220");
extent.extentLogger("Discover", "T2220");
click(HipiHomePage.objDiscoverButton, "Discover Button");
waitUntilElementDisplayed(HipiDiscoverPage.objVideosBannerDetailPage, 4);
verifyElementPresentAndClick(HipiDiscoverPage.objVideosBannerDetailPage, "Video Banner");
waitTime(3000);
//verifyElementPresentAndClick(HipiDiscoverPage.objAnyHipiVideo, "Any hipi video");
waitTime(4000);
waitUntilElementDisplayed(HipiHomePage.objFollowButton, 4);
verifyElementPresentAndClick(HipiHomePage.objFollowButton, "Follow Button");
waitTime(4000);
if(verifyElementDisplayed(HipiProfilePage.objUsePhoneOrEmail))
{
logger.info("User is able to Get loginpopup by tpping on follow button next to user handler");
extent.extentLoggerPass("", "User is able to Get loginpopup by tpping on follow button next to user handler");
}else {
logger.info("User is unable to Get loginpopup by tpping on follow button next to user handler");
extent.extentLoggerFail("", "User is unable to Get loginpopup by tpping on follow button next to user handler"); 
}
navigateToHomePage();
}
}
//Logged in User - Check if user is able to view video created by "original sound"_T056	
public void verifyUseCanSeeVideoWithOriginalSound_T056(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser")) {
extent.HeaderChildNode("Logged in User - Check if user is able to view video created by original sound");
System.out.println("T056");
extent.extentLogger("Feed", "T056");
String Songname=getText(HipiHomePage.objUserName);
for(int i=0;i<10;i++)
{
if(verifyElementDisplayed(HipiHomePage.objOriginalSoundText))
{	
if(verifyElementPresent(HipiHomePage.objOriginalSoundText,Songname +"Original Sound"))
{
logger.info("user is able to view video created by original sound");
extent.extentLoggerPass("", "user is able to view video created by original sound");
}else {
logger.info("user is unable to view video created by original sound");
extent.extentLoggerFail("", "user is unable to view video created by original sound"); 
}
break;
}else {
Swipe("UP",1);
}
}
navigateToHomePage();
}
}
//Logged in User - Check if User is able to view video created by "existing sound"_T057
public void verifyUseCanSeeVideoWithExistingSound_T057(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("NonSubscribedUser")) {
extent.HeaderChildNode("Logged in User - Check if User is able to view video created by existing sound");
System.out.println("T057");
extent.extentLogger("Feed", "T057");
for(int i=0;i<20;i++)
{
if(verifyElementDisplayed(HipiHomePage.objOriginalSoundText))
{	
Swipe("UP",1);
}else {		
	logger.info("user is able to view video created by Existing sound");
	extent.extentLoggerPass("", "user is able to view video created by Existing sound"); 
	  break;	
}
}
navigateToHomePage();
}
}
//Logged in User - Check if user is able to view short and full description on played/paused video_T436		

//Check if User is able remove the searched text in search bar by tapping on cross icon in Select country/region screen_T810
public void verifyUserCanRemoveSearchedText_T810(String userType,String text) throws Exception {
if(userType.equalsIgnoreCase("Guest")) {
extent.HeaderChildNode("Check if user is able to search any country/region in Select country/region screen");
System.out.println("T810");
extent.extentLogger("", "T810");	
verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");		
verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
waitTime(2000);
verifyElementPresentAndClick(HipiLoginPage.objPlus91DropDwon, "+91 Drop down");
waitTime(2000);
hideKeyboard();
verifyElementPresent(HipiLoginPage.objSelectCountryRegion, "Select Country Region");
verifyElementPresent(HipiLoginPage.objSearchTab, "Search Tab");	
type(HipiLoginPage.objSearchTab, text, "Search Country");
verifyElementPresentAndClick(HipiLoginPage.objCrossIconInSearchBar, "Cross Icon");		 
if(verifyElementDisplayed(HipiLoginPage.objSearchCountry(text))){
logger.info("User is unable to remove the searched text by tapping on cross icon in Select country/region screen");	
extent.extentLoggerFail("", "User is unable to remove the searched text by tapping on cross icon in Select country/region screen" );
}else {
logger.info("User is able to remove the searched text by tapping on cross icon in Select country/region screen");	
extent.extentLoggerPass("", "User is able to remove the searched text by tapping on cross icon in Select country/region screen");		
}
navigateToHomePage();
}
}
//Check if Guest User is able to see Comment box at the bottom of the video screen in Hashtag details screen_T1821
public void verifyUserViewCommentBoxInHaghtagRelatedVideoScreen_T1821_T1832(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("Guest"))
{
extent.HeaderChildNode("T1821 - Check if Guest User is able to see Comment box at the bottom of the video screen in Hashtag details screen");
System.out.println("T1821");
extent.extentLogger("Creator", "T1821");
} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T1832 - Logged in user - Check User is able to see Comment box at the bottom of the video screen in Hashtag details screen");
System.out.println("T1832");
extent.extentLogger("Creator", "T1832");
}
waitTime(2000);
verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
waitUntilElementDisplayed(HipiDiscoverPage.objArrowMarkPresentInfrontTitleName, 3);
verifyElementPresentAndClick(HipiDiscoverPage.objArrowMarkPresentInfrontTitleName,"Expand profile ");
waitTime(1000);
verifyElementPresentAndClick(HipiDiscoverPage.objRailProfileName,"Profile");
waitTime(1000);
verifyElementPresentAndClick(HipiProfilePage.objFirstVideo,"First Video");
waitTime(1000);
clickOnHashTag();
waitTime(1000);
verifyElementPresentAndClick(HipiDiscoverPage.objVideosBannerDetailPage," Video");
if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
{
logger.info("User is able to see a comment box at the bottom of the video screen in Hashtag details screen");	
extent.extentLoggerPass("", "User is able to see a comment box at the bottom of the video screen in Hashtag details screen" );
}else {
logger.info("User is unable to see a comment box at the bottom of the video screen in Hashtag details screen");	
extent.extentLoggerFail("", "User is unable to see a comment box at the bottom of the video screen in Hashtag details screen");		
}
navigateToHomePage();
}
//Check if Guest User is able to see Comment box at the bottom of the video screen in Hashtag details screen_T1822
public void verifyUserViewCommentBox_T1822_T1833(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("Guest"))
{
extent.HeaderChildNode("T1822 - Check if Guest User is able to see Comment box at the bottom of the video screen in Hashtag details screen");
System.out.println("T1822");
extent.extentLogger("Creator", "T1822");
} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("T1833 - Logged in user - Check User is able to see Comment box at the bottom of the video screen in Hashtag details screen");
System.out.println("T1833");
extent.extentLogger("Creator", "T1833");
}
waitTime(2000);
verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
waitUntilElementDisplayed(HipiDiscoverPage.objRelatedHashtagVideos, 2);
Swipe("UP", 2);
verifyElementPresentAndClick(HipiDiscoverPage.objRelatedHashtagVideos,"Video rail");
clickOnHashTag();
waitTime(1000);
verifyElementPresentAndClick(HipiDiscoverPage.objVideosBannerDetailPage," Video");
if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
{
logger.info("User is able to see a comment box at the bottom of the video screen in Hashtag details screen");	
extent.extentLoggerPass("", "User is able to see a comment box at the bottom of the video screen in Hashtag details screen" );
}else {
logger.info("User is unable to see a comment box at the bottom of the video screen in Hashtag details screen");	
extent.extentLoggerFail("", "User is unable to see a comment box at the bottom of the video screen in Hashtag details screen");		
}
navigateToHomePage();
}
//Check if Guest User is able to see comment box at the bottom of the screen on the video playing/paused in Hashtag detail screen_T1847
public void verifyUserCanSeeCommentBox_T1847_T1857(String userType) throws Exception 
{
if(userType.equalsIgnoreCase("Guest"))
{
extent.HeaderChildNode("Check if Guest User is able to see comment box at the bottom of the screen on the video playing/paused in Hashtag detail screen");
System.out.println("T1847");
extent.extentLogger("Creator", "T1847");
}else if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
extent.HeaderChildNode("Check if Loggedin  User is able to see comment box at the bottom of the screen on the video playing/paused in Hashtag detail screen");
System.out.println("T1857");
extent.extentLogger("Creator", "T1857");
}
clickOnHashTag();
waitTime(3000);
verifyElementPresentAndClick(HipiDiscoverPage.objVideosBannerDetailPage," Video");
if(verifyElementDisplayed(HipiDiscoverPage.objCommentBox))
{
logger.info("User is able to see comment box at the bottom of the screen over the video playing/paused in Hashtag Detail screen");	
extent.extentLoggerPass("", " User is able to see comment box at the bottom of the screen over the video playing/paused in Hashtag Detail screen" );
}else {
logger.info(" User is unable to see comment box at the bottom of the screen over the video playing/paused in Hashtag Detail screen");	
extent.extentLoggerFail("", " User is unable to see comment box at the bottom of the screen over the video playing/paused in Hashtag Detail screen");		
}
navigateToHomePage();
}






public void verifyUserCanSeeRisingStarInProfileDetail_T2312(String userType) throws Exception 
{
	 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
	{
		extent.HeaderChildNode("Check if user is able to see \"Rising Star\" tag above userhandle over video in Profile Detail page");
		System.out.println("T2312");
		extent.extentLogger("Feed", "T2312");
	navigateToRisingStar(userType);
	verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Tab");
	for(int i=0;i<10;i++)
	{
		if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
		{
			break;
		}else {
			Swipe("UP",1);
		}
	}
	verifyElementPresentAndClick(HipiHomePage.objUserName, "Userhandler");
	waitTime(2000);
	verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "Thumbnail");
	waitTime(2000);
	if(verifyElementDisplayed(HipiHomePage.objRaisingStar))
	{
		logger.info("User is able to see Rising Star tag above userhandle over video in Profile Detail page");
    	extent.extentLoggerPass("", "User is able to see Rising Star tag above userhandle over video in Profile Detail page");
	}else
	{
		logger.info("User is unable to see Rising Star tag above userhandle over video in Profile Detail page");
    	extent.extentLoggerFail("", "User is unable to see Rising Star tag above userhandle over video in Profile Detail page");			
    }	
	navigateToHomePage();	
	}
	}


//====================================Mkkkk==================================================================

public void checkUserisAbleToSeeInviteFriendsOption_T2141(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2141 - Logged in User - Check User is able to see invite friends option_T2141");
	System.out.println("T2141");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2141");
	waitTime(3000);
//	navigateToSettingAndPrivacy(userType);
	navigateToSettingsPage();
	if(verifyElementPresent(HipiSettingsPage.objInviteFriends, "Invite Friends")){
		logger.info("User able to see invite friends option");
		extent.extentLoggerPass("Settings and Privacy", "User able to see invite friends option");
	}else {
		logger.error("User not able to see invite friends option");
		extent.extentLoggerFail("Settings and Privacy", "User not able to see invite friends option");
	}
	navigateToHomePage();
		
}
}




public void checkUserIsAbleToSeeSearchBarInviteFriendsOption_T2142(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2142 - Logged in User - Check User is able to see Search bar in Invite Friends screen_T2142");
	System.out.println("T2142");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2142");
	waitTime(3000);
	navigateToSettingsPage();
	verifyElementPresentAndClick(HipiSettingsPage.objInviteFriends, "Invite Friends");
	click(HipiSettingsPage.objInviteFriends, "Invite Friends");
	allowPermissions();
	if(verifyElementPresent(HipiSettingsPage.objSearchBar, "Search Bar")){
		logger.info("User able to see Search bar in Invite Friends screen");
		extent.extentLoggerPass("Settings and Privacy", "User able to see Search bar in Invite Friends screen");
	}else {
		logger.error("User not able to see Search bar in Invite Friends screen");
		extent.extentLoggerFail("Settings and Privacy", "User not able to see Search bar in Invite Friends screen");
	}
	navigateToHomePage();
}
}


public void checkIfUserIsAbleToSearchTheContactListedInInviteFriendsScreen_T2143(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2143 - Logged-In User - Check if user is able to search the contact listed in Invite Friends screen_T2143");
	System.out.println("T2143");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2143");
	waitTime(3000);
	navigateToSettingsPage();
	verifyElementPresentAndClick(HipiSettingsPage.objInviteFriends, "Invite Friends");
	click(HipiSettingsPage.objInviteFriends, "Invite Friends");
	allowPermissions();
	click(HipiSettingsPage.objSearchBar, "Search Bar");
	String name=getParameterFromXML("ContactName");
	type(HipiSettingsPage.objSearchBar, name, "Search Bar");
	String typedname = getText(HipiSettingsPage.objSearchBar);
	System.out.println(typedname);
	String searchedName = getText(HipiSettingsPage.objContactName);
	System.out.println(searchedName);
	if(typedname.equals(searchedName)){
		logger.info("User able to search the contact listed in Invite Friends screen");
		extent.extentLoggerPass("Settings and Privacy", "User able to search the contact listed in Invite Friends screen");
	}else {
		logger.error("User not able to search the contact listed in Invite Friends screen");
		extent.extentLoggerFail("Settings and Privacy", "User not able to search the contact listed in Invite Friends screen");
	}
	navigateToHomePage();
}
}

public void checkIfOnTappinxIconInSearchBarSearchedItemWillDisappear_T2144(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2144 - Logged-In User - Check if on tapping x icon in Searc bar searched item will disappear_T2144");
	System.out.println("T2144");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2144");
	waitTime(3000);
	navigateToSettingsPage();
	verifyElementPresentAndClick(HipiSettingsPage.objInviteFriends, "Invite Friends");
	click(HipiSettingsPage.objInviteFriends, "Invite Friends");
	allowPermissions();
	click(HipiSettingsPage.objSearchBar, "Search Bar");
	String name=getParameterFromXML("FullNmae");
	type(HipiSettingsPage.objSearchBar, name, "Search Bar");
	String beforetaponxicon=getText(HipiSettingsPage.objSearchBar);
	System.out.println(beforetaponxicon);
	verifyElementPresentAndClick(HipiSettingsPage.objClearIcon, "x Icon");
	
	String aftertaponxicon=getText(HipiSettingsPage.objSearchBar);
//	System.out.println(aftertaponxicon);
//	if(aftertaponxicon.isEmpty())
//	{
//		System.out.println("pass");
//	}else
//	{
//		System.out.println("fail");
//	}
	if(!beforetaponxicon.equals(aftertaponxicon)){
		logger.info("Searched content disappears on tapping x icon in Search bar");
		extent.extentLoggerPass("Settings and Privacy", "Searched content disappears on tapping x icon in Search bar");
	}else {
		logger.error("Searched content not disappears on tapping x icon in Search bar");
		extent.extentLoggerFail("Settings and Privacy", "Searched content not disappears on tapping x icon in Search bar");
	}
	navigateToHomePage();
	
	
}
}

public void checkUIOfSearchBar_T2145(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2145 - Logged-In User - Check UI of Search bar_T2145");
	System.out.println("T2145");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2145");
	waitTime(3000);
	navigateToSettingsPage();
	verifyElementPresentAndClick(HipiSettingsPage.objInviteFriends, "Invite Friends");
	click(HipiSettingsPage.objInviteFriends, "Invite Friends");
	allowPermissions();
	String beforetaponxicon=getText(HipiSettingsPage.objSearchBar);
	logger.info("UI of Search Bar");
	verifyElementPresent(HipiSettingsPage.objSearchBar, "Search Bar");
	verifyElementPresent(HipiSettingsPage.objSearchContacts(beforetaponxicon), "Text");
	verifyElementPresent(HipiSettingsPage.objSearchIcon, "Search Icon");
	
	navigateToHomePage();
}
}


public void verifyIfTheCorrespondingResultRespectiveToSearchedKeywordDisplayedUnderTopMatchesBelowSearchBar_T2146(String userType) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2146 - Logged in User - Verify if the corresponding result respective to searched keyword displayed under Top Matches below Search bar_T2146");
	System.out.println("T2146");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2146");
	waitTime(3000);
	navigateToSettingsPage();
	verifyElementPresentAndClick(HipiSettingsPage.objInviteFriends, "Invite Friends");
	click(HipiSettingsPage.objInviteFriends, "Invite Friends");
	allowPermissions();
	click(HipiSettingsPage.objSearchBar, "Search Bar");
	String name=getParameterFromXML("ContactName");
	type(HipiSettingsPage.objSearchBar, name, "Search Bar");
	String typedname = getText(HipiSettingsPage.objSearchBar);
	System.out.println(typedname);
	String searchedName = getText(HipiSettingsPage.objContactName);
	System.out.println(searchedName);
	if(typedname.equals(searchedName)){
		logger.info("User able to see corresponding result respective to searched keyword displayed under Top Matches below Search bar");
		extent.extentLoggerPass("Settings and Privacy", "User able to see corresponding result respective to searched keyword displayed under Top Matches below Search bar");
	}else {
		logger.error("User not able to see corresponding result respective to searched keyword displayed under Top Matches below Search bar");
		extent.extentLoggerFail("Settings and Privacy", "User not able to see corresponding result respective to searched keyword displayed under Top Matches below Search bar");
	}
	navigateToHomePage();
}
}

public void verifyIfTheCorrespondingResultRspectiveToSearchedKeywordUsingSpecialCharacterShouldNotDisplay_T2147(String userType,String SpecialChars) throws Exception
{
if(userType.equalsIgnoreCase("NonSubscribedUser"))
{
	extent.HeaderChildNode("T2147 - Logged in User - Verify if the corresponding result respective to searched keyword using special character should  not display_T2147");
	System.out.println("T2147");
	extent.extentLogger("Settings and Privacy-Invite Friends", "T2147");
	waitTime(3000);
	navigateToSettingsPage();
	verifyElementPresentAndClick(HipiSettingsPage.objInviteFriends, "Invite Friends");
	click(HipiSettingsPage.objInviteFriends, "Invite Friends");
	allowPermissions();
	click(HipiSettingsPage.objSearchBar, "Search Bar");
	type(HipiSettingsPage.objSearchBar, SpecialChars, "Search Bar");
	if(verifyElementExist(HipiSettingsPage.objContactName, "Searched Name")){
		logger.info("User able to search for contacts using speacial characters on Invite Friends screen");
		extent.extentLoggerFail("Settings and Privacy", "User able to search for contacts using speacial characters on Invite Friends screen");
	}else {
		logger.error("User not able to search for contacts using speacial characters on Invite Friends screen");
		extent.extentLoggerPass("Settings and Privacy", "User not  able to search for contacts using speacial characters on Invite Friends screen");
	}
	navigateToHomePage();
	
}
}



public void checkUserAbleToSeeOriginalSoundWithUserNameInSoundDetailPage_T2286_T2287(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2286 - Check user able to see Original Sound with user name in sound detail page_T2286");
		System.out.println("T2286");
		extent.extentLogger("Discover-Sound Detail Page", "T2286");
	}  else if(userType.equalsIgnoreCase("NonSubscribedUser"))
		
	{
		extent.HeaderChildNode("T2287 - Check user able to see Original Sound with user name in sound detail page_T2287");
		System.out.println("T2287");
		extent.extentLogger("Discover-Sound Detail Page", "T2287");
	}
		navigateToHashtagRailVideo();
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
		waitUntilElementDisplayed(HipiDiscoverPage.objSoundTittle, 3);
		if(verifyElementPresent(HipiDiscoverPage.objSoundTittle, "Title")&&verifyElementPresent(HipiSoundDetailPage.objUserNameSoundPage, "User Name")){
			logger.info("Original Sound with user name is displayed in sound detail page from discover screen ");
			extent.extentLoggerPass("Discover-Sound Detail Page", "Original Sound with user name is displayed in sound detail page from discover screen ");
		}else {
			logger.error("Original Sound with user name is not displayed in sound detail page from discover screen ");
			extent.extentLoggerFail("Discover-Sound Detail Page", "Original Sound with user name is not displayed in sound detail page from discover screen ");
		}
		navigateToHomePage();
		
	}

public void checkUserIsAbleTOShareHisPrivateVideo_T2226(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2226 - Logged in User - Check User is able to share his private video_T2226");
		System.out.println("T2226");
		extent.extentLogger("Profile_Private-Video", "T2226");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objPrivateVideoTab, 2);
		click(HipiProfilePage.objPrivateVideoTab, "Private Tab");
		waitTime(4000);
		click(HipiProfilePage.objPrivateTabVideo, "Video");
		waitTime(4000);
		verifyElementPresentAndClick(HipiProfilePage.objPrivateTabShareButton, "Share Button");
		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
		if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(HipiHomePage.objShareButtons).size();
			if (shareOptions == 0) {
				extent.extentLoggerFail("Verify share options", "Share Options are not available");
				logger.info("Share Options are not available");
			} else {
				for (int i = 2; i <= shareOptions; i++) {
					
					String shareOptionName = getText(HipiHomePage.objShareoptions(i));
					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName + "\" is available to share");
					
					
				}
				for(int j=1;j<=5;j++)
				{
					String shareOptionName1 = getText(HipiHomePage.objShareToTitleOption(j));
					logger.info("Share Option : \"" + shareOptionName1 + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName1 + "\" is available to share");	
				}
			}
		} 
		
			else {
			
			logger.info("Share Options are not displayed after clicking on Share CTA");
			extent.extentLoggerFail("Share through options screen",
					"Share Options are not displayed after clicking on Share CTA");
		}
		
		navigateToHomePage();
		}
}



public void checkByTappingVideoThumbnailOnDraftVideosUserGetNavigatedToVideoPlayerScreen_T2337(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2337 - Logged in User - Check by tapping video tumbnail on draft videos User get navigates to video player screen_T2337");
		System.out.println("T2337");
		extent.extentLogger("Profile_Draft", "T2337");
		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo, 10);
		click(HipiProfilePage.objDraftsVideo, "Draft");
		click(HipiProfilePage.objDraftVideoThumbnail, "Video");
		if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
			logger.info("User navigated to video player screen by tapping tumbnail video on draft videos");	
			extent.extentLoggerPass("Profile_Draft", "User navigated to video player screen by tapping tumbnail video on draft videos");
		}else {
			logger.info("User not navigated to video player screen by tapping tumbnail video on draft videos");	
			extent.extentLoggerFail("Profile_Draft", "User not navigated to video player screen by tapping tumbnail video on draft videos");
		}
		
		navigateToHomePage();
		}
	}

public void checkUIOfVideoPlayerScreenByTappingOnVideoThumbnailOnDraftVideos_T2338(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2338 - Logged in User - Check UI of video player screen by tapping on video tumbnail on draft videos_T2338");
		System.out.println("T2338");
		extent.extentLogger("Profile_Draft", "T2338");
		addDraftVideoWithSound();
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo, 1);
		click(HipiProfilePage.objDraftsVideo, "Draft");
		waitTime(3000);
		click(HipiProfilePage.objDraftVideoThumbnail, "Video");
		logger.info("User able to see the following");
		verifyElementPresent(HipiHomePage.objUserName, "User Handle");
		verifyElementPresent(HipiHomePage.objHashtagButtonDescription, "Description");
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
		navigateToHomePage();
	}
}
public void addDraftVideoWithSound() throws Exception
{
verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
allowPermissions(); 
verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon");
waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton, 20);
verifyElementPresentAndClick(HipiCreateVideoPage.objSoundInVideoRecord, "Sound");
waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 4);
click(HipiCreateVideoPage.objTrandingOnHipi, "Playlists");
waitTime(5000);
click(HipiCreateVideoPage.objSoundsAnySound, "Sound");
waitTime(5000);
verifyElementPresentAndClick(HipiCreateVideoPage.objSelectMusicButton, "Select Button");
waitTime(4000);
verifyElementPresentAndClick(HipiCreateVideoPage.objNextButton, "Next Button");
waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 20);
verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription, "Description input");
String postDescription = "user"+generateRandomString(5);
type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
waitTime(3000);
hideKeyboard();
waitTime(3000);
//verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//waitTime(3000);
if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
{
	click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//	click(HipiCreateVideoPage.objDoneCTC, "Done Button");
}else {
	logger.info("User is unable to See Language Options");
	extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
	
}
verifyElementPresentAndClick(HipiCreateVideoPage.objsaveasdraft,"Save as Draft");
waitUntilElementDisplayed(HipiHomePage.objForYou, 2);
waitTime(8000);
}



public void checkUIOfVideoPlayerScreenByTappingLongPressOnIt_T2339(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in User - Check UI of video player screen by tapping long press on it_T2339");
		System.out.println("T2339");
		extent.extentLogger("Profile_Draft", "T2339");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo, 10);
		click(HipiProfilePage.objDraftsVideo, "Draft");
		click(HipiProfilePage.objDraftVideoThumbnail, "Video");
		waitTime(3000);
		longPress(HipiHomePage.objPlayerScreen);
		waitTime(3000);
		if(verifyElementPresent(HipiProfilePage.objDeleteOption,"Delete")) {
			logger.info("User able See the Delete video option");	
			extent.extentLoggerPass("Profile_Draft", "User able See the Delete video option");
		}else {
			logger.info("User is not able See the Delete video option");	
			extent.extentLoggerFail("Profile_Draft", "User is not able See the Delete video option");
		}
		
		navigateToHomePage();
}
}


public void checkUserAbleToNavigateToEditProfileScreenOnTappingEditProfileButton_T2288(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2288 - Logged-In User - Verify whether the user is able to navigate to edit profile screen on tapping Edit Profile button_T2288");
	System.out.println("T2288");
	extent.extentLogger("Profile_Profile-Edit", "T2288");
	navigateToEditProfilePage();
	if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Title")){
		logger.info("User able to navigate & land on 'Edit Profile' screen");
		extent.extentLoggerPass("Profile_Profile-Edit", "User able to navigate & land on 'Edit Profile' screen");
	}else {
		logger.error("User not able to navigate & land on 'Edit Profile' screen");
		extent.extentLoggerFail("Profile_Profile-Edit", "User not able to navigate & land on 'Edit Profile' screen");
	}
	
	navigateToHomePage();
	}
	
}
public void navigateToEditProfilePage() throws Exception
{
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 10);
	click(HipiProfilePage.objEditProfile, "Edit Profile");
}




public void verifyWhetherTheUsernameFieldIsReplacedWithUserHandleInProfileEditScreen_T2289(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2289 - Logged-In User - Verify whether the 'Username' field is replaced with 'User Handle' in profile edit screen_T2289");
	System.out.println("T2289");
	extent.extentLogger("Profile_Profile-Edit", "T2289");
	navigateToEditProfilePage();
	String Username=getText(HipiProfilePage.objUserNameText);
	if(Username.equals("Username")){
		logger.info("User able to see the field name updated to User Handle from Username");
		extent.extentLoggerPass("Profile_Profile-Edit", "User able to see the field name updated to User Handle from Username");
	}else {
		logger.error("User not able to see the field name updated to User Handle from Username");
		extent.extentLoggerFail("Profile_Profile-Edit", "User not able to see the field name updated to User Handle from Username");
	}
	
	navigateToHomePage();
	
	}
}
public void verifyTheUIOfEditprofileScreen_T2290(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2290 - Logged-In User - Verify the UI of Edit profile screen_T2290");
	System.out.println("T2290");
	extent.extentLogger("Profile_Profile-Edit", "T2290");
	navigateToEditProfilePage();
	String Name=getText(HipiProfilePage.objNameValue);
	String UserHandle=getText(HipiProfilePage.objUserNameValue);
	String Bio=getText(HipiProfilePage.objBioValue);
	logger.info("Edit profile screen UI must be as follows :");	
	verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile Header");
	verifyElementPresent(HipiProfilePage.objprofilephotoEditProfilePage, "User Uploaded Profile Image");
	verifyElementPresent(HipiProfilePage.objChangePhoto, "Change Photo");
	verifyElementPresent(HipiProfilePage.objNameText, "Name field with value printed towards right side:"+Name);
	verifyElementPresent(HipiProfilePage.objUserNameText, "User Handle field with value printed towards right side:"+UserHandle);
	verifyElementPresent(HipiProfilePage.objUserHandleUrl, "UserHandle Link");
	verifyElementPresent(HipiProfilePage.objBioText, "Bio field with value printed towards right side:"+Bio);
	navigateToHomePage();
	}
}
public void verifyTheUIOfEditprofileScreen_T2291(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2291 - Logged-In User - Verify whether the user is able to see the User handle in 'hipi.co.in/@userhandle' format_T2291");
	System.out.println("T2291");
	extent.extentLogger("Profile_Profile-Edit", "T2291");
	navigateToEditProfilePage();
	String url=getText(HipiProfilePage.objUserHandleUrl);
	if(verifyElementPresent(HipiProfilePage.objUserHandleUrl, "Url")){
		logger.info("User able to see the User Handle in: "+url+ " format");
		extent.extentLoggerPass("Profile_Profile-Edit", "User able to see the User Handle in: "+url+" format");
	}else {
		logger.error("User not able to see the User Handle in 'hipi.co.in/@userhandle' format");
		extent.extentLoggerFail("Profile_Profile-Edit", "User not able to see the User Handle in 'hipi.co.in/@userhandle' format");
	}
	navigateToHomePage();

	}
	
}
public void checkByTappingOnAnyVideoFromAllTabTheOptionShouldGetDisplayedInVideo_T2341(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2341 - Logged in User - Check by tapping on any video from All tab the option should get displayed in video_T2341");
		System.out.println("T2341");
		extent.extentLogger("Profile_All", "T2341");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objFirstVideo, 20);
		click(HipiProfilePage.objFirstVideo, "First Video");
		logger.info("User Is Able To See The Following Options On The Video Screen");
		verifyElementPresent(HipiHomePage.objProfilePicture, "Thumbnail Image");
		verifyElementPresent(HipiHomePage.objLikeICON, "Like");
		verifyElementPresent(HipiHomePage.objCommentICON, "Comment Box");
		verifyElementPresent(HipiHomePage.objShareICON, "Share");
		verifyElementPresent(HipiHomePage.objHashtagButtonDescription, "Description");
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresent(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
		navigateToHomePage();
	}
}
public void checkAddToFavoriteOptionDoesnotDisplayingWhenUserDoLongPressOnVideo_T2342(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2342 - Logged in User - Check Add to favorite option doesn't displaying when User do long press on video_T2342");
		System.out.println("T2342");
		extent.extentLogger("Profile_Draft", "T2342");
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objFirstVideo, 10);
		click(HipiProfilePage.objFirstVideo, "Video");
		waitTime(3000);
		longPress(HipiHomePage.objPlayerScreen);
		if(verifyElementExist(HipiHomePage.objAddToFavourites, "Add To Favourites")){
			logger.info("User able to see Add to Favorite option when he do long press on video from Profile tab");
			extent.extentLoggerFail("Settings and Privacy", "User able to see Add to Favorite option when he do long press on video from Profile tab");
			click(HipiHomePage.objPlayerScreen, "Screen");
		}else {
			logger.error("User not able to see Add to Favorite option when he do long press on video from Profile tab");
			extent.extentLoggerPass("Settings and Privacy", "User not able to see Add to Favorite option when he do long press on video from Profile tab");
		}
		navigateToHomePage();
	}
}


public void checkErrorMessageAreDisplayedIfVideosAreNotAvailableInSoundScreen_T2160_T2161(String userType) throws Exception 
{
	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2160 - Check error message are displayed if videos are not available in sound screen_T2160");
		System.out.println("T2160");
		extent.extentLogger("Discover-Sound Detail Page", "T2160");
	}
	 else if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2161 - Check error message are displayed if videos are not available in sound screen_T2161");
		System.out.println("T2161");
		extent.extentLogger("Discover-Sound Detail Page", "T2161");
	}
		waitTime(2000);
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover");
		click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
//		String name=getParameterFromXML("SunnyLeone");
		type(HipiDiscoverPage.objDiscoverSearchInbox, "Tune to love ", "Search Bar");
//		type(HipiDiscoverPage.objDiscoverSearchBar ,name, "Search Bar");
//		click(HipiDiscoverPage.objKeyboardSearchButton, "Search Button");
		waitTime(3000);
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
		waitTime(3000);
		click(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sounds Tab");
		click(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First Sound");
		String title=getText(HipiDiscoverPage.objErrorTitle);
		String subTitle=getText(HipiDiscoverPage.objErrorSubTitle);
		if(title.equals("No videos available")&&subTitle.equals("There are no videos available for this sound"))
		{
			logger.info("User able to see the message as:"+"\n"+"Title:"+title+"\n"+"SubTitle:"+subTitle);
			extent.extentLoggerPass("Discover-Sound Detail Page", "User able to see the message as:"+"\n"+"Title:"+title+"\n"+"SubTitle:"+subTitle);
		}else {
			logger.error("User not able to see the message ");
			extent.extentLoggerFail("Discover-Sound Detail Page", "User not able to see the message ");
		}
	
		navigateToHomePage();
	
	}

public void checkErrorMessageIsShownInHashtagDetailScreenIfNoDetailsAreAvailable_T2162_T2163(String userType,String Random) throws Exception 
{
	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2162 - Check Error Message Is Shown In Hashtag Detail Screen If No Details Are Available_T2162");
		System.out.println("T2162");
		extent.extentLogger("Discover-Sound Detail Page", "T2162");
	} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2163 - Check Error Message Is Shown In Hashtag Detail Screen If No Details Are Available_T2163");
		System.out.println("T2163");
		extent.extentLogger("Discover-Sound Detail Page", "T2163");
		waitTime(2000);
	}
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover");
		click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
		type(HipiDiscoverPage.objDiscoverSearchInbox, Random, "Search Bar");
		click(HipiDiscoverPage.objSearchResult, "Search Result");
		click(HipiDiscoverPage.objHashtagsTab, "Hashtag");
		verifyElementPresentAndClick(HipiDiscoverPage.objHashhtagsIteratable(1), "First Hashtag");
		String title=getText(HipiDiscoverPage.objErrorTitle);
		String subTitle=getText(HipiDiscoverPage.objErrorSubTitle);
		if(title.equals("Details not available")&&subTitle.equals("There are no details available for this hashtag"))
		{
			logger.info("User able to see the message as:"+"\n"+"Title:"+title+"\n"+"SubTitle:"+subTitle);
			extent.extentLoggerPass("Discover-Sound Detail Page", "User able to see the message as:"+"\n"+"Title:"+title+"\n"+"SubTitle:"+subTitle);
		}else {
			logger.error("User not able to see the message ");
			extent.extentLoggerFail("Discover-Sound Detail Page", "User not able to see the message ");
		}
		navigateToHomePage();
		}

public void checkUIOfThePostVideoScreenByTappingOnVideoDescriptionOfSavedDraftVideo_T2246(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2246 - Logged in User - Check UI of the Post video screen by tapping on video discription of saved draft video_T2246");
		System.out.println("T2246");
		extent.extentLogger("Draft_Post video screen", "T2246");
		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objDraftsVideo, 10);
		click(HipiProfilePage.objDraftsVideo, "Draft");
		click(HipiProfilePage.objDraftsPageVideo, "Video Description");
		waitTime(3000);
		hideKeyboard();
		logger.info("User Sees The Following");
		verifyElementPresent(HipiCreateVideoPage.objPostScreenEditButton, "Edit CTA");
		verifyElementPresent(HipiCreateVideoPage.objPostDescription, "Description");
		verifyElementPresent(HipiCreateVideoPage.objPostscreenHashtag, "#HashTag");
		verifyElementPresent(HipiCreateVideoPage.objPostScreenFriendsBotton, "@Friends");
		verifyElementPresent(HipiCreateVideoPage.objPostscreenWhoCanViewThisVideo, "Who can view this video");
		verifyElementPresent(HipiCreateVideoPage.objPostScreenComments, "Allow Comments");
		verifyElementPresent(HipiCreateVideoPage.objPostScreenLikes, "Allow Likes");
		verifyElementPresent(HipiCreateVideoPage.objPostScreenAllowduet, "Allow Duet");
		verifyElementPresent(HipiCreateVideoPage.objPostScreenSaveToDevice, "Save to device");
		verifyElementPresent(HipiCreateVideoPage.objSaveasDraft, "Save as Draft");
		verifyElementPresent(HipiCreateVideoPage.objpostbtn, "Post");
		verifyElementPresent(HipiCreateVideoPage.objbackarrow, "Back Button");
		discardPopup();	
	}
}

public void checkIfUserIsAbleToAddLinkVideoDescription_T2132(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in User - Check if user is able to add link in video description_T2132");
		System.out.println("T2132");
		extent.extentLogger("Draft_Post video screen", "T2132");
		String link="https://z5.app/kcMjL9ph";
		waitTime(3000);
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions(); 
		verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 20);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditNextBtn,"Next button");
		waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 20);
		String addlink = link;
		type(HipiCreateVideoPage.objPostDescription, addlink, "Description");
		hideKeyboard();
		waitTime(3000);
//		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			click(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		
		verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
		waitTime(5000);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
		click(AMDHomePage.objProfileIcon,"profile icon");
		waitTime(3000);
		for (int i = 0; i <= 50; i++) {
			if (verifyIsElementDisplayed(AMDHipi.objPublishingInProcess)) {
				Thread.sleep(2000);
				Back(1);
				Thread.sleep(2000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile icon");
			} else {
				click(HipiCreateVideoPage.objselectfirstVideo, "First video");
				verifyElementExist(HipiCreateVideoPage.objSelectVideo(addlink), "Video");
				waitTime(5000);
				break;
			}
			String desc=getText(HipiHomePage.objHashtagButtonDescription);
			System.out.println(desc);
			if(addlink.equals(desc)){
				logger.info("User able to add link in video description");
				extent.extentLoggerFail("Draft_Post video screen", "User able to add link in video description");
				
			}else {
				logger.error("User not able to add link in video description");
				extent.extentLoggerPass("Draft_Post video screen", "User not able to add link in video description");
			}
		}
		navigateToHomePage();
	}
}

public void checkIfTheSignUpOptionIsShownCompletelyOnLoginScreen_T2169(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2169 - Logged in User - Check if the login-sign-up option is shown completely on login screen_T2169");
		System.out.println("T2169");
		extent.extentLogger("Login-SignUp", "T2169");
		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		String signup=getText(HipiLoginPage.objSignUpLink);
		if(signup.equals("Sign up")){
			logger.info("User able to view the signup option even without scrolling");
			extent.extentLoggerPass("Login-SignUp", "User able to view the signup option even without scrolling");
		}else {
			logger.error("User not able to view the signup option even without scrolling");
			extent.extentLoggerFail("Login-SignUp", "User not able to view the signup option even without scrolling");
		}
		
		navigateToHomePage();
		
	

	}
}
public void checkUserAbleToSeeTheLocalTabInSoundScreenPage_T2209(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2209 - Logged in user - Check user able to see the local tab in sound screen page_T2209");
		System.out.println("T2209");
		extent.extentLogger("Creator_Sound-Lab", "T2209");
		waitTime(2000);
		navigateToLocalTabInSounds();
		waitUntilElementDisplayed(HipiCreateVideoPage.objLocalTab, 10);
		if(verifyElementExist(HipiCreateVideoPage.objLocalTab, "Local Tab")){
			logger.info("User sees the local tab in sound screen");
			extent.extentLoggerPass("Creator_Sound-Lab", "User sees the local tab in sound screen");
			
		}else {
			logger.error("User not sees the local tab in sound screen");
			extent.extentLoggerFail("Creator_Sound-Lab", "User not sees the local tab in sound screen");
		}
		navigateToHomePage();
		
	}
	
}
public void navigateToLocalTabInSounds() throws Exception
{
	verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon, "Create Icon");
	allowPermissions();
	click(HipiCreateVideoPage.objSoundIcon, "Sounds");
}

public void checkDeviceInternalSoundsArePresentInLocalTab_T2210(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2210 - Logged in user - Check device internal sounds are present in local tab_T2210");
		System.out.println("T2210");
		extent.extentLogger("Creator_Sound-Lab", "T2210");
		waitTime(2000);
		navigateToLocalTabInSounds();
		waitUntilElementDisplayed(HipiCreateVideoPage.objLocalTab, 10);
		verifyElementPresentAndClick(HipiCreateVideoPage.objLocalTab, "Local Tab");
		
		if(verifyElementExist(HipiCreateVideoPage.objSoundsAnySound, "Sounds")){
			logger.info("User able to see all internal sound of device should be presentin local tab of sound screen");
			extent.extentLoggerPass("Creator_Sound-Lab", "User able to see all internal sound of device should be presentin local tab of sound screen");
			
		}else {
			logger.error("User not able to see all internal sound of device should be presentin local tab of sound screen");
			extent.extentLoggerFail("Creator_Sound-Lab", "User not able to see all internal sound of device should be presentin local tab of sound screen");
		}
		navigateToHomePage();
	}
}


public void verifyWhetherUserIsAbleToSearchForSoundUsingSoundName_T2251(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2251 - Logged in user - Verify whether user is able to search for sound using sound name_T2251");
		System.out.println("T2251");
		extent.extentLogger("Create-Video_Sound-Details", "T2251");
		waitTime(2000);
		navigateToSoundScreenInCreatorPage();
		click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound search Text Field");
		waitTime(3000);
		String songName="Jaan Ban Gaye";
		type(HipiCreateVideoPage.objSoundScreenSearchField,songName, "Sound TextField");
		String typedName = getText(HipiCreateVideoPage.objSoundSearchInput);
		waitTime(3000);
		String SuggestedName = getText(HipiCreateVideoPage.objSoundFirstSuggestedText);
		if(SuggestedName.contains(typedName)){
			logger.info("User able to see the sound listing based on the search using sound name");
			extent.extentLoggerPass("Create-Video_Sound-Details", "User able to see the sound listing based on the search using sound name");
			
		}else {
			logger.error("User not able to see the sound listing based on the search using sound name");
			extent.extentLoggerFail("Create-Video_Sound-Details", "User not able to see the sound listing based on the search using sound name");
		}
		discardPopup();

	}
}
public void verifyWhetherUserIsAbleToSearchForSoundUsinArtistName_T2252(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2252 - Logged in user - Verify whether user is able to search for sound using artist name_T2252");
		System.out.println("T2252");
		extent.extentLogger("Create-Video_Sound-Details", "T2252");
		waitTime(2000);
		navigateToSoundScreenInCreatorPage();
		click(HipiCreateVideoPage.objSoundScreenSearchField, "Sound search Text Field");
		String artistName=getParameterFromXML("SearchArtistName");
		type(HipiCreateVideoPage.objSoundScreenSearchField,artistName, "Sound TextField");
		String typedName = getText(HipiCreateVideoPage.objSoundSearchInput);
		waitTime(3000);
		String SuggestedName = getText(HipiCreateVideoPage.objSoundFirstSuggestedText);
		if(SuggestedName.contains(typedName)){
			logger.info("User able to see the sound listing based on the search using artist name");
			extent.extentLoggerPass("Create-Video_Sound-Details", "User able to see the sound listing based on the search using artist name");
			
		}else {
			logger.error("User not able to see the sound listing based on the search using artist name");
			extent.extentLoggerFail("Create-Video_Sound-Details", "User not able to see the sound listing based on the search using artist name");
		}
		discardPopup();
		
		
	}
}


public void verifyTheUIOfSoundScreenSearchBar_T2250(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2250 - Logged in user - Verify the UI of sound screen's search bar_T2250");
		System.out.println("T2250");
		extent.extentLogger("Create-Video_Sound-Details", "T2250");
		waitTime(2000);
		navigateToSoundScreenInCreatorPage();
//		
		String text=getText(HipiCreateVideoPage.objSoundScreenSearchField);
		if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchField, "Sound Search Field")) {
			logger.info("User is able to see the search bar on sound screen ");
			extent.extentLoggerPass("", "User is able to see the search bar on sound screen ");
		}else {
			logger.info("User is able to see the search bar on sound screen ");
			extent.extentLoggerFail("", "User is able to see the search bar on sound screen "); 
		}
		if(verifyElementPresent(HipiCreateVideoPage.objSoundScreenSearchIcon, "Sound Search Icon")) {
			logger.info("User is able to see the search Icon on sound screen ");
			extent.extentLoggerPass("", "User is able to see the search Icon on sound screen ");
		}else {
			logger.info("User is able to see the search Icon on sound screen ");
			extent.extentLoggerFail("", "User is able to see the search Icon on sound screen "); 
		}
		if(text.equals("Search for sounds, playlists and dialogues....")) {
			logger.info("User is able to see the search Text on sound screen ");
			extent.extentLoggerPass("", "User is able to see the search Text on sound screen ");
		}else {
			logger.info("User is able to see the search Text on sound screen ");
			extent.extentLoggerFail("", "User is able to see the search Text on sound screen "); 
		}
		discardPopup();
		
	}
}

public void verifyIfUserIsAbleTOObserveTheBookmarkSymbolAgainstEachSound_T2264(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2264 - Logged in user - Verify if user is able to observe the bookmark symbol against each sound_T2264");
		System.out.println("T2264");
		extent.extentLogger("Create-Video_Sound-Details", "T2264");
		waitTime(2000);
		navigateToSoundScreenInCreatorPage();
		waitTime(3000);
		click(HipiCreateVideoPage.objTrandingOnHipi, "Categories");
		waitTime(2000);
		if(verifyElementPresentAndClick(HipiCreateVideoPage.objBookmarkSymbol, "BookMark Symbol")) {
			logger.info("Bookmark symbol shown for all sounds in sound screen");
	    	extent.extentLoggerPass("", "Bookmark symbol shown for all sounds in sound screen");
	    }else {
	    	logger.info("Bookmark symbol not shown for all sounds in sound screen");
	    	extent.extentLoggerFail("", "Bookmark symbol not shown for all sounds in sound screen"); 
	}
		
		discardPopup();
	}
}
public void verifyWhetherUserIsAbleToTapOnUseThisSoundCta_T2268(String userType) throws Exception
{
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("Logged in user - Verify whether user is able to Tap on 'Use this sound' CTA_T2268");
		System.out.println("T2268");
		extent.extentLogger("Create-Video_Sound-Details", "T2268");
		waitTime(2000);
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		String soundname = getText(HipiHomePage.objMusicButtonBelowLeftSide);
		System.out.println(soundname);
		
//		String[] expect = soundname.split("• ");
//			System.out.println(expect[0]);
//			String Name=expect[0];
//			 String kk = Name.trim();
//			 
////			int value=Name.length();
//			System.out.println(expect[1]);
//			for(int i=1;i<n;i++)
//			{
//			if (expect[1].equals("Original Sound")) {
//				verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
//				break;
//				}else {
//					Swipe("UP", 1);
//					
//				}
//			}
//		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
		
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Music Button Below Left Side");
		waitTime(3000);
		verifyElementPresentAndClick(HipiSoundDetailPage.objUseThisSoundBtn, "Use This sound");
		waitTime(3000);
		allowPermissions();
		waitTime(4000);
		String soundname1 = getText(HipiCreateVideoPage.objSelectedMusic);
		System.out.println(soundname1);
		
		
		
		if(soundname.contains(soundname1))
//		if(verifyElementPresent(HipiHomePage.objVerifySound(Name),Name))
		{
			logger.info("User able to navigate to video creation screen with the selected sound displaying on screen");
    	extent.extentLoggerPass("", "User able to navigate to video creation screen with the selected sound displaying on screen");
    }else {
    	logger.info("User not able to navigate to video creation screen with the selected sound displaying on screen");
    	extent.extentLoggerFail("", "User not able to navigate to video creation screen with the selected sound displaying on screen"); 
}
		discardPopup();
	}
}



//=====================================New TCs 21-04-2022============================================================

public void clickOnShopButtonInDiscoverPage() throws Exception {

	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
	waitTime(4000);
	verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "Arrow Button");
	for(int i=0;i<=10;i++)
	{
		if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
		{
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
			break;
		}else
		{
			Swipe("UP", 2);
		}
	}
	waitTime(3000);
		if(verifyElementPresent(HipiHomePage.objPlayerScreen,"Player Screen")) {
		logger.info("user is able to see shoppable videos on For You section");	
		extent.extentLoggerPass("Shoppable Vidoes", "user is able to see shoppable videos on For You section");
	}else {
		logger.info("user is not able to see shoppable videos on For You section");	
		extent.extentLoggerFail("Shoppable Vidoes", "user is not able to see shoppable videos on For You section");
	}
	
	
}

public void closeMiniPlayer(String userType) throws Exception {
	
	verifyElementPresentAndClick(HipiShopPage.objcloseIconMiniPlayer, "Close Icon");
	if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
		logger.info("Mini player is appeared from the shop page");	
		extent.extentLoggerFail("Shop page > Mini player", "Mini player is get disappeared from the shop page");
	}else {
		logger.info("Mini player is disappeared from the shop page");	
		extent.extentLoggerPass("", "Mini player is disappeared from the shop page");	
	}
	
	
	
}
public void verifyMiniPlayer() throws Exception {

	if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
		logger.info(" Mini player is appears on bottom right side of the shop page.");	
		extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
	}else {
		logger.info(" Mini player is not appears on bottom right side of the shop page.");	
		extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
	}
}
public void miniPlayerByClickingCorouselSheet__T2387__T2394(String userType) throws Exception {

	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2387 - Guest User -Verify the Mini Player by clicking corousel sheet");
		System.out.println("T2387");
		extent.extentLogger("", "T2387");
	}else {
		extent.HeaderChildNode("T2394 - Logged-In User -Verify the Mini Player by clicking corousel sheet");
		System.out.println("T2394");
		extent.extentLogger("", "T2394");
	}
		clickOnShopButtonInDiscoverPage();
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(2000);
		verifyMiniPlayer();
		navigateToHomePage();

	}


	public void closingMiniPlayerBehaviour__T2388__T2395(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2388 - Guest User- Verify the closing Mini Player behaviour");
			System.out.println("T2388");
			extent.extentLogger("", "T2388");	
		}else {
			extent.HeaderChildNode("T2395 - Logged-In User- Verify the closing Mini Player behaviour");
			System.out.println("T2395");
			extent.extentLogger("", "T2395");
		}
			clickOnShopButtonInDiscoverPage();
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
			waitTime(2000);
			verifyMiniPlayer();
			closeMiniPlayer(userType);
		navigateToHomePage();
		}
		
	
	public void CloseTheShopBar() {
		WebElement shopPullbar=getDriver().findElement(HipiShopPage.objPullBarInShopPage);
		
		Dimension size = getDriver().manage().window().getSize();
		System.out.println("size"+size);
		int startx =  size.width/2;
		int starty= (int)(size.height*0.8);
		System.out.println("x  "+startx);
		System.out.println("y  "+starty);
		SwipeAnElementiOS(shopPullbar, startx, starty);
	}
	
public void shopPageBySwipeTheDownTheBottomUpSheet__T2390__T2397(String userType) throws Exception {
	
	
	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("Guest User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
		System.out.println("T2390");
		extent.extentLogger("", "T2390");	
	}else {	
		extent.HeaderChildNode("Logged-In User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
		System.out.println("T2397");
		extent.extentLogger("", "T2397");	
	}	
		clickOnShopButtonInDiscoverPage();
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(2000);
		verifyMiniPlayer();
		waitTime(4000);
		CloseTheShopBar();
		if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
			logger.info("Mini player get dismissed and user is navigated back to last screen with full video player.");	
			extent.extentLoggerFail("Shop page > Mini player", "Mini player get dismissed and user is navigated back to last screen with full video player.");
		}else {
			logger.info("Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
			extent.extentLoggerPass("", "Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
		}
		navigateToHomePage(); 		
	
		
		
	}

		public void closingTheProductThirdPartySite__T2391__T2398(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2391 - Guest User -Verify for after closing the product third party site will Mini player still playing on shop page");
				System.out.println("T2391");
				extent.extentLogger("", "T2391");	
			}else {	
				extent.HeaderChildNode("T2398 - Logged-In User -Verify for after closing the product third party site will Mini player still playing on shop page");
				System.out.println("T2398");
				extent.extentLogger("", "T2398");	
			}	
			clickOnShopButtonInDiscoverPage();
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product carousal Image");
			waitTime(3000);
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			waitTime(5000);
//			Back(1);
			verifyProductWebsiteAndOpenHipiInappBrowser();
			verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
			
			if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
				logger.info(" Mini player is appears on bottom right side of the shop page.");	
				extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
			}else {
				logger.info(" Mini player is not appears on bottom right side of the shop page.");	
				extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
			}
			
			navigateToHomePage();
		}



		public void verifyProductWebsiteAndOpenHipiInappBrowser() throws Exception {
			
			
			if(verifyElementPresent(HipiShopPage.objProductWebsitePage, "Product Web site Page")) {
				logger.info("User is redirect to product  website ");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website ");
				
			}else {
				logger.info("User is not redirect to product  website ");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website ");	
			}
			
			if(verifyElementPresent(HipiShopPage.objCloseButtonThirdPartySite, "Close Button Third Party Site")){
				logger.info("User is redirect to product  website and it gets open in Hipi inapp browser");	
				extent.extentLoggerPass("Shop >In app Browser", "User is redirect to product  website and it gets open in Hipi inapp browser");
			}else {
				logger.info("User is not redirect to product  website and it gets not open in Hipi inapp browser");	
				extent.extentLoggerFail("Shop >In app Browser", "User is not redirect to product  website and it gets not open in Hipi inapp browser");	
			}
		}
	
		
		
		public void  miniPlayerOnSaveMomentTab__T2392__T2399(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2392 - Guest User-Verify for Mini player on Save Moment tab");
				System.out.println("T2392");
				extent.extentLogger("", "T2392");	
			}else {	
				extent.HeaderChildNode("T2399 - Logged-In User-Verify for Mini player on Save Moment tab");
				System.out.println("T2399");
				extent.extentLogger("", "T2399");	
			}	
			clickOnShopButtonInDiscoverPage();
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
			waitTime(3000);
			click(HipiShopPage.objSavedMomentTab, "WISHLIST");
			waitTime(3000);
			verifyMiniPlayer();
			navigateToHomePage();
		}
		
		
		
		
		public void miniPlayerContinuesToPlaySwitchedBetweenINTHISVIDEOAndSAVEDMOMENTSTab__T2393__T2400(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2393 - Guest User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
				System.out.println("T2393");
				extent.extentLogger("", "T2393");	
			}else {	
				extent.HeaderChildNode("T2400 - Logged-In User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
				System.out.println("T2400");
				extent.extentLogger("", "T2400");	
			}	
			clickOnShopButtonInDiscoverPage();
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
			waitTime(3000);
			verifyMiniPlayer();
			click(HipiShopPage.objSavedMomentTab, "WISHLIST");
			verifyMiniPlayer();
			verifyElementPresentAndClick(AMDShopPage.objInThisVideo,"In This Video option");
			verifyMiniPlayer();
			navigateToHomePage();

		} 
		
	
		public void miniPlayerByClickingCorouselSheetSound__T2401__T2408(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2401 - Guest User -Verify the Mini Player by clicking corousel sheet");
				System.out.println("T2401");
				extent.extentLogger("", "T2401");	
			}else {	
				extent.HeaderChildNode("T2408 - Logged-In User -Verify the Mini Player by clicking corousel sheet");
				System.out.println("T2408");
				extent.extentLogger("", "T2408");	
			}	
			navigateToShopPageThrowSound();
	
			verifyMiniPlayer();
			navigateToHomePage();
		}
	
		
		public void navigateToShopPageThrowSound() throws Exception {
			
			for(int i=0;i<=10;i++)
			{
				if (verifyElementDisplayed(HipiHomePage.objShopButton)) {
					logger.info("user is able to see Shop button");
					extent.extentLoggerPass("", "user is able to see Shop button");
			
				}else {
					SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
				}
				
				verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound");
				waitUntilElementDisplayed(HipiDiscoverPage.objSoundTittle, 3);
				if(verifyElementPresent(HipiDiscoverPage.objSoundTittle, "Title")){
					logger.info("Original Sound with user name is displayed in sound detail page from discover screen ");
					extent.extentLoggerPass("Discover-Sound Detail Page", "Original Sound with user name is displayed in sound detail page from discover screen ");
				}else {
					logger.error("Original Sound with user name is not displayed in sound detail page from discover screen ");
					extent.extentLoggerFail("Discover-Sound Detail Page", "Original Sound with user name is not displayed in sound detail page from discover screen ");
				}

				if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
				{
					verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
//					break;
				}else
				{
					Back(1);
					Swipe("UP", 1);
				}
				waitUntilElementDisplayed(HipiHomePage.objProductImage, 3);
				verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
				waitTime(5000);
				if(verifyElementDisplayed(HipiShopPage.objcloseIconMiniPlayer)){
					logger.error("User is able to navigate to shop page ");
					extent.extentLoggerPass("", "User is able to navigate to shop page ");
					break;
				}else 
				{
					logger.error("User unable to navigate to shop page ");
					extent.extentLoggerPass("", "User unable to navigate to shop page ");
					Back(3);
					Swipe("UP", 1);
				}
			}
			
		}
		
		
		
		public void closingMiniPlayerBehaviourSound__T2402__T2409(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2402 - Guest User- Verify the closing Mini Player behaviour");
				System.out.println("T2402");
				extent.extentLogger("", "T2402");	
			}else {	
				extent.HeaderChildNode("T2409 - Logged-In User- Verify the closing Mini Player behaviour");
				System.out.println("T2409");
				extent.extentLogger("", "T2409");	
			}	
			navigateToShopPageThrowSound();
			verifyMiniPlayer();
			closeMiniPlayer(userType);
			navigateToHomePage();
		
		}
		
		
		
		public void behaviorOfMiniPlayerWhenUserCloses__T2404__T2411(String userType) throws Exception {
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("Guest User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
				System.out.println("T2404");
				extent.extentLogger("", "T2404");	
			}else {	
				extent.HeaderChildNode("Logged-In User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
				System.out.println("T2411");
				extent.extentLogger("", "T2411");	
			}	
			
			navigateToShopPageThrowSound();
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
			waitTime(3000);
			verifyMiniPlayer();
			waitTime(3000);
			CloseTheShopBar();
			if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
				logger.info("Mini player get dismissed and user is navigated back to last screen with full video player.");	
				extent.extentLoggerFail("Shop page > Mini player", "Mini player get dismissed and user is navigated back to last screen with full video player.");
			}else {
				logger.info("Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
				extent.extentLoggerPass("", "Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
			}
			navigateToHomePage(); 		
			
			
			
		}
		
		public void  closinTheProductThirdPartySite__T2405__T2412(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2405 - Guest User -Verify for after closing the product third party site will Mini player still playing on shop page");
				System.out.println("T2405");
				extent.extentLogger("", "T2405");	
			}else {	
				extent.HeaderChildNode("T2412 - Logged-In User -Verify for after closing the product third party site will Mini player still playing on shop page");
				System.out.println("T2412");
				extent.extentLogger("", "T2412");	
			}	
			navigateToShopPageThrowSound();
			verifyMiniPlayer();
			waitTime(3000);
			verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
			verifyProductWebsiteAndOpenHipiInappBrowser();
			verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
			
			if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
				logger.info(" Mini player is appears on bottom right side of the shop page.");	
				extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
			}else {
				logger.info(" Mini player is not appears on bottom right side of the shop page.");	
				extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
			}
			
			navigateToHomePage();
			
		}
		
		
		
		public void  miniPlayerOnSaveMomentTabSound__T2406__T2413(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest"))
			{
				extent.HeaderChildNode("T2406 - Guest User-Verify for Mini player on Save Moment tab");
				System.out.println("T2406");
				extent.extentLogger("", "T2406");	
			}else {	
				extent.HeaderChildNode("T2413 - Logged-In User-Verify for Mini player on Save Moment tab");
				System.out.println("T2413");
				extent.extentLogger("", "T2413");	
			}	
			navigateToShopPageThrowSound();
			click(HipiShopPage.objSavedMomentTab, "WISHLIST");
			waitTime(3000);
			verifyMiniPlayer();
			verifyElementPresentAndClick(AMDShopPage.objInThisVideo,"In This Video option");
			verifyMiniPlayer();
			navigateToHomePage();
		}
		
		
	public void  switchedBetweenINTHISVIDEOAndSAVEDMOMENTSTabAndViceVersa__T2407__T2414(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2407 - Guest User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2407");
			extent.extentLogger("", "T2407");	
		}else {	
			extent.HeaderChildNode("T2414 - Logged-In User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2414");
			extent.extentLogger("", "T2414");	
		}	
		navigateToShopPageThrowSound();
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
	}	
		
		
	public void navigateToShopPageThroughHashtag() throws Exception {
		for(int i=0;i<=10;i++)
		{
		clickOnHashTag();
		if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon))
		{
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
//			break;
		}else
		{
			Back(1);
			Swipe("UP", 1);
		}
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 3);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(5000);
		if(verifyElementDisplayed(HipiShopPage.objcloseIconMiniPlayer)){
			logger.error("User is able to navigate to shop page ");
			extent.extentLoggerPass("", "User is able to navigate to shop page ");
			break;
		}else 
		{
			logger.error("User unable to navigate to shop page ");
			extent.extentLoggerPass("", "User unable to navigate to shop page ");
			Back(3);
			Swipe("UP", 1);
		}
	}
	}
	public void	checkUserViewMiniPlayerByClickingOnCoroselSheet_T2415__T2422(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("T2415 - Guest User -Verify the Mini Player by clicking corousel sheet");
		System.out.println("T2415");
		extent.extentLogger("", "T2415");	
	}else {	
		extent.HeaderChildNode("T2422 - Logged-In User -Verify the Mini Player by clicking corousel sheet");
		System.out.println("T2422");
		extent.extentLogger("", "T2422");	
	}	
			navigateToShopPageThroughHashtag();
			
			verifyMiniPlayer();
			navigateToHomePage();
		}
	
	
	
	public void  closingMiniPlayerBehaviourHashtag__T2416__T2423(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2416 - Guest User- Verify the closing Mini Player behaviour");
			System.out.println("T2416");
			extent.extentLogger("", "T2416");	
		}else {	
			extent.HeaderChildNode("T2423 - Logged-In User- Verify the closing Mini Player behaviour");
			System.out.println("T2423");
			extent.extentLogger("", "T2423");	
		}	
		
		navigateToShopPageThroughHashtag();
	
		closeMiniPlayer(userType);
		navigateToHomePage();
	}
	
	public void  behaviorOfMiniPlayerWhenUserClosesTheShopPage__T2418__T2425(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
			System.out.println("T2418");
			extent.extentLogger("", "T2418");	
		}else {	
			extent.HeaderChildNode("Logged-In User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
			System.out.println("T2425");
			extent.extentLogger("", "T2425");	
		}	
		
		navigateToShopPageThroughHashtag();
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image");
		waitTime(1000);
		CloseTheShopBar();
		if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
			logger.info("Mini player get dismissed and user is navigated back to last screen with full video player.");	
			extent.extentLoggerFail("Shop page > Mini player", "Mini player get dismissed and user is navigated back to last screen with full video player.");
		}else {
			logger.info("Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
			extent.extentLoggerPass("", "Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
		}
		navigateToHomePage(); 				
	}
	
	
	
	public void closingTheProductThirdPartySiteHashtag__T2419__T2426(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2419 - Guest User -Verify for after closing the product third party site will Mini player still playing on shop page");
			System.out.println("T2419");
			extent.extentLogger("", "T2419");	
		}else {	
			extent.HeaderChildNode("T2426 - Logged-In User -Verify for after closing the product third party site will Mini player still playing on shop page");
			System.out.println("T2426");
			extent.extentLogger("", "T2426");	
		}	
		navigateToShopPageThroughHashtag();
		
		verifyMiniPlayer();
		waitTime(3000);
		verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
		verifyProductWebsiteAndOpenHipiInappBrowser();
		verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
		waitTime(3000);
		if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
			logger.info(" Mini player is appears on bottom right side of the shop page.");	
			extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
		}else {
			logger.info(" Mini player is not appears on bottom right side of the shop page.");	
			extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
		}
		navigateToHomePage(); 	
	}
	
	public void miniPlayerOnSaveMomentTabHashtag__T2420__T2427(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2420 - Guest User-Verify for Mini player on Save Moment tab");
			System.out.println("T2420");
			extent.extentLogger("", "T2420");	
		}else {	
			extent.HeaderChildNode("T2427 - Logged-In User-Verify for Mini player on Save Moment tab");
			System.out.println("T2427");
			extent.extentLogger("", "T2427");	
		}	
		
		navigateToShopPageThroughHashtag();
		
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		waitTime(3000);
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
	}
	
	public void switchedBetweenINTHISVIDEOAndSAVEDMOMENTSTabAndViceVersaHashtag__T2421__T2428(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2421 - Guest User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2421");
			extent.extentLogger("", "T2421");	
		}else {	
			extent.HeaderChildNode("T2428 - Logged-In User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2428");
			extent.extentLogger("", "T2428");	
		}	
		navigateToShopPageThroughHashtag();
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		waitTime(3000);
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
	}
	
	
	
	public void miniPlayerByClickingCorouselSheetEffect__T2429__T2436(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify the Mini Player by clicking corousel sheet");
			System.out.println("T2429");
			extent.extentLogger("", "T2429");	
		}else {	
			extent.HeaderChildNode("Logged-In User -Verify the Mini Player by clicking corousel sheet");
			System.out.println("T2436");
			extent.extentLogger("", "T2436");	
		}	
		navigateToEffectScreen(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		navigateToHomePage();
	
	}
	
	
	
	public void closingMiniPlayerBehaviourEffect__T2430__T2437(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify the closing Mini Player behaviour");
			System.out.println("T2430");
			extent.extentLogger("", "T2430");	
		}else {	
			extent.HeaderChildNode("Logged-In User- Verify the closing Mini Player behaviour");
			System.out.println("T2437");
			extent.extentLogger("", "T2437");	
		}	
		navigateToEffectScreen(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		closeMiniPlayer(userType);
		navigateToHomePage();
		
	}
	
	
	
	public void miniPlayerWhenUserClosesTheShopPageBySwipeTheDownEffect__T2432__T2439(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
			System.out.println("T2432");
			extent.extentLogger("", "T2432");	
		}else {	
			extent.HeaderChildNode("Logged-In User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
			System.out.println("T2439");
			extent.extentLogger("", "T2439");	
		}	
		navigateToEffectScreen(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		CloseTheShopBar();
		if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
			logger.info("Mini player get dismissed and user is navigated back to last screen with full video player.");	
			extent.extentLoggerFail("Shop page > Mini player", "Mini player get dismissed and user is navigated back to last screen with full video player.");
		}else {
			logger.info("Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
			extent.extentLoggerPass("", "Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
		}
		navigateToHomePage(); 	
	
	}
	
	
	public void closingTheProductThirdPartySiteWillMiniPlayerEffect__T2433__T2440(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify for after closing the product third party site will Mini player still playing on shop page");
			System.out.println("T2433");
			extent.extentLogger("", "T2433");	
		}else {	
			extent.HeaderChildNode("Logged-In User -Verify for after closing the product third party site will Mini player still playing on shop page");
			System.out.println("T2440");
			extent.extentLogger("", "T2440");	
		}	
		navigateToEffectScreen(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		waitTime(3000);
		verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
		verifyProductWebsiteAndOpenHipiInappBrowser();
		verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
		waitTime(3000);
		if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
			logger.info(" Mini player is appears on bottom right side of the shop page.");	
			extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
		}else {
			logger.info(" Mini player is not appears on bottom right side of the shop page.");	
			extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
		}
		navigateToHomePage(); 
	} 
	
	
	
	public void miniPlayerOnSaveMomentTabEffect__T2434__T2441(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for Mini player on Save Moment tab");
			System.out.println("T2434");
			extent.extentLogger("", "T2434");	
		}else {	
			extent.HeaderChildNode("Logged-In User-Verify for Mini player on Save Moment tab");
			System.out.println("T2441");
			extent.extentLogger("", "T2441");	
		}	
		navigateToEffectScreen(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		waitTime(3000);
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
	}
	
	
	
	public void switchedBetweenINTHISVIDEOAndSAVEDMOMENTSTabAndViceVersaEffect__T2435__T2442(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2435");
			extent.extentLogger("", "T2435");	
		}else {	
			extent.HeaderChildNode("Logged-In User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2442");
			extent.extentLogger("", "T2442");	
		}	
		navigateToEffectScreen(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		waitTime(3000);
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
	}
	
	
	public void miniPlayerByClickingCorouselSheetFilter__T2443__T2450(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify the Mini Player by clicking corousel sheet");
			System.out.println("T2443");
			extent.extentLogger("", "T2443");	
		}else {	
			extent.HeaderChildNode("Logged-In User -Verify the Mini Player by clicking corousel sheet");
			System.out.println("T2450");
			extent.extentLogger("", "T2450");	
		}	
		navigateToFeedFilters(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		navigateToHomePage();
	}
	
	
	public void closingMiniPlayerBehaviourFilter__T2444__T2451(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User- Verify the closing Mini Player behaviour");
			System.out.println("T2444");
			extent.extentLogger("", "T2444");	
		}else {	
			extent.HeaderChildNode("Logged-In User- Verify the closing Mini Player behaviour");
			System.out.println("T2451");
			extent.extentLogger("", "T2451");	
		}	
		
		navigateToFeedFilters(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		closeMiniPlayer(userType);
		navigateToHomePage();
	}
	
	
	public void  closesTheShopPageBySwipeDownBottomUpSheet__T2446__T2453(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
			System.out.println("T2446");
			extent.extentLogger("", "T2446");	
		}else {	
			extent.HeaderChildNode("Logged-In User-Verify for behavior of mini player when user closes the shop page by swipe the down the bottom up sheet.");
			System.out.println("T2453");
			extent.extentLogger("", "T2453");	
		}	
		
		navigateToFeedFilters(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		CloseTheShopBar();
		if(verifyElementExist(HipiShopPage.objcloseIconMiniPlayer, "Close Icon")){
			logger.info("Mini player get dismissed and user is navigated back to last screen with full video player.");	
			extent.extentLoggerFail("Shop page > Mini player", "Mini player get dismissed and user is navigated back to last screen with full video player.");
		}else {
			logger.info("Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
			extent.extentLoggerPass("", "Mini player not get dismissed and user is not navigated back to last screen with full video player.");	
		}
		navigateToHomePage(); 	
	
		
	}
	
	
	public void thirdPartySiteWillMiniPlayerStillPlayingOnShopPage__T2447__T2454(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User -Verify for after closing the product third party site will Mini player still playing on shop page");
			System.out.println("T2447");
			extent.extentLogger("", "T2447");	
		}else {	
			extent.HeaderChildNode("Logged-In User -Verify for after closing the product third party site will Mini player still playing on shop page");
			System.out.println("T2454");
			extent.extentLogger("", "T2454");	
		}	
		
		navigateToFeedFilters(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		waitTime(3000);
		verifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
		verifyProductWebsiteAndOpenHipiInappBrowser();
		verifyElementPresentAndClick(HipiShopPage.objCloseButtonThirdPartySite, "Close Button");
		waitTime(3000);
		if(verifyElementPresent(HipiShopPage.objMiniPlayer, "Mini player")){
			logger.info(" Mini player is appears on bottom right side of the shop page.");	
			extent.extentLoggerPass("Shop page > Mini player", " Mini player is appears on bottom right side of the shop page.");
		}else {
			logger.info(" Mini player is not appears on bottom right side of the shop page.");	
			extent.extentLoggerFail("Shop page > Mini player", " Mini player is not appears on bottom right side of the shop page.");
		}
		navigateToHomePage(); 
	}
	
	
	public void miniPlayerOnSaveMomentTabFilter__T2448__T2455(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Guest User-Verify for Mini player on Save Moment tab");
			System.out.println("T2448");
			extent.extentLogger("", "T2448");	
		}else {	
			extent.HeaderChildNode("Logged-In User-Verify for Mini player on Save Moment tab");
			System.out.println("T2455");
			extent.extentLogger("", "T2455");	
		}	
		
		navigateToFeedFilters(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		waitTime(3000);
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
	}
	
	
	public void switchedBetweenINTHISVIDEOAndSAVEDMOMENTSTabAndViceVersaFilter__T2449__T2456(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2449 - Guest User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2449");
			extent.extentLogger("", "T2449");	
		}else {	
			extent.HeaderChildNode("T2456 - Logged-In User-Check if video in Mini Player continues to play if switched between \"IN THIS VIDEO\" and \"SAVED MOMENTS\" tab and vice versa");
			System.out.println("T2456");
			extent.extentLogger("", "T2456");	
		}	
		navigateToFeedFilters(userType);
		verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
		waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image Thumbnail");
		waitTime(3000);
		verifyMiniPlayer();
		click(HipiShopPage.objSavedMomentTab, "WISHLIST");
		waitTime(3000);
		verifyMiniPlayer();
		verifyElementPresent(AMDShopPage.objInThisVideo,"In This Video option");
		verifyMiniPlayer();
		navigateToHomePage();
		
	}
	
	
	//=============================================S=================================================
	public void	verifyUserCanSeeChangePassword_T2375(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2375 - Check if user is able to see Change Password option");
			System.out.println("T2375");
			extent.extentLogger("Setting And Privacy  ","T2375");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			if(verifyElementDisplayed(HipiSettingsPage.objChangePassword))
			{
				logger.info("User is able to see Change Password option");	
				extent.extentLoggerPass("", "User is able to see Change Password option");
			}else {
				logger.info("User is unable to see Change Password option");	
				extent.extentLoggerFail("", "User is unable to see Change Password option");
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void	verifyUiOfChangePasswordScreen_T2376(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check for the UI of Change Password screen");
			System.out.println("T2376");
			extent.extentLogger("Setting And Privacy  ","T2376");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			waitTime(1000);
			if(verifyElementPresent(HipiSettingsPage.objChangePasswordHeader,"Change Password Header"))
			{
				verifyElementPresent(HipiSettingsPage.objOldPasswordField,"Old Password Field");
				verifyElementPresent(HipiSettingsPage.objNewPasswordField,"New Password Field");
				verifyElementPresent(HipiSettingsPage.objSubmit,"Submit");
				logger.info("User is able to view UI Change Password screen");	
				extent.extentLoggerPass("", "User is able to view UI Change Password screen");
			}else {
				logger.info("User is unable to view Change Ui Password screen");	
				extent.extentLoggerFail("", "User is unable to view Change Ui  Password screen");
			}
			navigateToHomePage();
		}
	}
	
	public void	verifyMinimumCharactersToastMessage_T2377(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check if user is able to see Password length should be minimum of 6 characters toast message on entering with less than 6 characters");
			System.out.println("T2377");
			extent.extentLogger("Setting And Privacy ","T2377");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			type(HipiSettingsPage.objOldPasswordField,"Old","Value");
			waitTime(1000);
			type(HipiSettingsPage.objNewPasswordField,"Old","value");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit");
			waitTime(1000);
			if(verifyElementDisplayed(HipiSettingsPage.objWrongPasswordPopup))
			{
				logger.info("User is able to see Password length should be minimum of 6 characters toast message on entering with less than 6 characters");	
				extent.extentLoggerPass("", "User is able to see Password length should be minimum of 6 characters toast message on entering with less than 6 characters");
			}else {
				logger.info("User is unable to see Password length should be minimum of 6 characters toast message on entering with less than 6 characters");	
				extent.extentLoggerFail("", "User is unable to see Password length should be minimum of 6 characters toast message on entering with less than 6 characters");	
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void	verifyMinimumCharactersToastMessage_T2378(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			String pword= "123456";
			extent.HeaderChildNode("Check if User is able to create a password with more than 20 characters");
			System.out.println("T2378");
			extent.extentLogger("Setting And Privacy ","T2378");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			String newPassWord=getParameterFromXML("NonsubscribedUserNameYahoo");
			type(HipiSettingsPage.objOldPasswordField,pword,"Old Password");
			waitTime(1000);
			type(HipiSettingsPage.objNewPasswordField,newPassWord,"New Password");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit");
			waitTime(1000);
			if(verifyElementDisplayed(HipiSettingsPage.objWrongPasswordPopup))
			{
				logger.info("User is unable to change password successfully as number of chacraters are more than 20");	
				extent.extentLoggerFail("", "User is unable to change password successfully as number of chacraters are more than 20");
			}else {
				waitTime(1000);
				verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy);
				logger.info("User is able to change password successfully as number of chacraters are more than 20");	
				extent.extentLoggerPass("", "User is able to change password successfully as number of chacraters are more than 20");	
			}
			navigateToHomePage();
			resetPassword(newPassWord, pword);
		}
	}
	
	public void	verifyUserCanClearDataByTappingOnX_T2379(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check if entered data is deleted on tapping x icon in Old Password field");
			System.out.println("T2379");
			extent.extentLogger("Setting And Privacy ","T2379");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			String newPassWord=getParameterFromXML("NonsubscribedUserNameYahoo");
			type(HipiSettingsPage.objOldPasswordField,newPassWord,"Value");
			waitTime(1000);
			type(HipiSettingsPage.objNewPasswordField,newPassWord,"value");
			waitTime(1000);
			String Pword=getText(HipiSettingsPage.objOldPasswordField);
			verifyElementPresentAndClick(HipiSettingsPage.objOldPassWordCrossIcon,"Cross Icon");
			waitTime(1000);
			String PwordPostCross=getText(HipiSettingsPage.objOldPasswordField);
			if(Pword!=PwordPostCross)
			{
				logger.info("Entered data is deleted on tapping x icon in Old Password field");	
				extent.extentLoggerPass("", "Entered data is deleted on tapping x icon in Old Password field");
			}else {
				logger.info("Entered data is not deleted on tapping x icon in Old Password field");	
				extent.extentLoggerFail("", "Entered data is not deleted on tapping x icon in Old Password field");	
			}
			navigateToHomePage();
		}
	}
	
	public void	verifyUserCanClearDataByTappingOnXInPasswordField_T2380(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check if entered data is deleted on tapping x icon in Password field");
			System.out.println("T2380");
			extent.extentLogger("Setting And Privacy ","T2380");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			String newPassWord=getParameterFromXML("NonsubscribedUserNameYahoo");
			type(HipiSettingsPage.objOldPasswordField,newPassWord,"Value");
			waitTime(1000);
			type(HipiSettingsPage.objNewPasswordField,newPassWord,"value");
			waitTime(1000);
			String Pword=getText(HipiSettingsPage.objNewPasswordField);
			verifyElementPresentAndClick(HipiSettingsPage.objNewPassWordCrossIcon,"Cross Icon");
			waitTime(1000);
			String PwordPostCross=getText(HipiSettingsPage.objNewPasswordField);
			if(Pword!=PwordPostCross)
			{
				logger.info("Entered data is deleted on tapping x icon in Password field");	
				extent.extentLoggerPass("", "Entered data is deleted on tapping x icon in Password field");
			}else {
				logger.info("Entered data is not deleted on tapping x icon in Password field");	
				extent.extentLoggerFail("", "Entered data is not deleted on tapping x icon in Password field");	
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void	verifyUserCanChangePasswordWithInvalidPassword_T2381(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check if user is able to see The old password was not correct toast on entering wrong password in Old password field");
			System.out.println("T2381");
			extent.extentLogger("Setting And Privacy ","T2381");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			String newPassWord=getParameterFromXML("NonsubscribedUserNameYahoo");
			type(HipiSettingsPage.objOldPasswordField,"123","Value");
			waitTime(1000);
			type(HipiSettingsPage.objNewPasswordField,newPassWord,"value");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit");
			waitTime(1000);
//			String Message=getText(HipiSettingsPage.objWrongPasswordPopup);
			if(verifyElementDisplayed(HipiSettingsPage.objWrongPasswordPopup))
			{
				logger.info("User is able to see The old password was not correct toast on entering wrong password in Old password field");	
				extent.extentLoggerPass("", "User is able to see The old password was not correct toast on entering wrong password in Old password field");	
			}else {
				logger.info("User is unable to see The old password was not correct toast on entering wrong password in Old password field");	
				extent.extentLoggerFail("", "User is unable to see The old password was not correct toast on entering wrong password in Old password field\"");	
			}
			navigateToHomePage();
		}
	}
	
	public void	verifyPasswordCannotBeSamePopupDisplayed_T2383(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			String pword= "123456";
			extent.HeaderChildNode("T2383 - Check if user is able to see Password can not be the same toast message on entering same password in Old password and password fields");
			System.out.println("T2383");
			extent.extentLogger("Setting And Privacy ","T2383");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			type(HipiSettingsPage.objOldPasswordField,pword,"Value");
			waitTime(1000);
			type(HipiSettingsPage.objNewPasswordField,pword,"value");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objSubmit,"Submit");
			waitTime(1000);
			if(verifyElementDisplayed(HipiSettingsPage.objPasswordCantBeSamePopup))
			{
				logger.info("User is able to see Password can not be the same toast message on entering same password in Old password and password fields");	
				extent.extentLoggerPass("", "User is able to see Password can not be the same toast message on entering same password in Old password and password fields");
			}else {
				logger.info("User is unable to see Password can not be the same toast message on entering same password in Old password and password fields");	
				extent.extentLoggerFail("", "User is unable to see Password can not be the same toast message on entering same password in Old password and password fields");	
			}
			navigateToHomePage();
		}
	}

	
	public void	checkUserCanNavigateToSettingsAndPrivacyScreenByTappingAppBack_T2385(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check if user is navigate to Setting & Privacy screen by tapping on app back button");
			System.out.println("T2385");
			extent.extentLogger("Setting And Privacy ","T2385");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objBackButton, "Back Arrow");
			waitTime(1000);
			if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy))
			{
				logger.info("User is able to navigate to Setting & Privacy screen by tapping on app back button");	
				extent.extentLoggerPass("", "User is able to navigate to Setting & Privacy screen by tapping on app back button");
			}else {
				logger.info("User is unable to navigate to Setting & Privacy screen by tapping on app back button");	
				extent.extentLoggerFail("", "User is unable to navigate to Setting & Privacy screen by tapping on app back button");	
			}
			navigateToHomePage();
	}
	}
	public void	checkUserCanNavigateToSettingsAndPrivacyScreenByTappingDeviceBack_T2386(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Check if user is navigate to Setting & Privacy screen by tapping on device back button");
			System.out.println("T2386");
			extent.extentLogger("Setting And Privacy ","T2386");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
			waitTime(1000);
			verifyElementPresentAndClick(HipiSettingsPage.objChangePassword,"Change Password");
			waitTime(1000);
			Back(1);
			waitTime(1000);
			if(verifyElementDisplayed(HipiSettingsPage.objSettingAndPrivacy))
			{
				logger.info("User is able to navigate to Setting & Privacy screen by tapping on device back button");	
				extent.extentLoggerPass("", "User is able to navigate to Setting & Privacy screen by tapping on device back button");
			}else {
				logger.info("User is unable to navigate to Setting & Privacy screen by tapping on device back button");	
				extent.extentLoggerFail("", "User is unable to navigate to Setting & Privacy screen by tapping on device back button");	
			}
			navigateToHomePage();
	}
	}
	
	//========================================================HIPI-3008========================================
	public void	checkUserCreateVideoWithHipiPassTheMicHastag_T2457(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2457 - Logged in User - Check if user is able to create a video by using the hashtag #HipiPassTheMic in post screen");
					System.out.println("T2457");
					extent.extentLogger("Creator","T2457");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 20);
					click(HipiCreateVideoPage.objVideoEditNextBtn,"Next");
//					waitTime(2000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 10);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription,text, "Description");
					waitTime(1000);
					hideKeyboard();
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader, 10);
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader))
					{
						logger.info("User is able to create a video by using with hashtag #HipiPassTheMic in post screen");	
						extent.extentLoggerPass("", "User is able to create a video by using with hashtag #HipiPassTheMic in post screen");
					}else {
						logger.info("User is unable to create a video by using with hashtag #HipiPassTheMic in post screen");	
						extent.extentLoggerFail("", "User is unable to create a video by using with hashtag #HipiPassTheMic in post screen");	
					}
				
					navigateToHomePage();
		}
	}
	
	
	
	public void	checkUserCanPostFiveSecondVideoWithHipiPassTheMicHashtag_T2462(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			//Ensure tester Have created a video of exactly 05 sec which should be visible under galllery
					extent.HeaderChildNode("T2462 - Logged in User - Check if user is able to upload a video with 5 sceconds of video from Gallery by using #HipiPassTheMic");
					System.out.println("T2462");
					extent.extentLogger("Creator","T2462");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
					waitTime(1000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objGallery5SecVideo,"05 Sec video");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton,"Edit This Video");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick button");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitTime(15000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					hideKeyboard();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader, 30);
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader))
					{
						logger.info("User is able to create a video by using with hashtag #HipiPassTheMic in post screen with 5 seconds");	
						extent.extentLoggerPass("", "User is able to create a video by using with hashtag #HipiPassTheMic in post screen with 5 seconds");
					}else {
						logger.info("User is unable to create a video by using with hashtag #HipiPassTheMic in post screen with 5 seconds");	
						extent.extentLoggerFail("", "User is unable to create a video by using with hashtag #HipiPassTheMic in post screen with 5 seconds");	
					}
					navigateToHomePage();
		}
	}
	
	
	
	//Logged in User - Check if user is able to navigate to "Feed" screen while uploading a video_T2458
	public void	checkUserCannavigateToFeedScreenAfterPostingVideoWithHipiPassTheMicHashtag_T2458(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2458 - Logged in User - Check if user is able to navigate to Feed screen while uploading a video");
					System.out.println("T2458");
					extent.extentLogger("Feed","T2458");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.obj30sec,"30 seconds");
					verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 30);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitTime(15000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
					hideKeyboard();
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					boolean verify=waitUntilElementDisplayed(HipiHomePage.objForYou, 30);
					if(verify==true)
					{
						logger.info("User is able to navigate to Feed screen while uploading a video");	
						extent.extentLoggerPass("", "User is able to navigate to Feed screen while uploading a video");
					}else {
						logger.info("User is unable to navigate to Feed screen while uploading a video");	
						extent.extentLoggerFail("", "User is unable to navigate to Feed screen while uploading a video");	
					}
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader, 10);
					navigateToHomePage();
		}
	}
	
	public void	checkUserCanViewBannerAfterPostingVideoWithPassTheMicHashtag_T2459(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2459 - Logged in User - Check if user is able to see the banner after uploading the video in Feed screen");
					System.out.println("T2459");
					extent.extentLogger("Feed","T2459");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 30);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitTime(15000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
					hideKeyboard();
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader, 20);
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader))
					{
						logger.info("User is able to see the banner after uploading a video in Feed screen");	
						extent.extentLoggerPass("", "User is able to see the banner after uploading a video in Feed screen");
					}else {
						logger.info("User is unable to see the banner after uploading a video in Feed screen");	
						extent.extentLoggerFail("", "User is unable to see the banner after uploading a video in Feed screen");	
					}
					navigateToHomePage();
		}
	}
	
	public void	checkUserCanViewBannerAfterPostingDraftVideoWithPassTheMicHashtag_T2460(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2460 - Logged in User - Check if Invite Now banner is displays after posting video from saved under draft");
					System.out.println("T2460");
					extent.extentLogger("Feed","T2460");
					verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
					waitTime(5000);
					verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
					waitTime(4000);
					verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
					waitTime(3000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objEditClipTrimscreenTick, 30);
					verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 20);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
					hideKeyboard();
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					
					waitTime(5000);
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinInviteNowCta))
					{
						logger.info("Invite Now banner is displayed after posting video saved under draft");	
						extent.extentLoggerPass("", "Invite Now banner is displayed after posting video saved under draft");
					}else {
						logger.info("Invite Now banner is not displayed after posting video saved under draft");	
						extent.extentLoggerFail("", "Invite Now banner is not displayed after posting video saved under draft");	
					}
					click(HipiCreateVideoPage.objShareAndWinBanner, "Banner");
					waitTime(4000);
					navigateToHomePage();

		}
	}
	
	
	public void	checkUserWhilePostingPrivateVideoInviteNowBannerIsNotDisplayed_T2461(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2461 - Logged in User - Check if Invite Now banner is not displays when user post a video as private");
					System.out.println("T2461");
					extent.extentLogger("Feed","T2461");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 30);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitTime(15000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
					hideKeyboard();
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoPostPrivacyBtn,"privacy Button");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objPrivateButton,"Private Button");
					waitTime(2000);
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					waitTime(5000);
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader))
					{
						logger.info("Invite Now banner is displayed when user post a video as private");	
						extent.extentLoggerFail("", "Invite Now banner is displayed when user post a video as private");
					}else {
						logger.info("Invite Now banner is not displays when user post a video as private");	
						extent.extentLoggerPass("", "Invite Now banner is not displays when user post a video as private");	
					}
					navigateToHomePage();
		}
	}
	
	
	
	public void	checkUserCanSeeFeedScreenWhilePostingFiveSecondVideoWithHipiPassTheMicHashtag_T2464(String userType) throws InterruptedException, Exception
	{
		//Ensure tester Have created a video of exactly 05 sec which should be visible under galllery
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2464 - Logged in User - Check if user is able to navigate to Feed screen while uploading a video");
					System.out.println("T2464");
					extent.extentLogger("Creator","T2464");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
					waitTime(5000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objGallery5SecVideo,"05 Sec video");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryEditThisVideoButton,"Edit This Video");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick button");
					waitTime(2000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitTime(15000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
					hideKeyboard();
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"Post Button");
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					boolean verify=waitUntilElementDisplayed(HipiHomePage.objForYou, 5);
					if(verify==true)
					{
						logger.info("User is able to navigate to Feed screen while uploading a video");	
						extent.extentLoggerPass("", "User is able to navigate to Feed screen while uploading a video");
					}else {
						logger.info("User is unable to navigate to Feed screen while uploading a video");	
						extent.extentLoggerFail("", "User is unable to navigate to Feed screen while uploading a video");	
					}
					navigateToHomePage();
		}
	}
	public void	verifyBypostingHipiPassTheMicDraftedVideoUserGetsBannerInFeedScreen_T2466(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2466 - Logged in User - Check if Invite Now banner is displays after posting video from saved under draft");
					System.out.println("T2466");
					extent.extentLogger("Feed","T2466");
					verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
					allowPermissions();
					waitTime(3000);
					verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn, "Tick");
					waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 30);
					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
					waitTime(15000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
					String text=getParameterFromXML("HipiContest");
					type(HipiCreateVideoPage.objPostDescription, text, "Description");
					hideKeyboard();
					verifyElementPresentAndClick(HipiCreateVideoPage.objSaveasDraft,"Save As Draft");
					waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 20);
					click(AMDHomePage.objProfileIcon,"profile");
					waitTime(4000);
					verifyElementPresentAndClick(HipiProfilePage.objDrafttab, "Draft Tab");
					waitTime(5000);
					Swipe("DOWN", 3);
					verifyElementPresentAndClick(HipiProfilePage.objDraftVideo, "Draft Video");
					waitTime(1000);
					waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 20);
//					verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//					waitTime(3000);
					if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
					{
						click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//						click(HipiCreateVideoPage.objDoneCTC, "Done Button");
					}else {
						logger.info("User is unable to See Language Options");
						extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
						
					}
					click(HipiCreateVideoPage.objpostbtn,"Post Button");
					waitTime(4000);
					if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
						Back(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
					}
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader))
					{
						logger.info("Invite Now banner is displayed after posting video saved under draft");	
						extent.extentLoggerPass("", "Invite Now banner is displayed when user post a video as private");
					}else {
						logger.info("Invite Now banner is not displays when user post a video as private");	
						extent.extentLoggerFail("", "Invite Now banner is not displays when user post a video as private");	
					}
					click(HipiCreateVideoPage.objShareAndWinBanner, "Banner");
					navigateToHomePage();
		}									
	}
	public void addHipiPassTheMicVideo() throws Throwable
	{
		click(HipiHomePage.objVideoCreateIcon,"Create");
		allowPermissions();
		waitTime(3000);
		click(HipiCreateVideoPage.objRecordIcon,"Record");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
		click(HipiCreateVideoPage.objVideoTickBtn, "Tick");
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 30);
		click(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
//		waitTime(15000);
		waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn, 30);
		String text=getParameterFromXML("HipiContest");
		type(HipiCreateVideoPage.objPostDescription, text, "Description");
		hideKeyboard();
//		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			click(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		click(HipiCreateVideoPage.objpostbtn,"Post Button");	
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
	}
	public void	checkUiOfBanner_T2467(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2467 - Logged in User - Check the UI of the banner");
					System.out.println("T2467");
					extent.extentLogger("Feed","T2467");
					addHipiPassTheMicVideo();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
					if(verifyElementPresent(HipiCreateVideoPage.objShareAndWinHeader, "Share And Win"))
					{
						waitTime(1000);
						verifyElementPresent(HipiCreateVideoPage.objShareAndWinDesc, "Share And Win Desription");
						waitTime(1000);
						verifyElementPresent(HipiCreateVideoPage.objShareAndWinInviteNowCta, "Invite Now Cta");
						waitTime(1000);
						verifyElementPresent(HipiCreateVideoPage.objShareAndWinThumbnail, "Picture ");
					}
		}
		navigateToHomePage();
	}
	public void	verifyInviteNowBannerIsDisappearedOnTappingOnIt_T2469(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2469 - Logged in User - Check if Invite Now banners is not disappeared by tapping on anywhere in the screen");
					System.out.println("T2469");
					extent.extentLogger("Feed","T2469");
					addHipiPassTheMicVideo();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
					verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinBanner, "Share and win Banner");
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader))
					{
						logger.info("Banner is not disapperar by tapping on anywhere in the screen");	
						extent.extentLoggerFail("", "Banner is not disapperar by tapping on anywhere in the screen");
					}else {
						logger.info("Banner is disapperar by tapping on anywhere in the screen");	
						extent.extentLoggerPass("", "Banner is disapperar by tapping on anywhere in the screen");	
					}
					navigateToHomePage();
		}
	}
	
	
	
	public void	verifyInviteNowBannerIsDisappearedOnTappingOnIt_T2470(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2470 - Logged in User - Check if user is able to tap on Invite Now CTA in the banner");
					System.out.println("T2470");
					extent.extentLogger("Feed","T2470");
					addHipiPassTheMicVideo();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
					verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinInviteNowCta,"Invite Now Cta");
					if(verifyElementDisplayed(HipiShareScreen.objListOfShareRail))
					{
						logger.info("User is able to tap on Invite Now CTA in the banner");	
						extent.extentLoggerPass("", "User is able to tap on Invite Now CTA in the banner");
					}else {
						logger.info("User is unable to tap on Invite Now CTA in the banner");	
						extent.extentLoggerFail("", "User is unable to tap on Invite Now CTA in the banner");	
					}
					navigateToHomePage();
		}
	}

	public void	verifyByTappingOnInviteNowCtaUserCanSeeShareSheet_T2472(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2472 - Logged in User - Check if user is able to see the share sheet by tappong on Invite Now CTA in the banner");
					System.out.println("T2472");
					extent.extentLogger("Feed","T2472");
					addHipiPassTheMicVideo();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
					verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinInviteNowCta,"Invite Now Cta");
					waitUntilElementDisplayed(HipiShareScreen.objListOfShareRail, 20);
					if(verifyElementDisplayed(HipiShareScreen.objListOfShareRail))
					{
						logger.info("User is able to see the Share sheet by tapping on Invite Now CTA");	
						extent.extentLoggerPass("", "User is able to see the Share sheet by tapping on Invite Now CTA");
					}else {
						logger.info("User is unable to see the Share sheet by tapping on Invite Now CTA");	
						extent.extentLoggerFail("", "User is unable to see the Share sheet by tapping on Invite Now CTA");	
					}
					navigateToHomePage();
		}
	}
	
	
	public void	verifyUserCanShareToAnySocialMediaUnderShareSheet_T2473(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2473 - Logged in User - Check if user is able to select social media under share sheet screen");
					System.out.println("T2473");
					extent.extentLogger("Feed","T2473");
					addHipiPassTheMicVideo();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
					verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinInviteNowCta,"Invite Now Cta");
					navigateToGmail();
					if(verifyElementDisplayed(HipiShareScreen.objSendButtonGmailShareScreen))
					{
						logger.info("User is able to select any social media under share sheet");	
						extent.extentLoggerPass("", "User is able to select any social media under share sheet");
					}else {
						logger.info("User is able to select any social media under share sheet");	
						extent.extentLoggerFail("", "User is able to select any social media under share sheet");	
					}
					navigateToHomePage();
		}
	}
	
	
	public void	verifyUserCanShareToAnySocialMedia_T2474(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2474 - Logged in User - Check if user is able to post a video with social media under Invite Via in Invite screen");
					System.out.println("T2474");
					extent.extentLogger("Feed","T2474");
					addHipiPassTheMicVideo();
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
					verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinInviteNowCta,"Invite Now Cta");
					navigateToGmail();
					String newMail = getParameterFromXML("NewMailId");
					verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
					type(HipiShareScreen.objToField, newMail, "New mail");
					hideKeyboard();
					verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
					openGmailApp();
					if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
						Back(1);
						Swipe("DOWN", 3);
						verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
					}else {
						Swipe("DOWN", 3);
						verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
						waitTime(2000);
					}
					waitTime(2000);
					if(verifyElementDisplayed(HipiShareScreen.objHipiPassTheMic))
					{
						logger.info("User is able to select any social media under share sheet");	
						extent.extentLoggerPass("", "User is able to select any social media under share sheet");
					}else {
						logger.info("User is able to select any social media under share sheet");	
						extent.extentLoggerFail("", "User is able to select any social media under share sheet");	
					}
					navigateToHomePage();

		}
	}
	
	public void	verifyUserCanSeeVideoPostedByCreator_T2478(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2478 - User should able to see the video posted by the creator");
					System.out.println("T2478");
					extent.extentLogger("Feed","T2478");
					ShareHipiPassTheMicVideoOverSocialMedia();
					waitTime(3000);
					if(verifyElementDisplayed(HipiHomePage.objUserName))
					{
						logger.info("User is able to see the video posted by the creator");	
						extent.extentLoggerPass("", "User is able to see the video posted by the creator");
					}else {
						logger.info("User is unable to see the video posted by the creator");	
						extent.extentLoggerFail("", "User is unable to see the video posted by the creator");	
					}
					navigateToHomePage();
	}
	}
	
	
	public void ShareHipiPassTheMicVideoOverSocialMedia() throws Throwable
	{
		addHipiPassTheMicVideo();
		waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinHeader,15);
		verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinInviteNowCta,"Invite Now Cta");
		waitTime(5000);
		navigateToGmail();
		String newMail = getParameterFromXML("NewMailId");
		verifyElementPresentAndClick(HipiShareScreen.objToField,"To field");
		type(HipiShareScreen.objToField, newMail, "New mail");
		hideKeyboard();
		
		verifyElementPresentAndClick(HipiShareScreen.objSendButtonGmailShareScreen, "Send Button");
		openGmailApp();
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 3);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 3);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(2000);
		}
		waitTime(2000);
		verifyElementPresentAndClick(HipiShareScreen.objVerifyUrl, "Url link");
		waitTime(2000);
		if(verifyElementDisplayed(HipiShareScreen.objHipiLogo))
		{
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
		}else {
			click(HipiShareScreen.objMoreButton, "More");
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
		}	
	}
	
	public void	verifyUserCanSeeBannerInReceivedLink_T2479(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2479 - User should able to see the video posted by the creator");
					System.out.println("T2479");
					extent.extentLogger("Feed","T2479");
					ShareHipiPassTheMicVideoOverSocialMedia();
					Swipe("DOWN",1);
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinBanner, 5);
					if(verifyElementDisplayed(HipiCreateVideoPage.objShareAndWinInviteNowCta))
					{
						logger.info("User is able to see a banner on Feed screen after he watchs the video completely.");	
						extent.extentLoggerPass("", "User is able to see a banner on Feed screen after he watchs the video completely.");
					}else {
						logger.info("User is unable to see a banner on Feed screen after he watchs the video completely.");	
						extent.extentLoggerFail("", "User is unable to see a banner on Feed screen after he watchs the video completely.");	
					}
					navigateToHomePage();
	}
	}
	
	
	public void	verifyUiOfBanner_T2480(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2480 - Check the UI of the banner");
					System.out.println("T2480");
					extent.extentLogger("Feed","T2480");
					ShareHipiPassTheMicVideoOverSocialMedia();
					Swipe("DOWN",1);
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinBanner, 5);
					if(verifyElementPresent(HipiCreateVideoPage.objShareAndWinInviteNowCta, "Join Now Cta"))
					{
						waitTime(2000);
						verifyElementPresent(HipiCreateVideoPage.objShareAndWinDesc, "Desription");
						waitTime(2000);
						verifyElementPresent(HipiCreateVideoPage.objShareAndWinThumbnail, "picture");
						waitTime(2000);
						verifyElementPresent(HipiCreateVideoPage.objShareAndWinHeader, "Header Hastag ");
					}
					navigateToHomePage();
	}
	}
	public void	verifyOnTappingOnJoinNowUserNavigatesToHastagDetailScreen_T2483(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2483 - Check if user is redirected to hashtag detail page by tapping on the\"Join Now\" CTA button on the banner");
					System.out.println("T2483");
					extent.extentLogger("Feed","T2483");
					ShareHipiPassTheMicVideoOverSocialMedia();
					Swipe("DOWN",1);
					waitUntilElementDisplayed(HipiCreateVideoPage.objShareAndWinBanner, 5);
					verifyElementPresentAndClick(HipiCreateVideoPage.objShareAndWinInviteNowCta, "Join Now Cta");
					waitTime(2000);
					if(verifyElementDisplayed(HipiFeedPage.objHashTagHeader))
					{
						logger.info("User is able to redirected to hashtag detail page by tapping on the Join Now CTA button on the banner.");	
						extent.extentLoggerPass("", "User is able to redirected to hashtag detail page by tapping on the Join Now CTA button on the banner.");
					}else {
						logger.info("User is unable to redirected to hashtag detail page by tapping on the Join Now CTA button on the banner.");	
						extent.extentLoggerFail("", "User is unable to redirected to hashtag detail page by tapping on the Join Now CTA button on the banner.");	
					}
					navigateToHomePage();
		}
	}
	
	
//	=====================Hipi===============Hipi- 2293===================
	
	
	
	public void	verifyFollowingCtaChangedToFOllowCta_T2373(String userType) throws Throwable
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
					extent.HeaderChildNode("T2373 - Logged In user - Check Following  CTA gets changed to Follow CTA when user taps on Following CTA");
					System.out.println("T2373");
					extent.extentLogger("Feed","T2373");
					verifyElementPresentAndClick(HipiHomePage.objFollowingButton," Following Tab");
					waitUntilElementDisplayed(HipiHomePage.objUserName, 4);
					verifyElementPresentAndClick(HipiHomePage.objUserName,"User Handler");
					waitUntilElementDisplayed(HipiProfilePage.objFollowUnfollow, 1);
					verifyElementPresentAndClick(HipiProfilePage.objFollowUnfollow,"Following Cta");
					waitTime(1000);
					if(verifyElementDisplayed(HipiProfilePage.objFollowCTAText))
					{
						logger.info("User is able to unfollow creator by tapping on following button in detail screen");	
						extent.extentLoggerPass("", "User is able to unfollow creator by tapping on following button in detail screen");
					}else {
						logger.info("User is unable to unfollow creator by tapping on following button in detail screen");	
						extent.extentLoggerFail("", "User is unable to unfollow creator by tapping on following button in detail screen");	
					}
					navigateToHomePage();
					click(HipiHomePage.objForYou, "For you Tab");
		}
	}
	
	
	
	public void	verifyLoginPopupIsDisplayedOnTappingOnFollowCtaInCreator_T2374(String userType) throws Throwable
	{
	if (userType.equalsIgnoreCase("Guest")){
		extent.HeaderChildNode("T2374 - Guestuser - Check user gets Login/sign-up popup when he taps on follow button");
		System.out.println("T2374");
		extent.extentLogger("Feed","T2374");
				verifyElementPresentAndClick(HipiHomePage.objFollowingButton," Following Tab");
				waitTime(4000);
				verifyElementPresentAndClick(HipiHomePage.objUserName,"User Handler");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objFollowCTA,"Follow Cta");
				waitTime(1000);
				if(verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail))
				{
					logger.info("User is able to get login pop-up when user taps on Follow button as guest user");	
					extent.extentLoggerPass("", "User is able to get login pop-up when user taps on Follow button as guest user");
				}else {
					logger.info("User is unable to get login pop-up when user taps on Follow button as guest user");	
					extent.extentLoggerFail("", "User is unable to get login pop-up when user taps on Follow button as guest user");	
				}
				navigateToHomePage();
				click(HipiHomePage.objForYou, "For you");
				
	}
	}
	
	public void verifyUserFollowedIsDisplayedInFollowingScreenInProfile_T1101(String userType) throws Exception 
	{
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Logged in user - Check if all followed(following the follower) users will following tab have along with user details on the list item");
			System.out.println("T1101");
			extent.extentLogger("Profile", "T1101");
//			String name=getText(HipiHomePage.objUserName);
//			click(HipiProfilePage.objFollowCTAText,"Follow");
//			waitTime(1000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);	
			verifyElementPresentAndClick(HipiProfilePage.objFollowing,"Following Tab");
			waitTime(1000);	
			verifyElementPresent(HipiProfilePage.objFollowingNamesList," Followers");
			waitTime(1000);
			if(verifyElementDisplayed(HipiProfilePage.objFollowingbutton_followingTab))
			{
				logger.info("User is able to see followed user have a Following tab along with the user details.");
		    	extent.extentLoggerPass("", "User is able to see followed user have a Following tab along with the user details.");
			}else
			{
				logger.info("User is unable to see followed user have a Following tab along with the user details.");
		    	extent.extentLoggerFail("", "User is unable to see followed user have a Following tab along with the user details.");
			}
			navigateToHomePage();	
		}
		}
	
	public void verifyFollowedUserIsListedInFollowingScreenInProfileBySearching_T1106(String userType) throws Exception 
	{
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Logged in user - Check if user is able to search and verify the options displayed on entering text in search text field");
			System.out.println("T1106");
			extent.extentLogger("Profile", "T1106");
			waitTime(1000);
			String name=getText(HipiHomePage.objUserName).replaceAll("@","");
			click(HipiProfilePage.objFollowCTAText,"Follow");
			waitTime(1000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(2000);	
			verifyElementPresentAndClick(HipiProfilePage.objFollowing,"Following Tab");
			waitTime(1000);
			type(HipiProfilePage.objFollowingSearch, name, "Search Field");
			waitTime(3000);
			verifyElementPresent(HipiProfilePage.objFollowingCrossIcon, "Cross");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objFollowingTabUserHandler, "User handler");
			waitTime(1000);
			if(verifyElementDisplayed(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(name)))
			{
				logger.info("User is able to get matched records on top and cross and back button are visible in search text bar");
		    	extent.extentLoggerPass("", "User is able to get matched records on top and cross and back button are visible in search text bar");
			}else
			{
				logger.info("User is aunble to get matched records on top and cross and back button are visible in search text bar");
		    	extent.extentLoggerFail("", "User is unable to get matched records on top and cross and back button are visible in search text bar");
			}
			navigateToHomePage();	
		}
	}
	
	
	public void verifyusernavigatesToDraftListingPageOnTappingBack_T1132(String userType) throws Exception 
	{
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Logged in User - Check if on tapping back button User is redirected to Draft Listing tab");
			System.out.println("T1132");
			extent.extentLogger("Profile", "T1132");
			waitTime(1000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftinProfilepage,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftpageThumbNail,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideoBackArrow,"Back Button");
			if(verifyElementDisplayed(HipiProfilePage.objDraftpageThumbNail))
			{
				logger.info("User is able to redirect to Draft Listing ");
		    	extent.extentLoggerPass("", "User is able to redirect to Draft Listing ");
			}else
			{
				logger.info("User is unable to redirect to Draft Listing ");
		    	extent.extentLoggerFail("", "User is unable to redirect to Draft Listing ");
			}
			navigateToHomePage();
		}
	}
	
	public void verifyUiOfFavoriteScreen_T1166(String userType) throws Exception 
	{
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Logged in User - Check User is able to see the UI of favorite screen");
			System.out.println("T1166");
			extent.extentLogger("Profile", "T1166");
			waitTime(1000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton,"Favorites");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objVideo," Video Tab");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objHashtags," HashTag Tab");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objSounds," Sounds Tab");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objEffects," Effects Tab");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objFilters," Filters Tab");
		}
		 navigateToHomePage();
	}
	
	public void verifyUserCanRemoveSoundFromFavoritesScreen_T1171(String userType) throws Exception 
	{
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Logged in user - Check user is able to remove the sound from favorite tab");
			System.out.println("T1171");
			extent.extentLogger("Profile", "T1171");
			waitTime(1000);
			addSoundToFavorites();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton,"Favorites");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objSounds," Sounds Tab");
			waitTime(1000);
			String Actual=getText(HipiProfilePage.objSoundsList);
			verifyElementPresentAndClick(HipiProfilePage.objSoundsThreeLines,"Three Lines");
			waitTime(1000);
			verifyElementPresent(HipiProfilePage.objAddedToFavorites,"Added To Favorites");
			Back(1);
			String Expected=getText(HipiProfilePage.objSoundsList);
			if(Actual!=Expected){
				logger.info("User is able to redirect to Draft Listing ");
		    	extent.extentLoggerPass("", "User is able to redirect to Draft Listing ");
			}else{
				logger.info("User is unable to redirect to Draft Listing ");
		    	extent.extentLoggerFail("", "User is unable to redirect to Draft Listing ");
			}
			navigateToHomePage();
		}
	}
	
	public void verifyUserCanSeeUplaodingProgressTextWhileUploadingVideo_T1180(String userType) throws Exception 
	{
		 if(userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Logged in User  - Check if video in publishing mode displays 'Publishing in process' is display on video thumbnail ");
			System.out.println("T1180");
			extent.extentLogger("Profile", "T1180");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.obj15sec, "15 sec");
			verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record Button");
			waitTime(5000);
			waitForElementAndClickIfPresent(HipiCreateVideoPage.objVideoEditNextBtn,30,"Next");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objuploadpost, 10);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 	
			}
			waitForElementAndClickIfPresent(AMDHomePage.objProfileIcon,30,"Profile Icon");
			waitTime(3000);
			Swipe("DOWN",1);
			if(verifyElementDisplayed(HipiCreateVideoPage.objpublishprogressvideo))
			{
				logger.info("Publishing in process' label is visible on video thumbnail");
		    	extent.extentLoggerPass("", "Publishing in process' label is visible on video thumbnail");
			}else
			{
				logger.info("Publishing in process' label is not visible on video thumbnail");
		    	extent.extentLoggerFail("", "Publishing in process' label is not visible on video thumbnail");
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void verifyUserCanDeletePublishedVideos_T1182(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - check if user is able to delete published video");
			System.out.println("T1182");
			extent.extentLogger("profile_All", "T1182");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 10);
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstVideo, "First Video");
			waitTime(2000);	
			verifyElementPresent(HipiHomePage.objPlayerScreen, " Full Screen Player Preview");
			longPress(HipiHomePage.objPlayerScreen);
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDeleteOption, "Delete Option");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDeleteDraftsYes, "Yes option");
			if(verifyElementDisplayed(HipiCreateVideoPage.objeffectDownloadProgressBar))
			{
				logger.info("Video is deleted by tapping on yes");
				extent.extentLoggerPass("profile_All","Video is deleted by tapping on yes");
				}else
				{
				logger.info("Video is not deleted by tapping on yes");
				extent.extentLoggerFail("profile_All","Video is not deleted by tapping on yes");
				}
			navigateToHomePage();
		}
	}
	
	
	public void checkWhetherPopupGetsDisappearByTappingDeviceBackButton_T1191(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check user can see the delete option in private video");
			System.out.println("T1191");
			extent.extentLogger("Profile_Private-video", "T1191");
			addprivatevideo(userType);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
			waitTime(5000);
			click(HipiProfilePage.objPrivateTabVideoSelect, "Private Tab Video");
			waitTime(5000);
			longPress(HipiHomePage.objPlayerScreen);
			waitTime(3000);
			if(verifyElementExist(HipiProfilePage.objDeleteOption, "Delete Option"))
			{
				logger.info("User can see the delete option on private video");
				extent.extentLoggerPass("Profile_Private-video", "User can see the delete option on private video");
			}
			else {
				logger.info("User can't see the delete option on private video");
				extent.extentLoggerFail("Profile_Private-video", "User can't see the delete option on private video");
			}	
			navigateToHomePage();
	}
	}
	
	public void checkUiOfFriendScreen_T1205(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check UI of find friends screen");
			System.out.println("T1205");
			extent.extentLogger("Profile_Invite Friends","T1205");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitTime(2000);
			verifyElementPresentAndClick(HipiProfilePage.objFindFriedsIcon,"Find friends icon");
			if(verifyElementPresent(HipiProfilePage.objInviteFriendsText, "Invite Friends"))
			{
				verifyElementPresent(HipiProfilePage.objFindContacts, "Find Contacts");
				waitTime(1000);
				logger.info("User is able to view Invite Friends and Find contacts in Friends screen");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is able to view Invite Friends and Find contacts in Friends screen");
			}else {
				logger.info("User is unable to view Invite Friends and Find contacts in Friends screen");	
				extent.extentLoggerFail("profile_InviteFriends", "User is unable to view Invite Friends and Find contacts in Friends screen");	
			}
			navigateToHomePage();
			}
		}
	
	
	public void VerifyusersFollowing_FollowersListPage_T1406(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify Users followers list page");
			System.out.println("T1406");
			extent.extentLogger("Discover_Search", "T1406");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Himanshi");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
//			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult , "Suggested Result");

			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");	 
			 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers List header");
		   	waitTime(1000);
			if(verifyElementDisplayed(HipiProfilePage.objFollowingTabUserHandler))
			{
				logger.info("On tapping followers tab User is able to access the followers list");	
				extent.extentLoggerPass("Profile_InviteFriends", "On tapping followers tab User is able to access the followers list");
			}else {
				logger.info("On tapping followers tab User is unable to access the followers list");	
				extent.extentLoggerFail("profile_InviteFriends", "On tapping followers tab User is unable to access the followers list");	
			}
				navigateToHomePage();
		}
	}
	
	public void VerifyUserCanSearchFollowingInFollowersListPage_T1408(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify for User can search any following User from the list");
			System.out.println("T1408");
			extent.extentLogger("Discover_Search", "T1408");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Dheeraj");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 waitTime(1000); 
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following Tab");
			String val1 = getParameterFromXML("Searchbars");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val1 , "Search Inbox");
			if(verifyElementPresent(HipiCreateVideoPage.objPostFirstFriendSuggestedUser(val1), "User "+val1))
			{
				logger.info("User is able to type on search field under following tab and result is displayed respective to the search data");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is able to type on search field under following tab and result is displayed respective to the search data");
			}else {
				logger.info("User is unable to type on search field under following tab and result is displayed respective to the search data");	
				extent.extentLoggerFail("profile_InviteFriends", "User is unable to type on search field under following tab and result is not displayed respective to the search data");	
			}
			navigateToHomePage();
		}
	}
	public void VerifyUserCanSeeSearchFieldInFollowingTab_T1410(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify for search field on the User following tab");
			System.out.println("T1410");
			extent.extentLogger("Discover_Search", "T1410");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Dheeraj");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 waitTime(1000);
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following Tab");
			if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
			{
				logger.info("User is able to get search field on the following tab");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is able to get search field on the following tab");
			}else {
				logger.info("User is unable to get search field on the following tab");	
				extent.extentLoggerFail("profile_InviteFriends", "User is unable to get search field on the following tab");	
			}
			navigateToHomePage();
		}
	}
	
	public void VerifyRelatedSearchedResultIsDisplayedUnderFollowingTabOfSearchedUser_T1412(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- validate the auto suggestion list under following tab respective to search input");
			System.out.println("T1412");
			extent.extentLogger("Discover_Search", "T1412");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Dheeraj");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 waitTime(1000);
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following Tab");
			String val1 = getParameterFromXML("Searchbars");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val1 , "Search Inbox");
			String name=getText(HipiProfilePage.objFirstFollowingUserName);
			if(name.contains(val1))
			{
				logger.info("User is able to type on search field under following tab and autosuggestion result is displayed");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is able to type on search field under following tab and autosuggestion result is displayed");
			}else {
				logger.info("User is unable to type on search field under following tab and autosuggestion result is not displayed");	
				extent.extentLoggerFail("profile_InviteFriends", "User is unable to type on search field under following tab and autosuggestion result is not displayed");	
			}
			navigateToHomePage();
		}
	}
	
	
	public void VerifyUserCanNavigateToProfileFromUserListingPage_T1414(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User -Verify for click on displayed user name from the search result and navigation");
			System.out.println("T1414");
			extent.extentLogger("Discover_Search", "T1414");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Dheeraj");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 waitTime(1000);
			 verifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following Tab");
			String val1 = getParameterFromXML("Searchbars");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val1 , "Search Inbox");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objFirstFollowingUserName,"First Searched User");
			if(verifyElementDisplayed(HipiProfilePage.objProfileHeader))
			{
				logger.info("User is able to tap on searched result from the list and it is navigating to user profile page");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is able to tap on searched result from the list and it is navigating to user profile page");
			}else {
				logger.info("User is unable to tap on searched result from the list and it is  not navigating to user profile page");	
				extent.extentLoggerFail("profile_InviteFriends", "User is unable to tap on searched result from the list and it is  not navigating to user profile page");	
			}
			navigateToHomePage();
		}
	}
	
	public void VerifyUserCanSeeSearchFieldInFollowersTab_T1416(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribeduser"))
		{
			extent.HeaderChildNode("Logged In User- Verify for search field on the User followers tab");
			System.out.println("T1416");
			extent.extentLogger("Discover_Search", "T1416");
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
			verifyElementPresent(HipiDiscoverPage.objDiscoverSearchBar, "Discover Screen");
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			waitTime(4000);
			verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox ");
			String val = getParameterFromXML("Dheeraj");
			type(HipiDiscoverPage.objDiscoverSearchInbox,val , "Search Inbox");
			verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
			hideKeyboard();
			waitTime(5000);	
			 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
			 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
			 waitTime(1000);
			 verifyElementPresentAndClick(HipiProfilePage.objFollowers, "Followers Tab");
			if(verifyElementPresent(HipiDiscoverPage.objDiscoverSearchInbox, "Search Inbox"))
			{
				logger.info("User is able to get search field on the followers tab");	
				extent.extentLoggerPass("Profile_InviteFriends", "User is able to get search field on the followers tab");
			}else {
				logger.info("User is unable to get search field on the followers tab");	
				extent.extentLoggerFail("profile_InviteFriends", "User is unable to get search field on the followers tab");	
			}
			navigateToHomePage();
		}
	}
	
	public void  verifySharingBannerOnMultipleMedium_T1523(String userType) throws Exception {
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User : verify for sharing banner on multiple medium");
			System.out.println("T1523");
			extent.extentLogger("Discover", "T1523");
			click(HipiHomePage.objDiscoverButton, "Discover Button");
			click(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(6000);
		    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			waitTime(4000);
			verifyElementPresent(HipiDiscoverPage.objBannerDetailsPageHeader, "Banner Details Page Header");	
			waitTime(1000);
			verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share");	
			waitTime(1000);
			VerifyLoginPopUp();
			navigateToHomePage();
		}	
	}
	
	public void  verifyBannerIsVisibleAndClickable_T1527(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Logged In User-Verify if user able to see and click the banners at the top of the discover page");
			System.out.println("T1527");
			extent.extentLogger("Discover", "T1527");
//			click(HipiHomePage.objDiscoverButton, "Discover Button");
			click(HipiHomePage.objDiscoverButton, "Discover Button");
			waitTime(6000);
		    verifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
			waitTime(4000);
			if(verifyElementDisplayed(HipiDiscoverPage.objBannerDetailsPageHeader))
			{
				logger.info("User is able to see and click on the banners displayed on the top of the discover page and user lands on the respective page");	
				extent.extentLoggerPass("Discover", "User is able to see and click on the banners displayed on the top of the discover page and user lands on the respective page");
			}else {
				logger.info("User is unable to see and click on the banners displayed on the top of the discover page and user lands on the respective page");	
				extent.extentLoggerFail("Discover", "User is unable to see and click on the banners displayed on the top of the discover page and user lands on the respective page");
			}		
			navigateToHomePage();
		}
	}
	public void	verifyTappingOnNextCtaInDraftedVideoUserCanNavigateToPostVideoScreen_T1961(String userType) throws InterruptedException, Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1961 , Check the UI of Edit video screen");
			System.out.println("T1961");
			extent.extentLogger("Post ","T1961");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDrafttab,"Draft Tab");
			waitTime(1000);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideo,"Draft Video");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostDescription,"Video Description");
			waitTime(1000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPostScreenEditButton,"Edit Button");
			waitTime(1000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditClipTrimscreenTick, 5);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipTrimscreenTick,"Tick");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext,"Next");
			waitTime(15000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostSCreenHeader, 10);
			if(verifyElementPresent(HipiCreateVideoPage.objPostSCreenHeader,"Post Screen Header"))
			{
				logger.info("User is able to navigate to Post video screen by tapping on Next CTA");	
				extent.extentLoggerPass("", "User is able to navigate to Post video screen by tapping on Next CTA");
			}else {
				logger.info("User is unable to navigate to Post video screen by tapping on Next CTA");	
				extent.extentLoggerFail("", "User is unable to navigate to Post video screen by tapping on Next CTA");
			}		
			discardPopup();
	}
	}
	public void checkIfUserIsAbleToUploadImageByCapturingImageFromGallery(String userType) throws Exception
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user- Check if User is able to upload image From Gallery");
			System.out.println(""); 
			extent.extentLogger(" profile", "");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			if(verifyElementPresent(HipiProfilePage.objProfileHeader, "Profile Header")){
				logger.info("User is directed to Hipi Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Hipi Profile Screen ");
			}else {
				logger.info("User is not directed to Hipi Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Hipi Profile Screen ");	
			}  
			
			verifyElementPresentAndClick(HipiProfilePage.objEditProfile,"Edit Profile");
			if(verifyElementPresent(HipiProfilePage.objEditProfileTitle, "Edit Profile  Header")){
				logger.info("User is directed to Edit Profile Screen ");	
				extent.extentLoggerPass("profile_Edit", "User is directed to Edit Profile Screen ");
			}else {
				logger.info("User is not directed to Edit Profile Screen ");	
				extent.extentLoggerFail("profile_Edit", "User is not directed to Edit Profile Screen ");	
			} 
			verifyElementPresentAndClick(HipiProfilePage.objprofilephotoEditProfilePage, "Profile photo");
			waitTime(3000);
			
			allowPermissions();
			verifyElementPresent(HipiProfilePage.objGalleryHeader, "Gallery header");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objGalleryFirstPicture, "First Picture");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objDoneButton, "Done Button");
			boolean verify=waitUntilElementDisplayed(HipiProfilePage.objProfilePhotoSuccess,30);
			if(verify==true){
				logger.info("User is able to upload profile image From gallery.");	
				extent.extentLoggerPass("profile_Edit", "User is able to upload profile image From gallery.");
			}else {
				logger.info("User is unable to upload profile image From gallery.");	
				extent.extentLoggerFail("profile_Edit", "User is unable to upload profile image From gallery.");	
			}
			navigateToHomePage();
		}	
		}
	
	public void  verifyLastRecordedClipisDeletedByTappingOnDiscardEdits_T575(String userType) throws Exception {	
		 if(userType.equalsIgnoreCase("NonSubscribedUser")){
			extent.HeaderChildNode("Logged in user - Check if last recorded clip in not deleted when clicked on Keep in discard edits");
			System.out.println("T575");
			extent.extentLogger("Creator", "T575");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
			waitTime(3000);
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Record");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objrecordprogress,"Recording Progress Bar");
			waitTime(10000);
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditNextBtn, 30);
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objeditvideobackbtn, "Back button");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Edits");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objdeleteclip,"Delete");
			waitTime(3000);
			verifyElementPresent(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard Popup");
			verifyElementPresentAndClick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discrad Edits");
			waitTime(3000);
		    boolean verify=waitUntilElementDisplayed(HipiCreateVideoPage.objLastClipdeleted,20);
		    
			if(verify==true)
			{
				logger.info("Clip is deleted if user selects Discard in delete popup");	
				extent.extentLoggerPass("Video creation screen", "Clip is deleted if user selects Discard in delete popup");
			}else {
				logger.info("Clip is not deleted if user selects Discard in delete popup");	
				extent.extentLoggerFail("Video creation screen", "Clip is not deleted if user selects Discard in delete popup");
			}
			discardPopup();
		 }
	}
	
	
	
	public  void verifyNoOfficialTag() throws Exception
	{
		if(verifyElementExist(HipiDiscoverPage.objOfficialTag, "Official Tag"))
		{
			logger.info("user able to see Official tag with white text and red background on video thumbnail ");
	    	extent.extentLoggerFail("", "user able to see Official tag with white text and red background on video thumbnail ");
		}else {
			logger.info("user not able to see Official tag with white text and red background on video thumbnail ");
	    	extent.extentLoggerPass("", "user not able to see Official tag with white text and red background on video thumbnail ");
		}
			
	}
	
	
	public  void verifyNoMostPopularTag() throws Exception
	{
		if(verifyElementExist(HipiDiscoverPage.objMostPopoular, "Most Popular"))
		{
			logger.info("user able to see Most Popular tag with white text and red background on video thumbnail");
	    	extent.extentLoggerFail("", "user able to see Most Popular tag with white text and red background on video thumbnail ");
		}else {
			logger.info("user not able to see Most Popular tag with white text and red background on video thumbnail ");
	    	extent.extentLoggerPass("", "user not able to see Most Popular tag with white text and red background on video thumbnail");
		}
			
	}
	public void checkIfUserNotAbleToSeeOfficialTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInEffectDetailPage_T2191_T2200(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2191 - Check if Guest user is not able to see Official tag with white text and red background on video thumbnail in Effect detail page_T2191");
			System.out.println("T2191");
			extent.extentLogger("Effect-Detail_Official-Tag", "T2191");
		} else {
			extent.HeaderChildNode("T2200 - Check if Logged-In user is not able to see Official tag with white text and red background on video thumbnail in Effect detail page_T2200");
			System.out.println("T2200");
			extent.extentLogger("Effect-Detail_Official-Tag", "T2200");
			waitTime(2000);
		}
		navigateToEffectScreen(userType);
		verifyNoOfficialTag();
		navigateToHomePage();
	}
	
	public void checkIfUserIsNotAbleToSeeOfficialTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInFilterDetailPage_T2192_T2201(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2192 - Check if Guest user is not able to see Official tag with white text and red background on video thumbnail in Filter detail page_T2192");
			System.out.println("T2192");
			extent.extentLogger("Filter-Detail_Official-Tag", "T2192");
		} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2201 - Check if Logged-In user is not able to see Official tag with white text and red background on video thumbnail in Filter detail page_T2201");
			System.out.println("T2201");
			extent.extentLogger("Filter-Detail_Official-Tag", "T2201");
			waitTime(2000);
		}
		navigateToFeedFilters(userType);
		verifyNoOfficialTag();
		navigateToHomePage();
	}
	
	public void checkIUserIsNotAbleToSeeOfficialTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInProfileDetailPage_T2193_T2202(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2193 - Check if Guest user is not able to see Official tag with white text and red background on video thumbnail in Profile detail page_T2193");
			System.out.println("T2193");
			extent.extentLogger("Profile-Detail_Official-Tag", "T2193");
		} else {
			extent.HeaderChildNode("T2202 - Check if Logged-In user is not able to see Official tag with white text and red background on video thumbnail in Profile detail page_T2202");
			System.out.println("T2202");
			extent.extentLogger("Profile-Detail_Official-Tag", "T2202");
			waitTime(2000);
		}
		click(HipiHomePage.objUserName, "User Handle");
		verifyNoOfficialTag();
		navigateToHomePage();
	}
	public void checkIfUserNotAbleToSeeMostPopularTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInEffectDetailPage_T2197_T2206(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2197 - Check if Guest user is not able to see Most Popular tag with white text and red background on video thumbnail in Effect detail page_T2197");
			System.out.println("T2197");
			extent.extentLogger("Effect-Detail_Most Popular-Tag", "T2197");
		} else{
			extent.HeaderChildNode("T2206 - Check if Logged-In user is not able to see Most Popular tag with white text and red background on video thumbnail in Effect detail page_T2206");
			System.out.println("T2206");
			extent.extentLogger("Effect-Detail_Most Popular-Tag", "T2206");
			waitTime(2000);
		}
		navigateToEffectScreen(userType);
		verifyNoMostPopularTag();
		navigateToHomePage();
	}
	
	
	public void checkIfUserNotAbleToSeeMostPopularTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInFilterDetailPage_T2198_T2207(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2198 - Check if Guest user is not able to see Most Popular tag with white text and red background on video thumbnail in Filter detail page_T2198");
			System.out.println("T2198");
			extent.extentLogger("Filter-Detail_Most Popular-Tag", "T2198");
		} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2207 - Check if Logged-In user is not able to see Most Popular tag with white text and red background on video thumbnail in Filter detail page_T2207");
			System.out.println("T2207");
			extent.extentLogger("Filter-Detail_Most Popular-Tag", "T2207");
			waitTime(2000);
		}
		navigateToFeedFilters(userType);
		verifyNoMostPopularTag();
		navigateToHomePage();
	}
	public void checkIfUserNotAbleToSeeMostPopularTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInProfileDetailPage_T2199_T2208(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2199 - Check if Guest user is not able to see Most Popular tag with white text and red background on video thumbnail in Profile detail page_T2199");
			System.out.println("T2199");
			extent.extentLogger("Profile-Detail_Most Popular-Tag", "T2199");
		} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2208 - Check if Logged-In user is not able to see Most Popular tag with white text and red background on video thumbnail in Profile detail page_T2208");
			System.out.println("T2208");
			extent.extentLogger("Profile-Detail_Most Popular-Tag", "T2208");
			waitTime(2000);
		}
		click(HipiHomePage.objUserName, "User Handle");
		verifyNoMostPopularTag();
		navigateToHomePage();
	}
	
	
	public void verifyDefaultEffectScreen_T719(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T719 - Logged in user - Check if user is redirected to Video creation screen, when tapped anywhere on above the 'effect section'");
			System.out.println("T719");
			extent.extentLogger("Creator", "T719");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			verifyElementPresentAndClick(HipiCreateVideoPage.objeffect,"Effects Button");
			waitTime(6000);
//			verifyElementPresentAndClick(HipiHomePage.objPlayerScreenForFilters,"Playerscreen");
			tapiOSAtCenterOfScrreen(2);
			waitTime(4000);
			if(verifyElementPresent(HipiCreateVideoPage.objeffect,"Effects"))
			{
				logger.info("User is able to redirect to Video creation screen, when tapped anywhere on above the 'effect section'");
		    	extent.extentLoggerPass("Video creation screen", "User is able to redirect to Video creation screen, when tapped anywhere on above the 'effect section'");
		    }else {
		    	logger.info("User is unable to redirect to Video creation screen, when tapped anywhere on above the 'effect section'");
		    	extent.extentLoggerFail("Video creation screen", "User is unable to redirect to Video creation screen, when tapped anywhere on above the 'effect section'");	
			}
			navigateToHomePage();
		}
	}
	
	
	public void verifyUserTrimDraftedVideo_T1952(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
	
			extent.HeaderChildNode("T1952 - Check  User can trim the video by dragging");
			System.out.println("T1952");
			extent.extentLogger("Post", "T1952");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDraftVideos,"Draft Tab");
			waitUntilElementDisplayed(HipiProfilePage.objDraftsPageVideo, 1);
			verifyElementPresentAndClick(HipiProfilePage.objDraftsPageVideo,"Draft Video");
			waitUntilElementDisplayed(HipiProfilePage.objPostScreenEdit, 1);
			verifyElementPresentAndClick(HipiProfilePage.objPostScreenEdit,"Edit");
				
			waitUntilElementDisplayed(HipiProfilePage.objPostScreenTrimVideoTitle,10);
			String expectedText=getText(HipiCreateVideoPage.objSoundsExistingRecord);
			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
			waitTime(10000);		
			logger.info(" Expected Text"+expectedText);
			WebElement element = getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle);
		    String xDuration = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
		    System.out.println(xDuration);
		    int endX = Integer.parseInt(xDuration) - 50;
		    SwipeAnElement(element, endX, 0);
		    Dimension size1= getDriver().findElement(HipiAddMusicPage.objMusicTrimRightHandle).getSize();
		    System.out.println(size1);
		    String xDuration2 = getAttributValue("x", HipiAddMusicPage.objMusicTrimRightHandle);
		    System.out.println(xDuration2);
		    if(xDuration.equals(xDuration2) == false){
		    	logger.info("User is able to trim sound from trimming screen");
				extent.extentLoggerPass("AddSoundPreShoot", "User is able to trim sound from trimming screen");
		    }else {
		    	logger.error("User is NOT able to trim sound from trimming screen");
				extent.extentLoggerFail("AddSoundPreShoot", "User is NOT able to trim sound from trimming screen");
		    }
			
		    
//		    String expectedText1=getText(HipiCreateVideoPage.objSoundsExistingRecord);
//			verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsExistingRecord,"First record");
//			waitTime(10000);		
//			logger.info(" Expected Text"+expectedText);
//			WebElement element1 = getDriver().findElement(HipiAddMusicPage.objMusicTrimleftHandle);
//		    String xDuration1 = getAttributValue("x", HipiAddMusicPage.objMusicTrimleftHandle);
//		    System.out.println(xDuration);
//		    int endX1 = Integer.parseInt(xDuration) - 50;
//		    SwipeAnElement(element, endX, 0);
//		    Dimension size11= getDriver().findElement(HipiAddMusicPage.objMusicTrimleftHandle).getSize();
//		    System.out.println(size1);
//		    String xDuration21 = getAttributValue("x", HipiAddMusicPage.objMusicTrimleftHandle);
//		    System.out.println(xDuration21);
//		    if(xDuration1.equals(xDuration21) == false){
//		    	logger.info("User is able to trim sound from trimming screen");
//				extent.extentLoggerPass("AddSoundPreShoot", "User is able to trim sound from trimming screen");
//		    }else {
//		    	logger.error("User is NOT able to trim sound from trimming screen");
//				extent.extentLoggerFail("AddSoundPreShoot", "User is NOT able to trim sound from trimming screen");
//		    }
		    
//			String Actualtext=getText(HipiCreateVideoPage.objEditClipDurationInfo);
//			System.out.println(Actualtext);
//			WebElement TrimSlider=getDriver().findElement(By.xpath("//*[@id='leftHandleImage']"));
//			trimVideo(TrimSlider,200,1742,"Trim Left slider");
//			String Expectedtext=getText(HipiCreateVideoPage.objEditClipDurationInfo);
//			System.out.println(Expectedtext);
//			if(Actualtext.contains(Expectedtext))
//			{
//				logger.info("user is able to trim video by dragging");
//		    	extent.extentLoggerPass("Trim Screen", "user is able to trim video by dragging");
//		    }else {
//		    	logger.info("user is unable to trim video by dragging");
//		    	extent.extentLoggerFail("Trim Screen", "user is unable to trim video by dragging"); 
//			}
			navigateToHomePage();
		}
	}

	
	public void checkWhetherHashtagIsRemovedFromFavoriteOrNot_T1170(String userType) throws Exception //Jira ID
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Logged in user - Check whether hashtag is removed from favorite or not_T1170");
			System.out.println("T1170");
			extent.extentLogger("profile_Bookmark", "T1170");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
			verifyElementPresent(HipiProfilePage.objProfileHeader, "profile header");
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			verifyElementPresent(HipiProfilePage.objFavouriteScreen, "favorite screen");
			verifyElementPresentAndClick(HipiProfilePage.objHashtags, "HashTags Button");
			//List<WebElement> beforeremovinghashtags = getDriver().findElements(HipiProfilePage.objHashhtags);
			//int countafterremoving = Favrt1.size();
			removefavoritehashtags(userType);
			navigateToHomePage();
			verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover button");
			click(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
			String value=getParameterFromXML("Searchbar");
			type(HipiProfilePage.objFollowersSearch, value, "Search field");
			waitUntilElementDisplayed(HipiDiscoverPage.objSearchResult, 2000);
			click(HipiDiscoverPage.objSearchResult, "Search Result");
			waitTime(2000);
			click(HipiDiscoverPage.objHashtagsTab, "Hashtags Button");
			waitTime(3000);
			click(HipiDiscoverPage.objHashhtags,"Hashtag");
			click(HipiDiscoverPage.objAddToFavorite, "Add To Favorite");
			navigateToHomePage();
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			verifyElementPresentAndClick(HipiProfilePage.objFavoritesButton, "Bookmark icon");
			verifyElementPresentAndClick(HipiProfilePage.objHashtags, "HashTags Button");
			verifyElementPresentAndClick(HipiProfilePage.objHashhtagsName, "Hashtags");
			verifyElementPresent(HipiProfilePage.objHashTagTitle, "Hashtag title");
			click(HipiProfilePage.objAddedToFavorite, "Added to favorite ");
			Back(1);
			if(verifyElementExist(HipiProfilePage.objHashhtagsName, "Hashtags"))
			{
				logger.info("User is able to see the unfavorite hashtag in favorite screen");
				extent.extentLoggerFail("Profile_Bookmark", "User is able to see the unfavorite hashtag in favorite screen");
			}else {
				logger.info("User is not able to see the unfavorite hashtag in favorite screen");
				extent.extentLoggerPass("Profile_Bookmark", "User is not able to see the unfavorite hashtag in favorite screen");
				
					}
			navigateToHomePage();
			}
	}
	

	
	
	public void checkUserCanLikeHisOwnCommentOrNotInPrivateVideo_T1195(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T1195 - Logged in user - Check user can like his own comment or not in private video_T1195");
			System.out.println("T1195");
			extent.extentLogger("Profile_Private-video", "T1195");
//			addprivatevideo(userType);
			waitTime(2000);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
			waitUntilElementDisplayed(HipiProfilePage.objPrivateVideoTab, 1);
			waitTime(4000);
			verifyElementPresentAndClick(HipiProfilePage.objPrivateVideoTab,"Private Video Tab");
			waitUntilElementDisplayed(HipiProfilePage.objPrivateTabVideo, 1);
			click(HipiProfilePage.objPrivateTabVideo, "Private Tab Video");
			waitTime(3000);
			verifyElementExist(HipiProfilePage.objVideoUnderAllTabs, "Videos");
			waitTime(3000);
			verifyElementPresentAndClick(HipiProfilePage.objCommentButtonInPrivateTab, "Comment Button ");
			verifyElementPresent(HipiProfilePage.objCommentTitleInPrivateTab, "Comment Title ");
			click(HipiProfilePage.objAddToComments, "Add To Comments");
			
			waitTime(5000);
			type(HipiProfilePage.objAddToComments, "HI", "Comment Bar");
			waitTime(3000);
			click(HipiProfilePage.objAddingPost, "Adding Post");
			waitTime(3000);
		String countbeforeliking =	getText(HipiProfilePage.objCommentLikeCount);
		System.out.println(countbeforeliking);
		
		verifyElementPresentAndClick(HipiProfilePage.objLikeButtonInComment, "Like Button ");
		waitTime(3000);
		String countafterliking =	getText(HipiProfilePage.objCommentLikeCount);
		System.out.println(countafterliking);
		if(!countbeforeliking.equals(countafterliking))
		{
			logger.info("user is able to like his own private comment");
			extent.extentLoggerPass("Profile_Private-video", "user is able to like his own private comment");
		}
		else {
			logger.info("user is not able to like his own private comment");
			extent.extentLoggerFail("Profile_Private-video", "user is not able to like his own private comment");
		}
		navigateToHomePage();
	}
	}
	
	
	
	
	
	
	public void shoppableVideoPlayerScreenByTapping__T1944(String userType) throws Exception {
		
			extent.HeaderChildNode("Check the UI of the shoppable video player screen by tapping any details like #Hastag,effect,filter,sound");
			System.out.println("T1944");
			extent.extentLogger("Profile_Private-video", "T1944");	
			navigateToShopPageThrowSound();
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
			verifyElementPresent(HipiHomePage.objLikeICON, "Like Icon");
			verifyElementPresent(HipiHomePage.objShareICON, "Share Icon");		
//			verifyElementPresent(HipiHomePage.objSaveLook, "Save look CTA");
			verifyElementPresent(HipiHomePage.objProfilePicture, "Profile Picture");
			verifyElementPresent(HipiHomePage.objCommentBox, "Comment Box");
//			verifyElementPresentAndClick(HipiHomePage.objSaveLook, "Save look CTA");
			verifyElementPresent(HipiHomePage.objProductImage, "Product Image");	
			verifyElementPresent(HipiProfilePage.objAddToComments, "Add Comments");
			 	
			
	}

	public void UIOfTheVideoPlayerScreen__T1946(String userType) throws Exception {
		extent.HeaderChildNode("Check the UI of the Video player screen");
		System.out.println("T1946");
		extent.extentLogger("Profile_Private-video", "T1946");
		SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
		String beforeShare = getText(HipiHomePage.objDescription);
		verifyElementPresentAndClick(HipiHomePage.objShareIcon, "Share Icon");
		shareWithGmail();
		openGmailApp();
	
		
		if (verifyElementExist(HipiShareScreen.objDeleteOptionGmail, "Delete option")) {
			Back(1);
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
		}else {
			Swipe("DOWN", 5);
			verifyElementPresentAndClick(HipiShareScreen.objFirstMail, "First Mail");
			waitTime(2000);
		}

		verifyElementPresentAndClick(HipiShareScreen.objLinkInbox, "Link inbox");
		
		if (verifyElementExist(HipiShareScreen.objHipiLogo, "Hipi Logo")) {
			logger.info("Logo is displayed");
			extent.extentLoggerPass("","Logo is displayed");
			click(HipiShareScreen.objHipiLogo, "Hipi Logo");
			}else
			{
			logger.info("Logo is not displayed");
			extent.extentLoggerFail("","Logo is not displayed");
			}			String afterShare = getText(HipiHomePage.objDescription);
			waitUntilElementDisplayed(HipiHomePage.objProductImage, 30);
		verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon ");
		
		verifyElementPresent(HipiHomePage.objLikeICON, "Like Icon");
		verifyElementPresent(HipiHomePage.objShareICON, "Share Icon");		
//		verifyElementPresent(HipiHomePage.objSaveLook, "Discover the look CTA");
		verifyElementPresent(HipiHomePage.objProfilePicture, "Profile Picture");
		verifyElementPresent(HipiHomePage.objCommentBox, "Comment Box");
		verifyElementPresent(HipiHomePage.objProductImage, "Product Image");	
		verifyElementPresent(HipiProfilePage.objAddToComments, "Add Comments");
		
		
	}
	
	public void backButton(String userType) throws Exception

	{

	    if(userType.equalsIgnoreCase("NonSubscribedUser"))

	    extent.HeaderChildNode("Logged in User - Check by tapping on back from any key section, user is navigated to Feed screen");

	    System.out.println("T021");

	    extent.extentLogger("Check by tapping on back from any key section, user is navigated to Feed screen", "T021");

	    waitTime(3000);

	    verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");

	    Back(1);

	    Wait(3000);

	    verifyElementPresent(HipiHomePage.objForYou, "Foryou");

	    verifyElementPresentAndClick(HipiHomePage.objProfileIcon, "profile Icon");

	    Back(1);

	    waitTime(3000);

	    verifyElementPresent(HipiHomePage.objForYou, "Foryou");

	    verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon, "create Icon");

	    Back(1);

	    waitTime(3000);

	    verifyElementPresent(HipiHomePage.objForYou, "Foryou");

	    

	}
	
//	Check if user is able to see "Most Popular" tag with white text and red background on video thumbnail in "Sound" detail page
	public void checkIfUserAbleToSeeMostPopularTagWithWhiteTextAndRedBackgroundOnVideoThumbnailInHashtagDetailPage_T2184_T2190(String userType) throws Exception 
	{
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("T2184 - Check if Guest user is able to see Most Popular tag with white text and red background on video thumbnail in Profile detail page_T2184");
			System.out.println("T2184");
			extent.extentLogger("Hashtag-Detail_Most Popular-Tag", "T2184");
		} else if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2190 - Check if Logged-In user is able to see Most Popular tag with white text and red background on video thumbnail in Profile detail page_T2190");
			System.out.println("T2190");
			extent.extentLogger("Hashtag-Detail_Most Popular-Tag", "T2190");
			waitTime(2000);
		}
		waitTime(2000);
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "Arrow Button");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objVideosBannerDetailPage, "Video");
		waitTime(2000);
		SwipeUntilFindElement(HipiHomePage.objMusicButtonBelowLeftSide, "UP");
		verifyElementPresentAndClick(HipiHomePage.objMusicButtonBelowLeftSide, "Sound name");
		waitTime(4000);
		if(verifyElementDisplayed(HipiDiscoverPage.objHashtagDetailMostPopular))
			{
				logger.info(" user is able to see Most Popular tag with white text and red background on video thumbnail in Sound detail page");	
				extent.extentLoggerFail("Video creation screen", " user is able to see Most Popular tag with white text and red background on video thumbnail in Sound detail page");
			}else {
				logger.info(" user is unable to see Most Popular tag with white text and red background on video thumbnail in Sound detail page");	
				extent.extentLoggerPass("Video creation screen", " user is unable to see Most Popular tag with white text and red background on video thumbnail in Sound detail page");
			}	
		navigateToHomePage();
	}
	//Check if Logged-In user is able to see "Most Popular" tag with white text and red background on video thumbnail in "Hashtag" detail page_T2189
		public void checkMostPopularTagOverHashtagDetailScreen_T2189_T2183(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T2189 - Check if Logged-In user is able to see Most Popular tag with white text and red background on video thumbnail in Hashtag detail page");
				System.out.println("T2189");
				extent.extentLogger("Hastag Detailscreen", "T2189");
			}else if(userType.equalsIgnoreCase("Guest")){
				extent.HeaderChildNode("T2183 - Check if Guest user is able to see Most Popular tag with white text and red background on video thumbnail in Hashtag detail page");
				System.out.println("T2183");
				extent.extentLogger("Hastag Detailscreen", "T2183");
			}
				waitTime(2000);
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
				for(int i=0;i<=10;i++)
				{
				if(verifyElementDisplayed(HipiDiscoverPage.objMoreButtonTrendingOnHipi))
				{
					click(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "Arrow");
					if(verifyElementDisplayed(HipiDiscoverPage.objHashtagDetailMostPopular))
					{
						logger.info("User is able to see Most Popular tag on video thumbnail in Hashtag detail page");
						extent.extentLoggerPass("Post screen", "User is able to see Most Popular tag on video thumbnail in Hashtag detail page");
						break;
					}
					else {
						Back(1);
						Swipe("UP", 1);
					}
				}
				}
				navigateToHomePage();
			}
		
		
		
		
		public void checkTheNotificationFormat_T1155(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1155 - Logged in User -Check that displaying of notification is in appropriate format if 2 Users like the video");
				System.out.println("T1155");
				extent.extentLogger("profile_Notification", "T1155");
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
				waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
				waitTime(2000);
				verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
				waitTime(2000);
				if(verifyElementDisplayed(HipiProfilePage.objNotificationLikeFormat) && verifyElementDisplayed(HipiProfilePage.objNotificationLikeFormat2))
				{
					logger.info("Notification is displayed in following format under All Activity @Username and 1 other liked your video ");	
					extent.extentLoggerPass("", "Notification is displayed in following format under All Activity @Username and 1 other liked your video ");
				}else {
					logger.info("Notification is not displayed in following format under All Activity @Username and 1 other liked your video ");	
					extent.extentLoggerFail("", "Notification is not displayed in following format under All Activity @Username and 1 other liked your video User is unable to get login pop-up when user taps on Follow button as guest user");	
				}
				navigateToHomePage();
			}
		}
		
		
		public void checkTheThumbnailAndProfileIsDisplayed_T1157(String userType) throws Exception
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser"))
			{
				extent.HeaderChildNode("T1157 - Logged in User - Check  thumbnail of the video and profile picture of the User is displayed who liked the video");
				System.out.println("T1157");
				extent.extentLogger("profile_Notification", "T1157");
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon" );
				waitUntilElementDisplayed(HipiProfilePage.objThreeDots, 2000);
				waitTime(2000);
				verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification Bell");
				waitTime(2000);
				verifyElementPresent(HipiProfilePage.objVideoThumbnailInAllActivities,"Video Thumbnail");
				waitTime(2000);
				verifyElementPresent(HipiProfilePage.objNotificationProfileThumbnail, "Profile Thumbnail");
				waitTime(2000);
				WebElement ProfilePicture=getDriver().findElement(By.xpath("(//*[@id='notificationsRecyclerview']/*/*[@id='userImage'])[1]"));
				Point elementHeight=ProfilePicture.getLocation();
				int xaxisProfilePicture=elementHeight.getX();
				System.out.println(xaxisProfilePicture);
				WebElement VideoThumbnail=getDriver().findElement(By.xpath("(//*[@resource-id='com.zee5.hipi:id/videoImageView'])[1]"));
				Point elementHeight1=VideoThumbnail.getLocation();
				int xaxisVideoThumbnail=elementHeight1.getX();
				System.out.println(xaxisVideoThumbnail);
				if(xaxisProfilePicture<xaxisVideoThumbnail)
				{
					logger.info("Thumbnail of the video is displayed right side and profile picture of the User at left");	
					extent.extentLoggerPass("", "Thumbnail of the video is displayed right side and profile picture of the User at left");
				}else {
					logger.info("Thumbnail of the video is not displayed right side and profile picture of the User at left");	
					extent.extentLoggerFail("", "Thumbnail of the video is not displayed right side and profile picture of the User at left");	
				}
				navigateToHomePage();
			}
		}
		
		
		public void   VerifyUserOnTappingFollowingTabUnderProfileUserCanSeeFollowersDetails_T1404(String userType) throws Exception 
		{
			if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("T1404 - Logged In User- Verify Following tab and its click on the User profile page");
				System.out.println("T1404");
				extent.extentLogger("Discover", "T1404");
				verifyElementPresentAndClick(HipiHomePage.objDiscoverButton,"Discover Button");
				waitTime(2000);
				verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Bar");
				String val = "Dheeraj";
				type(HipiDiscoverPage.objDiscoverSearchInbox, val , "Search Inbox");
				verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search Reasult");
				hideKeyboard();
				waitTime(5000);	
				 verifyElementPresentAndClick(HipiDiscoverPage.objUsertabinSearchresultpage, "User tab");
				 verifyElementPresentAndClick(HipiDiscoverPage.objProfileName, "Profile Name");
				waitTime(4000);
				verifyElementPresentAndClick(HipiDiscoverPage.objFollowingTab, "Following Tab");
				if(verifyElementDisplayed(HipiDiscoverPage.objFollowingListUserName))
				{
					logger.info("User is able to access the following list clicking upon following tab");	
					extent.extentLoggerPass("", "User is able to access the following list clicking upon following tab");
				}else {
					logger.info("User is unable to access the following list clicking upon following tab");	
					extent.extentLoggerFail("", "User is unable to access the following list clicking upon following tab");	
				}
				navigateToHomePage();
			}
			}
		
		
		
	//==========================================Data Saver======================================================
		
		
		public void	navigateToSettingsPage() throws Exception
		{
//				extent.HeaderChildNode("Navigating To Settings Page");
				System.out.println("Navigating To Settings Page");
				waitTime(1000);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitTime(1000);
				verifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
				waitTime(1000);
				verifyElementPresent(HipiSettingsPage.objSettingAndPrivacy, "Settings And Privacy Header");
				
				
		}
		
		public void likeTime(String userType) throws Exception {
			Time_ExcelUpdate.TestCaseIDNode("TC005");
//			Time_ExcelUpdate.SlNoNode("3");
			Time_ExcelUpdate.ModuleNode("Feed");
			Time_ExcelUpdate.ExpectedProcessingTime("5 sec");

//			Time_ExcelUpdate.TestCaseSummaryNode1("Like time");
			

			String afterclicklikeIcon = getText(HipiHomePage.objLikeCount);
			System.out.println(afterclicklikeIcon);
			TimeStampclick(HipiHomePage.objLikeICON, "Like ICON");
			Instant start=Instant.now();
			logger.info("Start Time : " + start);
			String dislikeIcon  = getText(HipiHomePage.objLikeCount);
				
			if (!afterclicklikeIcon.equals(dislikeIcon)) {
				logger.info("User is able to like the video");	
//				extent.extentLogger("", "<b>End Time : " + getDateDetails(endTime)+"<b>");
				Instant end=Instant.now();
				logger.info("End Time : " + end);
//				extent.extentLogger("", "<b>End Time : " + end+"<b>");
				Duration processingTime = Duration.between(start, end);
				logger.info("Processing time: " + processingTime);
				String Processingtimesec=Long.toString(processingTime.getSeconds());
				String Processingtimemilli=Long.toString(processingTime.toMillis());	
				Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
				
				Time_ExcelUpdate.TestCaseSummaryNode1("User is able to like video");
				extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");	
				}else {
					String Username = getParameterFromXML("NonsubscribedUserName");
				logger.info("User is not able to like the video"+ Username + getListOfDevicesConnected());
				
				Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to like video "+ Username + getListOfDevicesConnected());
				extent.extentLoggerFail("", "User is not able to like the video "+ Username + getListOfDevicesConnected());
			}	
		}
		
		
		
		
		public void commentTime(String userType) throws Exception {
			Time_ExcelUpdate.TestCaseIDNode("TC006");
//			Time_ExcelUpdate.SlNoNode("4");
			Time_ExcelUpdate.ModuleNode("Feed");
			Time_ExcelUpdate.ExpectedProcessingTime("5 Sec");

//			Time_ExcelUpdate.TestCaseSummaryNode1("Comment time");
			extent.HeaderChildNode("Comment posting TC");
			TimeStampverifyElementPresentAndClick(HipiHomePage.objCommentICON, "Click on Comment ICON");
			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 10);
			TimeStampclick(HipiHomePage.objAddAComment, "Add A Comment");
			waitTime(2000);
			TimeStamptype(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
			TimeStamphideKeyboard();
			TimeStampclick(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
			Instant start=Instant.now();
			logger.info("Start Time : " + start);
			//			logger.info("Start Time : " + getDateDetails(start));
			//			extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
			waitUntilElementDisplayed(HipiHomePage.objWaitComment, 10);
			String comment = getText(HipiHomePage.objFirstComment);
			if (comment.contains("Hi Few seconds ago")) {
				logger.info("Comment is added with the typed description on the top [with time display as - just now or few seconds ago]");	
				Instant end=Instant.now();
				logger.info("End Time : " + end);
//				extent.extentLogger("", "<b>End Time : " + end+"<b>");
				Duration processingTime = Duration.between(start, end);
				logger.info("Processing time: " + processingTime);
				String Processingtimesec=Long.toString(processingTime.getSeconds());
				String Processingtimemilli=Long.toString(processingTime.toMillis());	
				Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
				Time_ExcelUpdate.TestCaseSummaryNode1("Comment is added with the typed description on the top ");
				extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");		
				}else {
					String Username = getParameterFromXML("NonsubscribedUserName");
				logger.info("Comment is not added with the typed description on the top"+ Username + getListOfDevicesConnected());
				Time_ExcelUpdate.timeStampNode("Comment is not added with the typed description on the top"+ Username + getListOfDevicesConnected());
				Time_ExcelUpdate.TestCaseSummaryNode1("Comment is not added with the typed description on the top "+ Username + getListOfDevicesConnected());
				extent.extentLoggerFail("", "Comment is not added with the typed description on the top "+ Username + getListOfDevicesConnected());
				}
//			Date endTime = new Date();
//			logger.info("End Time : " + getDateDetails(endTime));
			//		extent.extentLogger("", "<b>End Time : " + getDateDetails(endTime)+"<b>");
			
			TimeStampnavigateToHomePage();
		}

		

		public void videoPostTime(String userType) throws Exception {

			extent.HeaderChildNode("Video posting TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoTickBtn, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoTickBtn,"Tick");
			waitTime(3000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 20);
			String postDescription = "Desc"+GeneratingRandomString(7);
			type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
			hideKeyboard();
//			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//			waitTime(3000);
			if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
			{
				click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//				click(HipiCreateVideoPage.objDoneCTC, "Done Button");
			}else {
				logger.info("User is unable to See Language Options");
				extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
				
			}
			verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
				Back(1);
			}else {
				logger.info("User is unable to See Share Sheet");
				extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
			}
			Date startTime = new Date();
			logger.info("Start Time : " + getDateDetails(startTime));
			extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if (waitUntilElementDisplayed(HipiHomePage.objForYou, 2000)) {
				logger.info("User is able to see Home screen");
				extent.extentLogger("", "User is able to see Home screen");
				Date endTime = new Date();
				logger.info("End Time : " + getDateDetails(endTime));
				extent.extentLogger("", "<b>End Time : " + getDateDetails(endTime)+"<b>");
				String processingTime = getDateDifference(startTime, endTime);
				logger.info("Processing time: " + processingTime);
				extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");
				extent.HeaderChildNode("<b>Processing time: " + processingTime+"<b>");
			}
			else {
				logger.error("Processing time calculation failed");
				extent.extentLoggerFail("", "Processing time calculation failed");
			}

		}
		
		
		public void launchApptime(String TCID) throws Exception {
			Time_ExcelUpdate.TestCaseIDNode(TCID);
//			Time_ExcelUpdate.SlNoNode("1");
			Time_ExcelUpdate.ModuleNode("Feed Arrival");
//			Time_ExcelUpdate.TestCaseSummaryNode1("User is able to Launch App");

			Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
			extent.HeaderChildNode("Launching hipi app");
			
//			extent.HeaderChildNode("Launch hipi app");
//			if(TimeStampverifyElementExist(HipiHomePage.objUpdate, "Update Button"))
//				{
			
//				TimeStampclick(HipiHomePage.objUpdate, "Update Button");
//				waitTime(4000);
//				waitForElementNotDisplayed(HipiHomePage.objCancelDownload);
//				waitTime(10000);
////				TimeStamprelaunch(false);
//				if(TimeStampverifyElementExist(HipiHomePage.objDone, "Done Button")) {
//					TimeStampclick(HipiHomePage.objDone, "Done Button");
//					
//				}
//				
//				}else{
//					System.out.println("Update Popup is not displayed");
//					}
			waitUntilElementDisplayed(HipiLoginPage.objMaybeLater, 1);
			if(TimeStampverifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))
			{
				TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");
				System.out.println("Update Popup is displayed");
			}else{
				System.out.println("Update Popup is not displayed");
			}
			Instant start = Instant.now();
//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);
//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);

			if(TimeStampwaitForElementDisplayediOS(HipiHomePage.objForYou, 1000, "for you button in feed")) {
			screencapture();
			Instant end = Instant.now();
			Duration timeElapsed = Duration.between(start, end);
			extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
			System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
			extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");
			description=getText(HipiHomePage.objDescription);
			System.out.println(description);
			String Processingtimesec=Long.toString(timeElapsed.getSeconds());
			String Processingtimemilli=Long.toString(timeElapsed.toMillis());	
//			FeedDescriptionData.FeedDescriptionData(Processingtimemilli);
			
			Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
			Time_ExcelUpdate.TestCaseSummaryNode1("Feed Screen launch time.");
			extent.extentLogger("", "Feed screen seen  at Time----- " + end);
			
			}else {
				String Username = getParameterFromXML("NonsubscribedUserName");
				
				Time_ExcelUpdate.TestCaseSummaryNode1("Feed Screen is not dispalyed " + Username + getListOfDevicesConnected());
				extent.extentLogger("", "Feed Screen is not dispalyed " + Username + getListOfDevicesConnected());
			}
		
		}
		public void videoUIRepate(String userType) throws Exception {
			Time_ExcelUpdate.TestCaseIDNode("TC039");
//			Time_ExcelUpdate.SlNoNode("1");
			Time_ExcelUpdate.ModuleNode("Video UI");
//			Time_ExcelUpdate.TestCaseSummaryNode1("Feed Screen launch time.");
//			Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
			extent.HeaderChildNode("Video is repeting");

			Instant start = Instant.now();
			
			TimeStampwaitForElementDisplayediOS(HipiHomePage.objForYou, 1000, "for you button in feed");		
			for(int i=0; i<=100;i++) {
			 String videoid = getText(HipiHomePage.objVideoUIID);
				String Username = getParameterFromXML("NonsubscribedUserName");
				creatCSV(videoid,Username,getListOfDevicesConnected());
//				extent.extentLoggerPass("", videoid+","+Username+"," +getListOfDevicesConnected()+",");
//				Time_ExcelUpdate.TestCaseSummaryNode1( videoid+","+Username+"," +getListOfDevicesConnected()+",");
				
				waitTime(5000);
				TimeStampSwipe("UP", 1);
				
			}
			TimeStampnavigateToHomePage();
			
		}
		
		public static String getListOfDevicesConnected() {
			String deviceID = null;
			try {
				String cmd2 = "adb devices";
				Process p1 = Runtime.getRuntime().exec(cmd2);
				BufferedReader br = new BufferedReader(new InputStreamReader(p1.getInputStream()));
				String s = "";
				Thread.sleep(1000);
				while (!(s = br.readLine()).isEmpty()) {
					if (!s.equals("List of devices attached")) {
						if(!s.contains(".")) {
							deviceID = s.replaceAll("device", "").trim();
							System.out.println(deviceID);
						}
					}
				}
				return deviceID;
			} catch (IOException | InterruptedException e) {
				e.printStackTrace();
			}
			return deviceID;
		}
		
		public void videoPostTime__15Sec(String userType) throws Exception {

			extent.HeaderChildNode("Video posting 15 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnPostButton();
		}
		public void videoNextButtonTime__15Sec(String userType) throws Exception {

			extent.HeaderChildNode("Video posting 15 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnNextButton();
		}

		public void timeTakeClickingOnNextButton() throws Exception {
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 20);
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
			Date startTime1 = new Date();
			logger.info("Start Time : " + getDateDetails(startTime1));
			extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 60);
			Date endTime1 = new Date();
			logger.info("End Time : " + getDateDetails(endTime1));
			extent.extentLogger("", "<b>End Time : " + getDateDetails(endTime1)+"<b>");
			String processingTime1 = getDateDifference(startTime1, endTime1);
			logger.info("Processing time: " + processingTime1);
			extent.extentLogger("", "<b>clicking on next button Processing time: " + processingTime1+"<b>");
			extent.HeaderChildNode("<b>clicking on next button Processing time: " + processingTime1+"<b>");
			discardPopup();
		}
		
	public void timeTakeClickingOnPostButton() throws Exception {
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 20);
		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");	
		waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 60);
		String postDescription = "Desc"+GeneratingRandomString(7);
		type(HipiCreateVideoPage.objPostDescription, postDescription, "Description");
		hideKeyboard();
//		verifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(verifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			click(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			click(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		verifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
		Date startTime = new Date();
		logger.info("Start Time : " + getDateDetails(startTime));
		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		
		for(int i=0; i<=2000;i++) {
			if(!verifyElementDisplayed(HipiCreateVideoPage.objUploadedVideoPopup)){
//				screencapture();
				Date endTime = new Date();
				if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
					Back(1);
				}else {
					logger.info("User is unable to See Share Sheet");
					extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
				}
				logger.info("End Time : " + getDateDetails(endTime));
				extent.extentLogger("", "<b>End Time : " + getDateDetails(endTime)+"<b>");
				String processingTime = getDateDifference(startTime, endTime);
				logger.info("Processing time: " + processingTime);
				extent.extentLogger("", "<b>Clicking On Post Button Processing time: " + processingTime+"<b>");
				extent.HeaderChildNode("<b>Clicking On Post Button Processing time: " + processingTime+"<b>");
				break;
			}
		}
	}
		
		public void videoPostTime__30Sec() throws Exception {
			extent.HeaderChildNode("Video posting 30 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj30sec, "30 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnPostButton();
		}
		public void videoNextButtonTime__30Sec() throws Exception {
			extent.HeaderChildNode("Video posting 30 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj30sec, "30 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnNextButton();
		}
		public void videoPostTime__45Sec() throws Exception {
			extent.HeaderChildNode("Video posting 45 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj45sec, "45 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnPostButton();
		}

		public void videoNextButtonTime__45Sec() throws Exception {
			extent.HeaderChildNode("Video posting 45 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj45sec, "45 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnNextButton();
		}
		
		public void videoPostTime__60Sec() throws Exception {
			extent.HeaderChildNode("Video posting 60 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj60sec, "60 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnPostButton();
		}
		
		public void videoNextButtonTime__60Sec() throws Exception {
			extent.HeaderChildNode("Video posting 60 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj60sec, "60 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnNextButton();
		}
		public void videoPostTime__90Sec() throws Exception {
			extent.HeaderChildNode("Video posting 90 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj90sec, "90 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnPostButton();
		}
		public void videoNextButtonTime__90Sec() throws Exception {
			extent.HeaderChildNode("Video posting 90 Sec TC");
			verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
			allowPermissions();
			waitTime(5000);
			verifyElementPresentAndClick(HipiCreateVideoPage.obj90sec, "90 Sce Button");
			verifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			timeTakeClickingOnNextButton();
		}
		
		public void VideoStartUpTimeAfterSwipe() throws Exception {
			Time_ExcelUpdate.TestCaseIDNode("TC027");
			Time_ExcelUpdate.ModuleNode("Feed");
			Time_ExcelUpdate.ExpectedProcessingTime("1.1 Sec");

			
			extent.HeaderChildNode("Video start up time after swipe.");
			description = getText(HipiHomePage.objDescription);
			TimeStampSwipe("DOWN", 1);
			Instant start=Instant.now();
			logger.info("Start Time : " + start);
			Date startTime = new Date();
			logger.info("Start Time : " + getDateDetails(startTime));
			description1 = getText(HipiHomePage.objDescription);
			if (!description.equals(description1)) {
				logger.info("user able to swipe Down Screen");
				Instant end=Instant.now();
				logger.info("End Time : " + end);
//				extent.extentLogger("", "<b>End Time : " + end+"<b>");
				Duration processingTime = Duration.between(start, end);
				logger.info("Processing time: " + processingTime);
				String Processingtimesec=Long.toString(processingTime.getSeconds());
				String Processingtimemilli=Long.toString(processingTime.toMillis());	
				Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
				
//				extent.HeaderChildNode("<b>Video start up time after swipe Processing time: " + processingTime+"<b>");
				Time_ExcelUpdate.TestCaseSummaryNode1("User is able to swipe Video down and able to see new video");
				extent.extentLogger("", "User is able to swipe Video down and able to see new video");
			}else {
				String Username = getParameterFromXML("NonsubscribedUserName");
				logger.info("User is unable to swipe Video down and unable to see new video"+ Username + getListOfDevicesConnected());
				Time_ExcelUpdate.timeStampNode("User is unable to swipe Video down and unable to see new video"+ Username + getListOfDevicesConnected());
				Time_ExcelUpdate.TestCaseSummaryNode1("User is unable to swipe Video down and unable to see new video"+ Username + getListOfDevicesConnected());
				extent.extentLogger("", "User is unable to swipe Video down and unable to see new video"+ Username + getListOfDevicesConnected());
//			
			}
//			extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
//			waitUntilElementDisplayed(HipiHomePage.objProgressBarStart, 10);
			
			
				
		}
		
		public void DiscoverScreenLoadTime() throws Exception {
			Time_ExcelUpdate.TestCaseIDNode("TC007");
//			Time_ExcelUpdate.SlNoNode("4");
			Time_ExcelUpdate.ModuleNode("Discover");
			Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");

//			Time_ExcelUpdate.TestCaseSummaryNode1("Discover screen load time");
			extent.HeaderChildNode("Discover screen load time");
			
			if(TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button")) {
			Instant start=Instant.now();
			logger.info("Start Time : " + start);
//			extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
			waitUntilElementDisplayed(HipiDiscoverPage.objFirstProfileName, 10);
			Instant end=Instant.now();
			logger.info("End Time : " + end);
//			extent.extentLogger("", "<b>End Time : " + end+"<b>");
			Duration processingTime = Duration.between(start, end);
			logger.info("Processing time: " + processingTime);
			String Processingtimesec=Long.toString(processingTime.getSeconds());
			String Processingtimemilli=Long.toString(processingTime.toMillis());	
			Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
			Time_ExcelUpdate.TestCaseSummaryNode1("Discover screen is loaded");
			extent.extentLogger("", "Discover screen is loaded");
			}else {
				String Username = getParameterFromXML("NonsubscribedUserName");
				Time_ExcelUpdate.timeStampNode("Discover screen is not loaded"+ Username + getListOfDevicesConnected());
				Time_ExcelUpdate.TestCaseSummaryNode1("Discover screen is loaded "+ Username + getListOfDevicesConnected());
				extent.extentLoggerFail("", "Discover screen is not loaded"+ Username + getListOfDevicesConnected());

			}
			TimeStampnavigateToHomePage();
		}
		
		
		
	public void	AutoSuggestionTime(String userName) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC008");
//		Time_ExcelUpdate.SlNoNode("4");
		Time_ExcelUpdate.ModuleNode("Discover");
		Time_ExcelUpdate.ExpectedProcessingTime("2 Sec");

		extent.HeaderChildNode("Auto suggestion time.");
		TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(7000);
		TimeStampverifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(4000);
		TimeStamptype(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
//		Date startTime = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiDiscoverPage.objSearchResult, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		Time_ExcelUpdate.TestCaseSummaryNode1("Auto suggestion is displayed in discover screen");
		extent.extentLogger("", "Auto suggestion is displayed in discover screen");
		}	else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.TestCaseSummaryNode1("Auto suggestion is not displayed in discover screen" + Username + getListOfDevicesConnected());
			Time_ExcelUpdate.timeStampNode("Auto suggestion is not displayed in discover screen" + Username + getListOfDevicesConnected());
			extent.extentLoggerFail("", "Auto suggestion is not displayed in discover screen" + Username + getListOfDevicesConnected());

		}
//		
		TimeStampnavigateToHomePage();
	}
		
	
	public void OnClickingBannerScreenLoadTime(String userType) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC009");
		Time_ExcelUpdate.ModuleNode("Discover");
		Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");

		
		extent.HeaderChildNode("On clicking Banner, screen load time.");

		TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitUntilElementDisplayed(HipiDiscoverPage.objBannersBelowTheSearchField, 10);
		TimeStampverifyElementPresentAndClick(HipiDiscoverPage.objBannersBelowTheSearchField, "Video Banner");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
//		Date startTime = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiDiscoverPage.objBannerHeader, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("On clicking Banner, screen is loaded");
		extent.extentLogger("", "On clicking Banner, screen is loaded");
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.timeStampNode("On clicking Banner, screen is not not displayed"+ Username + getListOfDevicesConnected());
			Time_ExcelUpdate.TestCaseSummaryNode1("On clicking Banner, screen is not not displayed"+ Username + getListOfDevicesConnected());
			extent.extentLoggerFail("", "On clicking Banner, screen is not not displayed"+ Username + getListOfDevicesConnected());

		}
		TimeStampnavigateToHomePage();
	}
	
	public void CreatorPlatformSoundScreenLoadTime() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC024");
		Time_ExcelUpdate.ExpectedProcessingTime("5 Sec");

		Time_ExcelUpdate.ModuleNode("Creator");
		
		extent.HeaderChildNode("Creator platform- sound screen load time.");
		
		TimeStampverifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		TimeStampnaallowPermissions();
		waitTime(3000);
		TimeStampclick(HipiCreateVideoPage.objSoundIcon, "Sounds");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
		 Date startTime = new Date();
			logger.info("Start Time : " + getDateDetails(startTime));
//			extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
			if(waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 10)) {
			Instant end=Instant.now();
			logger.info("End Time : " + end);
//			extent.extentLogger("", "<b>End Time : " + end+"<b>");
			Duration processingTime = Duration.between(start, end);
			logger.info("Processing time: " + processingTime);
			String Processingtimesec=Long.toString(processingTime.getSeconds());
			String Processingtimemilli=Long.toString(processingTime.toMillis());	
			Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
			
//			extent.HeaderChildNode("<b>sound screen Processing time: " + processingTime+"<b>");
			Time_ExcelUpdate.TestCaseSummaryNode1("Creator platform- sound screen loaded");
			extent.extentLogger("", "Creator platform- sound screen loaded");
			}else {
				String Username = getParameterFromXML("NonsubscribedUserName");
				Time_ExcelUpdate.timeStampNode("Creator platform- sound screen is not loaded"+ Username + getListOfDevicesConnected());
				Time_ExcelUpdate.TestCaseSummaryNode1("Creator platform- sound screen is not loaded"+ Username + getListOfDevicesConnected());
				extent.extentLoggerFail("", "Creator platform- sound screen is not loaded"+ Username + getListOfDevicesConnected());
			}
			TimeStampnavigateToHomePage();
	}
	
	
	
	
	
	
	//==========================================12-07-2022===========================================================
	
	
	
	public void railsPageTime() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC010");
		Time_ExcelUpdate.ModuleNode("Discover");
		Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");
		
		if(verifyElementExist(HipiHomePage.objClaimNowButton,"Claim rewards popup")) {
			Back(1);
		}
		extent.HeaderChildNode("Rails page time");
		TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		TimeStampclick(HipiDiscoverPage.objBollywoodZoneAfterTappingArrow, "More Button");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
//		Date startTime = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiDiscoverPage.objProfileIconInBollywoodZone, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		Time_ExcelUpdate.TestCaseSummaryNode1("Rails page Displayed");
		extent.extentLogger("", "Rails page Displayed");
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.timeStampNode("Rails page is not displayed " + Username + getListOfDevicesConnected());
			Time_ExcelUpdate.TestCaseSummaryNode1("Rails page is not displayed " + Username + getListOfDevicesConnected());
			extent.extentLoggerFail("", "Rails page is not displayed " + Username + getListOfDevicesConnected());
		}
		TimeStampnavigateToHomePage();
//		TimeStampclick(HipiDiscoverPage.objBollywoodProfileName, "First profile rails");
//		
//		Date startTime1 = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime1));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
//		waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 10);
//		Date endTime1 = new Date();
//		logger.info("End Time : " + getDateDetails(endTime1));
////		extent.extentLogger("", "<b>End Time : " + getDateDetails(endTime1)+"<b>");
//		String processingTime1 = getDateDifference(startTime1, endTime1);
//		logger.info("Processing time: " + processingTime1);
//		extent.extentLogger("", "<b>Rails page Processing time: " + processingTime1+"<b>");
//		extent.HeaderChildNode("<b>Rails page Processing time: " + processingTime1+"<b>");
//		TimeStampnavigateToHomePage();
	}
	
	public void hashtagDetailPageTime() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC011");
		Time_ExcelUpdate.ModuleNode("Discover");
		Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");

		
		extent.HeaderChildNode("hashtag detail page time.");
		waitUntilElementDisplayed(HipiHomePage.objDiscoverButton,10);
		TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		TimeStampSwipe("UP",2);
		TimeStampclick(HipiDiscoverPage.objMoreButtonTrendingOnHipi, "More Button");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
//		Date startTime = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiHashtagDetailPage.objHashtagTitle, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
//		extent.HeaderChildNode("<b>Hashtag detail page Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("Hashtag detail page is displayed from discover screen ");
		extent.extentLogger("", "Hashtag detail page is displayed from discover screen ");
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.timeStampNode("hashtag detail page is not displayed"+ Username + getListOfDevicesConnected());
			Time_ExcelUpdate.TestCaseSummaryNode1("hashtag detail page is not displayed from discover screen"+ Username + getListOfDevicesConnected());
			extent.extentLoggerFail("", "Hashtag detail page is not displayed"+ Username + getListOfDevicesConnected());
		}
		TimeStampnavigateToHomePage();
		
	} 
	
	
	
	public void EffectsLoadTime() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC025");
		Time_ExcelUpdate.ModuleNode("Creator");
		Time_ExcelUpdate.ExpectedProcessingTime("Depend on Filter");

		
		extent.HeaderChildNode("Effects load time.");

		TimeStampverifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		TimeStampnaallowPermissions();
		waitTime(3000);
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objeffect, "Effect option");
		TimeStampclick(HipiCreateVideoPage.objDownloadedFirstFilter, "First Effect");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
		Date startTime = new Date();
		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objDownloadedEffect, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		
//		extent.HeaderChildNode("<b>Effect download Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("Effects screen is loaded");
		extent.extentLogger("", "Effects screen is loaded");
		TimeStampBack(2);
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.TestCaseSummaryNode1("Effects screen is not loaded"+ Username + getListOfDevicesConnected());
			Time_ExcelUpdate.timeStampNode("Effects screen is not loaded"+ Username + getListOfDevicesConnected());
			extent.extentLoggerFail("", "Effects screen is not loaded"+ Username + getListOfDevicesConnected());
		}
		TimeStampnavigateToHomePage();
	}
	
	

	public void FilterLoadTime() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC026");
		Time_ExcelUpdate.ModuleNode("Creator");
		Time_ExcelUpdate.ExpectedProcessingTime("Depend on Filter");

		
		extent.HeaderChildNode("Filter  load time.");
		TimeStampverifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		TimeStampnaallowPermissions();
		waitTime(3000);
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objfilter, "Filter option");
		TimeStampclick(HipiCreateVideoPage.objDownloadedFirstFilter, "First Filter");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
		Date startTime = new Date();
		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objDownloadedEffect, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		
//		extent.HeaderChildNode("<b>Filter download Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("Filter is diaplayed");
		extent.extentLogger("", "Filter is diaplayed");
	}else {
		String Username = getParameterFromXML("NonsubscribedUserName");
		Time_ExcelUpdate.timeStampNode("Filter is not diaplayed"+ Username + getListOfDevicesConnected());
		Time_ExcelUpdate.TestCaseSummaryNode1("Filter is not diaplayed"+ Username + getListOfDevicesConnected());
		extent.extentLoggerFail("", "Filter is not diaplayed"+ Username + getListOfDevicesConnected());
	}
		TimeStampnavigateToHomePage();
	
	}
	
	
	public void BannerLoadTime() throws Exception {
		
		Time_ExcelUpdate.TestCaseIDNode("TC012");
		Time_ExcelUpdate.ModuleNode("Discover");
		
		extent.HeaderChildNode("Carrousel/ Banner load time.");
		waitUntilElementDisplayed(HipiHomePage.objDiscoverButton,10);
		TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
//		Date startTime = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiDiscoverPage.objBannersBelowTheSearchField, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		
//		extent.HeaderChildNode("<b>Banner load Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("User is able to view Carrousel Banner in discover screen");
		extent.extentLogger("", "User is able to view Carrousel Banner in discover screen");
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.timeStampNode("User is unable to view Carrousel Banner in discover screen"+ Username + getListOfDevicesConnected());
			Time_ExcelUpdate.TestCaseSummaryNode1("User is unable to view Carrousel Banner in discover screen"+ Username + getListOfDevicesConnected());
			extent.extentLogger("", "User is unable to view Carrousel Banner in discover screen"+ Username + getListOfDevicesConnected());
			
		}
		TimeStampnavigateToHomePage();
		
	}
	
	
	
	public void SearchScreenTimePostSearchingAKeyword(String name) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC013");
		Time_ExcelUpdate.ModuleNode("Discover");
		Time_ExcelUpdate.ExpectedProcessingTime("4.5 Sec");

		
		extent.HeaderChildNode("Search screen time post searching a keyword");
		
		TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		TimeStampverifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(4000);
		TimeStamptype(HipiDiscoverPage.objDiscoverSearchInbox, name, "Type value");
		TimeStamphideKeyboard();
		waitTime(3000);
		TimeStampclick(HipiDiscoverPage.objSearchResult, "Search result");
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
//		Date startTime = new Date();
//		logger.info("Start Time : " + getDateDetails(startTime));
//		extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
		if(waitUntilElementDisplayed(HipiDiscoverPage.objDiscoverSearchInbox, 10)) {
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
//		extent.HeaderChildNode("<b>Search screen time post searching a keyword Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("User is able to see Search icon from discove screen");
		extent.extentLogger("", "User is able to see Search icon from discove screen");
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.timeStampNode("User is unable  to see Search icon from discove screen"+ Username + getListOfDevicesConnected());
			Time_ExcelUpdate.TestCaseSummaryNode1("User is unable to see Search icon from discove screen"+ Username + getListOfDevicesConnected());
			extent.extentLoggerFail("", "User is unable to see Search icon from discove screen"+ Username + getListOfDevicesConnected());
		}
		TimeStampnavigateToHomePage();
		
	}
	
	
	
	public void create_Video_And_Next(String k,String userType,String TCID , String TCID1) throws Exception {
		extent.HeaderChildNode("Video posting scenario for time " +k + " seconds");
		Time_ExcelUpdate.TestCaseIDNode(TCID);
		Time_ExcelUpdate.ModuleNode("Create video scenario");
		
		TimeStamp_create_Video_Of_Specific_Time_Next(k ,TCID1);	
//		TimeStamptimeTakeClickingOnNextButton();
		
	}
	public void create_Video_And_Post(String k,String userType,String TCID , String TCID1) throws Exception {
		extent.HeaderChildNode("Video posting scenario for time " +k + " seconds");
		Time_ExcelUpdate.TestCaseIDNode(TCID);
		Time_ExcelUpdate.ModuleNode("Create video scenario " + k + " seconds");
//		Time_ExcelUpdate.TestCaseSummaryNode1("Check user able to Create video of " +k + " seconds");
		TimeStamp_create_Video_Of_Specific_Time_Post(k);	
	}
		/*
		 * To create video with required time
		 * 
		 */
		public void TimeStamp_create_Video_Of_Specific_Time_Next(String k , String TCID1) throws Exception {
			Boolean flag= false;
			TimeStampclick(HipiHomePage.objVideoCreateIcon, "Create button");
			waitTime(3000);
			TimeStampnaallowPermissions();
			waitTime(4000);
			if (TimeStampverifyElementExist(HipiCreateVideoPage.objRecordIcon,"Camera icon play")) {
				waitTime(4000);
				TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.obj15seco(k), k );
				waitTime(4000);
				TimeStampclick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
				waitTime(5000);
				for(int i=1; i<=15; i++) {
					if (TimeStampverifyElementExist(HipiCreateVideoPage.obj00sec, "00sec")) {
						loginWithGoogleBrowserStack("NonSubscribedUser");
						waitTime(4000);
						TimeStampclick(HipiHomePage.objVideoCreateIcon, "Create button");
						waitTime(4000);
						TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.obj15seco(k), k );
						waitTime(4000);
						TimeStampclick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
						waitTime(5000);
						TimeStampverifyElementExist(HipiCreateVideoPage.obj00sec, "00sec");
					}else {
						break ;
					}
					}

//				TimeStamptimeTakeClickingOnNextButton();
				waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 90);
				TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
				Instant start=Instant.now();
				logger.info("Start Time : " + start);
//				Date startTime1 = new Date();
//				logger.info("Start Time : " + getDateDetails(startTime1));
//				extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
				
				if(waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 60)) {
				Instant end=Instant.now();
				logger.info("End Time : " + end);
//				extent.extentLogger("", "<b>End Time : " + end+"<b>");
				Duration processingTime = Duration.between(start, end);
				logger.info("Processing time: " + processingTime);
				String Processingtimesec=Long.toString(processingTime.getSeconds());
				String Processingtimemilli=Long.toString(processingTime.toMillis());	
				Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
				Time_ExcelUpdate.TestCaseSummaryNode1("User is able to see post screen when user click on next button");
				extent.extentLogger("", "User is able to see post screen when user click on next button");
				}else {
					String Username = getParameterFromXML("NonsubscribedUserName");
					Time_ExcelUpdate.timeStampNode("User is unable to see post screen when user click on next button" + Username + getListOfDevicesConnected());
					Time_ExcelUpdate.TestCaseSummaryNode1("User is unable to see post screen when user click on next button" + Username + getListOfDevicesConnected());
					extent.extentLoggerFail("", "User is unable to see post screen when user click on next button" + Username + getListOfDevicesConnected());
				}
				//New
				extent.HeaderChildNode("Video posting scenario for time " +k + " seconds");
				Time_ExcelUpdate.TestCaseIDNode(TCID1);
				Time_ExcelUpdate.ModuleNode("Create video scenario");
				//TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
				//waitTime(3000);
				if(TimeStampverifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
				{
					TimeStampclick(HipiCreateVideoPage.objEnglishLanguage, "English Language");
					//TimeStampclick(HipiCreateVideoPage.objDoneCTC, "Done Button");
				}else {
					logger.info("User is unable to See Language Options");
					extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
					
				}
				
				TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objSelectVideoCategory,"Select video category");
				waitTime(3000);
				TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoCategoryValue,"Any category");
				TimeStampBack(1);
				waitTime(3000);	
				TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
//				waitTime(1000);
				if(waitUntilElementDisplayed(HipiCreateVideoPage.objNeedfeedbackPopUp,20)){
					System.out.println("Feedback pop up displayed");

					verifyElementPresentAndClick(HipiCreateVideoPage.objNoCtaOnNeedFeedbackPopUp," No CTA on need feedback popup");
				}
				Instant start1=Instant.now();
				logger.info("Start Time : " + start1);
				
				if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {

					
					
					if(verifyElementExist(HipiCreateVideoPage.objShareSheet, "Share Sheet")) {
						flag = true;
						TimeStampBack(1);
					}else {
						logger.info("User is unable to See Share Sheet");
						extent.extentLoggerPass("", "User is unable to See Share Sheet"); 
					}
					waitTime(8000);
//				Date startTime1 = new Date();
//				logger.info("Start Time : " + getDateDetails(startTime1));
//				extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
					Instant end1=Instant.now();
					logger.info("End Time : " + end1);
				
//					extent.extentLogger("", "<b>End Time : " + end+"<b>");
					Duration processingTime1 = Duration.between(start1, end1);
					logger.info("Processing time: " + processingTime1);
					String Processingtimesec1=Long.toString(processingTime1.getSeconds());
					String Processingtimemilli1=Long.toString(processingTime1.toMillis());	
					Time_ExcelUpdate.timeStampNode(Processingtimesec1+"."+Processingtimemilli1 + " Sec");
					
//					extent.HeaderChildNode("<b>clicking on next button Processing time: " + processingTime+"<b>");
					if(flag || k.equals("15s")) {
					Time_ExcelUpdate.TestCaseSummaryNode1("User able to Create video when user click on post Button");
					extent.extentLogger("", "User able to Create video when user click on post Button");}
				}else if(flag==false && k.equals("15s")) {
					Time_ExcelUpdate.TestCaseSummaryNode1("User able to Create video when user click on post Button");
					extent.extentLogger("", "User able to Create video when user click on post Button");}
				else if(flag==false){
					String Username = getParameterFromXML("NonsubscribedUserName");
					Time_ExcelUpdate.timeStampNode("User unable to Create video when user click on post Button " + Username + getListOfDevicesConnected());
					Time_ExcelUpdate.TestCaseSummaryNode1("User unable to Create video when user click on post Button " + Username + getListOfDevicesConnected());
					extent.extentLoggerFail("", "User unable to Create video when user click on post Button " + Username + getListOfDevicesConnected());
					
					}
				TimeStampdiscardPopup();

			}
		}
		public void TimeStamp_create_Video_Of_Specific_Time_Post(String k) throws Exception {
			TimeStampclick(HipiHomePage.objVideoCreateIcon, "Create button");
			
			TimeStampnaallowPermissions();
			waitTime(4000);
			if (TimeStampverifyElementExist(HipiCreateVideoPage.objRecordIcon,"Camera icon play")) {
				waitTime(4000);
				TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.obj15seco(k), k );
				waitTime(4000);
				TimeStampclick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
				waitTime(5000);
				for(int i=1; i<=15; i++) {
					if (TimeStampverifyElementExist(HipiCreateVideoPage.obj00sec, "00sec")) {
						TimeStampnavigateToHomePage();
						waitTime(4000);
						TimeStampclick(HipiHomePage.objVideoCreateIcon, "Create button");
						waitTime(4000);
						TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.obj15seco(k), k );
						waitTime(4000);
						TimeStampclick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
						waitTime(5000);
//						TimeStampverifyElementExist(HipiCreateVideoPage.obj00sec, "00sec");
					}else {
						break ;
					}
					}

				TimeStamptimeTakeClickingOnPostButton();
			}
		}
		
		
		
		
	
	
	
	
public void TimeStampnaallowPermissions() throws InterruptedException, Exception {
		
		if(TimeStampverifyElementExist(HipiCreateVideoPage.objCreatePermissionVideo, "Allow ZEE5 to take pictures and record video?"))
		{
			if (TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
			TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow");
			TimeStampclick(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
			Thread.sleep(2000);
			}else {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
				
			}
			if (TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow ZEE5 to access photos, media, and files on your device");
			TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow ZEE5 to access photos, media, and files on your device?");		
			TimeStampclick(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
			logger.info("Allow ZEE5 to access photos, media, and files on your device-"+ "Allow button clicked");
			Thread.sleep(2000);
			}else {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");	
			}
			if (TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow button clicked")) {
			logger.info("Permission dialog:"+ "Allow ZEE5 to record audio");
			TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow ZEE5 to record audio?");
			TimeStampclick(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");	
			logger.info("Allow ZEE5 to record audio-"+ "Allow button clicked");
//			Thread.sleep(10000);
			}else {
				logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video? is not displayed");
				
			}
//			verifyElementExist(HipiCreateVideoPage.objCreateReadyDialog, "Ready dialog");
//			click(HipiCreateVideoPage.objCreateReadyYes, "yes button clicked");	
//			logger.info("Ready dialog displayed:"+ "yes button clicked");
			Thread.sleep(2000);
		}
		
	}
	
public void TimeStamptimeTakeClickingOnNextButton(String K,String TCID1) throws Exception {
//	waitUntilElementDisplayed(HipiCreateVideoPage.objdeleteclip, 40);
//	 TimeStampclick(HipiCreateVideoPage.objSelectRecord, "Tick Button");	
	waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 20);
	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	Date startTime1 = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime1));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
	
	if(waitUntilElementDisplayed(HipiCreateVideoPage.objPostDescription, 60)) {
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);
	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	Time_ExcelUpdate.TestCaseSummaryNode1("User is able to see post screen");
	extent.extentLogger("", "User is able to see post screen");
	}else {
		String Username = getParameterFromXML("NonsubscribedUserName");
		Time_ExcelUpdate.timeStampNode("User is unable to see post screen" + Username + getListOfDevicesConnected());
		Time_ExcelUpdate.TestCaseSummaryNode1("User is unable to see post screen" + Username + getListOfDevicesConnected());
		extent.extentLoggerFail("", "User is unable to see post screen" + Username + getListOfDevicesConnected());
	}
	//New
	extent.HeaderChildNode("Video posting scenario for time  seconds");
	Time_ExcelUpdate.TestCaseIDNode(TCID1);
	Time_ExcelUpdate.ModuleNode("Create video scenario");
//	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//	waitTime(3000);
	if(TimeStampverifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
	{
		TimeStampclick(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//		TimeStampclick(HipiCreateVideoPage.objDoneCTC, "Done Button");
	}else {
		logger.info("User is unable to See Language Options");
		extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
		
	}
	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
	waitTime(2000);
	Instant start1=Instant.now();
	logger.info("Start Time : " + start1);
	if(TimeStampverifyElementPresent(HipiCreateVideoPage.objuploadInProgressPopup, "upload In Progress Popup")) {
		waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
//	Date startTime1 = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime1));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
		Instant end1=Instant.now();
		logger.info("End Time : " + end1);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime1 = Duration.between(start1, end1);
		logger.info("Processing time: " + processingTime1);
		String Processingtimesec1=Long.toString(processingTime1.getSeconds());
		String Processingtimemilli1=Long.toString(processingTime1.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec1+"."+Processingtimemilli1 + " Sec");
		
//		extent.HeaderChildNode("<b>clicking on next button Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("User able to Create video ");
		extent.extentLogger("", "User able to Create video ");
	}else {
		String Username = getParameterFromXML("NonsubscribedUserName");
		Time_ExcelUpdate.timeStampNode("User unable to Create video " + Username + getListOfDevicesConnected());
		Time_ExcelUpdate.TestCaseSummaryNode1("User unable to Create video of " + Username + getListOfDevicesConnected());
		extent.extentLoggerFail("", "user unable to Create video and post" + Username + getListOfDevicesConnected());
		
		}
		TimeStampdiscardPopup();
}
	



public void TimeStamptimeTakeClickingOnPostButton() throws Exception {
//	waitUntilElementDisplayed(HipiCreateVideoPage.objdeleteclip, 40);
//	 TimeStampclick(HipiCreateVideoPage.objSelectRecord, "Tick Button");	
	waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 40);
	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
	waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn,30);
	//TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
	//waitTime(3000);
	if(TimeStampverifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
	{
		TimeStampclick(HipiCreateVideoPage.objEnglishLanguage, "English Language");
		//TimeStampclick(HipiCreateVideoPage.objDoneCTC, "Done Button");
	}else {
		logger.info("User is unable to See Language Options");
//		extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
		
	}
//	if(TimeStampverifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
//	{
//		TimeStampclick(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//	}else {
//		logger.info("User is unable to See Language Options");
//		extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
//		
//	}
	
	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objSelectVideoCategory,"Select video category");
	waitTime(3000);
	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoCategoryValue,"Any category");
	TimeStampBack(1);
	waitTime(3000);	

	TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");

	Instant start=Instant.now();
	logger.info("Start Time : " + start);
	if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 30)) {
//		waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
//	Date startTime1 = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime1));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
		Instant end=Instant.now();
		logger.info("End Time : " + end);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 1)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
		waitTime(8000);
//	Date startTime1 = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime1));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime1)+"<b>");
		
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		
//		extent.HeaderChildNode("<b>clicking on next button Processing time: " + processingTime+"<b>");
		Time_ExcelUpdate.TestCaseSummaryNode1("Check user able to Create Video Upload From Gallery");
		extent.extentLogger("", "User able to Create video ");
	}else {
		String Username = getParameterFromXML("NonsubscribedUserName");
		Time_ExcelUpdate.timeStampNode("User unable to Create video  Upload From Gallery" + Username + getListOfDevicesConnected());
		Time_ExcelUpdate.TestCaseSummaryNode1("User unable to Create video  Upload From Gallery" + Username + getListOfDevicesConnected());
		extent.extentLoggerFail("", "user unable to Create video and post  Upload From Gallery" + Username + getListOfDevicesConnected());
		
		}
	
		TimeStampdiscardPopup();
	
//	waitUntilElementDisplayed(HipiHomePage.objForYou, 60);
	
	
}


public void TimeStampdiscardPopup() throws Exception 
{
	try {
		boolean homepage;
	while(homepage=true)
	{
		if(verifyElementDisplayed(HipiCreateVideoPage.objDiscardPopupDiscaedEdits))
		{
			TimeStampclick(HipiCreateVideoPage.objDiscardPopupDiscaedEdits,"Discard");
		waitTime(2000);
		}else if(TimeStampverifyElementExist(HipiHomePage.objForYou,"For you"))
		{
			waitTime(2000);
			break;		
		}
		else
		{
			TimeStampBack(1);
			waitTime(2000);
		}
	}
	}
	catch(Exception e)
	{
		logger.error(e);
		screencapture();
	}
}
public void loginTime1(String userType) throws Exception {
	
//	// navigateToIntroScreen_DisplaylangScreen();
//				Time_ExcelUpdate.TestCaseIDNode("TC002");
////				Time_ExcelUpdate.SlNoNode("2");
//				Time_ExcelUpdate.ModuleNode("Login Module");
//				Time_ExcelUpdate.TestCaseSummaryNode1("Login Time");
//				
//				extent.HeaderChildNode("Launching hipi app");
//				extent.HeaderChildNode("NonSubscribed User");
				
				
				waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 2000);
				//click on Profile icon
				TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitTime(4000);
				TimeStampverifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
				
				String Username = getParameterFromXML("NonsubscribedUserName");
				String Password = getParameterFromXML("NonsubscribedPassword");
				
				waitTime(5000);
//				hideKeyboard();
				TimeStampverifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
				
				TimeStamptype(AMDLoginScreen.objEmailIdField, Username, "Email Field");
				TimeStamphideKeyboard();
				
				TimeStampverifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//				hideKeyboard();

				TimeStamptype(AMDLoginScreen.objPasswordField, Password, "Password field");
//				
				TimeStamphideKeyboard();
				TimeStampverifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
//				Instant start=Instant.now();
//				logger.info("Start Time : " + start);
////				extent.extentLogger("", "<b>Start Time : " + start+"<b>");
			if (waitUntilElementDisplayed(HipiHomePage.objForYou, 2000)) {
//					logger.info("User is able to see Home screen");
////					extent.extentLogger("", "User is able to see Home screen");
//					Instant end=Instant.now();
//					logger.info("End Time : " + end);
////					extent.extentLogger("", "<b>End Time : " + end+"<b>");
//					Duration processingTime = Duration.between(start, end);
//					logger.info("Processing time: " + processingTime);
//					String Processingtimesec=Long.toString(processingTime.getSeconds());
//					String Processingtimemilli=Long.toString(processingTime.toMillis());	
//					Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + "Sec");
//					extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");

//					extent.HeaderChildNode("<b>Processing time: " + processingTime+"<b>");
				}
				else {
					logger.error("Processing time calculation failed");
//					extent.extentLoggerFail("", "Processing time calculation failed");
				}
			
		
//				waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
				//click on feed button
			TimeStampverifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
				
				
	
}
public void TimeStamplogOut() throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("TC041");
	Time_ExcelUpdate.ModuleNode("Profile");
	
	Time_ExcelUpdate.ExpectedProcessingTime("5 Sec");
	extent.HeaderChildNode("Logout Time");

	TimeStampnavigateToHomePage();
	TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon,"Profile Icon");
//	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	if (TimeStampverifyElementExist(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email")) {
		logger.info("User is all ready Logout application");	
//		extent.extentLoggerPass("", "User is all ready Logout application");
		TimeStampnavigateToHomePage();
	}else {
		TimeStampverifyElementPresentAndClick(HipiProfilePage.objThreeDots, "Three Dots");
	waitTime(3000);
//	SwipeUntilFindElement(HipiSettingsPage.objLogOut, "Log out Button");
	TimeStampSwipe("UP", 2);
	TimeStampverifyElementPresentAndClick(HipiSettingsPage.objLogOut, "Log out");
	TimeStampverifyElementPresentAndClick(HipiHomePage.objYesCTA, "Yes CTA");
	Instant start = Instant.now();
//	extent.extentLogger("", "clicked on hipi at Time----- "+ start);
	waitForElementDisplayediOS(HipiHomePage.objForYou, 10, "for you button in feed");		
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);

	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "<b>Filter download Processing time: " + processingTime+"<b>");

	if(TimeStampverifyElementExist(HipiHomePage.objHomeIcon, "Home ICON")) {
		logger.info("User is able to Logout application");	
		Time_ExcelUpdate.TestCaseSummaryNode1("User is able to Logout ");
		extent.extentLoggerPass("", "User is able to Logout application");
//		extent.extentLoggerPass("", "User is able to Logout application");	
  }else {
		logger.info("User is not able to Logout application");	
		Time_ExcelUpdate.TestCaseSummaryNode1("User is unable to Logout ");
		extent.extentLoggerFail("", "User is unable to Logout ");

//		extent.extentLoggerFail("", "User is not able to Logout application");
	}
	}
}




public void loginMethod(String userType, String Username, String Password) throws Exception {
	
	extent.HeaderChildNode("NonSubscribed User");
	
	waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 2000);
	//click on Profile icon
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
	
//	String Username = getParameterFromXML("NonsubscribedUserName");
//	String Password = getParameterFromXML("NonsubscribedPassword");
	
//	Thread.sleep(5000);
//	hideKeyboard();
	verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
	
	type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
	hideKeyboard();
	
	verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//	hideKeyboard();

	type(AMDLoginScreen.objPasswordField, Password, "Password field");
//	
	hideKeyboard();
	verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
	
	waitUntilElementDisplayed(HipiHomePage.objForYou, 2000);
	//click on feed button
	verifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
		
//	logOut();
	
	

}


public void SearchRelatedTcs(String userName,String TCsNumber) throws Exception {
	Time_ExcelUpdate.TestCaseIDNode(TCsNumber);
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("Top 5 Suggestion Results");
	extent.HeaderChildNode("Top 5 Suggestion Results");
	waitTime(5000);
	TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(7000);
	TimeStampverifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(4000);
	TimeStamptype(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
	
  	boolean Listresults = verifyIsElementDisplayed(HipiDiscoverPage.objListOfSearchResult);
//  	extent.extentLoggerPass("", "");
	extent.extentLoggerPass("", "");
	if (Listresults) {
		int ListofsearchResults = getDriver().findElements(HipiDiscoverPage.objListOfSearchResult).size();
		if (ListofsearchResults == 0) {
			extent.extentLoggerFail("Verify share options", "Share Options are not available");
			logger.info("Share Options are not available");
		} else {
			for (int i = 1; i <= ListofsearchResults; i++) {
				String TotalsearchResults = getText(HipiDiscoverPage.objsearchResults(i));
				logger.info("List of Search results: \"" + TotalsearchResults + "\"");
				
				Time_ExcelUpdate.TestCaseSummaryNode1(TotalsearchResults);
				extent.extentLoggerPass("List of Search results ",
						"List of Search results : \"" + TotalsearchResults + "\"");
				
			}
		}
	} else {
		logger.info("List of Search results  are not displayed after clicking on Search button");
//		extent.extentLoggerFail("Share through options screen",
//				"Share Options are not displayed after clicking on Share CTA");
	}
	
//	Time_ExcelUpdate.TestCaseIDNode("TC028");
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("Top Users Pofile");
	extent.HeaderChildNode("Top Users Pofile");
	
	TimeStampclick(HipiDiscoverPage.objSearchResult, "Search result");
	waitTime(3000);
	
	boolean Profileresults = verifyIsElementDisplayed(HipiDiscoverPage.objListOfSearchUserProfiles);
//  	extent.extentLoggerPass("", "");
	extent.extentLoggerPass("", "");
	if (Profileresults) {
		int ListofProfileresults = getDriver().findElements(HipiDiscoverPage.objListOfSearchUserProfiles).size();
		if (ListofProfileresults == 0) {
			extent.extentLoggerPass("", "");
			logger.info("");
		} else {
			for (int i = 1; i <= ListofProfileresults; i++) {
				String TotalListofProfileresults = getText(HipiDiscoverPage.objListFirstuserProfile(i));
				logger.info("Top Users Pofile: \"" + TotalListofProfileresults + "\" is available ");
				
				Time_ExcelUpdate.TestCaseSummaryNode1(TotalListofProfileresults);
				extent.extentLoggerPass("Top Users Pofile ",
						"Top Users Pofile : \"" + TotalListofProfileresults + "\" is available");
			}
		}
	} else {
		logger.info("Top Users Pofile are not displayed ");
	}
	
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("List of Videos");
	extent.HeaderChildNode("List of Videos");
	PartialSwipe("UP", 1);
	boolean Videothumbnail = verifyIsElementDisplayed(HipiDiscoverPage.objVideosInVideosTab);
//	extent.extentLoggerPass("", "");
	if (Videothumbnail) {
		int listofVideothumbnail = getDriver().findElements(HipiDiscoverPage.objVideosInVideosTab).size();
		if (listofVideothumbnail == 0) {
//			extent.extentLoggerFail("", "");
			
			logger.info("");
		} else {
			for (int i = 1; i <= listofVideothumbnail; i++) {																			
				String totallistofVideothumbnail = getText(HipiDiscoverPage.objListOfVideos(i));
				logger.info("llist Of video User Name " + totallistofVideothumbnail + "\" is available ");
				
				Time_ExcelUpdate.TestCaseSummaryNode1(totallistofVideothumbnail);
				extent.extentLoggerPass("llist Of video User Name ",
						"llist Of video User Name : \"" + totallistofVideothumbnail + "\" is available");

			}
		}
	} else {
		logger.info("llist Of video User Name are not displayed after clicking on Search result CTA");
	}
	
	
	
//	Time_ExcelUpdate.TestCaseIDNode("TC029");
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("List of Hashhtags");
	extent.HeaderChildNode("List of Hashhtags");
	
	boolean Hashhtagsresults = verifyIsElementDisplayed(HipiDiscoverPage.objHashhtags);
	extent.extentLoggerPass("", "");
//	extent.extentLoggerPass("", "");
	if (Hashhtagsresults) {
	int HashhtagsearchResult = getDriver().findElements(HipiDiscoverPage.objHashhtags).size();
	if (HashhtagsearchResult == 0) {
		extent.extentLoggerFail("", "");
		logger.info("");
	} else {
		for (int i = 1; i <= HashhtagsearchResult; i++) {
			String listHashhtagsearchResult = getText(HipiDiscoverPage.objListOfHashhtags(i));
			logger.info("List of Hashhtags : \"" + listHashhtagsearchResult + "\" is available ");
			
			Time_ExcelUpdate.TestCaseSummaryNode1(listHashhtagsearchResult);
			extent.extentLoggerPass("List of Hashhtags ",
					"List of Hashhtags : \"" + listHashhtagsearchResult + "\" is available ");

		}
	}
} else {
	logger.info("List of Hashhtags are not displayed after clicking on Hashhtags CTA");
}
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("List of Sounds");
	extent.HeaderChildNode("List of Sounds");
	waitTime(4000);
	TimeStampSwipe("UP", 2);
	if (TimeStampverifyElementExist(HipiDiscoverPage.objFirstSongInSoundTab, "Sound names")) {
		boolean SoundNamesTopTab = verifyIsElementDisplayed(HipiDiscoverPage.objFirstSongInSoundTab);
		extent.extentLoggerPass("", "" );
		if (SoundNamesTopTab) {
			int listOfSoundNameTopTab = getDriver().findElements(HipiDiscoverPage.objFirstSongInSoundTab).size();
			if (listOfSoundNameTopTab == 0) {
//				extent.extentLoggerPass("", "");
				logger.info("");
			} else {
				for (int i = 1; i <= listOfSoundNameTopTab; i++) {																			
					String TotallistOfSoundNameTopTab = getText(HipiDiscoverPage.objListofFirstSongInSoundTab(i));
					logger.info("llist Of Sound Name" + TotallistOfSoundNameTopTab + "\" is available ");
					
					Time_ExcelUpdate.TestCaseSummaryNode1(TotallistOfSoundNameTopTab);
					extent.extentLoggerPass("llist Of Sound Name",
							"llist Of Sound Name" + TotallistOfSoundNameTopTab + "\" is available");
				}
			}
		} else {
			logger.info("Sound are not displayed after clicking on Sound CTA");
		}
	}else {
		logger.info("Sound are not displayed after clicking on Sound CTA");
	}
	
	
	

//	Time_ExcelUpdate.TestCaseIDNode("TC030");
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("Users Tab Results");
	extent.HeaderChildNode("Users Tab Results");
	
	TimeStampclick(HipiDiscoverPage.objUserTab, "User Tab");
	waitTime(3000);
	
	boolean UserTabresults = verifyIsElementDisplayed(HipiDiscoverPage.objListOfSearchUserProfiles);
//	extent.extentLoggerPass("", "");
extent.extentLoggerPass("", "");
if (UserTabresults) {
	int UserTabSearchresults = getDriver().findElements(HipiDiscoverPage.objListOfSearchUserProfiles).size();
	if (UserTabSearchresults == 0) {
		extent.extentLoggerFail("", "");
		logger.info("");
	} else {
		for (int i = 1; i <= 2; i++) {																			
			String listofUserTabSearchresults = getText(HipiDiscoverPage.objListFirstuserProfile(i));
			logger.info("Users Tab Results : \"" + listofUserTabSearchresults + "\" is available ");
			
			Time_ExcelUpdate.TestCaseSummaryNode1(listofUserTabSearchresults);
			extent.extentLoggerPass("Users Tab Results ",
					"Users Tab Results : \"" + listofUserTabSearchresults + "\" is available");

		}
	}
} else {
	logger.info("Users Tab Results  are not displayed after clicking on User CTA");
}
//	Time_ExcelUpdate.TestCaseIDNode("TC031");
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("Videos Tab");
	extent.HeaderChildNode("Videos Tab");
	TimeStampclick(HipiDiscoverPage.objVideoTab, "Video Tab");
	waitTime(3000);
	extent.extentLoggerPass("", "");
//	extent.extentLoggerFail("", "");
	TimeStampverifyElementExist(HipiDiscoverPage.objrelatedvioedosSound,"");
	List<WebElement> listOfCountrys = getDriver().findElements(HipiDiscoverPage.objrelatedvioedosSound);
	int size = listOfCountrys.size();
	System.out.println(size);
	logger.info("Numbers of  " + size);	
	Time_ExcelUpdate.TestCaseSummaryNode1("Numbers of " + size);
	boolean UserNames = verifyIsElementDisplayed(HipiDiscoverPage.objVideosInVideosTab);
	extent.extentLoggerPass("", "Numbers of " + size);
	if (UserNames) {
		int listOfUserName = getDriver().findElements(HipiDiscoverPage.objVideosInVideosTab).size();
		if (listOfUserName == 0) {
//			extent.extentLoggerFail("", "");
			
			logger.info("");
		} else {
			for (int i = 1; i <= listOfUserName; i++) {																			
				String TotallistOfUserName = getText(HipiDiscoverPage.objListOfVideos(i));
				logger.info("llist Of video User Name" + TotallistOfUserName + "\" is available ");
				
				Time_ExcelUpdate.TestCaseSummaryNode1(TotallistOfUserName);
				extent.extentLoggerPass("llist Of video User Name",
						"llist Of video User Name : \"" + TotallistOfUserName + "\" is available");

			}
		}
	} else {
		logger.info("llist Of video User Name are not displayed after clicking on Video CTA");
	}
	
//	Time_ExcelUpdate.TestCaseIDNode("TC032");
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("Sounds Tab");
	extent.HeaderChildNode("Sounds Tab");
	TimeStampclick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound Tab");
	if (TimeStampverifyElementExist(HipiDiscoverPage.objFirstSongInSoundTab, "Sound names")) {
		boolean SoundNames = verifyIsElementDisplayed(HipiDiscoverPage.objFirstSongInSoundTab);
		extent.extentLoggerPass("", "Numbers of " + size);
		if (SoundNames) {
			int listOfSoundName = getDriver().findElements(HipiDiscoverPage.objFirstSongInSoundTab).size();
			if (listOfSoundName == 0) {
				extent.extentLoggerPass("", "");
				logger.info("");
			} else {
				for (int i = 1; i <= listOfSoundName; i++) {																			
					String TotallistOfSoundName = getText(HipiDiscoverPage.objListofFirstSongInSoundTab(i));
					logger.info("llist Of Sound Name" + TotallistOfSoundName + "\" is available ");
					
					Time_ExcelUpdate.TestCaseSummaryNode1(TotallistOfSoundName);
					extent.extentLoggerPass("llist Of Sound Name",
							"llist Of Sound Name" + TotallistOfSoundName + "\" is available");
				}
			}
		} else {
			logger.info("Sound are not displayed after clicking on Sound CTA");
		}
	}else {
		logger.info("Sound are not displayed after clicking on Sound CTA");
	}
	
//	Time_ExcelUpdate.TestCaseIDNode("TC032");
	Time_ExcelUpdate.ModuleNode("Discover");
	Time_ExcelUpdate.TestCaseSummaryNode1("Hashtags Tab");
	extent.HeaderChildNode("Hashtags Tab");
	TimeStampclick(HipiDiscoverPage.objHashtagsTab, "Hashtags Tab");
	
	if (TimeStampverifyElementExist(HipiDiscoverPage.objFirstHashtagsInSoundTab, "Hashtags names")) {
		boolean HashtagsNames = verifyIsElementDisplayed(HipiDiscoverPage.objFirstHashtagsInSoundTab);
		extent.extentLoggerPass("", "Numbers of " + size);
		if (HashtagsNames) {
			int listOfHashtagsName = getDriver().findElements(HipiDiscoverPage.objFirstHashtagsInSoundTab).size();
			if (listOfHashtagsName == 0) {
				extent.extentLoggerPass("", "");
				logger.info("");
			} else {
				for (int i = 1; i <= listOfHashtagsName; i++) {																			
					String TotallistOfHashtagsName = getText(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(i));
					logger.info("llist Of Sound Name" + TotallistOfHashtagsName + "\" is available ");
					
					Time_ExcelUpdate.TestCaseSummaryNode1(TotallistOfHashtagsName);
					extent.extentLoggerPass("llist Of Sound Name",
							"llist Of Sound Name" + TotallistOfHashtagsName + "\" is available");
				}
			}
		} else {
			logger.info("Sound are not displayed after clicking on Sound CTA");
		}
	}else {
		logger.info("Sound are not displayed after clicking on Sound CTA");
	}
	
	TimeStampnavigateToHomePage();
	
}



public void searchResults(String SearchItem,String TCID) throws Exception {
	
	extent.HeaderChildNode("Search Result for "+SearchItem);
	String Suggestions1="";
	String Suggestions2="";
	String Profile1="";
	String Profile2="";
	String Video1="";
	String Video2="";
	String Video3="";
	String Video4="";
	String Hashtags1="";
	String Hashtags2="";
	String Sounds1="";
	String Sounds2="";
	
	logger.info("Search Result for "+SearchItem);
	Time_ExcelUpdate.TestCaseIDNode(TCID);
	Time_ExcelUpdate.ModuleNode("Search Suggetions: "+SearchItem);
	
	
	waitTime(2000);
	TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(5000);
	TimeStampverifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(5000);
	TimeStamptype(HipiDiscoverPage.objDiscoverSearchInbox, SearchItem, "Type value");
	waitTime(5000);
	if(TimeStampverifyElementExist(HipiDiscoverPage.objsearchResults(1), "suggestions")) {
	Suggestions1=getText(HipiDiscoverPage.objsearchResults(1));
	System.out.println(Suggestions1);
	Suggestions2=getText(HipiDiscoverPage.objsearchResults(2));
	System.out.println(Suggestions2);
	waitTime(3000);
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1 "+Suggestions1);
	extent.extentLogger("","Search  1st Suggestion done");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2 "+Suggestions2);
	}else {
		String Username = getParameterFromXML("NonsubscribedUserName");
		Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to see Search Suggestion on "+SearchItem + Username + getListOfDevicesConnected());
		//Time_ExcelUpdate.TestCaseSummaryNode1("Suggestion  not present");
		
		logger.info(TCID + "User is not able to see Search Suggestion on ");
	}
	
	TimeStampclick(HipiDiscoverPage.objSearchResult, "Search result");
//	waitTime(3000);
	waitUntilElementDisplayed(HipiDiscoverPage.objListFirstuserProfile(1), 20);
//	TimeStampwaitForElementDisplayedFastPolling(IOSHiPiNeoDiscoverPage.objiosProfileInDiscoverpage(1), 100, "results after search");
	extent.extentLogger("","Search done");
	
	Time_ExcelUpdate.ModuleNode("Top Users Section :"+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("Top Users Result: "+SearchItem);
	Profile1=getText(HipiDiscoverPage.objListFirstuserProfile(1));
	System.out.println(Profile1);
	Profile2=getText(HipiDiscoverPage.objListFirstuserProfile(2));
	System.out.println(Profile2);
	waitTime(3000);
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1 "+Profile1);
	extent.extentLogger("","Top Users 1 st profile name fetched");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2 "+Profile2);
	extent.extentLogger("","Top Users 2nd profile name fetched");
	
	
	Time_ExcelUpdate.ModuleNode("Top Videos Section:"+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("Top Videos Result:"+SearchItem);
	
	PartialSwipe("UP", 1);
	if(TimeStampverifyElementExist(HipiDiscoverPage.objListOfVideos(1), "Videos in under Top section ")) {
	Video1=getText(HipiDiscoverPage.objListOfVideos(1));
	System.out.println(Video1);
	Video2=getText(HipiDiscoverPage.objListOfVideos(2));
	System.out.println(Video2);
//	Video3=getText(HipiDiscoverPage.objListOfVideos(3));
//	System.out.println(Video3);
//	Video4=getText(HipiDiscoverPage.objListOfVideos(4));
//	System.out.println(Video4);
//	waitTime(3000);
	
	waitTime(3000);
	TimeStampclick(HipiDiscoverPage.objAnyHipiVideo(1),"1 st video");
	waitTime(3000);
	String Video1Username=getText(HipiHomePage.objDescription);
	TimeStampBack(1);
	waitTime(2500);
	
	TimeStampclick(HipiDiscoverPage.objAnyHipiVideo(2),"2nd video");
	waitTime(3000);
	String Video2Username=getText(HipiHomePage.objDescription);
//	TimeStampclick(IOSHiPiNeoDiscoverPage.objBackButtonInDiscoverPage, "Back button");
	TimeStampBack(1);
	waitTime(2500);
	
	
	
	
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1 st video is from  "+Video1Username);
	extent.extentLogger("","Top videos 1 st video name fetched");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2 nd video is from "+Video2Username);
//	extent.extentLogger("","Top videos 2nd video name fetched");
	
	}else {
		Time_ExcelUpdate.TestCaseIDNode(TCID);
		//Time_ExcelUpdate.TestCaseSummaryNode1("Videos  not present");
		extent.extentLoggerFail("","Videos  not present");
		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Videos  not present");
//		extent.extentLoggerFail("","Videos  not present");
	}
	waitTime(4000);
	PartialSwipe("UP", 1);
	Time_ExcelUpdate.ModuleNode("Top Hashtag Section: "+SearchItem);
//	TimeStampSwipeTillElement(IOSHiPiNeoDiscoverPage.objiosHashtagSectionUnderTopresults, "Hashtags");
	waitTime(3000);
	if(TimeStampverifyElementExist(HipiDiscoverPage.objListOfHashhtags(1), "Hashtags")) {
		
		Hashtags1=getText(HipiDiscoverPage.objListOfHashhtags(1));
		System.out.println(Hashtags1);
		Hashtags2=getText(HipiDiscoverPage.objListOfHashhtags(2));
		System.out.println(Hashtags2);
		waitTime(3000);
		
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1."+Hashtags1);
		extent.extentLogger("","1 st Hashtag fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2."+Hashtags2);
		extent.extentLogger("","2 nd Hashtag fetched");
		
		
	}else {
		
		//Time_ExcelUpdate.TestCaseSummaryNode1("Hashtag  not present");
		logger.info("Hashtag  not present");
		
		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Hashtag  not present");
//		extent.extentLoggerFail("","Hashtag  not present");
	}
	waitTime(5000);
	TimeStampSwipe("UP", 2);
	
	Time_ExcelUpdate.ModuleNode("Top Sounds Section:"+SearchItem);
//	TimeStampSwipeTillElement(IOSHiPiNeoDiscoverPage.objiosSoundsSectionUnderTopresults, "Sounds");
	waitTime(3000);
	if(TimeStampverifyElementExist(HipiDiscoverPage.objListofFirstSongInSoundTab(1), "Sounds")) {
		
		Sounds1=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(1));
		System.out.println(Sounds1);
		Sounds2=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(2));
		System.out.println(Sounds2);
		waitTime(3000);
		
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1."+Sounds1);
		extent.extentLogger("","1 st Sound fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2."+Sounds2);
		extent.extentLogger("","2 nd Sound fetched");
		
		
	}else {
		
		//Time_ExcelUpdate.TestCaseSummaryNode1("Sound  not present");
	logger.info("Sound  not present");
		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Sound  not present");
//		extent.extentLoggerFail("","Sound  not present");
	}
	TimeStampSwipe("DOWN", 1);
	waitUntilElementDisplayed(HipiDiscoverPage.objUserTab, 1);
	TimeStampclick(HipiDiscoverPage.objUserTab, "User Tab");
	waitUntilElementDisplayed(HipiDiscoverPage.objListFirstuserProfile(1), 1);
	Time_ExcelUpdate.ModuleNode("Users Section: "+SearchItem);
	if(TimeStampverifyElementExist(HipiDiscoverPage.objListFirstuserProfile(1), "Results under Users Tab")) {
	waitTime(3000);
	String UsersProfile1=getText(HipiDiscoverPage.objListFirstuserProfile(1));
	String UsersProfile2=getText(HipiDiscoverPage.objListFirstuserProfile(2));
	String UsersProfile3=getText(HipiDiscoverPage.objListFirstuserProfile(3));
	String UsersProfile4=getText(HipiDiscoverPage.objListFirstuserProfile(4));
	String UsersProfile5=getText(HipiDiscoverPage.objListFirstuserProfile(5));
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1."+UsersProfile1);
	extent.extentLogger("","1 st Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2."+UsersProfile2);
	extent.extentLogger("","2 nd Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("3."+UsersProfile3);
	extent.extentLogger("","3rd Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("4."+UsersProfile4);
	extent.extentLogger("","4th Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("5."+UsersProfile5);
	extent.extentLogger("","5 th Result under Users Tab");
	
	
	}else {
	
		//Time_ExcelUpdate.TestCaseSummaryNode1("Users tap result  not present");
		extent.extentLoggerPass("","Users tap result  not present");
		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Users tap result  not present");
//		extent.extentLoggerFail("","Users tap result  not present");
//		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Users tap result  not present");
//		extent.extentLoggerFail("","Users tap result  not present");
//		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Users tap result  not present");
//		extent.extentLoggerFail("","Users tap result  not present");
//		
//		Time_ExcelUpdate.TestCaseSummaryNode1("Users tap result  not present");
//		extent.extentLoggerFail("","Users tap result  not present");
		
	}
	
	
	waitTime(5000);
	
	Time_ExcelUpdate.ModuleNode("Videos Section: "+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("Videos section in search Result: "+SearchItem);
	
//	TimeStampverifyElementExist(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Videos"), "Videos Tab in search result ");
		
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Videos"), "Videos");
//		waitTime(5500);
		TimeStampclick(HipiDiscoverPage.objVideoTab, "Video Tab");
		waitTime(3000);	
//		TimeStampverifyElementExist(HipiDiscoverPage.objListOfVideos(1), "videos");
		if(TimeStampverifyElementExist(HipiDiscoverPage.objListOfVideos(1),"Videos Result")){
		Video1=getText(HipiDiscoverPage.objListOfVideos(1));
		System.out.println(Video1);
		 Video2=getText(HipiDiscoverPage.objListOfVideos(2));
		System.out.println(Video2);
		 Video3=getText(HipiDiscoverPage.objListOfVideos(3));
			System.out.println(Video3);
			 Video4=getText(HipiDiscoverPage.objListOfVideos(4));
				System.out.println(Video4);
		
		
//		waitTime(3000);
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosPlayIconInVideosTab(1),"1 st video");
//		waitTime(3000);
//		String Video1Username=getText(IOSHipiNeoHomePage.objiOSUserNameInFeedScreen);
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objBackButtonInDiscoverPage, "Back button");
//		waitTime(2500);
//		
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosPlayIconInVideosTab(2),"2nd video");
//		waitTime(3000);
//		String Video2Username=getText(IOSHipiNeoHomePage.objiOSUserNameInFeedScreen);
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objBackButtonInDiscoverPage, "Back button");
//		waitTime(2500);
//		TimeStampPartialSwipeiOS("Up", 1);
//		waitTime(5500);
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosPlayIconInVideosTab(3),"3 rd video");
//		waitTime(3000);
//		String Video3Username=getText(IOSHipiNeoHomePage.objiOSUserNameInFeedScreen);
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objBackButtonInDiscoverPage, "Back button");
//		waitTime(2500);
		
	
//		TimeStampPartialSwipeiOS("Up", 1);
//		waitTime(3000);
//		TimeStampwaitForElementDisplayediOS(IOSHiPiNeoDiscoverPage.objiosSearchResultVideosInTopSection(3,9), 20, "videos");
//		String Video3=getText(IOSHiPiNeoDiscoverPage.objiosSearchResultVideosInTopSection(3,9));
//		System.out.println(Video3);
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1 st video is from  "+Video1);
		extent.extentLogger(""," in videos section 1 st video name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2 nd video is from "+Video2);
		extent.extentLogger(""," in videos section 2 nd video name fetched");
		
		
		
		Time_ExcelUpdate.TestCaseSummaryNode1("3 rd video is from "+Video3);
		extent.extentLogger(""," in videos section 3 rd video name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("4 th video is from "+Video4);
		extent.extentLogger(""," in videos section 4 th video name fetched");
		}else {
			
			//Time_ExcelUpdate.TestCaseSummaryNode1("Videos  not present");
			extent.extentLoggerPass("","Videos  not present");
			
			
		}
	
		waitTime(5000);
	
	Time_ExcelUpdate.ModuleNode("Sounds Section: "+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("Sounds Section in Search results: "+SearchItem);
	
//	TimeStampverifyElementExist(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Sounds"), "Sounds Tab in search result ");
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Sounds"), "Sounds");
		TimeStampclick(HipiDiscoverPage.objSoundtabinSearchresultpage, "Sound Tab");
		
		if(TimeStampverifyElementExist(HipiDiscoverPage.objListofFirstSongInSoundTab(1), "Sounds")) {
		String Sound1=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(1));
		System.out.println(Sound1);
		String Sound2=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(2));
		System.out.println(Sound2);
		
		String Sound3=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(3));
		System.out.println(Sound3);
		
		String Sound4=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(4));
		System.out.println(Sound4);
		
		String Sound5=getText(HipiDiscoverPage.objListofFirstSongInSoundTab(5));
		System.out.println(Sound5);
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1. "+Sound1);
		extent.extentLogger(""," in Sound section 1 st Sound name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2. "+Sound2);
		extent.extentLogger(""," in Sound section 2 nd Sound name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("3. "+Sound3);
		extent.extentLogger(""," in Sound section 3 rd Sound name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("4. "+Sound4);
		extent.extentLogger(""," in Sound section 4 th Sound name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("5. "+Sound5);
		extent.extentLogger(""," in Sound section 5 th Sound name fetched");
		
		
		}else {
			
			//Time_ExcelUpdate.TestCaseSummaryNode1("Sounds  not present");
			extent.extentLoggerPass("","Sounds  not present");
			
			
		}
	
	
		waitTime(5000);
	
	Time_ExcelUpdate.ModuleNode("HashTag Section: "+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("HashTag Section in Search results: "+SearchItem);
	
//	TimeStampverifyElementExist(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Hashtags"), "HashTags Tab in search result ");
//		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Hashtags"), "Hashtags");
		TimeStampclick(HipiDiscoverPage.objHashtagsTab, "Hashtags Tab");	
		
		if(TimeStampverifyElementExist(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(1), "Hashtag result")) {
		String HashTag1=getText(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(1));
		System.out.println(HashTag1);
		String HashTag2=getText(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(2));
		System.out.println(HashTag2);
		
		String HashTag3=getText(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(3));
		System.out.println(HashTag3);
		
		String HashTag4=getText(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(4));
		System.out.println(HashTag4);
		
		String HashTag5=getText(HipiDiscoverPage.objListofFirstHashtagsInSoundTab(5));
		System.out.println(HashTag5);
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1. "+HashTag1);
		extent.extentLogger(""," in HashTag section 1 st HashTag name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2. "+HashTag2);
		extent.extentLogger(""," in HashTag section 2 nd HashTag name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("3. "+HashTag3);
		extent.extentLogger(""," in HashTag section 3 rd HashTag name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("4. "+HashTag4);
		extent.extentLogger(""," in HashTag section 4 th HashTag name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("5. "+HashTag5);
		extent.extentLogger(""," in HashTag section 5 th HashTag name fetched");
		
		
		}else {
			
			//Time_ExcelUpdate.TestCaseSummaryNode1("HashTag  not present");
			extent.extentLoggerPass("","HashTag  not present");
			
			
		}
	
//	TimeStampclick(IOSHiPiNeoDiscoverPage.objBackButtonInDiscoverPage, "Back button");
//	waitTime(2500);
		TimeStampnavigateToHomePage();
	
	
}
//===============================
/**

Setting & Privacy (Data Saver Module)
Check "CELLULAR DATA" header
Kartheek Reddy
 * @throws Exception 

*/
	public void verifyCELLULARDATAHeaderInSettingPrivacyScreen(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2492 - Check if user is able to see the CELLULAR DATA header in Setting & Privacy screen");
		System.out.println("T2492");
		extent.extentLogger(" ", "T2492");
		
		navigateToSettingAndPrivacy(userType);
		
//		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
//		waitTime(2000);
		if (verifyElementPresent(HipiSettingsPage.objcellularData, "CELLULAR DATA Option")) {
			logger.info("User is able to see the CELLULAR DATA header in Setting & Privacy screen");
			extent.extentLoggerPass("", "User is able to see the CELLULAR DATA header in Setting & Privacy screen");
			}else {
			logger.info("User is not able to see the CELLULAR DATA header in Setting & Privacy screen");
			extent.extentLoggerFail("", "User is not able to see the CELLULAR DATA header in Setting & Privacy screen"); 		
			}
		}
		
	}

	/**

	Setting & Privacy (Data Saver Module)
	Check "Data Saver"
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyDataSaver(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2493 - Check if user is able to see the \"Data Saver\" under cellular data header in Setting & Privacy screen");
		System.out.println("T2493");
		extent.extentLogger(" ", "T2493");
		
		navigateToSettingAndPrivacy(userType);
		
		if (verifyElementPresent(HipiSettingsPage.objDataSaverButton, "Data Saver Button")) {
			logger.info("User is able to see the Data Saver under cellular data header in Setting & Privacy screen");
			extent.extentLoggerPass("", "User is able to see the Data Saver under cellular data header in Setting & Privacy screen");
			}else {
			logger.info("User is not able to see the Data Saver under cellular data header in Setting & Privacy screen");
			extent.extentLoggerFail("", "User is not able to see the Data Saver under cellular data header in Setting & Privacy screen"); 		
			}
		}
	}
	/**

	Setting & Privacy (Data Saver Module)
	Check Tap on "Data Saver"
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyTapDataSaver(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2494, T2495 - Check if user is able to tap on \"Data Saver\" under cellular data header in Setting & Privacy screen");
		System.out.println("T2494, ,T2495");
		extent.extentLogger(" ", "T2494, T2495");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
		
		if (verifyElementPresent(HipiSettingsPage.objDataSaverHeader, "Data Saver header")) {
			logger.info("User is able to tap on Data Saver under cellular data header in Setting & Privacy screen");
			extent.extentLoggerPass("", "User is able to tap on Data Saver under cellular data header in Setting & Privacy screen");
			}else {
			logger.info("User is not able to tap on Data Saver under cellular data header in Setting & Privacy screen");
			extent.extentLoggerFail("", "User is not able to tap on Data Saver under cellular data header in Setting & Privacy screen"); 		
			}
		}
	}
	
	/**

	Setting & Privacy (Data Saver Module)
 	"Data Saver" Off By Default
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyDataSaverOffByDefault(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2497 - Check if user is able to see the radio button is disabled by default in Data Saver screen");
		System.out.println("T2497");
		extent.extentLogger(" ", "T2497");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
		if (verifyElementPresent(HipiSettingsPage.objDataSaverOFF, "Data Saver Off")) {
			logger.info("User is able to see the radio button is disabled by default in Data Saver screen");
			extent.extentLoggerPass("", "User is able to see the radio button is disabled by default in Data Saver screen");
			}else {
			logger.info("User is able to see the radio button is disabled by default in Data Saver screen");
			extent.extentLoggerFail("", "User is able to see the radio button is disabled by default in Data Saver screen"); 		
			}
		}
	}
	
	/**

	Setting & Privacy (Data Saver Module)
 	"Data Saver" ON and Enabled
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyEnabledPostTappingOnRadioButton(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2498 - Check if user is able to see the radio button is enabled post tapping on radio button in Data Saver screen");
		System.out.println("T2498");
		extent.extentLogger(" ", "T2498");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverOFF, "Data Saver Off");
		if (verifyElementPresent(HipiSettingsPage.objDataSaverOn, "Data Saver On")) {
			logger.info("User is able to see the radio button is enabled post tapping on radio button in Data Saver screen");
			extent.extentLoggerPass("", "User is able to see the radio button is enabled post tapping on radio button in Data Saver screen");
			}else {
			logger.info("User is not able to see the radio button is enabled post tapping on radio button in Data Saver screen");
			extent.extentLoggerFail("", "User is not able to see the radio button is enabled post tapping on radio button in Data Saver screen"); 		
			}
		}
	}
	
	
	/**

	Setting & Privacy (Data Saver Module)
 	Tap on Back Button "Data Saver" Screen 
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyTappingBackButton(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2502 - Check if user is navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
		System.out.println("T2502");
		extent.extentLogger(" ", "T2502");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
		verifyElementPresent(HipiSettingsPage.objDataSaverOFF, "Data Saver Off");
		verifyElementPresentAndClick(HipiSettingsPage.objHiPiImgBackButton,"Back Button");
		if (verifyElementPresent(HipiSettingsPage.objHipiSettingsPageTitle, "Settings Page Title")) {
			logger.info("User is navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
			extent.extentLoggerPass("", "User is navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
			}else {
			logger.info("User is not navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
			extent.extentLoggerFail("", "User is not navigate to Setting & Privacy screen post tapping on back button in Data Saver screen"); 		
			}
		}
	
	}
	
	/**

	Setting & Privacy (Data Saver Module)
 	Tap on device Back Button "Data Saver" Screen 
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyTappingDeviceBackButton(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2503 - Check if user is navigate to \"Setting & Privacy screen by tapping on device back button in Data Saver screen");
		System.out.println("T2503");
		extent.extentLogger(" ", "T2503");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
		verifyElementPresent(HipiSettingsPage.objDataSaverOFF, "Data Saver Off");
		Back(1);	
		if (verifyElementPresent(HipiSettingsPage.objHipiSettingsPageTitle, "Settings Page Title")) {
			logger.info("User is navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
			extent.extentLoggerPass("", "User is navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
			}else {
			logger.info("User is not navigate to Setting & Privacy screen post tapping on back button in Data Saver screen");
			extent.extentLoggerFail("", "User is not navigate to Setting & Privacy screen post tapping on back button in Data Saver screen"); 		
			}
		}
	
	}
	
	
	/**

	Setting & Privacy (Data Saver Module)
 	Verify Content Language Option Setting & Privacy page
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyContentLanguageOption(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2748 - Check if user is able to see the content language option under Account section on Settings & Privacy screen");
		System.out.println("T2748");
		extent.extentLogger(" ", "T2748");
		
		navigateToSettingAndPrivacy(userType);
		if (verifyElementPresent(HipiSettingsPage.objContentLanguageOption, "Content Language Option")) {
			logger.info("User is able to see the content language option under Account section on Settings & Privacy screen");
			extent.extentLoggerPass("", "User is able to see the content language option under Account section on Settings & Privacy screen");
			}else {
			logger.info("User is not able to see the content language option under Account section on Settings & Privacy screen");
			extent.extentLoggerFail("", "User is not able to see the content language option under Account section on Settings & Privacy screen"); 		
			}
		
	
		}
	}

	/**

	Setting & Privacy (Data Saver Module)
 	Content Language" screen post tapping on content language option
	Kartheek Reddy
	 * @throws Exception 

*/
	public void verifyContentLanguageScreenTapingOnContentLanguageOption(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2749 - Check if user is navitages to content language screen post tapping on \"Content Language\" option on Settings & Privacy Screen.");
		System.out.println("T2749");
		extent.extentLogger(" ", "T2749");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objContentLanguageOption, "Content Language Option");
		if (verifyElementPresent(HipiSettingsPage.objContentLanguageTitle, "Content Language Title")) {
			logger.info("User is navigate to Content Language screen post tapping on content language option from Account section");
			extent.extentLoggerPass("", "User is navigate to Content Language screen post tapping on content language option from Account section");
			}else {
			logger.info("User is not navigate to Content Language screen post tapping on content language option from Account section");
			extent.extentLoggerFail("", "User is not navigate to Content Language screen post tapping on content language option from Account section"); 		
			}
		}
	}
	/**

	Setting & Privacy (Account Section)
 	Check the UI of the "Content Language" screen
	Kartheek Reddy
	 * @throws Exception 

*/
public void verifyContentLanguageScreenUI(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2750 - Check the UI of the Content Language screen");
		System.out.println("T2750");
		extent.extentLogger(" ", "T2750");
		
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objContentLanguageOption, "Content Language Option");
		}
		
	}
	
	/**

	Setting & Privacy (Data Saver Module)
	Check "Data Saver UI" header
	Kartheek Reddy
	 * @throws Exception 

	*/
	
	public void DataSaverScreenUI(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2496 - Check the UI of the Data Saver screen");
		System.out.println("T2496");
		extent.extentLogger(" ", "T2496");
		navigateToSettingAndPrivacy(userType);
		verifyElementPresentAndClick(HipiSettingsPage.objDataSaverButton, "Data Saver Button");
		waitUntilElementDisplayed(HipiSettingsPage.objDataSaverHeader, 1);
		String dataSaverText = getText(HipiSettingsPage.objDataSaverHeader);
		if(verifyElementPresent(HipiSettingsPage.objDataSaverHeader, "Data Saver Header")) {
			logger.info("User is able to see " + dataSaverText +" Header");
			extent.extentLoggerPass("", "User is able to see " + dataSaverText +" Header");
			}else {
			logger.info("User is not able to see " + dataSaverText +" Header");
			extent.extentLoggerFail("", "User is not able to see " + dataSaverText +" Header"); 		
			}
		if(dataSaverText.equals("Data Saver")) {
			logger.info("User is able to see " + dataSaverText +" Header");
			extent.extentLoggerPass("", "User is able to see " + dataSaverText +" Header");
			}else {
			logger.info("User is not able to see " + dataSaverText +" Header");
			extent.extentLoggerFail("", "User is not able to see " + dataSaverText +" Header"); 		
			}
			
		verifyElementPresent(HipiSettingsPage.objBackButtonDatasaverScreen, "Back Button");

		verifyElementPresent(HipiSettingsPage.objDataSaverConent, "Data Saver Content");
		
		
		}
		
		}
	
	
	
	
	
	
	
	
	
	
	public void create_Video_And_Post_And_CheckProcessingTime_15s(String k,String userType,String TCID) throws Exception {
		extent.HeaderChildNode("Video posting scenario for time " +k + " seconds");
		Time_ExcelUpdate.TestCaseIDNode(TCID);
		Time_ExcelUpdate.ModuleNode("Create video scenario");
		
		TimeStamp_create_Video_Of_Specific_Time_PostAnd_CheckProcessingTime_(k);
		
	}
	
	
	public void TimeStamptimeTakeClickingOnPostButtonAnd_CheckProcessingTime(String k) throws Exception {
//		waitUntilElementDisplayed(HipiCreateVideoPage.objdeleteclip, 40);
//		 TimeStampclick(HipiCreateVideoPage.objSelectRecord, "Tick Button");	
		waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenNext, 20);
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenNext, "Next");
		waitUntilElementDisplayed(HipiCreateVideoPage.objpostbtn,30);
//		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objVideoLanguageSelect, "Video Language Select");
//		waitTime(3000);
		if(TimeStampverifyElementExist(HipiCreateVideoPage.objEnglishLanguage, "English Language"))
		{
			TimeStampclick(HipiCreateVideoPage.objEnglishLanguage, "English Language");
//			TimeStampclick(HipiCreateVideoPage.objDoneCTC, "Done Button");
		}else {
			logger.info("User is unable to See Language Options");
			extent.extentLoggerFail("profile screen", "User is unable to See Language Options"); 
			
		}
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objpostbtn,"post button");
		waitTime(2000);
		if(TimeStampverifyElementPresent(HipiCreateVideoPage.objuploadInProgressPopup, "upload In Progress Popup")) {
			waitForElementNotDisplayed(HipiCreateVideoPage.objuploadInProgressPopup);
		}else {
			TimeStampclick(HipiCreateVideoPage.objRetry, "Retry Option");
		}
		
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
		if(waitUntilElementDisplayed(HipiCreateVideoPage.objShareSheet, 10)) {
			Back(1);
		}else {
			logger.info("User is unable to See Share Sheet");
			extent.extentLoggerFail("", "User is unable to See Share Sheet"); 
		}
		TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile");
		for (int i = 0; i <= 50; i++) {
			if(TimeStampverifyElementPresent(AMDHipi.objPublishingInProcess,"Publishing In Process")) {
				
				break;
			} else {
				logger.info("Publishing In Process is not displayed");
				extent.extentLogger("", "Publishing In Process is not displayed");
				Time_ExcelUpdate.timeStampNode("Publishing In Process is not displayed");
				TimeStampBack(1);
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile");
			}
		
		}
		Instant end=Instant.now();
		logger.info("End Time : " + end);
//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		extent.extentLogger("", "<b>clicking on next button Processing time: " + processingTime+"<b>");
		TimeStampdiscardPopup();
	}
	public void TimeStamp_create_Video_Of_Specific_Time_PostAnd_CheckProcessingTime_(String k) throws Exception {
		TimeStampclick(HipiHomePage.objVideoCreateIcon, "Create button");
		
		TimeStampnaallowPermissions();
		waitTime(4000);
		if (TimeStampverifyElementExist(HipiCreateVideoPage.objRecordIcon,"Camera icon play")) {
			waitTime(4000);
			TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.obj15seco(k), k );
			waitTime(4000);
			TimeStampclick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
			waitTime(5000);
			for(int i=1; i<=15; i++) {
				if (TimeStampverifyElementExist(HipiCreateVideoPage.obj00sec, "00sec")) {
					TimeStampnavigateToHomePage();
					waitTime(4000);
					TimeStampclick(HipiHomePage.objVideoCreateIcon, "Create button");
					waitTime(4000);
					TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.obj15seco(k), k );
					waitTime(4000);
					TimeStampclick(HipiCreateVideoPage.objRecordIcon,"Camera icon play");
					waitTime(5000);
//					TimeStampverifyElementExist(HipiCreateVideoPage.obj00sec, "00sec");
				}else {
					break ;
				}
				}

			TimeStamptimeTakeClickingOnPostButtonAnd_CheckProcessingTime(k);
		}
	}
	
	public void launchApp_And_Check_ProgressBar() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC002");
//		Time_ExcelUpdate.SlNoNode("1");
		Time_ExcelUpdate.ModuleNode("Video gets started");
		Time_ExcelUpdate.TestCaseSummaryNode1("Video startup time");
//		Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
		extent.HeaderChildNode("Video startup time");
		
//		extent.HeaderChildNode("Launch hipi app");
//		if(TimeStampverifyElementExist(HipiHomePage.objUpdate, "Update Button"))
//		{
//	
//		TimeStampclick(HipiHomePage.objUpdate, "Update Button");
//		waitTime(4000);
//		waitForElementNotDisplayed(HipiHomePage.objCancelDownload);
//		waitTime(10000);
////		TimeStamprelaunch(false);
//		if(TimeStampverifyElementExist(HipiHomePage.objDone, "Done Button")) {
//			TimeStampclick(HipiHomePage.objDone, "Done Button");
//			
//		}
//		
//		}else{
//			System.out.println("Update Popup is not displayed");
//			}
		waitUntilElementDisplayed(HipiLoginPage.objMaybeLater, 1);
		if(TimeStampverifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))
		{
			TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");
			System.out.println("Update Popup is displayed");
		}else{
			System.out.println("Update Popup is not displayed");
		}
		Instant start = Instant.now();
//		extent.extentLogger("", "clicked on hipi at Time----- "+ start);
//		extent.extentLogger("", "clicked on hipi at Time----- "+ start);

		if(TimeStampwaitForElementDisplayediOS(HipiHomePage.objProgressBar, 1000, "Progress Bar")) {	
//		screencapture();
		Instant end = Instant.now();
		Duration timeElapsed = Duration.between(start, end);
		extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
		System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
//		extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");
		
		String Processingtimesec=Long.toString(timeElapsed.getSeconds());
		String Processingtimemilli=Long.toString(timeElapsed.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
		extent.extentLogger("", "Feed screen seen  at Time----- " + end);
		Time_ExcelUpdate.TestCaseSummaryNode1("User is able to see Progress Bar and Video start play");
		}else {
			String Username = getParameterFromXML("NonsubscribedUserName");
			Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to see Progress Bar and Video not at start play" + Username + getListOfDevicesConnected());
			extent.extentLogger("", "User is not able to see Progress Bar and Video not at start play" + Username + getListOfDevicesConnected());
		}
	}
	
	public void verifyProgressBar() throws Exception {
		
		Time_ExcelUpdate.TestCaseIDNode("TC003");
//		Time_ExcelUpdate.SlNoNode("1");
		Time_ExcelUpdate.ModuleNode("Verify Progress bar is moving");
//		Time_ExcelUpdate.TestCaseSummaryNode1("Progress bar is moving Success ");
//		Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
		extent.HeaderChildNode("Launching hipi app");
		
		
//		extent.HeaderChildNode("Launch hipi app");
		TimeStampwaitForElementDisplayediOS(HipiHomePage.objProgressBar, 10, "Progress Bar");	
		
		String str1 = getAttributValue("contentDescription", HipiHomePage.objProgressBar);
		System.out.println(str1);
		waitTime(10000);
		String str2 = getAttributValue("content-desc", HipiHomePage.objProgressBarID);
		System.out.println(str2);
		
		if (!str1.equals(str2)) {
			Time_ExcelUpdate.TestCaseSummaryNode1("progress bar is moving Properly");
			System.out.println("progress bar is moving Properly");
			extent.extentLogger("", "Progress bar is moving" );
		}else {
			Time_ExcelUpdate.TestCaseSummaryNode1("progress bar is not moving Properly");
			System.out.println("progress bar is not moving Properly");
		}
		

//		Instant start = Instant.now();
//		extent.extentLogger("", "clicked on hipi at Time----- "+ start);
//		extent.extentLogger("", "clicked on hipi at Time----- "+ start);

		
////		screencapture();
//		Instant end = Instant.now();
//		Duration timeElapsed = Duration.between(start, end);
//		extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
//		System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
//		extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");
//		
//		String Processingtimesec=Long.toString(timeElapsed.getSeconds());
//		String Processingtimemilli=Long.toString(timeElapsed.toMillis());	
//		Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
//		extent.extentLogger("", "Feed screen seen  at Time----- " + end);

	}
	
	
	
	

	static final String xlpath2 = System.getProperty("user.dir") + "/Description_Data"+"/"+ "TextData" +".txt";
//	static final String file2 = "file2.txt";

//	public static String xlpath2 = System.getProperty("user.dir") + "/Description_Data"+"/"+ "TextData" +".txt";
	

	static BufferedReader b1 = null;
	static BufferedWriter b2 = null;


	
	public void  loginWithGoogleBrowserStack(String userType) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC042");
//		Time_ExcelUpdate.SlNoNode("2");
		Time_ExcelUpdate.ModuleNode("Login with google Module");
		Time_ExcelUpdate.TestCaseSummaryNode1("Login With yopmail Time");
		
//		extent.HeaderChildNode("Launching hipi app");
		extent.HeaderChildNode("Google Login Functionality");
		String pUserType = getParameterFromXML("userType");
		System.out.println("sads");
		//		extent.extentLogger("Login Type", "Login Type : " + pUserType);
		//getURl("www.hipi.co.in/");
		
		/*HashMap<String, String> simOptions = new HashMap<String, String>();
		simOptions.put("region","USA");*/
		
		
		//System.out.println(getDriver().executeScript("browserstack_executor:{'action': 'deviceInfo', 'arguments' : 'deviceProperties' : ["+simOptions+"]}").toString());

		//System.out.println(getPlatform());
		//setPlatform("BrowserStackMPWA");
		//System.out.println(getPlatform());
		
		//9152104924
		
		//getDriver().get("https://yopmail.com/en/");
		boolean flag = false;
		for (int i = 1; i < 10; i++) {
			click(AMDHomePage.objProfileIcon,"Profile icon");
			flag = verifyElementDisplayed(HipiLoginPage.objUsePhoneOrEmail);
			
			//For You is display its store in T
			////For You is NOT display its store in F
//			Back(1);
			System.out.println(flag);
			if (flag) {
				waitTime(5000);
				String randEmail = signUpWithRandomMail();
				randomEmailOtp(randEmail);
			} else {
				Back(1);
				waitUntilElementDisplayed(HipiHomePage.objForYou,10);
				break;
			}
		}
		
		/*
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 10);
		
			TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
			waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 10);
	
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");

			waitUntilElementDisplayed(HipiLoginPage.objEmailLoginTextField, 20);
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objEmailLoginTextField, "Gmail login field");
			type(HipiLoginPage.objEmailLoginTextField,"testinghipi99","Gmail login field");
			
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objNextBtn, "Next button");
			
			waitUntilElementDisplayed(HipiLoginPage.objPwdLoginTextField, 20);
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objPwdLoginTextField, "Password text field");
			type(HipiLoginPage.objPwdLoginTextField,"Testinghipi99@","Password text field");
            
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objNextBtn, "Next button");
			
			waitUntilElementDisplayed(HipiLoginPage.objIAgreeBtn, 20);
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objIAgreeBtn, "I agree button");
			*/
			//TimeStampverifyElementPresentAndClick(HipiLoginPage.objGoogleAccount, "Google Account");
	//Boolean flag = TimeStampverifyElementPresent(HipiHomePage.objForYou,"For you tab");
		
		/*if(flag==false) {
			for(int i =0;i<5;i++) {
				
				waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 10);
		
				TimeStampverifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");
				waitUntilElementDisplayed(HipiLoginPage.objGoogleAccount, 10);
				TimeStampverifyElementPresentAndClick(HipiLoginPage.objGoogleAccount, "Previously tried logged in account");
				
				if(waitUntilElementDisplayed(HipiHomePage.objForYou, 5)) {
					break;
				}
			}
		}
	
	if(waitUntilElementDisplayed(HipiLoginPage.objDoneCTASelectGenderPage, 5)) {
		TimeStampverifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
		 waitTime(4000);
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
		TimeStampclick(HipiLoginPage.objDoneCTASelectGenderPage, "Done CTC");
		
	}else {
		logger.info("User is unable to see select gender screen");
	}*/
		//String randomMail = signUpWithRandomMail();
		//randomEmailOtp("zeenewloyal@yopmail.com");
		
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	extent.extentLogger("", "<b>Start Time : " + start+"<b>");
	if (waitUntilElementDisplayed(HipiHomePage.objForYou, 5)) {
		logger.info("User is able to see Home screen");
		//		extent.extentLogger("", "User is able to see Home screen");
		Instant end=Instant.now();
		logger.info("End Time : " + end);
		//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
//		extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds " +Processingtimemilli+"  milliSeconds");

				extent.extentLoggerPass("","<b>Processing time: " + processingTime+"<b>");
	}
	else {
		logger.error("User is not able to login With yopmail");
		Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to login With yopmail");
		extent.extentLoggerFail("", "User is not able to login With yopmail");
	}
	
	
	waitUntilElementDisplayed(HipiHomePage.objForYou, 2);
	//click on feed button
	TimeStampverifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
	
	
	
	
	
	
	
	
	


	}

	public static void creatCSV(String description,String Username,String UDID) throws IOException {

	List list_file1 = new ArrayList();

	    String lineText ;
	    Path path = Paths.get(xlpath2);
		String content = null;
		 try {
			 List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
	            content = String.join(System.lineSeparator(), lines);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
//		System.out.println(content);
		
		boolean areEqual = true;
		
		while(content  !=null) {
			
			 if(content.contains(description + "," + Username + "," + UDID  + ",")) {
				System.out.println("Fail");
//				areEqual = false;
				extent.extentLoggerFail("", "User is able to see same Video ID");
//				Time_ExcelUpdate.TestCaseSummaryNode1(description+","+Username+"," +getListOfDevicesConnected()+",");
				logger.info("User is able to see same Video ID");
				Time_ExcelUpdate.TestCaseSummaryNode1(""+ description+","+Username+"," +getListOfDevicesConnected()+",");
//Video is not getting repeated on Android Hipi 
				break;
			}else {
				System.out.println("Pass");
				areEqual = true;
				extent.extentLoggerPass("", "User is not able to see same Video ID");
				logger.info("User is not able to see same Video ID");
				Time_ExcelUpdate.TestCaseSummaryNode1(""+ description+","+Username+"," +getListOfDevicesConnected()+",");
//Video is getting repeated on Android Hipi 
				break;
			}
			 
		}
		System.out.println(description + "," + Username + "," + UDID + ",");
		
		try {
//			File dir = new File(System.getProperty("user.dir") + "\\Analysed_Reports");
			File dir = new File(System.getProperty("user.dir") + "/Description_Data"+"/");
			System.out.println("===creating Excel");
			
			if (!dir.isDirectory()) {
				dir.mkdir();
			}
			FileWriter file = new FileWriter(xlpath2,true);
			BufferedWriter br = new BufferedWriter(file);
			br.write("\n");
			br.write(description+ ",");
			br.write(Username+ ",");
			br.write(UDID+ ",");					
			br.flush();
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
			}
	}			
	
	public void VerifyRemoveDefaultUserName(String userType) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC041");
//		Time_ExcelUpdate.SlNoNode("1");
		Time_ExcelUpdate.ModuleNode("Sign Up Module");
//		Time_ExcelUpdate.TestCaseSummaryNode1("");
//		Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
		extent.HeaderChildNode("Video startup time");
//		navigateToSignUpScreen();
	waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 5);
	TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 20);
	TimeStampverifyElementPresentAndClick(HipiLoginPage.objSignUpLink, "Sign Up Link");
	
	TimeStampverifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");

	TimeStampverifyElementPresent(HipiLoginPage.objSignUpTitle, "Sign Up Title");
		waitTime(5000);
		VerifyScrollOfYearPickerDown();
		waitTime(2000);
		VerifyScrollOfYearPickerDown();
		waitTime(2000);
		VerifyScrollOfYearPickerDown();
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
		 TimeStampverifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		 TimeStamphideKeyboard();
		 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

			
		 TimeStamptype(AMDLoginScreen.objEmailIdField,newEmailId,"User Naame added");
			Thread.sleep(5000);
			TimeStamphideKeyboard();
//		 hideKeyboard();
//		  String text = getText(AMDLoginScreen.objEmailIdField);
			TimeStampverifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
		waitTime(2000);
		TimeStampverifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
		 String fullName = getParameterFromXML("FullNmae");
		 TimeStamptype(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
		 waitTime(4000);
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
		 String Password = getParameterFromXML("NonsubscribedPassword");
		 TimeStampverifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		 TimeStamptype(AMDLoginScreen.objPasswordField, Password, "Password field");
		 TimeStamphideKeyboard();
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
			waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 5);
		
			 TimeStampverifyElementPresentAndClick(HipiLoginPage.objSubmitButton, "Submit Button");
			 waitUntilElementDisplayed(HipiLoginPage.objDoneButtonLanguage, 1);
			 TimeStampclick(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
			 waitUntilElementDisplayed(HipiHomePage.objForYou, 1);
				if( TimeStampverifyElementPresent(HipiHomePage.objForYou, "For You")){
					logger.info("User is navigate to Feed screen by tapping on Submit CTA in Create username page");	
					Time_ExcelUpdate.TestCaseSummaryNode1("User is able to sign in and navigate to Feed screen");
					extent.extentLoggerPass("", "User is navigate to Feed screen by tapping on Submit CTA in Create username page");					
				}else {
					logger.info("User is not navigate to Feed screen by tapping on Submit CTA in Create username page");	
					Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to sign in and navigate to Feed screen");
					extent.extentLoggerFail("", "User is not navigate to Feed screen by tapping on Submit CTA in Create username page");
					
				}
				
		}
	
	
	
	public void createDuetVideo(String TCID) throws InterruptedException, Exception {
		
		Time_ExcelUpdate.TestCaseIDNode(TCID);
		Time_ExcelUpdate.ModuleNode("Create Duet video ");
		Time_ExcelUpdate.TestCaseSummaryNode1("Check user able to Create Duet video ");
		extent.HeaderChildNode("Check user able to Create Duet video ");
		
		TimeStampverifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Share");
		waitTime(3000);
		TimeStampverifyElementPresentAndClick(HipiHomePage.objDuet,"Duet");
		waitTime(2000);
		TimeStampnaallowPermissions();
		waitTime(10000);
		waitForElementNotDisplayed(HipiCreateVideoPage.objdownloadTxtProgress);
		waitTime(4000);
 		waitUntilElementDisplayed(HipiCreateVideoPage.objRecordIcon, 2);
 		TimeStampclick(HipiCreateVideoPage.objVideoTickBtn, "Video Tick Btn");
 		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objRecordIcon,"Duet Record");
 		TimeStamptimeTakeClickingOnPostButton();
		
		
	}
	
	
	public void UploadVideoFromGallery(String TCID) throws Exception {

		Time_ExcelUpdate.TestCaseIDNode(TCID);
		Time_ExcelUpdate.ModuleNode("Upload Video From Gallery");
		
		extent.HeaderChildNode("Check user able to Create Video Upload From Gallery");
		
		TimeStampverifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create");
		TimeStampnaallowPermissions();
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
		waitTime(3000);
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objGalleryFirstVideo,"First video");
		
		waitTime(4000);
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
		waitTime(3000);
		
		TimeStampverifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideoTickButton, "Tick button");
		waitTime(3000);
		TimeStamptimeTakeClickingOnPostButton();
		
	}
	
	

	/**

	Creator Platform(Upload button)
 	Check user is able to redirected to Gallery of the phone when user click on Upload button on video recording screen
	Kartheek Reddy
	 * @throws Exception 

*/
	
	
	public void navigateToGallery() throws Exception {
		
		
		
		verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon,"Create Icon");
		allowPermissions();
		verifyElementPresentAndClick(HipiCreateVideoPage.objuploadvideo,"Upload");
		waitTime(3000);
		if(verifyElementDisplayed(HipiCreateVideoPage.objGallerySelectVideoPopup))
		{
			logger.info("User should able to redirected to Gallery of the phone when user click on Upload button on video recording screen");
			extent.extentLoggerPass("Gallery upload screen", "User should able to redirected to Gallery of the phone when user click on Upload button on video recording screen");
		}else {
			logger.info("User should able to redirected to Gallery of the phone when user click on Upload button on video recording screen");
			extent.extentLoggerFail("Gallery upload screen", "User should able to redirected to Gallery of the phone when user click on Upload button on video recording screen");
		}
		
		
	}
	
	
	
	public void  verifyRedirectedToGalleryPhone__T2606(String userType) throws Exception {
		
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2606 - Check user is able to redirected to Gallery of the phone when user click on Upload button on video recording screen");
		System.out.println("T2606");
		extent.extentLogger(" ", "T2606");
		navigateToGallery();
		navigateToHomePage();
		}
	}
	
	
	public void  loginWithPhoneNumber(String userType) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC043");
//		Time_ExcelUpdate.SlNoNode("2");
		Time_ExcelUpdate.ModuleNode("Login Module");
		Time_ExcelUpdate.TestCaseSummaryNode1("Login With Phone Number Time");
		
//		extent.HeaderChildNode("Launching hipi app");
		extent.HeaderChildNode("Phone Number Login Functionality");
		String pUserType = getParameterFromXML("userType");
		
//		extent.extentLogger("Login Type", "Login Type : " + pUserType);
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 10);
		TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 10);
	TimeStampverifyElementPresentAndClick(HipiProfilePage.objUsePhoneOrEmail,"Use Phone Or Email");
	
	waitUntilElementDisplayed(HipiLoginPage.objPhoneNumberTextField, 5);
	
	TimeStampverifyElementPresentAndClick(HipiLoginPage.objPhoneNumberTextField, "Phone Number Text Field");
	String phoneNumber = getParameterFromXML("PhoneNumber");
	TimeStamptype(HipiLoginPage.objPhoneNumberTextField, phoneNumber, "Phone Number");	
	TimeStamphideKeyboard();
	
	String checkPhoneNumber = getText(HipiLoginPage.objPhoneNumberTextField);
//	logger.info("User is able to type "  + checkPhoneNumber );	
//	extent.extentLoggerPass("", "User is able to type " + checkPhoneNumber );	
	
	String Password = getParameterFromXML("Password");
	
//	Thread.sleep(5000);
//	hideKeyboard();
	
	TimeStampverifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//	hideKeyboard();

	TimeStamptype(AMDLoginScreen.objPasswordField, Password, "Password field");
	TimeStamphideKeyboard();

	String checkPassword = getText(HipiLoginPage.objPasswordTextField);
	
	TimeStampverifyElementPresentAndClick(HipiLoginPage.objLoginButton, "Login Button");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	extent.extentLogger("", "<b>Start Time : " + start+"<b>");
	if (waitUntilElementDisplayed(HipiHomePage.objForYou, 5)) {
		logger.info("User is able to see Home screen");
		//		extent.extentLogger("", "User is able to see Home screen");
		Instant end=Instant.now();
		logger.info("End Time : " + end);
		//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
//		extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds, "+Processingtimemilli+"  milliSeconds");
		extent.extentLoggerPass("","<b>Processing time: " + processingTime+"<b>");
	}else {
		logger.error("User is not able to login With Phone Number");
		Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to login With Phone Number");
		extent.extentLoggerFail("", "User is not able to login With Phone Number");
	}
	
	
	waitUntilElementDisplayed(HipiHomePage.objForYou, 10);
	//click on feed button
	TimeStampverifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
	
	
//	verifyElementPresent(HipiLoginPage.objSelectGendeTitler, "Select Gender Title");
//	verifyElementPresentAndClick(HipiLoginPage.objDoneCTASelectGenderPage, "Done CTA Select Gender Page");
//	waitTime(3000);
//	if (verifyElementPresent(HipiHomePage.objHomeIcon, "Home Icon")) {
//		 logger.info("User is able to login to the application when he entered valid details" );	
//		 extent.extentLoggerPass("", "User is able to login to the application when he entered valid details" );
//	 }else {
//		logger.info("User is not able to login to the application when he entered valid details");	
//		extent.extentLoggerFail("", "User is not able to login to the application when he entered valid details");		
//	  }
//
//	logOut();
//	 navigateToHomePage();
		
		
	}
		
	
	public void unFollow() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC040");
//		Time_ExcelUpdate.SlNoNode("1");
		Time_ExcelUpdate.ModuleNode("UnFollow Test case");
//		Time_ExcelUpdate.TestCaseSummaryNode1("User is able to Follow and user is able to see Following user ");
//		Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
		extent.HeaderChildNode("User is able to UnFollow and user is not able to see UnFollowing user ");
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 5);
		TimeStampverifyElementPresent(HipiHomePage.objFollowButton, "Follow");
		TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objPrivateTabVideoSelect,2);
		waitTime(4000);
		TimeStampverifyElementPresent(HipiProfilePage.objFollowingButton, "Following Button");
		waitTime(5000);
		TimeStampclick(HipiProfilePage.objFollowingButton, "Following Button");
		waitUntilElementDisplayed(HipiProfilePage.objFollowingListTab,2);
		String firstFollowingUser = getText(HipiProfilePage.objFirstFollowingUserName);
		System.out.println(firstFollowingUser);
		TimeStampverifyElementPresentAndClick(HipiProfilePage.objFollowingbutton_followingTab,"Following CTA");
		String firstFollowingUser1 = getText(HipiProfilePage.objFirstFollowingUserName);
		System.out.println(firstFollowingUser1);
		if (firstFollowingUser.equals(firstFollowingUser1)) {
			Time_ExcelUpdate.TestCaseSummaryNode1("User is  able to see Following user if unfollow ");
			extent.extentLoggerFail("", "User is  able to see Following user if unfollow ");
			}else {
//				String Username = getParameterFromXML("NonsubscribedUserName");
				Time_ExcelUpdate.TestCaseSummaryNode1("User is able to UnFollow and user is unable  to see Following user ");

				extent.extentLoggerPass("", "User is able to UnFollow and user is unable  to see Following user ");
			
			}
		
		
	}
	public void Follow() throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC003");
//		Time_ExcelUpdate.SlNoNode("1");
		Time_ExcelUpdate.ModuleNode("Follow Test case");
//		Time_ExcelUpdate.TestCaseSummaryNode1("User is able to Follow and user is able to see Following user ");
//		Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
		extent.HeaderChildNode("User is able to Follow and user is able to see Following user ");
		
		
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 5);
		
//		SwipeUntilFindElement(HipiHomePage.objFollowButton, "UP");
		
		String text = getText(HipiHomePage.objDescription);
		
		System.out.println(text);
		
		String[] Res = text.split("@");	
		
		System.out.println(Res[1]);
		
		if(TimeStampverifyElementPresent(HipiHomePage.objFollowButton, "Follow")){
			logger.info("Follow buttin is present next to Userhandle in Feed screen");
//			extent.extentLoggerPass("", "Follow buttin is present next to Userhandle in Feed screen");
			TimeStampclick(HipiHomePage.objFollowButton, "Follow");
		}else{
			logger.info("Follow buttin is present next to Userhandle in Feed screen");
			extent.extentLoggerFail("", "Follow buttin is present next to Userhandle in Feed screen");
		}	
		
		
		//click on Profile icon
		TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
		waitUntilElementDisplayed(HipiProfilePage.objPrivateTabVideoSelect,2);
		waitTime(4000);
		TimeStampverifyElementPresent(HipiProfilePage.objFollowingButton, "Following Button");
		waitTime(5000);
		TimeStampclick(HipiProfilePage.objFollowingButton, "Following Button");
		waitUntilElementDisplayed(HipiProfilePage.objFollowingListTab,2);
		TimeStampPartialSwipe("DOWN", 2);
		waitTime(4000);
		TimeStampverifyElementPresentAndClick(HipiProfilePage.objFollowingSearch, "Following Search ");
		
		waitTime(4000);
		TimeStamptype(HipiProfilePage.objFollowingSearch, Res[1], "Search field");
		waitTime(10000);
		TimeStampverifyElementPresent(HipiProfilePage.objFollowingTabUserHandler, "User handler");
		String text1 = getText(HipiProfilePage.objFollowingTabUserHandler);
		if (text.equals(text1)) {
			Time_ExcelUpdate.TestCaseSummaryNode1("User is able to Follow and user is able to see Following user ");
			extent.extentLoggerPass("", "User is able to Follow and user is able to see Following user ");
			}else {
//				String Username = getParameterFromXML("NonsubscribedUserName");
				Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to Follow and user is not able to see Following user ");
				extent.extentLoggerFail("", "User is not able to Follow and user is not able to see Following user ");
			}
		
//		TimeStampverifyElementPresentAndClick(HipiProfilePage.objSearchFieldCloseButton, "search field close button");
//		TimeStampBack(1);
//		TimeStampclick(HipiProfilePage.objFollowingButton, "Following Button");
//		waitUntilElementDisplayed(HipiProfilePage.objFollowingListTab,2);
//		String firstFollowingUser = getText(HipiProfilePage.objFirstFollowingUserName);
//		TimeStampverifyElementPresentAndClick(HipiProfilePage.objFollowingbutton_followingTab,"Following CTA");
//		String firstFollowingUser1 = getText(HipiProfilePage.objFirstFollowingUserName);
//		if (firstFollowingUser.equals(firstFollowingUser1)) {
//			System.out.println("Fail");
//		}else {
//			System.out.println("Pass");
//		}
//		waitUntilElementDisplayed(HipiProfilePage., retryCount);
	}
	
	
	
	
	public void selectMultipleVideosFromGallery__T2607(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2607 - Check if user is able to select multiple videos from Gallery.");
		System.out.println("T2607");
		extent.extentLogger(" ", "T2607");
		
		navigateToGallery();
		VerifyUserisAbleToSelectMultipulVideosAndPhots();
		navigateToHomePage();
		}
		
		
		
	}
	public void VerifyUserisAbleToSelectMultipulVideosAndPhots() throws Exception {
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Videos/Gallery Images");

		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Videos/Images");

		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(3), "Gallery Videos/Images");


		if (verifyElementPresent(HipiCreateVideoPage.objSeletedGalleryVideos(1), "Selected Gallery First Video/Image ")) {
			verifyElementPresent(HipiCreateVideoPage.objSeletedGalleryVideos(2), "Selected Gallery Second Video/Image ");
			verifyElementPresent(HipiCreateVideoPage.objSeletedGalleryVideos(3), "Selected Gallery 3rd Video/Image ");
			logger.info("User should able to select a multiple videos/photos from Gallery.");
			extent.extentLoggerPass("", "User should able to select a multiple videos/photos from Gallery.");
		}else {

			logger.info("User should able to select a multiple videos/photos from Gallery.");
			extent.extentLoggerFail("", "User should able to select a multiple videos/photos from Gallery.");

		}


	}
	
	public void  selectAMultipleImagesFromGallery__T2608(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2608 - Check if user is able to select a multiple images from Gallery.");
			System.out.println("T2608");
			extent.extentLogger(" ", "T2608");

			navigateToGallery();
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			VerifyUserisAbleToSelectMultipulVideosAndPhots();
			navigateToHomePage();
		}
	}

	public void  selectACombinationsOfMultipleVideosAndImagesFromGallery__T2609(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2609 - Check if user is able to select a combinations of multiple videos and images from Gallery.");
			System.out.println("T2609");
			extent.extentLogger(" ", "T2609");
			navigateToGallery();
			waitTime(2000);
			VerifyUserisAbleToSelectMultipulVideosAndPhots();
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			VerifyUserisAbleToSelectMultipulVideosAndPhots();
			
			navigateToHomePage();
		}	
		}
	public void Shop() throws Exception {
		
		Time_ExcelUpdate.TestCaseIDNode("TC036");
//		Time_ExcelUpdate.SlNoNode("1");
		Time_ExcelUpdate.ModuleNode("Shop Module");
//		Time_ExcelUpdate.TestCaseSummaryNode1("");
//		Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
		extent.HeaderChildNode("Shop Page ");
		SwipeUntilFindElement(HipiHomePage.objShopButton, "UP");
		waitTime(4000);
		click(HipiHomePage.objShopButton, "Shop Button");	
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
		
		if(waitUntilElementDisplayed(HipiShopPage.objProductImageThumbnail, 2)) {
			Instant end=Instant.now();
			logger.info("End Time : " + end);
			Duration processingTime = Duration.between(start, end);
			logger.info("Processing time: " + processingTime);
			String Processingtimesec=Long.toString(processingTime.getSeconds());
			String Processingtimemilli=Long.toString(processingTime.toMillis());	
			Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds " +Processingtimemilli+"  milliSeconds");
			Time_ExcelUpdate.TestCaseSummaryNode1("User is able to See Shop Page");
			extent.extentLoggerPass("","User is able to See Shop Page");
		}
		else {
			logger.error("User is not able to See Shop Page");
			Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to See Shop Page");
			extent.extentLoggerFail("", "User is not able to See Shop Page");
		}
		
		TimeStampnavigateToHomePage();
			
			}
	
	
	public void  uploadedMultipleVideosInLoopWithTimerForCurrentPosition__T2610(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2610 - Check if user is able to see the playback of the uploaded multiple videos in loop with a timer for current position");
			System.out.println("T2610");
			extent.extentLogger(" ", "T2610");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditclipVideos(1), 2);
			
			if(verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(1), "First Video") && verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(2), "Second Video")) {
				String trim = getText(HipiCreateVideoPage.objEditOptions(1));
				String spilt = getText(HipiCreateVideoPage.objEditOptions(2));
				String copy = getText(HipiCreateVideoPage.objEditOptions(3));
				String delete = getText(HipiCreateVideoPage.objEditOptions(4));
				
			if (trim.equals("Trim")) {
				logger.info("User is able to see " + trim + " option");
				extent.extentLoggerPass("", "User is able to see " + trim + " option");
			}else {
				logger.info("User is unable to see " + trim + " option");
				extent.extentLoggerFail("", "User is unable to see " + trim + " option");
			}
			if (spilt.equals("Spilt")) {
				logger.info("User is able to see " + spilt + " option");
				extent.extentLoggerPass("", "User is able to see " + spilt + " option");
			}else {
				logger.info("User is unable to see " + spilt + "option");
				extent.extentLoggerFail("", "User is unable to see " + spilt + " option");
			}
			if (copy.equals("Copy")) {
				logger.info("User is able to see " + copy + " option");
				extent.extentLoggerPass("", "User is able to see " + copy + " option");
			}else {
				logger.info("User is unable to see " + copy + " option");
				extent.extentLoggerFail("", "User is unable to see " + copy + " option");
			}
			if (delete.equals("Delete")) {
				logger.info("User is able to see " + delete + " option");
				extent.extentLoggerPass("", "User is able to see " + delete + " option");
			}else {
				logger.info("User is unable to see " + delete + " option");
				extent.extentLoggerFail("", "User is unable to see " + delete + " option");
			}
				logger.info("User should able to see the playback of the uploaded multiple videos in loop with a timer for current position");
				extent.extentLoggerPass("", "User should able to see the playback of the uploaded multiple videos in loop with a timer for current position");
			}else {
				logger.info("User should able to see the playback of the uploaded multiple videos in loop with a timer for current position");
				extent.extentLoggerFail("", "User should able to see the playback of the uploaded multiple videos in loop with a timer for current position");
			}
			
			navigateToHomePage();
			
		}
	}
	
	
	public void  uploadedMultipleImagesInLoopWithTimerForCurrentPosition__T2611(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2611 - Check if user is able to see the playback of the uploaded multiple images in loop with a timer for current position");
			System.out.println("T2611");
			extent.extentLogger(" ", "T2611");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Images");

			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Images");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditclipVideos(1), 2);
			
			if(verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(1), "First Image") && verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(2), "Second Image")) {
				String duration = getText(HipiCreateVideoPage.objEditOptions(1));
				String copy = getText(HipiCreateVideoPage.objEditOptions(2));
				String delete = getText(HipiCreateVideoPage.objEditOptions(3));
				if (duration.equals("Duration")) {
					logger.info("User is able to see " + duration + " option");
					extent.extentLoggerPass("", "User is able to see " + duration + " option");
				}else {
					logger.info("User is unable to see " + duration + " option");
					extent.extentLoggerPass("", "User is unable to see " + duration + " option");
				}
				if (copy.equals("Copy")) {
					logger.info("User is able to see " + copy + " option");
					extent.extentLoggerPass("", "User is able to see " + copy + " option");
				}else {
					logger.info("User is unable to see " + copy + " option");
					extent.extentLoggerPass("", "User is unable to see " + copy + " option");
				}
				if (delete.equals("Delete")) {
					logger.info("User is able to see " + delete + " option");
					extent.extentLoggerPass("", "User is able to see " + delete + " option");
				}else {
					logger.info("User is unable to see " + delete + " option");
					extent.extentLoggerPass("", "User is unable to see " + delete + " option");
				}
				logger.info("User should able to see the playback of the uploaded multiple images in loop with a timer for current position");
				extent.extentLoggerPass("", "User should able to see the playback of the uploaded multiple images in loop with a timer for current position");
			}else {
				logger.info("User should able to see the playback of the uploaded multiple images in loop with a timer for current position");
				extent.extentLoggerFail("", "User should able to see the playback of the uploaded multiple images in loop with a timer for current position");
			}
			navigateToHomePage();
			}
		}
	
	
	public void  uploadedCombinationOfMultipleVideosAndImages__T2612(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2612 - Check if user is able to see the playback of the uploaded combination of multiple videos and images in loop with a timer for current position");
			System.out.println("T2612");
			extent.extentLogger(" ", "T2612");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");

			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");

			
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");

			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditclipVideos(1), 2);
			
			if(verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(1), "First Image") && verifyElementPresent(HipiCreateVideoPage.objEditclipVideos(2), "Second Image")) {
				verifyElementPresent(HipiCreateVideoPage.objTrimOptions, "Trim Option");
				Swipe("LEFT", 2);
				verifyElementPresent(HipiCreateVideoPage.objDurationOptions, "Duration Option");
				logger.info("User should able to see the playback of the uploaded combination of multiple videos and images in loop with a timer for current position");
				extent.extentLoggerPass("", "User should able to see the playback of the uploaded combination of multiple videos and images in loop with a timer for current position");
			}else {
				logger.info("User should able to see the playback of the uploaded combination of multiple videos and images in loop with a timer for current position");
				extent.extentLoggerFail("", "User should able to see the playback of the uploaded combination of multiple videos and images in loop with a timer for current position");
			}
			navigateToHomePage();
		}
	}
	
	
	
	public void  maximumDurationForAnImageFileIs10Seconds__T2613(String userType) throws Exception {

		boolean flag = false;
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2613 - Check whether the maximum duration for an image file is 10 seconds and the minimum duration is 1 second.");
			System.out.println("T2613");
			extent.extentLogger(" ", "T2613");
			navigateToGallery();
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditclipVideos(1), 2);
			
			swipeRail(HipiCreateVideoPage.objDurationSeekBar,"LEFT",1);
			if(getText(HipiCreateVideoPage.objSeekbarValue).equals("1")) {
				flag = true;
			}
			else {
				flag = false;
			}

			swipeRail(HipiCreateVideoPage.objDurationSeekBar,"RIGHT",1);
			if(getText(HipiCreateVideoPage.objSeekbarValue).equals("10")) {
				flag = true;
			}
			else {
				flag = false;
			}
			
			if(flag) {
				logger.info("The maximum duration for an image file should be 10 seconds and the minimum duration should be 1 second.");
				extent.extentLoggerPass("", "The maximum duration for an image file should be 10 seconds and the minimum duration should be 1 second.");
			}
			
			else {
				logger.info("The maximum duration for an image file should be 10 seconds and the minimum duration should be 1 second.");
				extent.extentLoggerFail("", "The maximum duration for an image file should be 10 seconds and the minimum duration should be 1 second.");
			}
			navigateToHomePage();
		}
	}
	
	
	public void removeTheAddedVideos__T2614(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2614 - Check if user is able to remove the added videos using Edit Clips option on video edit screen.");
			System.out.println("T2614");
			extent.extentLogger(" ", "T2614");
			navigateToGallery();
			waitTime(2000);
			
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");

			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");

			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditclipVideos(1), 2);
			
			int videoCount = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(videoCount);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditOptions(4), "Delete Option");
			waitTime(4000);
			int videoCount1 = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(videoCount1);
			if(videoCount>=videoCount1) {
				logger.info("User should able to remove the added videos using Edit Clips option on video edit screen.");
				extent.extentLoggerPass("", "User should able to remove the added videos using Edit Clips option on video edit screen.");
			}else {
				logger.info("User should able to remove the added videos using Edit Clips option on video edit screen.");
				extent.extentLoggerFail("", "User should able to remove the added videos using Edit Clips option on video edit screen.");
			}
			navigateToHomePage();
			
		}
	}
	
	
	public void   removeTheAddedImages__T2615(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2615 - Check if user is able to remove the added images using Edit Clips option on video edit screen.");
			System.out.println("T2615");
			extent.extentLogger(" ", "T2615");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");

			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objEditclipVideos(1), 2);
			
			int imageCount = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(imageCount);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditOptions(3), "Delete Option");
			waitTime(4000);
			int imageCount1 = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(imageCount1);
			if(imageCount>=imageCount1) {
				logger.info("User is able to remove the added images using Edit Clips option on video edit screen.");
				extent.extentLoggerPass("", "User is able to remove the added images using Edit Clips option on video edit screen.");
			}else {
				logger.info("User is unable to remove the added images using Edit Clips option on video edit screen.");
				extent.extentLoggerFail("", "User is unable to remove the added images using Edit Clips option on video edit screen.");
			}
			navigateToHomePage();
		}
		
	}
	
	public void   videosUsingEditClipsOptionOnVideoEditScreen__T2616(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2616 - Check if user is able to add more videos using Edit Clips option on video edit screen.");
			System.out.println("T2616");
			extent.extentLogger(" ", "T2616");
			navigateToGallery();
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objFineshButtonEditScreen, 2);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objFineshButtonEditScreen, "Finesh Button");
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrimOptions, 2);
			
			int videoCount = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(videoCount);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditOptions(3), "Copy option");
			waitTime(3000);
			int videoCount1 = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(videoCount1);
			if(videoCount<=videoCount1) {
				logger.info("User is able to add more videos using Edit Clips option on video edit screen.");
				extent.extentLoggerPass("", "User is able to add more videos using Edit Clips option on video edit screen.");
			}else {
				logger.info("User is unable to add more videos using Edit Clips option on video edit screen.");
				extent.extentLoggerFail("", "User is unable to add more videos using Edit Clips option on video edit screen.");
			}


		}
	}
	
	
	
	
	public void   videosUsingEditClipsOptionOnImageEditScreen__T2617(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2617 - Check if user is able to add more images using Edit Clips option on video edit screen.");
			System.out.println("T2617");
			extent.extentLogger(" ", "T2617");
			navigateToGallery();
			waitTime(2000);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
						
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			
			
			
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objFineshButtonImageEditScreen, 2);
			
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objFineshButtonImageEditScreen, "Finesh Button");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip, 2);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objDurationOptions, 2);
			
			int videoCount = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(videoCount);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditOptions(2), "Copy option");
			waitTime(3000);
			int videoCount1 = getCount(HipiCreateVideoPage.objEditclipVideo);
			
			System.out.println(videoCount1);
			if(videoCount<=videoCount1) {
				logger.info("User is able to add more images using Edit Clips option on video edit screen.");
				extent.extentLoggerPass("", "User is able to add more images using Edit Clips option on video edit screen.");
			}else {
				logger.info("User is unable to add more images using Edit Clips option on video edit screen.");
				extent.extentLoggerFail("", "User is unable to add more images using Edit Clips option on video edit screen.");
			}
			
		}
	}
	
	public void   durationTrimEditClipsOptionOnImageVideoEditScreen__T2618(String userType) throws Exception {
		Boolean flag = false;
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2618 - Check if user is able to use trim duration for videos/images using Edit Clips option on video edit screen.");
			System.out.println("T2618");
			extent.extentLogger(" ", "T2618");
			navigateToGallery();
			waitTime(2000);
			
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
						
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			
waitUntilElementDisplayed(HipiCreateVideoPage.objFineshButtonEditScreen, 2);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objFineshButtonEditScreen, "Finesh Button");
			waitUntilElementDisplayed(HipiCreateVideoPage.objVideoEditScreenEditclip, 2);
			
			verifyElementPresentAndClick(HipiCreateVideoPage.objVideoEditScreenEditclip,"Edit clip");
			waitUntilElementDisplayed(HipiCreateVideoPage.objTrimOptions, 2);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditOptions(1),"Trim option");
			
			waitUntilElementDisplayed(HipiCreateVideoPage.objLeftDurationHandle,2);
			String duration = getText(HipiCreateVideoPage.objEditClipDurationInfo).substring(39,41);
			System.out.println(duration);
			
			swipeRail(HipiCreateVideoPage.objLeftDurationHandle,"RIGHT",1);
			String durationLeftHandle = getText(HipiCreateVideoPage.objEditClipDurationInfo).substring(39,41);
			if(durationLeftHandle!=duration) {
				flag = true;
			}
			
			swipeRail(HipiCreateVideoPage.objRighDurationHandle,"LEFT",1);
			String durationRightHandle = getText(HipiCreateVideoPage.objEditClipDurationInfo).substring(39,41);
			if(durationLeftHandle!=durationRightHandle) {
				flag = true;
			}
			
			else {
				flag = false;
			}
			
			if(flag) {
				logger.info("User should able to use trim duration for videos/images using Edit Clips option on video edit screen.");
				extent.extentLoggerPass("", "User should able to use trim duration for videos/images using Edit Clips option on video edit screen.");
			}else {
				logger.info("User should able to use trim duration for videos/images using Edit Clips option on video edit screen.");
				extent.extentLoggerFail("", "User should able to use trim duration for videos/images using Edit Clips option on video edit screen.");
			}
			
		}
	}
	
	
	public void recordButtonValidation_T2650(String userType) throws Exception{
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
		extent.HeaderChildNode("T2650 - Check if user is able to see the button for recording a clip even after I have recorded a clip");
		System.out.println("T2650");
		extent.extentLogger(" ", "T2650");
		
		navigateToCreatorScreen();
		verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record Button");
		waitTime(6000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record Button");
		
		if(verifyElementPresent(HipiCreateVideoPage.objrecordbtn,"Record Button")) {
			logger.info("User should able to see the button for recording a clip even after I have recorded a clip");
			extent.extentLoggerPass("", "User should able to see the button for recording a clip even after I have recorded a clip");
		}
		
		else {
			logger.info("User should able to see the button for recording a clip even after I have recorded a clip");
			extent.extentLoggerFail("", "User should able to see the button for recording a clip even after I have recorded a clip");
		}
		}
		
	}
	
	public void  selectAsingleVideoFromGallery__T2653(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2653 - Check if user is able to select a single video from Gallery.");
			System.out.println("T2653");
			extent.extentLogger(" ", "T2653");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			waitTime(2000);
			if (verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Video")) {
				logger.info("User should able to select a single video from Gallery.");
				extent.extentLoggerPass("", "User should able to select a single video from Gallery.");
			}else {
				logger.info("User should able to select a single video from Gallery.");
				extent.extentLoggerFail("", "User should able to select a single video from Gallery.");
			}
			navigateToHomePage();
		}
	
	}
	
	
	
	public void  selectAMultipleVideoFromGallery__T2654(String userType) throws Exception {

		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2654 - Check if user is able to select a Multiple video from Gallery.");
			System.out.println("T2654");
			extent.extentLogger(" ", "T2654");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");
			waitTime(2000);
			if (verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Video")&& verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected Second Video")) {
				logger.info("User is able to select a Multiple video from Gallery.");
				extent.extentLoggerPass("", "User is able to select a Multiple video from Gallery.");
			}else {
				logger.info("User is unable to select a Multiple video from Gallery.");
				extent.extentLoggerFail("", "User is unable to select a Multiple video from Gallery.");
			}
			navigateToHomePage();
		}

	}

public void  selectAsingleImageFromGallery__T2655(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2655 - Check if user is able to select a single Image from Gallery.");
			System.out.println("T2655");
			extent.extentLogger(" ", "T2655");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			waitTime(2000);
			if (verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Video")) {
				logger.info("User is able to select a single Image from Gallery.");
				extent.extentLoggerPass("", "User is able to select a single Image from Gallery.");
			}else {
				logger.info("User is unable to select a single Image from Gallery.");
				extent.extentLoggerFail("", "User is unable to select a single Image from Gallery.");
			}
			navigateToHomePage();
		}
	
	}
	
public void  selectAMultipleImageFromGallery__T2656(String userType) throws Exception {

	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2656 - Check if user is able to select a Multiple Images from Gallery.");
		System.out.println("T2656");
		extent.extentLogger(" ", "T2656");
		navigateToGallery();
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");
		waitTime(2000);
		if (verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Images")&& verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected Second Images")) {
			logger.info("User is able to select a Multiple Images from Gallery.");
			extent.extentLoggerPass("", "User is able to select a Multiple Images from Gallery.");
		}else {
			logger.info("User is unable to select a Multiple Images from Gallery.");
			extent.extentLoggerFail("", "User is unable to select a Multiple Images from Gallery.");
		}
		navigateToHomePage();
	}

}


public void redirectedToTrimScreenSingleVideo__T2657(String userType) throws Exception {


	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2657 - Check if user is redirected to Trim screen when I select a video from Gallery.");
		System.out.println("T2657");
		extent.extentLogger(" ", "T2657");
		navigateToGallery();
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
		waitUntilElementDisplayed(HipiCreateVideoPage.objFineshButtonEditScreen, 2);


		if (verifyElementPresent(HipiCreateVideoPage.objTrimOptions, "Trim Video title")) {
			logger.info("User is redirected to Trim screen when user select a video from Gallery.");
			extent.extentLoggerPass("", "User is redirected to Trim screen when user select a video from Gallery.");
		}else {
			logger.info("User is unable redirected to Trim screen when user select a video from Gallery.");
			extent.extentLoggerFail("", "User is unable redirected to Trim screen when user select a video from Gallery.");
		}
		navigateToHomePage();

	}
}

public void redirectedToTrimScreenMultipleVideo__T2658(String userType) throws Exception {


	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2658 - Check if user is redirected to Trim screen when I select a multiple videos from Gallery.");
		System.out.println("T2658");
		extent.extentLogger(" ", "T2658");
		navigateToGallery();
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
		waitUntilElementDisplayed(HipiCreateVideoPage.objHoldAndDragVideosPhotosToChangeTheirOrder, 2);
		if (verifyElementPresent(HipiCreateVideoPage.objHoldAndDragVideosPhotosToChangeTheirOrder, "Hold And Drag Videos Photos To Change Their Order")) {
			logger.info("User should be redirected to Trim screen when user select a multiple videos from Gallery.");
			extent.extentLoggerPass("", "User should be redirected to Trim screen when user select a multiple videos from Gallery.");
		}else {
			logger.info("User should be redirected to Trim screen when user select a multiple videos from Gallery.");
			extent.extentLoggerFail("", "User should be redirected to Trim screen when user select a multiple videos from Gallery.");
		}
		navigateToHomePage();

	}
}


	public void  redirectedToTrimScreenSingleImage__T2659(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
		extent.HeaderChildNode("T2659 - Check if user is redirected to Trim screen when I select an image from Gallery.");
		System.out.println("T2659");
		extent.extentLogger(" ", "T2659");
		navigateToGallery();
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
		waitTime(2000);
		verifyElementPresent(HipiCreateVideoPage.objSelectedVideo(1), "Selected First Video");
		waitTime(2000);
		verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
		waitUntilElementDisplayed(HipiCreateVideoPage.objDragTheSliderToAdjust, 2);
		if (verifyElementPresent(HipiCreateVideoPage.objDragTheSliderToAdjust, "Drag The Slider To Adjust")) {
			logger.info("User is redirected to Drag The Slider To Adjust duration screen when user select a image from Gallery.");
			extent.extentLoggerPass("", "User is redirected to Drag The Slider To Adjust duration screen when user select a image from Gallery.");
		}else {
			logger.info("User is unable redirected to Drag The Slider To Adjust duration screen when user select a image from Gallery.");
			extent.extentLoggerFail("", "User is unable redirected to Drag The Slider To Adjust duration screen when user select a image from Gallery.");
		}
		navigateToHomePage();

	}

}
	
	public void  redirectedToTrimScreenmultipleImage__T2660(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2660 - Check if user is redirected to Trim screen when I select an multiple images from Gallery.");
			System.out.println("T2660");
			extent.extentLogger(" ", "T2660");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objPhotesTab, "Photos Tab");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(2), "Gallery Video and Images");
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			waitUntilElementDisplayed(HipiCreateVideoPage.objHoldAndDragVideosPhotosToChangeTheirOrder, 2);
			if (verifyElementPresent(HipiCreateVideoPage.objHoldAndDragVideosPhotosToChangeTheirOrder, "Hold And Drag Videos Photos To Change Their Order")) {
				logger.info("User is redirected to Hold And Drag Videos Photos To Change Their Order screen when user select a multiple image from Gallery.");
				extent.extentLoggerPass("", "User is redirected to Hold And Drag Videos Photos To Change Their Order screen when user select a multiple image from Gallery.");
			}else {
				logger.info("User is unable redirected to Hold And Drag Videos Photos To Change Their Order screen when user select a multiple image from Gallery.");
				extent.extentLoggerFail("", "User is unable redirected to Hold And Drag Videos Photos To Change Their Order screen when user select a multiple image from Gallery.");
			}
			navigateToHomePage();

		}

	}

	public void verticalBarTrimScreen_2665(String userType) throws Exception{
		if(userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("T2665 - Check if user is able to see the vertical bar on the trimming bar for the current frame in the playback.");
			System.out.println("T2665");
			extent.extentLogger(" ", "T2665");
			navigateToGallery();
			waitTime(2000);
			verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Video and Images");
			verifyElementPresentAndClick(HipiCreateVideoPage.objEditClipAddMedia,"Add Media");
			
			if(verifyElementPresent(HipiCreateVideoPage.objLeftDurationHandle,"Left vertical bar") && verifyElementPresent(HipiCreateVideoPage.objRighDurationHandle,"Right vertical bar")) {
				logger.info("User should able to see the vertical bar on the trimming bar for the current frame in the playback.");
				extent.extentLoggerPass("", "User should able to see the vertical bar on the trimming bar for the current frame in the playback.");
			}
			
			else {
				logger.info("User should able to see the vertical bar on the trimming bar for the current frame in the playback.");
				extent.extentLoggerFail("", "User should able to see the vertical bar on the trimming bar for the current frame in the playback.");
			}
			
		}
		navigateToHomePage();
	}
	
	
	public void navigateToDiscoverScreen() throws Exception {
		
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitUntilElementDisplayed(HipiDiscoverPage.objBannersBelowTheSearchField, 2);
		if(verifyElementPresent(HipiDiscoverPage.objBannersBelowTheSearchField, "Discover Page")){
			logger.info("User is able to see discover page");
			extent.extentLoggerPass("", "User is able to see discover page");
		}else {
			logger.info("User is unable to see discover page");
			extent.extentLoggerFail("", "User is unable to see discover page");
		}
		
		
	}
	public void ableToSeeTrendingTagInTheRails__T2619__T2620(String userType) throws Exception  {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2619 - Guest User - Check user able to see Trending tag  in the rails");
			System.out.println("T2619");
			extent.extentLogger("Trending tag", "T2619");
			}else {
				extent.HeaderChildNode("T2620 - Logged in User - Check user able to see  Trending tag in the rails");
				System.out.println("T2620");
				extent.extentLogger("Trending tag", "T2620");
			}
	
		navigateToDiscoverScreen();
		if (verifyElementExist(HipiDiscoverPage.objTrendingTag, "Trending Tag")) {
			logger.info("User is able to see the Trending  tag written in the rails");
			extent.extentLoggerPass("", "User is able to see the Trending  tag written in the rails");
		}else {
			SwipeUntilFindElement(HipiDiscoverPage.objTrendingTag, "UP");
		}
		if (verifyElementPresent(HipiDiscoverPage.objTrendingTag, "Trending Tag")) {
			logger.info("User is able to see the Trending  tag written in the rails");
			extent.extentLoggerPass("", "User is able to see the Trending  tag written in the rails");
		}else {
			logger.info("User is unable to see the Trending  tag written in the rails");
			extent.extentLoggerFail("", "User is unable to see the Trending  tag written in the rails");
		}
		
		
		
	}
	
	public void ableToSeeChallengeTagInTheRails__T2621__T2622(String userType) throws Exception  {

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2621 - Guest User - Check user able to see Challenge in the rails");
			System.out.println("T2621");
			extent.extentLogger("Challenge tag", "T2621");
		}else {
			extent.HeaderChildNode("T2622 - Logged in User - Check user able to see Challenge in the rails");
			System.out.println("T2622");
			extent.extentLogger("Challenge tag", "T2622");
		}

		navigateToDiscoverScreen();
		if (verifyElementExist(HipiDiscoverPage.objChallengeTag, "Challenge Tag")) {
			logger.info("User is able to see the Challenge  tag written in the rails");
			extent.extentLoggerPass("", "User is able to see the Challenge  tag written in the rails");
		}else {
			SwipeUntilFindElement(HipiDiscoverPage.objChallengeTag, "UP");
		}
		if (verifyElementPresent(HipiDiscoverPage.objChallengeTag, "Challenge Tag")) {
			logger.info("User is able to see the Challenge  tag written in the rails");
			extent.extentLoggerPass("", "User is able to see the Challenge  tag written in the rails");
		}else {
			logger.info("User is unable to see the Challenge  tag written in the rails");
			extent.extentLoggerFail("", "User is unable to see the Challenge  tag written in the rails");
		}
	}

	
	
	public void ableToSeeContestTagInTheRails__T2623__T2624(String userType) throws Exception  {

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2623 - Guest User - Check user able to see Contest  tag in the rails");
			System.out.println("T2623");
			extent.extentLogger("Contest tag", "T2623");
		}else {
			extent.HeaderChildNode("T2624 - Logged in User - Check user able to see Contest tag in the rails");
			System.out.println("T2624");
			extent.extentLogger("Contest tag", "T2624");
		}

		navigateToDiscoverScreen();
		if (verifyElementExist(HipiDiscoverPage.objContestTag, "Contest Tag")) {
			logger.info("User is able to see the Contest  tag written in the rails");
			extent.extentLoggerPass("", "User is able to see the Contest  tag written in the rails");
		}else {
			SwipeUntilFindElement(HipiDiscoverPage.objContestTag, "UP");
		}
		if (verifyElementPresent(HipiDiscoverPage.objContestTag, "Contest Tag")) {
			logger.info("User is able to see the Contest  tag written in the rails");
			extent.extentLoggerPass("", "User is able to see the Contest  tag written in the rails");
		}else {
			logger.info("User is unable to see the Contest  tag written in the rails");
			extent.extentLoggerFail("", "User is unable to see the Contest  tag written in the rails");
		}
	}

	
	public void likeCountOnThumbnail__T2747__T2746(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2747 - Guest user - Check if user able to see view and Like count on thumbnail");
			System.out.println("T2747");
			extent.extentLogger("", "T2747");
		}else {
			extent.HeaderChildNode("T2746 - Check if user able to see view and Like count on thumbnail");
			System.out.println("T2746");
			extent.extentLogger("", "T2746");
		}
		
		navigateToDiscoverScreen();
		
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
		waitTime(2000);
		type(HipiDiscoverPage.objDiscoverSearchInbox, "Himanshi Khurana", "Type value");			
		verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Result");
		waitTime(2000);
		
		verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab, "Video Tab");
		waitTime(4000);
		
		if (verifyElementPresent(HipiDiscoverPage.objLikeCount, "Like Count") && verifyElementPresent(HipiDiscoverPage.objViewCount, "View Count")) {
			logger.info("User is able see Like and view count on thumbnail");
			extent.extentLoggerPass("", "User is able see Like and view count on thumbnail");
		}else {
			logger.info("User is unable see Like and view count on thumbnail");
			extent.extentLoggerFail("", "User is unable see Like and view count on thumbnail");
		}
	}
	
	public void  loginWithGoogle(String userType) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC042");
//		Time_ExcelUpdate.SlNoNode("2");
		Time_ExcelUpdate.ModuleNode("Login with google Module");
		Time_ExcelUpdate.TestCaseSummaryNode1("Login With Google Time");
		
//		extent.HeaderChildNode("Launching hipi app");
		extent.HeaderChildNode("Google Login Functionality");
		String pUserType = getParameterFromXML("userType");
		
//		extent.extentLogger("Login Type", "Login Type : " + pUserType);
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 10);
		TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 10);
	
	TimeStampverifyElementPresentAndClick(HipiLoginPage.objContinueWithGoogleCTA, "Google CTA");

	waitUntilElementDisplayed(HipiLoginPage.objGoogleAccount, 20);
            
	TimeStampverifyElementPresentAndClick(HipiLoginPage.objGoogleAccount, "Google Account");
	if(waitUntilElementDisplayed(HipiLoginPage.objDoneCTASelectGenderPage, 5)) {
		TimeStampverifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
		 waitTime(4000);
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
		TimeStampclick(HipiLoginPage.objDoneCTASelectGenderPage, "Done CTC");
		
	}else {
		logger.info("User is unable to see select gender screen");
	}
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	extent.extentLogger("", "<b>Start Time : " + start+"<b>");
	if (waitUntilElementDisplayed(HipiHomePage.objForYou, 5)) {
		logger.info("User is able to see Home screen");
		//		extent.extentLogger("", "User is able to see Home screen");
		Instant end=Instant.now();
		logger.info("End Time : " + end);
		//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
		Duration processingTime = Duration.between(start, end);
		logger.info("Processing time: " + processingTime);
//		extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");
		String Processingtimesec=Long.toString(processingTime.getSeconds());
		String Processingtimemilli=Long.toString(processingTime.toMillis());	
		Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds " +Processingtimemilli+"  milliSeconds");

				extent.extentLoggerPass("","<b>Processing time: " + processingTime+"<b>");
	}
	else {
		logger.error("User is not able to login With Google");
		Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to login With Google");
		extent.extentLoggerFail("", "User is not able to login With Google");
	}
	
	
	waitUntilElementDisplayed(HipiHomePage.objForYou, 2);
	//click on feed button
	TimeStampverifyElementPresentAndClick(AMDHomePage.objHomeIcon, "Home Icon");
	
	
	
	
	
	
	
	
	


	}

		
	public void  loginWithFacebook(String userType) throws Exception {
		Time_ExcelUpdate.TestCaseIDNode("TC044");
//		Time_ExcelUpdate.SlNoNode("2");
		Time_ExcelUpdate.ModuleNode("Login with Facebook Module");
		Time_ExcelUpdate.TestCaseSummaryNode1("Login With Facebook Time");
		
//		extent.HeaderChildNode("Launching hipi app");
		extent.HeaderChildNode("Facebook Login Functionality");
		String pUserType = getParameterFromXML("userType");

		//	extent.extentLogger("Login Type", "Login Type : " + pUserType);
		waitUntilElementDisplayed(AMDHomePage.objProfileIcon, 2);
		TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");

		waitUntilElementDisplayed(HipiProfilePage.objUsePhoneOrEmail, 2);
		TimeStampverifyElementPresentAndClick(HipiLoginPage.objContinuewithFacebookCTA, "Continue with Facebook CTA");
//		waitUntilElementDisplayed(HipiLoginPage.objContinue, 5);
//		TimeStampclick(HipiLoginPage.objContinue, "Continue");
		waitTime(12000);
		if(TimeStampverifyElementExist(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page")) {
		waitUntilElementDisplayed(HipiLoginPage.objNextButtonSignUpPage, 2);
		VerifyScrollOfYearPickerDown();
		waitTime(2000);
		VerifyScrollOfYearPickerDown();
		
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
		
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
		 waitUntilElementDisplayed(HipiLoginPage.objSubmitButton, 5);
		 TimeStampverifyElementPresentAndClick(HipiLoginPage.objSubmitButton, "Submit Button");
		 waitUntilElementDisplayed(HipiLoginPage.objDoneButtonLanguage, 2);
		 TimeStampclick(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
		}else {
			logger.info("Next Button is not displayed Sign Up Page");
		}
		Instant start=Instant.now();
		logger.info("Start Time : " + start);
		//extent.extentLogger("", "<b>Start Time : " + start+"<b>");
		if (waitUntilElementDisplayed(HipiHomePage.objForYou, 2)) {
			logger.info("User is able to see Home screen");
			//		extent.extentLogger("", "User is able to see Home screen");
			Instant end=Instant.now();
			logger.info("End Time : " + end);
			//		extent.extentLogger("", "<b>End Time : " + end+"<b>");
			Duration processingTime = Duration.between(start, end);
			logger.info("Processing time: " + processingTime);
			//	extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");
			String Processingtimesec=Long.toString(processingTime.getSeconds());
			String Processingtimemilli=Long.toString(processingTime.toMillis());	
			Time_ExcelUpdate.timeStampNode(Processingtimesec+" seconds " +Processingtimemilli+"  milliSeconds");

			extent.extentLoggerPass("","<b>Processing time: " + processingTime+"<b>");
		}
		else {
			logger.error("User is not able to login With Facebook");
			Time_ExcelUpdate.TestCaseSummaryNode1("User is not able to login With Facebook");
			extent.extentLoggerFail("", "User is not able to login With Facebook");
		}
}

	
	public void TimeStamprelaunch(boolean clearData) throws Exception {
		HeaderChildNode("Relaunch the app");
		logger.info("Relaunching the application");
//		extent.extentLogger("Relaunch", "Relaunching the application");
		waitTime(10000);
		getDriver().quit();
		relaunch = clearData;
		new com.business.zee.Zee5ApplicasterHipiNeoBusinessLogic("zee");
		waitUntilElementDisplayed(HipiLoginPage.objMaybeLater, 1);
		if(TimeStampverifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))
		{
			TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");
			System.out.println("Update Popup is displayed");
		}else{
			System.out.println("Update Popup is not displayed");
		}
	}

	public void ableToSeeMonetizationCard__T2581__T2582(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2581 - Check if Guest user is able to see a label the monetization card on For You screen if label is tagged to the monetization product from backend.");
			System.out.println("T2581");
			extent.extentLogger("Monetization card", "T2581");
		}else {
			extent.HeaderChildNode("T2582 - Check if Logged-in user is able to see a label the monetization card on For You screen if label is tagged to the monetization product from backend.");
			System.out.println("T2582");
			extent.extentLogger("Monetization card", "T2582");
		
			SwipeUntilFindElement(HipiHomePage.objmonetizationCard, "UP");
			
			if (verifyElementPresent(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				logger.info("User is able to see a label below monetization card on Feed screen.");
				extent.extentLoggerPass("", "User is able to see a label below monetization card on Feed screen.");
			}else {
				logger.info("User is unable to see a label below monetization card on Feed screen.");
				extent.extentLoggerFail("", "User is unable to see a label below monetization card on Feed screen.");
			}
			
			
		}
	}

	
	public void seeTheCountOfUnreadNotifications__T2570(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T2570 Check if user is able to see the count of unread notifications on Profile icon in the navigation bar");
		System.out.println("T2570");
		extent.extentLogger("", "T2570");
		
		if(verifyElementPresentAndClick(HipiHomePage.objCountOfUnreadNotifications, "Count Of Unread Notifications")){
			logger.info("User is able to see the count of unread notifications on Profile icon in the navigation bar");
			extent.extentLoggerPass("", "User is able to see the count of unread notifications on Profile icon in the navigation bar");
		}else {
			logger.info("User is unable to see the count of unread notifications on Profile icon in the navigation bar");
			extent.extentLoggerFail("", "User is unable to see the count of unread notifications on Profile icon in the navigation bar");
		}
		navigateToHomePage();
		}
	}
	
	
	public void seeTheCountOfUnreadNotificationsOnNotificationsIcon__T2574(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T2574 - Check if user is able to see the count of unread notifications on Notifications (Activity) icon on My Profile screen");
			System.out.println("T2574");
			extent.extentLogger("", "T2574");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
			
			if(verifyElementPresent(HipiProfilePage.objNotificationsOnNotificationsIcon, "Count of Notifications On Notifications Icon")){
				logger.info("User is able to see the count of unread notifications on Notifications icon on My Profile screen");
				extent.extentLoggerPass("", "User is able to see the count of unread notifications on Notifications icon on My Profile screen");
			}else {
				logger.info("User is unable to see the count of unread notifications on Notifications icon on My Profile screen");
				extent.extentLoggerFail("", "User is unable to see the count of unread notifications on Notifications icon on My Profile screen");
			}
			navigateToHomePage();
		}	
	}
	
	
	
	public void sameCountOfUnreadNotificationsOnProfileIcon__T2576(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T2576 - Check if user is able to see the same count of unread notifications on Profile icon and Notifications icon");
			System.out.println("T2576");
			extent.extentLogger("", "T2576");
			
			String count = getText(HipiHomePage.objCountOfUnreadNotifications);
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
			String count1 = getText(HipiProfilePage.objNotificationsOnNotificationsIcon);
			
		if (count.equals(count1)) {
			logger.info("User is able to see the same count of unread notifications on Profile icon and Notifications icon");
			extent.extentLoggerPass("", "User is able to see the same count of unread notifications on Profile icon and Notifications icon");
		}else {
			logger.info("User is unable to see the same count of unread notifications on Profile icon and Notifications icon");
			extent.extentLoggerFail("", "User is unable to see the same count of unread notifications on Profile icon and Notifications icon");
		}
		navigateToHomePage();
		}
	}
	
	
	public void redirectedToNotificationsScreen__T2577(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T2577 Check if user is redirected to notifications screen post tapping on notification bell icon in Profile screen");
			System.out.println("T2577");
			extent.extentLogger("", "T2577");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification bell");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objAllNotifications, "All Notifications")) {
				logger.info("User is redirected to notifications screen post tapping on notification bell icon");
				extent.extentLoggerPass("", "User is redirected to notifications screen post tapping on notification bell icon");
			}else {
				logger.info("User is unable redirected to notifications screen post tapping on notification bell icon");
				extent.extentLoggerFail("", "User is unable redirected to notifications screen post tapping on notification bell icon");
			}	
			navigateToHomePage();
		}
	} 
	
	
	
	public void readTheMessagesInTheNotificationScreen__T2578(String userType) throws Exception   {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T2578 Check if user is able to read the messages in the notification screen");
			System.out.println("T2578");
			extent.extentLogger("", "T2578");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification bell");
			waitTime(3000);
			verifyElementPresent(HipiProfilePage.objAllNotifications, "All Notifications");
			if(verifyElementPresent(HipiProfilePage.objLikedVideoInAllActivities, "Messages")) {
				logger.info("User is able to read the messages in the notification screen");
				extent.extentLoggerPass("", "User is able to read the messages in the notification screen");
			}else {
				logger.info("User is unable to read the messages in the notification screen");
				extent.extentLoggerFail("", "User is unable to read the messages in the notification screen");
			}
			navigateToHomePage();
		}
	}
	
	
	public void seeTheTimeOfTheMessagesInTheNotificationScreen__T2579(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T2579 Check if user is able to see the time of the messages in the notification screen");
			System.out.println("T2579");
			extent.extentLogger("", "T2579");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification bell");
			waitTime(3000);
			if(verifyElementPresent(HipiProfilePage.objTimeOfTheMessage, "Time Of The Message")) {
			logger.info("User is able to see the time of the messages in the notification screen");
			extent.extentLoggerPass("", "User is able to see the time of the messages in the notification screen");
		}else {
			logger.info("User is unable to see the time of the messages in the notification screen");
			extent.extentLoggerFail("", "User is unable to see the time of the messages in the notification screen");
		}	
			navigateToHomePage();
	}
	}
	
	
	public void countOfNotificationIsZeroOnceReadAllTheNotifications__T2580(String userType) throws Exception {
		if(userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("T2580 Check whether the count of notification is zero once read all the notifications");
			System.out.println("T2580");
			extent.extentLogger("", "T2580");
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader, 2);
			verifyElementPresentAndClick(HipiProfilePage.objNotificationBell, "Notification bell");
			waitTime(3000);
			verifyElementPresent(HipiProfilePage.objAllNotifications, "All Notifications");
			Back(1);
			if (verifyElementPresent(HipiProfilePage.objNotificationsOnNotificationsIcon, "Notifications On Notifications Icon")) {
				logger.info("The count of notification is not zero once read all the notifications");
				extent.extentLoggerFail("", "The count of notification is not zero once read all the notifications");
			}else {
				logger.info("The count of notification is zero once read all the notifications");
				extent.extentLoggerPass("", "The count of notification is zero once read all the notifications");
			}	
			navigateToHomePage();
		
		}
	}
		
			public void siginAndVerifyContentLanguage() throws Exception {
				navigateToSignUpScreen();
				waitTime(5000);
				 String year1995= getParameterFromXML("SelectYear1995");
				 type(HipiLoginPage.objSelectYear, year1995, "Type Year");
				
				 click(HipiLoginPage.objSelectYear, "Select year");
				 click(HipiLoginPage.objSelectYear, "Select year");
				 hideKeyboard();
				 verifyElementPresentAndClick(HipiLoginPage.objNextButtonSignUpPage, "Next Button Sign Up Page");
				 verifyElementPresentAndClick(HipiLoginPage.objEmailOption, "Email Option");
				 verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
				 hideKeyboard();
				 String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

					type(AMDLoginScreen.objEmailIdField, newEmailId, "Email field");
					
				 hideKeyboard();
//				  String text = getText(AMDLoginScreen.objEmailIdField);
				 verifyElementPresentAndClick(HipiLoginPage.objNextButtonEmailOption, "Next Button");
				waitTime(2000);
				verifyElementPresentAndClick(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
				 String fullName = getParameterFromXML("FullNmae");
				 type(HipiLoginPage.objFullNameTextField, fullName, "Enter Name");
				 verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
				 waitTime(4000);
				 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
				 String Password = getParameterFromXML("NonsubscribedPassword");
				 verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
					type(AMDLoginScreen.objPasswordField, Password, "Password field");
					hideKeyboard();
					verifyElementPresentAndClick(HipiLoginPage.objCompleteCTA, "Complete CTA");
					waitUntilElementDisplayed(HipiLoginPage.objCreateUsername, 10);
					verifyElementPresentAndClick(HipiLoginPage.objSubmitButton, "Submit Button");
					 waitUntilElementDisplayed(HipiLoginPage.objDoneButtonLanguage, 10);
					 if(verifyElementPresent(HipiLoginPage.objSelectVideoLanguage, "Select Video Language")){
						 logger.info("User is able to see the screen for ‘Content Languages’ during Signup after Userhandle screen.");
							extent.extentLoggerPass("", "User is able to see the screen for ‘Content Languages’ during Signup after Userhandle screen.");
						}else {
							logger.info("User is unable to see the screen for ‘Content Languages’ during Signup after Userhandle screen.");
							extent.extentLoggerFail("", "User is unable to see the screen for ‘Content Languages’ during Signup after Userhandle screen.");
						}	
			}
			
			public void ContentLanguagesDuringSignup__T2760(String userType) throws Exception {
					if(userType.equalsIgnoreCase("Guest")) {
						extent.HeaderChildNode("T2760 Check if user is able to see the screen for ‘Content Languages’ during Signup after Userhandle screen.");
						System.out.println("T2760");
						extent.extentLogger("", "T2760");
						siginAndVerifyContentLanguage();
						click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
						waitTime(2000);
						logOut();
					}	
			}
			
			
			public void selectSingleLanguage__T2762(String userType) throws Exception {
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T2762 Check if user is able to select single language from content preference");
					System.out.println("T2762");
					extent.extentLogger("", "T2762");
				
					siginAndVerifyContentLanguage();
					int	count=getCount(HipiLoginPage.objTotalSelectedLanguages);
					System.out.println(count);
					
					for(int i=count; i>=1; i--) {
					System.out.println(i);	
					if (i==1) {
						System.out.println(i);
						logger.info("User is able to select single language from content preference");	
						extent.extentLoggerPass("", "User is able to select single language from content preference");	
						break;
					}else {
						System.out.println(i);
						verifyElementPresentAndClick(HipiLoginPage.objSelectedContentLanguage(i), "Selected Content Language");
						
						logger.info("User is able to deselect any one of the language from content preference");	
						extent.extentLoggerPass("", "User is able to deselect any one of the language from content preference");	
						}
					}
					click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
					waitTime(2000);
					verifyElementPresent(HipiHomePage.objForYou, "ForYou Button");
					logOut();
				}
			}
			
			
			public void deselectAnyOneOfTheLanguage(String userType) throws Exception {

				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T2763 Check if user is able to deselect any one of the language from content preference");
					System.out.println("T2763");
					extent.extentLogger("", "T2763");

					siginAndVerifyContentLanguage();
					int	count=getCount(HipiLoginPage.objTotalSelectedLanguages);
					System.out.println(count);

					for(int i=count; i>=1; i--) {
						System.out.println(i);	
						if (i==1) {
							System.out.println(i);
							logger.info("User is able to select single language from content preference");	
							extent.extentLoggerPass("", "User is able to select single language from content preference");	
							break;
						}else {
							System.out.println(i);
							verifyElementPresentAndClick(HipiLoginPage.objSelectedContentLanguage(i), "Selected Content Language");

							logger.info("User is able to deselect any one of the language from content preference");	
							extent.extentLoggerPass("", "User is able to deselect any one of the language from content preference");	
						}
					}
					click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
					waitTime(2000);
					logOut();

				}
			}

			public void MultipleLanguage__T2764(String userType) throws Exception {
				
				
				if(userType.equalsIgnoreCase("Guest")) {
					extent.HeaderChildNode("T2764  Check if user is able to select Multiple language from content preference");
					System.out.println("T2764");
					extent.extentLogger("", "T2764");
					siginAndVerifyContentLanguage();
					int	count=getCount(HipiLoginPage.objTotalSelectedLanguages);
					System.out.println(count);
					for(int i=2; i<=10; i++) {
					System.out.println(i);	
					if (verifyElementExist(HipiLoginPage.objSelectedContentLanguage(i), "Selected Content Language")) {
						logger.info("User is  selected language from content preference");	
						extent.extentLoggerPass("", "User is  selected language from content preference");		
					}else {
							System.out.println(i);
							verifyElementPresentAndClick(HipiLoginPage.objTotalLanguages(i), "Selected Content Language");
							logger.info("User is able to select Multiple language from content preference");	
							extent.extentLoggerPass("", "User is able to select Multiple language from content preference");	
						}
					}
					int	count1=getCount(HipiLoginPage.objTotalSelectedLanguages);
					System.out.println(count1);
					if (count1>=3) {
						logger.info("User is able to select Multiple language from content preference");	
						extent.extentLoggerPass("", "User is able to select Multiple language from content preference");	
					}else {
						logger.info("User is unable to select Multiple language from content preference");	
						extent.extentLoggerFail("", "User is unable to select Multiple language from content preference");		
					}
					extent.HeaderChildNode("T2765 Check if user is able to deselect Multiple language from content preference");
					System.out.println("T2765");
					extent.extentLogger("", "T2765");
					int	count2=getCount(HipiLoginPage.objTotalSelectedLanguages);
					System.out.println(count2);

					for(int i=count2; i>=1; i--) {
						System.out.println(i);	
						if (i==1) {
							System.out.println(i);
							logger.info("User is able to select single language from content preference");	
							extent.extentLoggerPass("", "User is able to select single language from content preference");	
							break;
						}else {
							System.out.println(i);
							verifyElementPresentAndClick(HipiLoginPage.objSelectedContentLanguage(i), "Selected Content Language");

							logger.info("User is able to deselect any one of the language from content preference");	
							extent.extentLoggerPass("", "User is able to deselect any one of the language from content preference");	
						}
					}
					int	count3=getCount(HipiLoginPage.objTotalSelectedLanguages);
					System.out.println(count3);
					if (count3==1) {
						logger.info("User is able to deselect select Multiple language from content preference");	
						extent.extentLoggerPass("", "User is able to deselect select Multiple language from content preference");	
					}else {
						logger.info("User is unable to deselect select Multiple language from content preference");	
						extent.extentLoggerFail("", "User is unable to deselect select Multiple language from content preference");		
					}
					click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
					waitTime(2000);
					logOut();
				}
			}
			

	public void moreLanguagesPreferenceAreSavedPostTapping__T2767(String userType) throws Exception {
		

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2767 Check whether more Languages Preference are saved post tapping on ‘Done’ CTA button.");
			System.out.println("T2767");
			extent.extentLogger("", "T2767");
			siginAndVerifyContentLanguage();
			int	count=getCount(HipiLoginPage.objTotalSelectedLanguages);
			System.out.println(count);
			for(int i=2; i<=10; i++) {
			System.out.println(i);	
			if (verifyElementExist(HipiLoginPage.objSelectedContentLanguage(i), "Selected Content Language")) {
				logger.info("User is  selected language from content preference");	
				extent.extentLoggerPass("", "User is  selected language from content preference");		
			}else {
					System.out.println(i);
					verifyElementPresentAndClick(HipiLoginPage.objTotalLanguages(i), "Selected Content Language");
					logger.info("User is able to select Multiple language from content preference");	
					extent.extentLoggerPass("", "User is able to select Multiple language from content preference");	
				}
			}
			int	count1=getCount(HipiLoginPage.objTotalSelectedLanguages);
			System.out.println(count1);
			if (count1>=3) {
				logger.info("User is able to select Multiple language from content preference");	
				extent.extentLoggerPass("", "User is able to select Multiple language from content preference");	
			}else {
				logger.info("User is unable to select Multiple language from content preference");	
				extent.extentLoggerFail("", "User is unable to select Multiple language from content preference");		
			}
		}
		click(HipiLoginPage.objDoneButtonLanguage, "Done Button Language");
		waitTime(2000);
		verifyElementPresent(HipiHomePage.objForYou, "ForYou Button");
		logOut();
		
	}
				
		
	public void ableToSeeALabelTheMonetizationCardOnDiscoverScreen__T2584__T2585(String userType) throws Exception {
		
		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2584 Check if Guest user is able to see a label the monetization card on Discover screen if label is tagged to the monetization product from backend.");
			System.out.println("T2584");
			extent.extentLogger("Monetization card", "T2584");
		}else {
			extent.HeaderChildNode("T2585 Check if Logged-in user is able to see a label the monetization card on Discover screen if label is tagged to the monetization product from backend.");
			System.out.println("T2585");
			extent.extentLogger("Monetization card", "T2585");
	}
		verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
		waitTime(3000);
		for(int i=0;i<=10;i++)	{
			if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon)){
				verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
				if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
					break;
				}else {
					Back(1);
					Swipe("UP", 1);	
				}	
			}
			
			else {
				Swipe("UP",1);
			}
		}
		if (verifyElementPresent(HipiHomePage.objmonetizationCard, "Monetization Card")) {
			logger.info("User is able to see a label below monetization card on Disvover screen.");
			extent.extentLoggerPass("", "User is able to see a label below monetization card on Disvover screen.");
		}else {
			logger.info("User is unable to see a label below monetization card on Disvover screen.");
			extent.extentLoggerFail("", "User is unable to see a label below monetization card on Disvover screen.");
		}
		navigateToHomePage();

	}
	
	
	public void monetizationCardOnFollowingScreen__T2584__T2583(String userType) throws Exception {

		if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("T2584  Check if Guest user is able to see a label the monetization card on Discover screen if label is tagged to the monetization product from backend.");
			System.out.println("T2584");
			extent.extentLogger("Monetization card", "T2584");
		}else {
			extent.HeaderChildNode("T2583  Check if Logged-in user is able to see a label the monetization card on Following screen if label is tagged to the monetization product from backend.");
			System.out.println("T2583");
			extent.extentLogger("Monetization card", "T2583");
			verifyElementPresentAndClick(HipiHomePage.objFollowingButton, "Following Button");
			waitTime(3000);
			SwipeUntilFindElement(HipiHomePage.objmonetizationCard, "UP");
			if (verifyElementPresent(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				logger.info("User is able to see a label below monetization card on Following screen.");
				extent.extentLoggerPass("", "User is able to see a label below monetization card on Following screen.");
			}else {
				logger.info("User is unable to see a label below monetization card on Following screen.");
				extent.extentLoggerFail("", "User is unable to see a label below monetization card on Following screen.");
			}


		}
	}
		
		public void  seeAnVideoADifItsAvailable__T2677__T2678(String userType) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("T2677 Check if Guest user is able to see an video ad if it's available for him/her from VMAX SDK.");
				System.out.println("T2677");
				extent.extentLogger("", "T2677");
			}else {
				extent.HeaderChildNode("T2678 Check if Logged-in user is able to see an video ad if it's available for him/her from VMAX SDK.");
				System.out.println("T2678");
				extent.extentLogger("", "T2678");	
		} 
			SwipeUntilFindElement(HipiHomePage.objDownloadNow, "UP");
			if(verifyElementPresent(HipiHomePage.objDownloadNow, "Download Now")) {
				logger.info("User is able see an video ad if it's available for him/her from VMAX SDK.");
				extent.extentLoggerPass("", "User is able see an video ad if it's available for him/her from VMAX SDK.");
			}else {
				logger.info("User is unable see an video ad if it's available for him/her from VMAX SDK.");
				extent.extentLoggerFail("", "User is unable see an video ad if it's available for him/her from VMAX SDK.");
			}
		}
	
		
		
		
		
		
		//New Login Sign Up 
		
		public void  seeASinglePopUpFoRLoginSignupPhoneNumer(String userType, String PhoneNumberOrEmail) throws Exception {
			
			if(userType.equalsIgnoreCase("Guest")) {
				extent.HeaderChildNode("Guest User - Check Single popup page  is displaying for both Login/Signup.");
				System.out.println("");
				extent.extentLogger("", "");
				
			
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitUntilElementDisplayed(HipiLoginPage.objSignUpScreenTittle, 2);
				if (verifyElementPresent(HipiLoginPage.objSignUpScreenTittle, "Sign Up Screen Tittle")) {
					 logger.info("User is able to see single popup for both Login/Signup." );	
					 extent.extentLoggerPass("", "User is able to see single popup for both Login/Signup." );
				   }else {
					logger.info("User is able to see single popup for both Login/Signup.");	
					extent.extentLoggerFail("", "User is able to see single popup for both Login/Signup.");		
				}
				
				
				extent.HeaderChildNode("Guest User - Check title on the pop -up is Login or signup");
				System.out.println("");
				extent.extentLogger("", "");
				String logInSignInText = getText(HipiLoginPage.objSignUpScreenTittle);
				System.out.println(logInSignInText);
				if (logInSignInText.equals("Sign up and earn rewards")) {
					 logger.info("User is able to see Title as " +  logInSignInText);	
					 extent.extentLoggerPass("", "User is able to see Title as " +  logInSignInText);
				      }else {
					logger.info("User is unable to see Login or Sign up Title ");	
					extent.extentLoggerFail("", "User is unable to see Login or Sign up Title ");		
				}
				
					extent.HeaderChildNode("Guest User - Check whether subtitle is displayed below the Header title ");
					System.out.println("");
					extent.extentLogger("", "");					
					String subtitle = getText(HipiLoginPage.objMakeYourVideoSubtitle);
					System.out.println(subtitle);
					if (subtitle.equals("Make your own videos, follow other accounts, comment on videos, and even earn cash rewards while doing so.")) {
						 logger.info("User is able to see the subtitle below Header title " +  subtitle);	
						 extent.extentLoggerPass("", "User is able to see the subtitle below Header title " +  subtitle);
					      }else {
						logger.info("User is unable to see the subtitle below Header title " + subtitle );	
						extent.extentLoggerFail("", "User is unable to see the subtitle below Header title " + subtitle);		
					}
					
					
					
					
					
					
					
					
					
					extent.HeaderChildNode("Guest User - Check whether user navigates to  'Login or Sign up' screen post tapping on Use Phone or Email  CTA ");
					System.out.println("");
					extent.extentLogger("", "");
					verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
					waitUntilElementDisplayed(HipiLoginPage.objLoginOrSignIn, 1);
				if(verifyElementPresent(HipiLoginPage.objLoginOrSignIn, "Login Or Sign In")){
					logger.info("User is navigate to Login or  sign up page  ");	
					extent.extentLoggerPass("", "User is navigate to Login or  sign up page  ");	
				}else {
					logger.info("User is not able to navigate to Login or  sign up page  ");	
					extent.extentLoggerFail("", "User is not able to navigate to Login or  sign up page ");
				}	
				
				
				
				
				extent.HeaderChildNode("Guset User - Check The UI of 'Login or Sign up' screen ");
				System.out.println("");
				extent.extentLogger("", "");
				
				String loginSignUpTitle = getText(HipiLoginPage.objLoginOrSignIn);
				System.out.println(loginSignUpTitle);
				if (loginSignUpTitle.equals("Sign up and earn rewards")) {
					 logger.info("User is able to see the subtitle below Header title " +  subtitle);	
					 extent.extentLoggerPass("", "User is able to see the subtitle below Header title " +  subtitle);
				      }else {
					logger.info("User is unable to see the subtitle below Header title " + subtitle );	
					extent.extentLoggerFail("", "User is unable to see the subtitle below Header title " + subtitle);		
				}
				verifyElementPresent(HipiLoginPage.objProceedButton, "Proceed CTA");
				waitUntilElementDisplayed(HipiLoginPage.objEmailIDOrMobileNumberFileld, 2);
				verifyElementPresent(HipiLoginPage.objEmailIDOrMobileNumberFileld, "Email ID Or Mobile Number Fileld");
				
				
				
				
				extent.HeaderChildNode("Guset User - Check  Proceed button is highlighted when user enter valid credential ");
				System.out.println("");
				extent.extentLogger("", "");
//				 String Number = getParameterFromXML("PhoneNumberOtp");
				type(HipiLoginPage.objEmailIDOrMobileNumberFileld , PhoneNumberOrEmail ,"value");
				if (verifyElementPresent(HipiLoginPage.objProceedCTCHighlighted, "Proceed CTC Highlighted")) {
					 logger.info("User is able see Proceed  button got highlighted");	
					 extent.extentLoggerPass("", "User is able see Proceed  button got highlighted");
				      }else {
					logger.info("User is unable see Proceed  button got highlighted" );	
					extent.extentLoggerFail("", "User is unable see Proceed  button got highlighted");		
				}
				
				
				
				
				
				extent.HeaderChildNode("Guest User - Check user navigets to OTP screren when he enters registered number.");
				System.out.println("");
				extent.extentLogger("", "");
				
				verifyElementPresentAndClick(HipiLoginPage.objProceedButton, "Proceed CTA");
				waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPHeader, 2);
				if (verifyElementPresent(HipiLoginPage.objVerifyOTPHeader, "Verify OTP Header")) {
					 logger.info("User is able redirected to OTP Screen ");	
					 extent.extentLoggerPass("", "User is able redirected to OTP Screen ");
				    }else {
					logger.info("User is unable redirected to OTP Screen " );	
					extent.extentLoggerFail("", "User is unable redirected to OTP Screen ");		
				}
				
				 

				
				
				extent.HeaderChildNode("Guest User - Check the UI of OTP screen");
				System.out.println("");
				extent.extentLogger("", "");
				String fourDigitOTP = getText(HipiLoginPage.objEnter4DigitOTP);
				System.out.println(fourDigitOTP);
				if (fourDigitOTP.equals("Enter 4-digit OTP")) {
					 logger.info("User is able to see the " +  fourDigitOTP);	
					 extent.extentLoggerPass("", "User is able to see the " +  fourDigitOTP);
				      }else {
					logger.info("User is unable to see the " + fourDigitOTP );	
					extent.extentLoggerFail("", "User is unable to see the " + fourDigitOTP);		
				}
				verifyElementPresent(HipiLoginPage.objVerifyOTPScreenMetadata, "Verify OTP Screen Metadata");
				String MessagedText = getText(HipiLoginPage.objVerifyOTPScreenMetadata);
				System.out.println(MessagedText);
				  if (MessagedText.equals("Your OTP was messaged to 91-"+PhoneNumberOrEmail) | MessagedText.equals("Your OTP was emailed to "+PhoneNumberOrEmail)) {
					    logger.info(MessagedText + " is displayed");	
						extent.extentLoggerPass("", MessagedText + " is displayed" );
					     }
					     else {
					    	logger.info(MessagedText + " is not displayed");	
							extent.extentLoggerFail("", MessagedText + " is not displayed" );
					     }
				  verifyElementPresent(HipiLoginPage.objFirstDigit, "First Digit");
					verifyElementPresent(HipiLoginPage.objSecondDigit, "Second Digit");
					verifyElementPresent(HipiLoginPage.objThirdDigit, "Third Digit");
					verifyElementPresent(HipiLoginPage.objFourthDigit, "Fourth Digit");
					if (verifyElementPresent(HipiLoginPage.objResendOTPtextAllongWithTime, "Resend OTP text Allong With Time")) {
						logger.info("User is able to see the Resend code along with time in verification screen");	
						extent.extentLoggerPass("","User is able to see the Resend code along with time in verification screen");	
						}else {
						logger.info("User is not able to see the Resend code along with time in verification screen");	
						extent.extentLoggerFail("", "User is not able to see the Resend code along with time in verification screen");
										
						}
					verifyElementPresent(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
					String verifyOTP = getText(HipiLoginPage.objVerifyOTPCTA);
					System.out.println(verifyOTP);
					if (verifyOTP.equals("Verify OTP")) {
						 logger.info("User is able to see the " +  verifyOTP);	
						 extent.extentLoggerPass("", "User is able to see the " +  verifyOTP);
					      }else {
						logger.info("User is unable to see the " + verifyOTP );	
						extent.extentLoggerFail("", "User is unable to see the " +  verifyOTP);
					      }
					waitUntilElementDisplayed(HipiLoginPage.objHavntRecivedOTPSendAgain, 10);
					verifyElementPresent(HipiLoginPage.objHavntRecivedOTPSendAgain, "Haven't received OTP? Send again");
					  verifyElementPresent(HipiLoginPage.objLoginWithPassword,"Login with Password button");
					  verifyElementPresent(HipiLoginPage.objBackButtonVerifyOTP,"Back button");
				
					  
					  
					  
					  extent.HeaderChildNode("Guest User - Check whether user navigates back to \"Login Signup screen ");
						System.out.println("");
						extent.extentLogger("", "");
						verifyElementPresentAndClick(HipiLoginPage.objBackButtonVerifyOTP,"Back button");
						waitUntilElementDisplayed(HipiLoginPage.objLoginOrSignIn, 1);
						if(verifyElementPresent(HipiLoginPage.objLoginOrSignIn, "Login Or Sign In")){
							logger.info("User is navigate to Login or  sign up page  ");	
							extent.extentLoggerPass("", "User is navigate to Login or  sign up page  ");	
						}else {
							logger.info("User is not able to navigate to Login or  sign up page  ");	
							extent.extentLoggerFail("", "User is not able to navigate to Login or  sign up page ");
						}	
						
						
						
						 extent.HeaderChildNode("Guest User - Check user gets an toast message with invalid \"OTP\" number ");
							System.out.println("");
							extent.extentLogger("", "");
							verifyElementPresentAndClick(HipiLoginPage.objProceedButton, "Proceed CTA");
							waitUntilElementDisplayed(HipiLoginPage.objFirstDigit, 2);
						verifyElementPresentAndClick(HipiLoginPage.objFirstDigit, "First Digit");
						type(HipiLoginPage.objFirstDigit, "1", "Eneter first digit");
						hideKeyboard();
						verifyElementPresentAndClick(HipiLoginPage.objSecondDigit, "Second Digit");
						type(HipiLoginPage.objSecondDigit, "1", "Eneter Second digit");
						hideKeyboard();
						verifyElementPresentAndClick(HipiLoginPage.objThirdDigit, "Third Digit");
						type(HipiLoginPage.objThirdDigit, "1", "Eneter Thired digit");
						hideKeyboard();
						verifyElementPresentAndClick(HipiLoginPage.objFourthDigit, "Fourth Digit");
						type(HipiLoginPage.objFourthDigit, "1", "Eneter Fourth digit");
						hideKeyboard();
						verifyElementPresentAndClick(HipiLoginPage.objVerifyOTPCTA, "Verify OTP CTA");
						
						if(verifyElementPresent(HipiLoginPage.objPleaseUseValidEmailAddress,"Either OTP is not valid or has expired message")) {
							 logger.info("User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );	
							 extent.extentLoggerPass("", "User is get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP" );
						}else {
							logger.info("User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");	
							extent.extentLoggerFail("", "User is not get the Either OTP is not valid or has expired message by tapping on Verify OTP CTA when user entered invalid OTP");		
						}
						
						
						
						
						
						 extent.HeaderChildNode("Guest User - Check user navigates to ‘Login with Password’ screen");
							System.out.println("");
							extent.extentLogger("", "");
							
							  verifyElementPresentAndClick(HipiLoginPage.objLoginWithPassword,"Login with Password button");
							  verifyElementPresent(HipiLoginPage.objLoginTitle, "Login Text");
							     String loginText = getText(HipiLoginPage.objLoginTitle);
							     if(loginText.equals("Log in")) {
							     logger.info(loginText + " is displayed");	
								 extent.extentLoggerPass("", loginText + " is displayed" );
							     }else {
							    	 logger.info(loginText + " is not displayed");	
									 extent.extentLoggerFail("", loginText + " is not displayed" );	
								}
							     navigateToHomePage();
					
				}
			
		
		
		
		
		}
		public String generateRandomString(int size) {
			String strNumbers = "abcdefghijklmnopqrstuvwxyzacvbe";
			Random rnd = new Random();
			StringBuilder strRandomNumber = new StringBuilder(9);
			strRandomNumber.append(strNumbers.charAt(rnd.nextInt(strNumbers.length())));
			String s1 = strRandomNumber.toString().toUpperCase();
			for (int i = 1; i < size; i++) {
				strRandomNumber.append(strNumbers.charAt(rnd.nextInt(strNumbers.length())));
			}
			return s1 + strRandomNumber.toString();
		}
		public String generateRandomNumber(int size) {
			String strNumbers = "1234567890";
			Random rnd = new Random();
			StringBuilder strRandomNumber = new StringBuilder(9);
			strRandomNumber.append(strNumbers.charAt(rnd.nextInt(strNumbers.length())));
			String s1 = strRandomNumber.toString().toUpperCase();
			for (int i = 1; i < size; i++) {
				strRandomNumber.append(strNumbers.charAt(rnd.nextInt(strNumbers.length())));
			}
			return s1 + strRandomNumber.toString();
		}
		String newEmailId = "Auto" + generateRandomString(5) + "@ZEE.com";
		String newNumber = "905" + generateRandomNumber(7) + "@ZEE.com";
		
		
		
		public void SignUpNew(String userType ,String PhoneNumberorEmail) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
			 extent.HeaderChildNode("Guest User - Check whether user navigtes to signup screen when he enters New mobile number");
				System.out.println("");
				extent.extentLogger("", "");
				
				verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
				waitUntilElementDisplayed(HipiLoginPage.objUsePhoneOrEmail, 2);
				verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
				type(HipiLoginPage.objEmailIDOrMobileNumberFileld , PhoneNumberorEmail ,"value");
				
				verifyElementPresentAndClick(HipiLoginPage.objProceedButton, "Proceed CTA");
				waitUntilElementDisplayed(HipiLoginPage.objSignUpHiPiTitle, 2);
				if (verifyElementPresent(HipiLoginPage.objSignUpHiPiTitle, "Sign Up Title")){	
					logger.info("Signup Screen is visible for the new number ");	
					extent.extentLoggerPass("", "Signup Screen is visible for the new number ");	
				} else {
					logger.info("Signup Screen is not visible for the new number ");	
					extent.extentLoggerFail("", "Signup Screen is not visible for the new number ");
				}
				
				
				
				
				extent.HeaderChildNode("Guest User - Check UI of Sign UP screen ");
				System.out.println("");
				extent.extentLogger("", "");
				verifyElementPresent(HipiLoginPage.objEmailorPhoneField, "Email or Phone Number Field");
				verifyElementPresent(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
				String fullName = getText(HipiLoginPage.objFullNameTextField);
				if(fullName.equals("Full name")) {
					logger.info(fullName + " is displayed");	
					 extent.extentLoggerPass("", fullName + " is displayed" );
				     }else {
				    	 logger.info(fullName + " is not displayed");	
						 extent.extentLoggerFail("", fullName + " is not displayed" );	
					}
				verifyElementPresent(HipiLoginPage.objAgeField, "Age Field");
				String age = getText(HipiLoginPage.objAgeField);
				if(age.equals("Age (in years)")) {
					logger.info(age + " is displayed");	
					 extent.extentLoggerPass("", age + " is displayed" );
				     }else {
				    	 logger.info(age + " is not displayed");	
						 extent.extentLoggerFail("", age + " is not displayed" );	
					}
				 verifyElementPresent(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
				 waitTime(2000);
				 String gender = getText(HipiLoginPage.objGenderDropDown);
				 System.out.println(gender);
					if(gender.equals("Gender") | gender.equals("Male")) {
						logger.info(gender + " is displayed");	
						 extent.extentLoggerPass("", gender + " is displayed" );
					     }else {
					    	 logger.info(gender + " is not displayed");	
							 extent.extentLoggerFail("", gender + " is not displayed" );	
						}
					verifyElementPresent(HipiLoginPage.objDoneCTASelectGenderPage, "Sign up");
					 String signUp = getText(HipiLoginPage.objDoneCTASelectGenderPage);
						if(signUp.equals("Sign up")) {
							logger.info(signUp + " is displayed");	
							 extent.extentLoggerPass("", signUp + " is displayed" );
						     }else {
						    	 logger.info(signUp + " is not displayed");	
								 extent.extentLoggerFail("", signUp + " is not displayed" );	
							}
					
				
		
						extent.HeaderChildNode("Guest User - Check user navigates to OTP Screen post tapping on Sign-Up CTA ");
						System.out.println("");
						extent.extentLogger("", "");
						click(HipiLoginPage.objFullNameTextField, "Full Name Text Field");
						String text =  "Abc " + generateRandomString(4);
						System.out.println(text);
						type(HipiLoginPage.objFullNameTextField, text, "Enter Name");
						click(HipiLoginPage.objAgeField, "Age Field");
						type(HipiLoginPage.objAgeField, "25", "Enter Age");
						verifyElementPresentAndClick(HipiLoginPage.objGenderDropDown, "Gender Drop Down");
						 waitUntilElementDisplayed(HipiLoginPage.objMale, 2);
						 verifyElementPresentAndClick(HipiLoginPage.objMale, "Mail Button");
						 hideKeyboard();
						 verifyElementPresentAndClick(HipiLoginPage.objDoneCTASelectGenderPage, "Sign up");
						 
						 waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPHeader, 2);
						 
						 if (verifyElementPresent(HipiLoginPage.objVerifyOTPHeader, "Verify OTP Header")) {
							 logger.info("User is navigate to OTP screen when he taps on Sign Up CTA ");	
							 extent.extentLoggerPass("", "User is navigate to OTP screen when he taps on Sign Up CTA ");
						    }else {
							logger.info("User is unable navigate to OTP screen when he taps on Sign Up CTA " );	
							extent.extentLoggerFail("", "User is unable navigate to OTP screen when he taps on Sign Up CTA ");		
						}
						 navigateToHomePage();
			}
						
		}
		
		
		public void  enterAge(String userType , String PhoneNumberorEmail) throws Exception {
			if(userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User - Check user albe to enter Age lesser than 100");
			System.out.println("");
			extent.extentLogger("", "");
			
			verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
			waitUntilElementDisplayed(HipiLoginPage.objUsePhoneOrEmail, 2);
			verifyElementPresentAndClick(HipiLoginPage.objUsePhoneOrEmail,"Use Phone Or Email");
			type(HipiLoginPage.objEmailIDOrMobileNumberFileld , PhoneNumberorEmail ,"value");
			
			verifyElementPresentAndClick(HipiLoginPage.objProceedButton, "Proceed CTA");
			waitUntilElementDisplayed(HipiLoginPage.objSignUpHiPiTitle, 2);
			verifyElementPresentAndClick(HipiLoginPage.objAgeField, "Age Field");
			click(HipiLoginPage.objAgeField, "Age Field");
			type(HipiLoginPage.objAgeField, "99", "Enter Age");
			String ageAfterEnter = getText(HipiLoginPage.objAgeField);
			if (ageAfterEnter.equals("99")) {
				 logger.info("The Age field is accept the  value under 99");	
				 extent.extentLoggerPass("", "The Age field is accept the  value under 99");
			    }else {
				logger.info("The Age field is accept the  value under 99" );	
				extent.extentLoggerFail("", "The Age field is accept the  value under 99");		
			}
			
			
			extent.HeaderChildNode("Guest User - Check user albe to enter Age greater  than 100");
			System.out.println("");
			extent.extentLogger("", "");
			
			clearField(HipiLoginPage.objAgeField, "Clear Field");
			waitTime(2000);
			click(HipiLoginPage.objAgeField, "Age Field");
			type(HipiLoginPage.objAgeField, "100", "Enter Age");
			String age = getText(HipiLoginPage.objAgeField);
			if (!age.equals("100")) {
				 logger.info("The Age field is not accept the  value above 100");	
				 extent.extentLoggerPass("", "The Age field is not accept the  value above 100");
			    }else {
				logger.info("The Age field is accept the  value above 100" );	
				extent.extentLoggerFail("", "The Age field is accept the  value above 100");		
			}
			
			navigateToHomePage();
			}
		} 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		//Charles 
//		extent.HeaderChildNode("Like Event");
//		Time_ExcelUpdate.TestCaseIDNode("TC003");
//		Time_ExcelUpdate.ModuleNode("Like Event");
//		
//		 extent.extentLoggerPass("", "Like Event");
//		 
//		extent.HeaderChildNode("Launch App Event");
//		Time_ExcelUpdate.TestCaseIDNode("TC002");
//		Time_ExcelUpdate.ModuleNode("Launch Event");
		
//		extent.HeaderChildNode("Unlike Event");
//		Time_ExcelUpdate.TestCaseIDNode("TC004");
//		Time_ExcelUpdate.ModuleNode("Unlike Event");
//		 extent.extentLoggerPass("", "Unlike Event");
		
		
//		extent.HeaderChildNode("Follow Event");
//		Time_ExcelUpdate.TestCaseIDNode("TC005");
//		Time_ExcelUpdate.ModuleNode("Follow Event");
//		 extent.extentLoggerPass("", "Follow Event");
		
//		extent.HeaderChildNode("Comment Event");
//		Time_ExcelUpdate.TestCaseIDNode("TC006");
//		Time_ExcelUpdate.ModuleNode("Comment Event");
//		 extent.extentLoggerPass("", "Comment Event");
		
		
//		extent.HeaderChildNode("Share Event");
//		Time_ExcelUpdate.TestCaseIDNode("TC007");
//		Time_ExcelUpdate.ModuleNode("Share Event");
//		 extent.extentLoggerPass("", "Share Event");
		public void CharlesTCs(String userName) throws Exception {
			
			extent.extentLoggerPass("", "Launch Event");
//			getDriver().quit();

			openCharles(); //Step 2 //Open Charles 

			waitTime(8000);

//			TimeStamprelaunch(false); //Step 3 Launch App and Start events are getting triggering 
			waitUntilElementDisplayed(HipiLoginPage.objMaybeLater, 1);
			if(TimeStampverifyElementExist(HipiLoginPage.objMaybeLater, "Maybe Later"))
			{
				TimeStampclick(HipiLoginPage.objMaybeLater, "Maybe Later");
				System.out.println("Update Popup is displayed");
			}else{
				System.out.println("Update Popup is not displayed");
			}
//
			waitTime(20000);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objPlayerScreen,"Player Screen");
//
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objLikeICON, "Like Icon");
//			waitTime(5000);
//
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objLikeICON, "Unlike Icon");
//			waitTime(5000);
//			SwipeUntilFindElement(HipiHomePage.objSaveLook, "UP");
//			TimeStampclick(HipiHomePage.objSaveLook, "Save look Button");
//			waitUntilElementDisplayed(HipiHomePage.objProductImage, 5);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objProductImage, "Product Image");
//			waitTime(10000);
//			TimeStampBack(1);
//			waitTime(4000);
//			TimeStampclick(HipiHomePage.objShopButton, "Shop Button");
//			waitTime(4000);
//			TimeStampverifyElementPresentAndClick(HipiShopPage.objProductImageThumbnail, "Product Image Thumbnail");
//			TimeStampBack(2);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objShareICON ,"Share icon");
//			waitTime(3000);
//			TimeStampBack(1);
//			waitTime(2000);
//			TimeStampSwipe("UP", 1); //Skip Event 
//			waitTime(2000);
//			TimeStampSwipe("UP", 1);
//			loginTime(pUserType); // Login flow
//			SwipeUntilFindElement(HipiHomePage.objFollowButton, "UP");
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objFollowButton, "Follow Button");
//			waitTime(5000);
//
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objCommentICON, "Comment Icon");
//			waitUntilElementDisplayed(HipiHomePage.objAddAComment, 10);
//			TimeStampclick(HipiHomePage.objAddAComment, "Add A Comment");
//			waitTime(3000);
//			TimeStamptype(HipiHomePage.objAddAComment, "Hi", "Add A Comment");
//			waitTime(2000);
//			TimeStampclick(HipiHomePage.objCommentPostIcon, "Comment Post Icon");
//			waitTime(2000);
//			TimeStampBack(2);
//			longPress(HipiHomePage.objPlayerScreen);	
//			waitTime(2000);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "Add To Favourites");
//			waitTime(2000);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objAddToFavourites, "UnFavourites");
//			waitTime(2000);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objSaveVideo, "Save Video");
//			waitTime(2000);
//			if (TimeStampverifyElementExist(HipiCreateVideoPage.objCreateAllow, "Allow")) {
//			logger.info("Permission dialog:"+ "Allow ZEE5 to take pictures and record video?");
//			TimeStampclick(HipiCreateVideoPage.objCreateAllow, "Allow button clicked");
//			logger.info("Allow ZEE5 to take pictures and record video-"+ "Allow button clicked");
//			}else {
//				logger.info("Permission dialog popup not displayed");
//			}
//			waitForElementNotDisplayed(HipiCreateVideoPage.objDownloadProgressBar);
//			waitTime(10000);
//	
////			waitTime(2000);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objNotInterested, "Not Interested");
//			waitTime(2000);
//			TimeStampverifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
//			waitTime(4000);
//			TimeStampverifyElementPresentAndClick(HipiProfilePage.objFollowing, "Following");
//			waitUntilElementDisplayed(HipiProfilePage.objFollowingListTab, 2);
//			TimeStampverifyElementPresentAndClick(HipiProfilePage.objFollowingbutton_followingTab,"Following CTA");
//			waitTime(3000);
//			TimeStampBack(2);
//			waitTime(3000);
//			TimeStampverifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
//			waitTime(7000);
//			TimeStampverifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
//			waitTime(4000);
//			TimeStamptype(HipiDiscoverPage.objDiscoverSearchInbox, userName, "Type value");
//			TimeStampclick(HipiDiscoverPage.objSearchResult, "Search result");
			waitTime(3000);
//			waitTime(60000);
			waitTime(10000);
			saveandcloseCharles(charlesName); //Step 4 Save Charles and close Charles 
			
//			waitTime(20000);
			
			MappingCharles(); //Step 5  
		}
		
//		public static void main(String[] arg) throws Exception {
//			
////			openCharles();
////			Thread.sleep(2000);
////			saveandcloseCharles(charlesName);
//		
//				Filereader();
//			
//			
//		}
		 static Iterator iew ;
		 static String events ;
		 static String Key ;
		 static String Value ;
		 
		 static Set set ;
		 public static void MappingCharles() throws Exception 
		 {
			 List<String> ListofEvents= new ArrayList<String>();
			 List<String> Events=new ArrayList<String>();
			 
			 
			 File file = Newest();

			 BufferedReader br = new BufferedReader(new FileReader(file));
			 JSONObject json=XML.toJSONObject(br); 
			 String nn = json.toString();
			 System.out.println(nn);
			 List<Object> jsonList= JsonPath.from(nn).getList("charles-session.transaction");
			 //			System.out.println(jsonList);
			 System.out.println(jsonList.size());
			 Map<String, String> map = new HashMap<String, String>();
			 
			 
			
			 
		
			 for(int i=0;i<jsonList.size();i++)
			 {
				 String jsonPathNew = "charles-session.transaction[" + i + "].request.body[1]";
				 //				System.out.println("************" +jsonPathNew + "***********");
				 String str = JsonPath.from(nn).get(jsonPathNew);
				 System.out.println(str);
				 str = str.substring(0, str.length() - 1);
				 String[] keyValuePairs = str.split(",");
				
				 String[] entry = null;
				 for (int j = 0; j < keyValuePairs.length; j++)
				 {
					 entry = keyValuePairs[j].split(":");
					 map.put(entry[0].trim(), entry[1].trim());
				 }
				set= map.entrySet();
				 iew =set.iterator();
				 
				 while(iew.hasNext()) {
					 Map.Entry me = (Map.Entry)iew.next();
					 if(me.getKey().toString().contains("event")) {
//						 System.out.println(me.getKey() + ": " + me.getValue());
						  events = me.getValue().toString().replace("\"", "");
						  System.out.println(events);
						  Time_ExcelUpdate.ModuleNode(events);
//						  Events.add(events);
					 }
				 }
				
				 if (events.equalsIgnoreCase("like") | "share".contains(events) | "unlike".equalsIgnoreCase(events) | "user_video_start".equalsIgnoreCase(events) | "user_video_end".equalsIgnoreCase(events) | "view".equalsIgnoreCase(events) | "completed".equalsIgnoreCase(events)) {  //ListofEvents.contains(events)
					 System.out.println(events +" Event is triggered");
					 Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
					 Time_ExcelUpdate.TestCaseSummaryNode1(events+" Event is triggered");
					 Time_ExcelUpdate.Parameters(str);
					 extent.extentLoggerPass("", " Event is triggered");
				 }else {
					 System.out.println(events +" Event is not triggered");
					 Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
					 Time_ExcelUpdate.TestCaseSummaryNode1(events+" Event is not triggered");
					 extent.extentLoggerFail("", " Event is not triggered");
				}
				 
				
					 				
				 
//				 extent.extentLoggerPass("", " Event is triggered");
			 }
//			 for(int i=0;i<ListofEvents.size();i++)
//				 {
//			 if (Events.contains(ListofEvents.get(i))) {  //ListofEvents.contains(events)
//				 System.out.println(ListofEvents.get(i) +" Event is triggered");
//				 Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is triggered");
//				 extent.extentLoggerPass("", " Event is triggered");
//			 }else {
//				 Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is not triggered");
//				 extent.extentLoggerFail("", " Event is triggered");
//			}
//				 
//				 
//				 }
				 
				 
//				 while(iew.hasNext()) {
//					 Map.Entry me = (Map.Entry)iew.next();
//					 if(me.getKey().toString().contains("event")) {
//						 System.out.println(me.getKey() + ": " + me.getValue());
//						  events = me.getValue().toString().replace("\"", "");
//						 Events.add(events);
						
						
						 
//						 if(ListofEvents.contains(Events)) {
//								 System.out.println(ListofEvents.get(i) +" Event is triggered");
//								 extent.HeaderChildNode(ListofEvents.get(i)+" Event");
//								
//								 Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
////								 extent.extentLoggerPass("", Events.get(i)+" Event");
//								 Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is triggered");
//								 Time_ExcelUpdate.Parameters(Key);
//								 Time_ExcelUpdate.values(Value);
//								 extent.extentLoggerPass("", ListofEvents.get(i)+" Event is triggered");
								 
//							 }else {
//								 System.out.println(ListofEvents.get(i)+" Event is not triggered");
//								 extent.HeaderChildNode(ListofEvents.get(i)+" Event");
//								 Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
//								 Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
//								 //					 extent.extentLoggerPass("", Events.get(i)+" Event");
//								 Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is not triggered");
//								 extent.extentLoggerFail("", ListofEvents.get(i)+" Event is not triggered");
//							}
						 
				
//						 extent.extentLoggerPass("", Value + "Event is triggered");
				
				 
				 
				 
//				 }
				 
				 
				 
				 
//					 if (ListofEvents.contains(events)) {
//						 Time_ExcelUpdate.TestCaseSummaryNode1( ListofEvents +" Event is triggered");
//						 System.out.println(ListofEvents + " Event is triggered");
//					}else {
//						Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents +" Event is triggered");
//						 extent.extentLoggerFail("", ListofEvents + " Event is not triggered");
//						 System.out.println(ListofEvents + " Event is not triggered");
//					}
					 
//					 Key = me.getKey().toString().replace("\"", "");
					 
					 
//					 Key =  me.getKey().toString().replace("\"", "") + ": " + me.getValue().toString().replace("\"", "");
////					  Value = me.getValue().toString().replace("\"", "");
//					 System.out.println(Key);
//					 Time_ExcelUpdate.Parameters(Key);
					
//					 Time_ExcelUpdate.values(Value);
//				 }
					 //					 System.out.print(me.getKey() + ": ");
					 //					 System.out.print(me.getValue());
				
				 
//				
				
//				 System.out.println(Value); 
					
					 
					 
				 
			 



//			 HashSet<String> removeDuplicateEvent=new LinkedHashSet<String>();
//			 removeDuplicateEvent.addAll(Events);
//			 Events.clear();
//			 Events.addAll(removeDuplicateEvent);
//			 System.out.println(Events.size());

			 //List Of Events 
			 
//			 ListofEvents.add("launch"); 	
			 ListofEvents.add("user_video_start");
			 ListofEvents.add("completed");
			 ListofEvents.add("view");
			 ListofEvents.add("like");
			 ListofEvents.add("unlike");
			
			 ListofEvents.add("user_video_end");
			 ListofEvents.add("shop_button_click");
			 ListofEvents.add("shoppable_product_click");
			 ListofEvents.add("share");
			 ListofEvents.add("follow");
			 ListofEvents.add("comment");
			 ListofEvents.add("favorite");
			 ListofEvents.add("unfavorite");
			 ListofEvents.add("notinterested");
			 ListofEvents.add("download");
			 ListofEvents.add("skip");
			 ListofEvents.add("no decision");	
			 ListofEvents.add("unfollow");	
			 ListofEvents.add("videoreported");
			 ListofEvents.add("search_event");
			 ListofEvents.add("suggestion_result_click_event");
			 ListofEvents.add("shoppable_product_impression");

			 
			 
			 
//			 for(int i=0;i<ListofEvents.size();i++)
//			 {
//				 if(Events.contains(ListofEvents.get(i))) {
//					 System.out.println(ListofEvents.get(i)+" Event is triggered");
//					 extent.HeaderChildNode(ListofEvents.get(i)+" Event");
//					 Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
//					 Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
////					 extent.extentLoggerPass("", Events.get(i)+" Event");
//					 Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is triggered");
//					 extent.extentLoggerPass("", ListofEvents.get(i)+" Event is triggered");
//				 }else {
//					 System.out.println(ListofEvents.get(i)+" Event is not triggered");
//					 extent.HeaderChildNode(ListofEvents.get(i)+" Event");
//					 Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
//					 Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
//					 //					 extent.extentLoggerPass("", Events.get(i)+" Event");
//					 Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is not triggered");
//					 extent.extentLoggerFail("", ListofEvents.get(i)+" Event is not triggered");
//				 }
//			 }
			 
			 
			 
			 
//			 }
					
				 }
			
			 
		 

		 public static void main(String[] args) throws Exception {
//				creatExcel1();
//				System.out.println(xlpath1);
//			 KeyValues();
//			 KeyValues();
			 MappingCharles();
			}
	
		 

		 static String keyandvalue ="";
		 static String keyandvalue1 = ""; 
		
		 

		//extent.HeaderChildNode(ListofEvents.get(i)+" Event");
		//Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
		//Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
		////extent.extentLoggerPass("", Events.get(i)+" Event");
		//Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is triggered");
		//extent.extentLoggerPass("", ListofEvents.get(i)+" Event is triggered");





		//else
		//extent.HeaderChildNode(ListofEvents.get(i)+" Event");
		//Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
		//Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
////							 extent.extentLoggerPass("", Events.get(i)+" Event");
		//Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is not triggered");
		//extent.extentLoggerFail("", ListofEvents.get(i)+" Event is not triggered");






		//public static void MappingCharles() throws Exception 
		//{
//			 List<String> ListofEvents= new ArrayList<String>();
//			 List<String> Events=new ArrayList<String>();
//			 List<String> listkey=new ArrayList<String>();
//			 List<String> listvalue=new ArrayList<String>();
//			 
//			 File file = Newest();
//			 
//			 BufferedReader br = new BufferedReader(new FileReader(file));
//			 JSONObject json=XML.toJSONObject(br); 
//			 String nn = json.toString();
//			 System.out.println(nn);
//			 List<Object> jsonList= JsonPath.from(nn).getList("charles-session.transaction");
//			 //			System.out.println(jsonList);
//			 System.out.println(jsonList.size());
//			 Map<String, String> map = new HashMap<String, String>();
		//
//			 for(int i=0;i<jsonList.size();i++)
//			 {
//				 String jsonPathNew = "charles-session.transaction[" + i + "].request.body[1]";
//				 //				System.out.println("************" +jsonPathNew + "***********");
//				 String str = JsonPath.from(nn).get(jsonPathNew);
//				 str = str.substring(1, str.length() - 1);
//				 String[] keyValuePairs = str.split(",");
//				 String[] entry = null;
//				 for (int j = 0; j < keyValuePairs.length; j++)
//				 {
//					 entry = keyValuePairs[j].split(":");
//					 map.put(entry[0].trim(), entry[1].trim());
//				 }
//				 Set set = map.entrySet();
//				 Iterator iew =set.iterator();
//				 
////				 while(iew.hasNext()) {
////					 
////					 Map.Entry me = (Map.Entry)iew.next();
////					 
////					 String Key = me.getKey().toString().replace("\"", "");
////					 String Value = me.getValue().toString().replace("\"", "");
////					 System.out.println(Key);
////					 System.out.println(Value);
////					 listkey.add(Key);
////					 listvalue.add(Value);
////				 }
//				 
//				 
//			 
//				 while(iew.hasNext()) {
//					 Map.Entry me = (Map.Entry)iew.next();
//					 if(me.getKey().toString().contains("event")) {
////						 System.out.println(me.getKey() + ": " + me.getValue());
//						 String events = me.getValue().toString().replace("\"", "");
//						 Events.add(events);
		//	
//					
//						
//						 Key = me.getKey().toString();
//						  Value = me.getValue().toString();
//////						 System.out.println(Key);
//////						 System.out.println(Value);
////						 listkey.add(Key);
//						 System.out.println(Key);
//						 
////						 Time_ExcelUpdate.Parameters(Key);
//						 
////						 Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
////							Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
////							
////							Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is triggered");
////							extent.extentLoggerPass("", Events.get(i)+" Event");
////						 listvalue.add(Value);
//						 System.out.println(Value);
//						 
//						 
////						 System.out.print(me.getKey() + ": ");
////						 System.out.print(me.getValue());
//					 }
//					
//					 for(int k=0;k<ListofEvents.size();k++)
//					 {
//						 if(Events.contains(ListofEvents.get(k))) {
//							 System.out.println(ListofEvents.get(k)+" Event is triggered");
//						 }else {
//							 System.out.println(ListofEvents.get(k)+" Event is not triggered");
//						}
//			 }
//					 
////					 Time_ExcelUpdate.values(Value);
//					 
//				 }
//			 }
//			 
//			 
////			 System.out.println(listkey);
////			 HashSet<String> removeDuplicateEvent=new LinkedHashSet<String>();
////			 removeDuplicateEvent.addAll(Events);
////			 Events.clear();
////			 Events.addAll(removeDuplicateEvent);
////			 System.out.println(Events.size());
////			 System.out.println(Events);
//			 
//			 
//			 //List Of Events 
//			 
////			 ListofEvents.add("launch"); 	
//			 ListofEvents.add("user_video_start");
//			 ListofEvents.add("completed");
//			 ListofEvents.add("view");
//			 ListofEvents.add("like");
//			 ListofEvents.add("unlike");
		//	
//			 ListofEvents.add("user_video_end");
//			 ListofEvents.add("shop_button_click");
//			 ListofEvents.add("shoppable_product_click");
//			 ListofEvents.add("share");
//			 ListofEvents.add("follow");
//			 ListofEvents.add("comment");
//			 ListofEvents.add("favorite");
//			 ListofEvents.add("unfavorite");
//			 ListofEvents.add("notinterested");
//			 ListofEvents.add("download");
//			 ListofEvents.add("skip");
//			 ListofEvents.add("no decision");	
//			 ListofEvents.add("unfollow");	
//			 ListofEvents.add("videoreported");
//			 ListofEvents.add("search_event");
//			 ListofEvents.add("suggestion_result_click_event");
//			 ListofEvents.add("shoppable_product_impression");
		//
		//	
//			 
////			 for(int i=0;i<ListofEvents.size();i++)
////			 {
////				 if(Events.contains(ListofEvents.get(i))) {
////					 System.out.println(ListofEvents.get(i)+" Event is triggered");
////					 System.out.println("************* " + listkey);
////					 System.out.println("************* " + listvalue);
////					 for(int j=0;j<listkey.size();j++)
////					 {
////						 System.out.println("************* " + listkey.get(j));
////						 Time_ExcelUpdate.Parameters(listkey.get(j));
////					 }
////					 System.out.println("************* " + listkey);
////					 Time_ExcelUpdate.Parameters(Key);
////					extent.HeaderChildNode(ListofEvents.get(i)+" Event");
////					Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
////					Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
//////					extent.extentLoggerPass("", Events.get(i)+" Event");
////					Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is triggered");
////					extent.extentLoggerPass("", ListofEvents.get(i)+" Event is triggered");
////					 while(iew.hasNext()) {
////						 
////						 Map.Entry me = (Map.Entry)iew.next();
////						 
////						 String Key = me.getKey().toString().replace("\"", "");
////						 String Value = me.getValue().toString().replace("\"", "");
////						 System.out.println(Key);
////						 System.out.println(Value);
////						 listkey.add(Key);
////						 listvalue.add(Value);
////						 
////					 }
////				 }else {
////					 System.out.println(ListofEvents.get(i)+" Event is not triggered");
////					extent.HeaderChildNode(ListofEvents.get(i)+" Event");
////					Time_ExcelUpdate.TestCaseIDNode("TC0"+i+"");
////					Time_ExcelUpdate.ModuleNode(ListofEvents.get(i)+" Event");
//////					 extent.extentLoggerPass("", Events.get(i)+" Event");
////					Time_ExcelUpdate.TestCaseSummaryNode1(ListofEvents.get(i)+" Event is not triggered");
////					extent.extentLoggerFail("", ListofEvents.get(i)+" Event is not triggered");
////				 }
////			 }
////			 
		////}
		 
		 
		 
		 
public void navigateToCreatorScreen() throws Exception {
	
	verifyElementPresentAndClick(HipiHomePage.objVideoCreateIcon, "Video creater Icon");
	allowPermissions();
	if(verifyElementPresent(HipiCreateVideoPage.objRecordIcon,"Record icon")) {
	logger.info("Video recording screen has been displayed");
	extent.extentLoggerPass("Create Video Screen", "Video recording screen has been displayed");
	}else {
	 logger.info("Video recording screen failed to displayed");
	 extent.extentLoggerFail("Create Video Screen", "Video recording screen failed to displayed");   		
	}
}

public void VideoDurationIsSetToSeconds_T2505(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2505 - Check whether user is able to see a message at of the recording screen as ‘Video duration is set to x seconds’ where x is the sound duration");
	System.out.println("T2505");
	extent.extentLogger(" ", "T2505");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSelectedMusic, "Sound Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);
	verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
	waitTime(3000);				
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrimSong,10);
	verifyElementPresent(HipiCreateVideoPage.objTrimSong, "Music Screen Header");
	click(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
	 
	if (verifyElementPresent(HipiCreateVideoPage.objVideoDurationIsSet, "Video duration is set to x seconds")) {
		logger.info("User is able to see a message at of the recording screen as ‘Video duration is set to x seconds’ where x is the sound duration");
    	extent.extentLoggerPass("Add music", "User is able to see a message at of the recording screen as ‘Video duration is set to x seconds’ where x is the sound duration");
    }else {
    	logger.info("User is unable to see a message at of the recording screen as ‘Video duration is set to x seconds’ where x is the sound duration");
    	extent.extentLoggerFail("Add music", "User is unable to see a message at of the recording screen as ‘Video duration is set to x seconds’ where x is the sound duration");
	}
	}
	navigateToHomePage();
	
}	


	
public void verifyVideoDurationSetCompleteRecording_T2506(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2506 - Check if recording is stopped automatically once after recording is completed for the duration equal to the sound duration");
	System.out.println("T2506");
	extent.extentLogger(" ", "T2506");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSelectedMusic, "Sound Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);
	verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
	waitTime(3000);				
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrimSong,10);
	verifyElementPresent(HipiCreateVideoPage.objTrimSong, "Music Screen Header");
	click(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
	verifyElementPresent(HipiCreateVideoPage.objVideoDurationIsSet, "Video duration is set to x seconds");
	String secondsSet = getText(HipiCreateVideoPage.objVideoDurationIsSet).substring(25,27);
	System.out.println(secondsSet);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record button");
	waitTime(convertToInt(secondsSet)); //waiting until recording time is equal to trimmed song time
	
	if (verifyElementNotExist(HipiCreateVideoPage.objrecordbtn)) {
		logger.info("User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration");
    	extent.extentLoggerPass("Add music", "User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration");
    }else {
    	logger.info("User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration");
    	extent.extentLoggerPass("Add music", "User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration");
	}
	
	
	
	}
}

public void VideoDurationIsSetToSecondsTrim_T2507(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2507 - Check if recording is stopped automatically once after recording is completed for the duration equal to the sound duration post trimming the sound");
	System.out.println("T2507");
	extent.extentLogger(" ", "T2507");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSelectedMusic, "Sound Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);
	verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
	waitTime(3000);				
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrimSong,10);
	verifyElementPresent(HipiCreateVideoPage.objTrimSong, "Music Screen Header");
	swipeRail(HipiCreateVideoPage.objTrimSong, "Left",3);
	click(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
	verifyElementPresent(HipiCreateVideoPage.objVideoDurationIsSet, "Video duration is set to x seconds");
	String secondsSet = getText(HipiCreateVideoPage.objVideoDurationIsSet).substring(25,27);
	System.out.println(secondsSet);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record button");
	waitTime(convertToInt(secondsSet)); //waiting until recording time is equal to trimmed song time
	
	if (verifyElementNotExist(HipiCreateVideoPage.objrecordbtn)) {
		logger.info("User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration post trimming the sound");
    	extent.extentLoggerPass("Add music", "User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration post trimming the sound");
    }else {
    	logger.info("User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration post trimming the sound");
    	extent.extentLoggerFail("Add music", "User should see video recording should be stopped automatically once the video duration becomes equal to selected sound duration post trimming the sound");
	}
	}
	
	
}	

public void VideoRecordingSoundGreaterThan90Seconds_T2509(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2509 - Check if user is able to record video if sound duration is greater than 90s");
	System.out.println("T2509");
	extent.extentLogger(" ", "T2509");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSelectedMusic, "Sound Icon");
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundSearchInVideoRecord,"Search sound field");
	waitTime(2000);
	type(HipiCreateVideoPage.objSoundSearchInVideoRecord,"Zoom zoom","Search sound field");
	explicitWaitVisibility(HipiCreateVideoPage.objFirstSearchResults,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstSearchResults,"First search result");
	explicitWaitVisibility(HipiCreateVideoPage.objZoomSound,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objZoomSound,"Zoom sound (sound >90s)");
	explicitWaitVisibility(HipiCreateVideoPage.objMusicScreenTickIcon,10);
	click(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
	verifyElementPresent(HipiCreateVideoPage.objVideoDurationIsSet, "Video duration is set to x seconds");
	String secondsSet = getText(HipiCreateVideoPage.objVideoDurationIsSet).substring(25,27);
	System.out.println(secondsSet);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn,"Record button");
	waitTime(convertToInt(secondsSet)); //waiting until recording time is equal to trimmed song time
	
	if (verifyElementNotExist(HipiCreateVideoPage.objrecordbtn)) {
		logger.info("User should be able to record video only if sound duration is lesser than 90s");
    	extent.extentLoggerPass("Add music", "User should be able to record video only if sound duration is lesser than 90s");
    }else {
    	logger.info("User should be able to record video only if sound duration is lesser than 90s");
    	extent.extentLoggerFail("Add music", "User should be able to record video only if sound duration is lesser than 90s");
	}
	}
	
	
}	

public void LocalTabSoundLessThan05Seconds_T2510(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2510 - Check if user able to see sounds lesser than 5s in \"Local\" tab");
	System.out.println("T2510");
	extent.extentLogger(" ", "T2510");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSelectedMusic, "Sound Icon");
	explicitWaitVisibility(HipiCreateVideoPage.objLocalTab,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objLocalTab,"Local Tab");
	waitTime(2000);
	
	if (verifyElementNotExist(HipiCreateVideoPage.objSoundLessThan5Seconds)) {
		logger.info("User should not see sounds less than 5s");
    	extent.extentLoggerPass("Add music", "User should not see sounds less than 5s");
    }else {
    	logger.info("User should not see sounds less than 5s");
    	extent.extentLoggerFail("Add music", "User should not see sounds less than 5s");
	}
	}
	
	navigateToHomePage();
}	


		
public void redLabelTheMonetizationCardOnDiscoverScreen__T2589__T2590(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2589 Check whether the label can be tagged for 2 products, 1 product, or 0 products.");
		System.out.println("T2589");
		extent.extentLogger("Red Label on Monetization Card", "T2589");
	}else {
		extent.HeaderChildNode("T2590 Check whether the label can be tagged for 2 products, 1 product, or 0 products.");
		System.out.println("T2590");
		extent.extentLogger("Red Label on Monetization Card", "T2590");
		LoginAndNivigateToHipi(userType);
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	for(int i=0;i<=5;i++)	{
		if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon)){
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
			if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				if(verifyElementExist(HipiDiscoverPage.objMonetizationRedLabel,"Monetization Red Label")){
					break;
				}
				else {
					SwipeUntilFindElement(HipiDiscoverPage.objMonetizationRedLabel,"UP");
					Back(1);
					Swipe("UP",1);
					
				}
			}else {
				Back(1);
				Swipe("UP", 1);	
			}	
		}
		
		else {
			Swipe("UP",1);
		}
	}
	if (verifyElementPresent(HipiDiscoverPage.objMonetizationRedLabel, "Monetization Red Label")) {
		
		
		logger.info("The label should be tagged for 2 products, 1 product, or 0 products.");;
		extent.extentLoggerPass("", "The label should be tagged for 2 products, 1 product, or 0 products.");
		}	
	else {
		logger.info("The label should be tagged for 2 products, 1 product, or 0 products.");
		extent.extentLogger("", "Monetization red label is tagged for 0 products for the videos checked");
		extent.extentLoggerPass("", "The label should be tagged for 2 products, 1 product, or 0 products.");
	}
}
	
public void redLabelCharactersCheckGreaterTheMonetizationCardOnDiscoverScreen__T2594__T2595(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2594 Check wheter the Label value can’t be more than 10 characters.");
		System.out.println("T2594");
		extent.extentLogger("Red Label Characters Check on Monetization Card", "T2594");
	}else {
		extent.HeaderChildNode("T2595 Check wheter the Label value can’t be more than 10 characters.");
		System.out.println("T2595");
		extent.extentLogger("Red Label Characters Check on Monetization Card", "T2594");
		LoginAndNivigateToHipi(userType);
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	for(int i=0;i<=5;i++)	{
		if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon)){
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
			if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				if(verifyElementExist(HipiDiscoverPage.objMonetizationRedLabel,"Monetization Red Label")){
					break;
				}
				else {
					SwipeUntilFindElement(HipiDiscoverPage.objMonetizationRedLabel,"UP");
					Back(1);
					Swipe("UP",1);
					
				}
			}else {
				Back(1);
				Swipe("UP", 1);	
			}	
		}
		
		else {
			Swipe("UP",1);
		}
	}
	if (verifyElementPresent(HipiDiscoverPage.objMonetizationRedLabel, "Monetization Red Label")) {
		String redLabelNoOfChars = getText(HipiDiscoverPage.objMonetizationRedLabel);
		if(redLabelNoOfChars.length()<=10) {
			logger.info("The Label value should’t be more than 10 characters.");
			extent.extentLoggerPass("", "The Label value should’t be more than 10 characters.");
		}	
		
		else {
			logger.info("The Label value should’t be more than 10 characters.");
			extent.extentLoggerFail("", "The Label value should’t be more than 10 characters.");
		}
	}
	else {
		logger.info("The red label on monetization card is not present");
		
	}
}
	


public void trendingTagOnDiscoverScreen__T2619__T2620(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2619 Guest User - Check user able to see \"Trending tag \" in the rails");
		System.out.println("T2619");
		extent.extentLogger("Trending tag Check on discover screen", "T2619");
	}else {
		extent.HeaderChildNode("T2620 Logged in User - Check user able to see \"Trending tag \" in the rails");
		System.out.println("T2620");
		extent.extentLogger("Trending tag Check on discover screen", "T2620");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	for(int i=0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objTrendingTag,"Trending Tag")) {
			break;	
		}
		else {
			SwipeUntilFindElement(HipiDiscoverPage.objTrendingTag,"UP");
		}
	}
	
	if(verifyElementExist(HipiDiscoverPage.objTrendingTag,"Trending Tag")) {
		logger.info("User should able to see the \"Trending \" tag written in the rails");
		extent.extentLoggerPass("", "User should able to see the \"Trending \" tag written in the rails");	
	}
	else {
		logger.info("User should able to see the \"Trending \" tag written in the rails");
		extent.extentLoggerFail("", "User should able to see the \"Trending \" tag written in the rails");
	}
	navigateToHomePage();
}

public void challengeTagOnDiscoverScreen__T2621__T2622(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2621 Guest User - Check user able to see \"Challenge tag \" in the rails");
		System.out.println("T2621");
		extent.extentLogger("Challenge tag Check on discover screen", "T2621");
	}else {
		extent.HeaderChildNode("T2622 Logged in User - Check user able to see \"Challenge tag \" in the rails");
		System.out.println("T2622");
		extent.extentLogger("Challenge tag Check on discover screen", "T2622");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	
		if(verifyElementExist(HipiDiscoverPage.objChallengeTag,"Challenge Tag")) {
			logger.info("Swiping to find...");
		}
		else {
			SwipeUntilFindElement(HipiDiscoverPage.objChallengeTag,"UP");
		}
	
	
	if(verifyElementExist(HipiDiscoverPage.objChallengeTag,"Challenge Tag")) {
		logger.info("User should able to see the \"Challenge \" tag in the rails");
		extent.extentLoggerPass("", "User should able to see the \"Challenge \" tag in the rails");	
	}
	else {
		logger.info("User should able to see the \"Challenge \" tag in the rails");
		extent.extentLoggerFail("", "User should able to see the \"Challenge \" tag in the rails");
	}
	navigateToHomePage();
}

public void contestTagOnDiscoverScreen__T2623__T2624(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2623 Guest User - Check user able to see \"Contest tag \" in the rails");
		System.out.println("T2623");
		extent.extentLogger("Contest tag Check on discover screen", "T2623");
	}else {
		extent.HeaderChildNode("T2624 Logged in user - Check user able to see \"Contest tag \" in the rails");
		System.out.println("T2624");
		extent.extentLogger("Contest tag Check on discover screen", "T2624");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	
		if(verifyElementExist(HipiDiscoverPage.objContestTag,"Contest Tag")) {
			logger.info("Swiping to find...");
		}
		else {
			SwipeUntilFindElement(HipiDiscoverPage.objContestTag,"UP");
		}
	
	
	if(verifyElementExist(HipiDiscoverPage.objContestTag,"Contest Tag")) {
		logger.info("User should able to see the \"Contest\" tag in the rails");
		extent.extentLoggerPass("", "User should able to see the \"Contest \" tag in the rails");	
	}
	else {
		logger.info("User should able to see the \"Contest \" tag in the rails");
		extent.extentLoggerFail("", "User should able to see the \"Contest \" tag in the rails");
	}
	navigateToHomePage();
}

public void audioTrendTagOnDiscoverScreen__T2625__T2625(String userType) throws Exception {
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2625 Guest User - Check user able to see \"Audio Trend tag \" in the rails");
		System.out.println("T2625");
		extent.extentLogger("Audio Trend tag Check on discover screen", "T2625");
	}else {
		extent.HeaderChildNode("T2626 Logged in User - Check user able to see \"Audio Trend tag \" in the rails");
		System.out.println("T2626");
		extent.extentLogger("Audio Trend tag Check on discover screen", "T2626");
		
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	
		if(verifyElementExist(HipiDiscoverPage.objAudioTrendTag,"Audio Trend Tag")) {
			logger.info("Swiping to find...");
		}
		else {
			SwipeUntilFindElement(HipiDiscoverPage.objAudioTrendTag,"UP");
		}
	
	
	if(verifyElementExist(HipiDiscoverPage.objAudioTrendTag,"Audio Trend Tag")) {
		logger.info("User should able to see the \"Audio Trend\" tag in the rails");
		extent.extentLoggerPass("", "User should able to see the \"Audio Trend\" tag in the rails");	
	}
	else {
		logger.info("User should able to see the \"Audio Trend\" tag in the rails");
		extent.extentLoggerFail("", "User should able to see the \"Audio Trend\" tag in the rails");
	}
	navigateToHomePage();
}

public void topTabSearchResultsOnDiscoverScreen__T2706__T2713(String userType) throws Exception {
	
	boolean flagUsers = false;
	boolean flagFirstVideos = false;
	boolean flagHashtags = false;
	boolean flagSecondVideos = false;
	boolean flagSounds = false;
	boolean  flagThirdVideos = false;
	int videosCount;
	
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2706 Check if Guest user is able to see the search results are in the order format under \"Top\" tab\r\n"
				+ " > 2 user profiles\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 hashtags\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 sounds\r\n"
				+ " > 4 videos");
		System.out.println("T2706");
		extent.extentLogger("Top tab in search results check", "T2706");
	}else {
		extent.HeaderChildNode("T2713 Check if logged in user is able to see the search results are in the order format under \"Top\" tab\r\n"
				+ " > 2 user profiles\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 hashtags\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 sounds\r\n"
				+ " > 4 videos");
		System.out.println("T2713");
		extent.extentLogger("Top tab in search results check", "T2713");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	
	if(verifyElementExist(HipiDiscoverPage.objListOfSearchUserProfiles,"User Profiles")) {
		int userCount = getCount(HipiDiscoverPage.objListOfSearchUserProfiles);
		if(userCount==2) {
			flagUsers = true;
		}
	}
	
	PartialSwipe("UP",1);
	if(verifyElementExist(HipiDiscoverPage.objrelatedvioedosSound,"Videos")) {
		videosCount = getCount(HipiDiscoverPage.objrelatedvioedosSound);
		if(videosCount>=4) {
			flagFirstVideos = true;
		}
	}
	
	SwipeUntilFindElement(HipiDiscoverPage.objfavoriteshashtags,"Hashtags");
	if(verifyElementExist(HipiDiscoverPage.objfavoriteshashtags,"Hashtags")) {
		int hashtagsCount = getCount(HipiDiscoverPage.objfavoriteshashtags);
		if(hashtagsCount==2) {
			flagHashtags = true;
		}
	}
	
	SwipeUntilFindElement(HipiDiscoverPage.objrelatedvioedosSound,"Videos");
	PartialSwipe("UP",1);
	if(verifyElementExist(HipiDiscoverPage.objrelatedvioedosSound,"Videos")) {
		videosCount = getCount(HipiDiscoverPage.objrelatedvioedosSound);
		if(videosCount>=4) {
			flagSecondVideos = true;
		}
	}
	
	SwipeUntilFindElement(HipiDiscoverPage.objListOfSearchUserProfiles,"Sounds");
	PartialSwipe("UP",1);
	if(verifyElementExist(HipiDiscoverPage.objListOfSearchUserProfiles,"Sounds")) {
		int soundsCount = getCount(HipiDiscoverPage.objListOfSearchUserProfiles);
		if(soundsCount==2) {
			flagSounds = true;
		}
	}
	
	SwipeUntilFindElement(HipiDiscoverPage.objrelatedvioedosSound,"Videos");
	PartialSwipe("UP",1);
	if(verifyElementExist(HipiDiscoverPage.objrelatedvioedosSound,"Videos")) {
		videosCount = getCount(HipiDiscoverPage.objrelatedvioedosSound);
		if(videosCount>=4) {
			flagThirdVideos = true;
		}
	}
	
	
	if(flagUsers && flagFirstVideos && flagSecondVideos && flagThirdVideos && flagSounds && flagHashtags) {
		logger.info("user should able to see the following order format under \"Top\" tab:\r\n"
				+ " > 2 user profiles\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 hashtags\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 sounds\r\n"
				+ " > 4 videos");
		extent.extentLoggerFail("", "user should able to see the following order format under \"Top\" tab:\r\n"
				+ " > 2 user profiles\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 hashtags\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 sounds\r\n"
				+ " > 4 videos");	
	}
	else {
		logger.info("user should able to see the following order format under \"Top\" tab:\r\n"
				+ " > 2 user profiles\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 hashtags\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 sounds\r\n"
				+ " > 4 videos");
		extent.extentLoggerFail("", "Guser should able to see the following order format under \"Top\" tab:\r\n"
				+ " > 2 user profiles\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 hashtags\r\n"
				+ " > 4 videos\r\n"
				+ " > 2 sounds\r\n"
				+ " > 4 videos");
	}
	navigateToHomePage();
}

public void videosTabSearchResultsOnDiscoverScreen__T2722__T2723(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2722 Check if Guest user is able to see only videos in search results and not user profiles, hashtags, or sounds under Videos tab.");
		System.out.println("T2722");
		extent.extentLogger("Videos tab in search results check", "T2722");
	}else {
		extent.HeaderChildNode("T2723 Check if logged in user is able to see only videos in search results and not user profiles, hashtags, or sounds under Videos tab.");
		System.out.println("T2723");
		extent.extentLogger("Videos tab in search results check", "T2723");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab,"Videos Tab");
	waitTime(3000);
	for(int i=0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objrelatedvioedosSound,"Videos") && verifyElementNotExist(HipiDiscoverPage.objListOfSearchUserProfiles) && verifyElementNotExist(HipiDiscoverPage.objfavoriteshashtags)) {
			flag = true;	
		}
		Swipe("UP",1);
	}
	
	if(flag) {
		logger.info("user should able to see only videos in search results and not user profiles, hashtags, or sounds under Videos tab.");
		extent.extentLoggerFail("", "user should able to see only videos in search results and not user profiles, hashtags, or sounds under Videos tab.");	
	}
	else {
		logger.info("user should able to see only videos in search results and not user profiles, hashtags, or sounds under Videos tab.");
		extent.extentLoggerFail("", "user should able to see only videos in search results and not user profiles, hashtags, or sounds under Videos tab.");	
	}
	navigateToHomePage();
	}	

public void videoDescriptionTopTabSearchResultsOnDiscoverScreen__T2734__T2740(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2734 Check if Guest user is able to view description of video truncated in 2 lines");
		System.out.println("T2734");
		extent.extentLogger("Videos description check in videos tab", "T2734");
	}else {
		extent.HeaderChildNode("T2740 Check if logged in user is able to view description of video truncated in 2 lines");
		System.out.println("T2740");
		extent.extentLogger("Videos description check in videos tab", "T2740");
		
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	for(int i =0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objVideoDescription,"Video Description")) {
			flag = true;
		}
		Swipe("UP",1);
	}
	
	if(flag) {
		logger.info("user should be able to view video description truncated in 2 lines under \"Top\" tab");
		extent.extentLoggerPass("", "user should be able to view video description truncated in 2 lines under \"Top\" tab");	
	}
	else {
		logger.info("user should be able to view video description truncated in 2 lines under \"Top\" tab");
		extent.extentLoggerFail("", "user should be able to view video description truncated in 2 lines under \"Top\" tab");
	}
	navigateToHomePage();
}

public void videoDescriptionVideosTabSearchResultsOnDiscoverScreen__T2735__T2741(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2735 Check if Guest user is able to view description of video truncated in 2 lines under \"Videos\" tab");
		System.out.println("T2735");
		extent.extentLogger("Videos description check in videos tab", "T2735");
	}else {
		extent.HeaderChildNode("T2741 Check if Guest user is able to view description of video truncated in 2 lines under \"Videos\" tab");
		System.out.println("T2741");
		extent.extentLogger("Videos description check in videos tab", "T2741");
		
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab,"Videos Tab");
	waitTime(3000);
	for(int i =0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objVideoDescription,"Video Description")) {
			flag = true;
		}
		Swipe("UP",1);
	}
	
	if(flag) {
		logger.info("user should be able to view video description truncated in 2 lines under \"videos\" tab");
		extent.extentLoggerPass("", "user should be able to view video description truncated in 2 lines under \"video\" tab");	
	}
	else {
		logger.info("user should be able to view video description truncated in 2 lines under \"videos\" tab");
		extent.extentLoggerFail("", "user should be able to view video description truncated in 2 lines under \"videos\" tab");
	}
	navigateToHomePage();
}

public void creatorUserHandleThumbnailTopTabSearchResultsOnDiscoverScreen__T2736__T2742(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2736 Check if Guest user is able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Top\" tab");
		System.out.println("T2736");
		extent.extentLogger("Creator & userhandle check in top tab", "T2736");
	}else {
		extent.HeaderChildNode("T2742 Check if logged-in user is able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Top\" tab");
		System.out.println("T2742");
		extent.extentLogger("Creator & userhandle check in top tab", "T2742");
		LoginAndNivigateToHipi(userType);
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");

	for(int i =0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objCreatorThumbnail,"Creator Thumbnail") && verifyElementExist(HipiDiscoverPage.objUserHandle,"User Handle")) {
			flag = true;
		}
		Swipe("UP",1);
	}
	
	if(flag) {
		logger.info(" user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Top\" tab");
		extent.extentLoggerPass("", "user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Top\" tab");	
	}
	else {
		logger.info(" user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Top\" tab");
		extent.extentLoggerFail("", "user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Top\" tab");	
	}
	navigateToHomePage();
}

public void creatorUserHandleThumbnailVideosTabSearchResultsOnDiscoverScreen__T2737__T2743(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2737 Check if Guest user is able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Videos\" tab");
		System.out.println("T2737");
		extent.extentLogger("Creator & userhandle check in videos tab", "T2737");
	}else {
		extent.HeaderChildNode("T2743 Check if logged-in user is able to view Creator profile thumbnail and Userhandle below video thumbnail under \"Videos\" tab");
		System.out.println("T2743");
		extent.extentLogger("Creator & userhandle check in top tab", "T2743");
		
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab,"Videos Tab");
	waitTime(3000);
	for(int i =0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objCreatorThumbnail,"Creator Thumbnail") && verifyElementExist(HipiDiscoverPage.objUserHandle,"User Handle")) {
			flag = true;
		}
		Swipe("UP",1);
	}
	
	if(flag) {
		logger.info(" user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"videos\" tab");
		extent.extentLoggerPass("", "user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"videos\" tab");	
	}
	else {
		logger.info(" user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"videos\" tab");
		extent.extentLoggerFail("", "user should be able to view Creator profile thumbnail and Userhandle below video thumbnail under \"videos\" tab");	
	}
	navigateToHomePage();
}

public void videoPlayerNavigationTopTabSearchResultsOnDiscoverScreen__T2738__T2744(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2738 Check if Guest user is navigating to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle in \"Top\" tab");
		System.out.println("T2738");
		extent.extentLogger("Video player navigation top tab", "T2738");
	}else {
		extent.HeaderChildNode("T2744 Check if logged-in user is navigating to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle in \"Top\" tab");
		System.out.println("T2744");
		extent.extentLogger("Video player navigation top tab", "T2744");
		
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");

	verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"Video thumbnail");
	waitTime(2000);
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	verifyElementPresentAndClick(HipiDiscoverPage.objCreatorThumbnail,"Creator thumbnail");
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	verifyElementPresentAndClick(HipiDiscoverPage.objUserHandle,"User handle");
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoDescription,"Video Description");
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	
	if(flag) {
		logger.info("user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");
		extent.extentLoggerPass("", "user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");	
	}
	else {
		logger.info("user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");
		extent.extentLoggerFail("", "user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");	
	}
	navigateToHomePage();
}

public void videoPlayerNavigationVideosTabSearchResultsOnDiscoverScreen__T2739__T2745(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2739 Check if Guest user is navigating to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle in \"Videos\" tab");
		System.out.println("T2739");
		extent.extentLogger("Video player navigation videos tab", "T2739");
	}else {
		extent.HeaderChildNode("T2745 Check if logged-in user is navigating to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle in \"Videos\" tab");
		System.out.println("T2745");
		extent.extentLogger("Video player navigation videos tab", "T2745");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab,"Videos Tab");
	waitTime(3000);
	
	verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"Video thumbnail");
	waitTime(2000);
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	verifyElementPresentAndClick(HipiDiscoverPage.objCreatorThumbnail,"Creator thumbnail");
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	verifyElementPresentAndClick(HipiDiscoverPage.objUserHandle,"User handle");
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoDescription,"Video Description");
	if(verifyElementPresent(HipiDiscoverPage.objFullPlayerScreen,"Video Player screen")) {
		flag = true;
		Back(1);
	}
	
	
	if(flag) {
		logger.info("user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");
		extent.extentLoggerPass("", "user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");	
	}
	else {
		logger.info("user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");
		extent.extentLoggerFail("", "user should navigate to video player screen post tapping Video thumbnail, Video description, Profile thumbnail and userhandle");	
	}
	navigateToHomePage();
}

public void likeViewCountVideosTabSearchResultsOnDiscoverScreen__T2746__T2747(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2747 Guest user - Check if user able to see view and Like count on thumbnail");
		System.out.println("T2747");
		extent.extentLogger("like & view count check videos tab", "T2747");
	}else {
		extent.HeaderChildNode("T2746 logged-in user - Check if user able to see view and Like count on thumbnail");
		System.out.println("T2746");
		extent.extentLogger("like & view count check videos tab", "T2746");
		
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Prema","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	verifyElementPresentAndClick(HipiDiscoverPage.objVideoTab,"Videos Tab");
	waitTime(3000);
	
	for(int i =0;i<5;i++) {
		if(verifyElementExist(HipiDiscoverPage.objLikeCount,"Like Count") && verifyElementExist(HipiDiscoverPage.objViewCount,"View Count")) {
			flag=true;
		}
		Swipe("UP",1);
	}
	
	if(flag) {
		logger.info("User should see Like and view count on thumbnail");
		extent.extentLoggerPass("", "User should see Like and view count on thumbnail");	
	}
	else {
		logger.info("User should see Like and view count on thumbnail");
		extent.extentLoggerFail("", "User should see Like and view count on thumbnail");
	}
	navigateToHomePage();
}

public void playlistAnimationIconVideosOnDiscoverScreen__T3152__T3153(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T3152 Verify as guest user should able to see Playlist icon animation on video in the Discover tab");
		System.out.println("T3152");
		extent.extentLogger("Playlist animation icon check on videos", "T3152");
	}else {
		extent.HeaderChildNode("T3153 Verify as logged-in user should able to see Playlist icon animation on video in the Discover tab");
		System.out.println("T3153");
		extent.extentLogger("Playlist animation icon check on videos", "T3153");
		LoginAndNivigateToHipi(userType);
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(3000);
	
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar,"Search Bar");
	type(HipiDiscoverPage.objDiscoverSearchInbox,"Lucky Singh","Typing search query");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objListOfSearchResult,"First result");
	verifyElementPresentAndClick(HipiDiscoverPage.objrelatedvioedosSound,"Video");
	
	if(verifyElementExist(HipiDiscoverPage.objPlaylistAnimationIcon,"Playlist animation icon")) {
		logger.info("Users should able to see Playlist icon animation on video in the Discover tab");
		extent.extentLoggerPass("", "Users should able to see Playlist icon animation on video in the Discover tab");
		
	}
	else {
		logger.info("Users should able to see Playlist icon animation on video in the Discover tab");
		extent.extentLoggerFail("", "Users should able to see Playlist icon animation on video in the Discover tab");
	}
	
	
}


public void shopPageNavigationMonetization__T2855__T2856(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2855 Guest user - Check if user is navigating to Shop page post tapping Monitisation products");
		System.out.println("T2855");
		extent.extentLogger("Shop Page", "T2855");
	}else {
		extent.HeaderChildNode("T2856 Logged in user - Check if user is navigating to Shop page post tapping Monitisation products");
		System.out.println("T2856");
		extent.extentLogger("Shop Page", "T2856");
}
	verifyElementPresentAndClick(HipiHomePage.objDiscoverButton, "Discover Button");
	waitTime(2000);
	
	for(int i=0;i<=10;i++)	{
		if(verifyElementDisplayed(HipiDiscoverPage.objBucketIcon)){
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
			if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				click(HipiHomePage.objmonetizationCard, "Monetization Card");
				if(verifyElementExist(HipiDiscoverPage.objShopPopup,"Shop popup")) {
					break;
				}
			}else {
				Back(1);
				Swipe("UP", 1);	
			}	
		}
		
		else {
			Swipe("UP",1);
		}
	}
	if(verifyElementExist(HipiDiscoverPage.objShopPopup,"Shop popup")) {
		logger.info("user should see Shop page post tapping Monitisation product");
		extent.extentLoggerPass("", "user should see Shop page post tapping Monitisation product");
		
	}
	else {
		logger.info("user should see Shop page post tapping Monitisation product");
		extent.extentLoggerFail("", "user should see Shop page post tapping Monitisation product");
	}
	
	navigateToHomePage();
}

public void shopPageNavigationMonetizationSoundDetails__T2859__T2860(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2859 Guest user - Check if user is navigating to Shop page post tapping Monitisation products");
		System.out.println("T2859");
		extent.extentLogger("Shop Page", "T2859");
	}else {
		extent.HeaderChildNode("T2860 Logged in user - Check if user is navigating to Shop page post tapping Monitisation products");
		System.out.println("T2860");
		extent.extentLogger("Shop Page", "T2860");
}
	
	
	for(int i=0;i<=10;i++)	{
		if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
			verifyElementPresentAndClick(HipiDiscoverPage.objSongSound, "Sound");
		if(verifyElementExist(HipiDiscoverPage.objBucketIconSoundDetails,"Bucket Icon")){
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIconSoundDetails, "Bucket Icon");
			if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				click(HipiHomePage.objmonetizationCard, "Monetization Card");
				if(verifyElementExist(HipiDiscoverPage.objShopPopup,"Shop popup")) {
					break;
				}
		}
		
	}
		else {
			Back(1);
			Swipe("UP",1);
		}
		}
		else {
			Swipe("UP",1);
		}
			
		
		
	}
	if(verifyElementExist(HipiDiscoverPage.objShopPopup,"Shop popup")) {
		logger.info("user should see Shop page post tapping Monitisation product");
		extent.extentLoggerPass("", "user should see Shop page post tapping Monitisation product");
		
	}
	else {
		logger.info("user should see Shop page post tapping Monitisation product");
		extent.extentLoggerFail("", "user should see Shop page post tapping Monitisation product");
	}
	
	navigateToHomePage();
}

public void shopPageNavigationMonetizationHashtagDetails__T2863__T2864(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2863 Guest user - Check if user is navigating to Shop page post tapping Monitisation products");
		System.out.println("T2859");
		extent.extentLogger("Shop Page", "T2863");
	}else {
		extent.HeaderChildNode("T2864 Logged in user - Check if user is navigating to Shop page post tapping Monitisation products");
		System.out.println("T2864");
		extent.extentLogger("Shop Page", "T2864");
}
	
	
	for(int i=0;i<=10;i++)	{
		verifyElementPresentAndClick(HipiDiscoverPage.objVideoDesc, "Video Description");
		waitTime(2000);
		verifyElementPresentAndClick(HipiDiscoverPage.objVideoDesc, "Video Description");
		if(verifyElementExist(HipiDiscoverPage.objBucketIcon,"Bucket Icon")){
			verifyElementPresentAndClick(HipiDiscoverPage.objBucketIcon, "Bucket Icon");
			if(verifyElementExist(HipiHomePage.objmonetizationCard, "Monetization Card")) {
				click(HipiHomePage.objmonetizationCard, "Monetization Card");
				if(verifyElementExist(HipiDiscoverPage.objShopPopup,"Shop popup")) {
					break;
				}
		}
		
	}
		
			else {
				Back(1);
				Swipe("UP",1);
			}
		
		
	}
	if(verifyElementExist(HipiDiscoverPage.objShopPopup,"Shop popup")) {
		logger.info("user should navigate to Shop page post tapping Monitisation product in Hashtag detail screen");
		extent.extentLoggerPass("", "User should navigate to Shop page post tapping Monitisation product in Hashtag detail screen");
		
	}
	else {
		logger.info("user should navigate to Shop page post tapping Monitisation product in Hashtag detail screen");
		extent.extentLoggerFail("", "user should navigate to Shop page post tapping Monitisation product in Hashtag detail screen");
	}
	
	navigateToHomePage();
}

public void LikeTheVideoAdsInFeed__T2681__T2682(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2681 Check if Guest user is able to Like the Video Ads in Feed(For You)");
		System.out.println("T2681");
		extent.extentLogger("", "T2681");
	}else {
		extent.HeaderChildNode("T2682 Check if Logged-in user is able to Like the Video Ads in Feed(For You)");
		System.out.println("T2682");
		extent.extentLogger("", "T2682");	
} 
	SwipeUntilFindElement(HipiHomePage.objDownloadNow, "UP");
	if(verifyElementExist(HipiHomePage.objDownloadNow,"Download Now")) {
		String likeCount = getText(HipiHomePage.objLikeCount);
		System.out.println(likeCount);
		click(HipiHomePage.objLikeICON, "Like Icon");
		String likeCount1 = getText(HipiHomePage.objLikeCount);
		if (!likeCount.equals(likeCount1)) {
			if(userType.equals("Guest")) {
				logger.info("Guest user should not be able to like video ads in Feed(For You)");	
				extent.extentLoggerFail("", "Guest user should not be able to like video ads in Feed(For You)");	
			}
			
			else {
				logger.info("Logged-in user should be able to Like video ads in Feed(For You)");	
				extent.extentLoggerPass("", "Logged-in user should be able to Like video ads in Feed(For You)");
			}
				
		}else {
			if(userType.equals("Guest")) {
				logger.info("Guest user should not be able to like video ads in Feed(For You)");	
				extent.extentLoggerPass("", "Guest user should not be able to like video ads in Feed(For You)");	
			}
			
			else {
				logger.info("Logged-in user should be able to Like video ads in Feed(For You)");	
				extent.extentLoggerFail("", "Logged-in user should be able to Like video ads in Feed(For You)");
			}
		}	
		
	}
	
	else {
		logger.info("Video ads are not present");
		extent.extentLoggerFail(userType, "Video ads are not present");
	}
	
}

public void creatorThumbnailInFeed__T2688(String userType) throws Exception {
	if(userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
		extent.HeaderChildNode("T2688 Check if creator profile thumbnail is displaying above Like icon for both Guest user and Logged-in user");
		System.out.println("T2688");
		extent.extentLogger("", "T2688");
	
}
	if(verifyElementExist(HipiFeedPage.objCreatorThumbnail,"Creator thumbnail") && verifyElementExist(HipiFeedPage.objLikeButton,"Like button")) {
		logger.info("Check if creator profile thumbnail is displaying above Like icon for both Guest user and Logged-in user)");	
		extent.extentLoggerPass("", "Check if creator profile thumbnail is displaying above Like icon for both Guest user and Logged-in user");	
	}
	
	else {
		logger.info("Check if creator profile thumbnail is displaying above Like icon for both Guest user and Logged-in user)");	
		extent.extentLoggerFail("", "Check if creator profile thumbnail is displaying above Like icon for both Guest user and Logged-in user");	
		
	}
}

public void followButtonValidationInFeed_T2689_2690(String userType) throws Exception{
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2689 Check if Guest user is not able to follow the creator by tapping \"Follow\" CTA next to creator handle");
		System.out.println("T2689");
		extent.extentLogger("", "T2689");
		
		verifyElementPresentAndClick(HipiFeedPage.objFollowBtn,"Follow Button");
		waitTime(2000);
		if(verifyElementExist(HipiProfilePage.objUsePhoneOrEmail,"Login popup")) {
				logger.info("Guest user should not be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
				extent.extentLoggerPass("", "Guest user should not be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
			}
		else {
			logger.info("Guest user should not be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
			extent.extentLoggerFail("", "Guest user should not be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
		}
	}else {
		extent.HeaderChildNode("T2690 Check if Logged-in user is able to follow the creator by tapping \"Follow\" CTA next to creator handle");
		System.out.println("T2690");
		extent.extentLogger("", "T2690");	
		
		verifyElementPresentAndClick(HipiFeedPage.objFollowBtn,"Follow Button");
		waitTime(2000);
			
			if(verifyElementNotExist(HipiFeedPage.objFollowBtn)) {
				logger.info("Logged-in user should be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
				extent.extentLoggerPass("", "Logged-in user should be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
			}
			else {
				logger.info("Logged-in user should be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
				extent.extentLoggerPass("", "Logged-in user should be able to follow the creator by tapping \"Follow\" CTA next to creator handle");	
			}
} 
	
	}
	
public void creatorPageNavigationValidation__T2691__T2692(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode("T2691 Check if Guest user is able to navigate to creator profile on tapping creator thumbnail/creator handle");
		System.out.println("T2691");
		extent.extentLogger("Creator Page", "T2691");
	}else {
		extent.HeaderChildNode("T2692 Check if Logged-in user is able to navigate to creator profile on tapping creator thumbnail/creator handle");
		System.out.println("T2692");
		extent.extentLogger("Creator Page", "T2692");
}
	verifyElementPresentAndClick(HipiHomePage.objProfilePicture,"Creator Thumbnail");
	waitTime(2000);
	if(verifyElementExist(HipiFeedPage.objFollowCount,"Follow count")) {
		flag = true;
	}
	
	Back(1);
	verifyElementPresentAndClick(HipiHomePage.objUserName,"Creator User Handle");
	waitTime(2000);
	if(verifyElementExist(HipiFeedPage.objFollowCount,"Follow count")) {
		flag = true;
	}
	
	if(flag) {
		logger.info("user should be able to navigate to creator profile on tapping creator thumbnail/creator handle");	
		extent.extentLoggerPass("", "user should be able to navigate to creator profile on tapping creator thumbnail/creator handle");	
	}
	else {
		
		logger.info("user should be able to navigate to creator profile on tapping creator thumbnail/creator handle");	
		extent.extentLoggerFail("", "user should be able to navigate to creator profile on tapping creator thumbnail/creator handle");	
		
	}
}

public void postRecording15s_T3067(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3067 - Verify the 'Share' popup on the feed screen after posting the 15s video successfully.");
	System.out.println("T3067");
	extent.extentLogger(" ", "T3067");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,25);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 15s video.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 15s video.");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 15s video.");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 15s video.");	
	}
	navigateToHomePage();
	}
	
	}

public void postRecording30s_T3068(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3068 - Verify the 'Share' popup on the feed screen after posting the 30s video successfully.");
	System.out.println("T3068");
	extent.extentLogger(" ", "T3068");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.obj30sec,"30 sec record option");
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,35);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,25);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 30s video.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 30s video.");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 30s video.");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 30s video.");	
	}
	navigateToHomePage();
	}
	
	}

public void postRecording45s_T3069(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3069 - Verify the 'Share' popup on the feed screen after posting the 45s video successfully.");
	System.out.println("T3069");
	extent.extentLogger(" ", "T3069");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.obj45sec,"45 sec record option");
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,50);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,30);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 45s video.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 45s video.");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 45s video.");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 45s video.");	
	}
	navigateToHomePage();
	}
	
	}

public void postRecording60s_T3070(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3070 - Verify the 'Share' popup on the feed screen after posting the 60s video successfully.");
	System.out.println("T3070");
	extent.extentLogger(" ", "T3070");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.obj60sec,"60 sec record option");
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,65);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,30);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 60s video.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 60s video.");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 60s video.");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 60s video.");	
	}
	navigateToHomePage();
	}
	
	}
	
public void postRecording90s_T3071(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3071 - Verify the 'Share' popup on the feed screen after posting the 90s video successfully.");
	System.out.println("T3071");
	extent.extentLogger(" ", "T3071");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.obj90sec,"90 sec record option");
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,95);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,35);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 90s video.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 90s video.");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 90s video.");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed\r\n"
				+ " screen after successfully posted the 90s video.");	
	}
	navigateToHomePage();
	}
	
	}

public void soundRecordingSharePopup_T3072(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3072 - Verify the 'Share' popup on the feed screen after posting the 90s video successfully.");
	System.out.println("T3072");
	extent.extentLogger(" ", "T3072");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objSelectedMusic, "Sound Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrandingOnHipi, 20);
	verifyElementPresentAndClick(HipiCreateVideoPage.objTrandingOnHipi,"Trending Music");
	waitTime(3000);				
	verifyElementPresentAndClick(HipiCreateVideoPage.objSoundsAnySound,"AnySound");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTrimSong,10);
	verifyElementPresent(HipiCreateVideoPage.objTrimSong, "Music Screen Header");
	click(HipiCreateVideoPage.objMusicScreenTickIcon, "Tick Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objrecordbtn,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,35);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video recorded using sound.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed screen for the video recorded using sound..");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video recorded using sound.");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed screen for the video recorded using sound..");	
	}
	navigateToHomePage();
	}
	
	}

public void effectRecordingSharePopup_T3073(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3073 - Verify the 'Share' popup on the feed screen for the video which is created using any Effect.");
	System.out.println("T3073");
	extent.extentLogger(" ", "T3073");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objEffectIcon, "Effects Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEffectsFirstEffect, 20);
	verifyElementPresentAndClick(HipiCreateVideoPage.objEffectsFirstEffect,"First effect");
	Back(1);
	waitUntilElementDisplayed(HipiCreateVideoPage.objrecordbtn,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,35);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video recorded using any effect");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed screen for the video recorded using any effect");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video recorded using any effect");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed screen for the video recorded using any effect");	
	}
	navigateToHomePage();
	}
	
	}

public void filterRecordingSharePopup_T3074(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3074 - Verify the 'Share' popup on the feed screen for the video which is created using any filter.");
	System.out.println("T3074");
	extent.extentLogger(" ", "T3074");
	
	navigateToCreatorScreen();
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objFilterOption, "Filters Icon");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEffectsFirstEffect, 20);
	verifyElementPresentAndClick(HipiCreateVideoPage.objEffectsFirstEffect,"First filter");
	Back(1);
	waitUntilElementDisplayed(HipiCreateVideoPage.objrecordbtn,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,35);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video recorded using any filter");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed screen for the video recorded using any filter");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video recorded using any filter");	
		extent.extentLoggerFail("", "Share' popup should be displayed on the top of the Feed screen for the video recorded using any filter");	
	}
	navigateToHomePage();
	}
	
	}

public void videoUploadedSharePopup_T3075(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3075 - Verify the 'Share' popup on the feed screen for the video which is uploaded from the gallery.");
	System.out.println("T3075");
	extent.extentLogger(" ", "T3075");
	
	
	navigateToGallery();
	verifyElementPresentAndClick(HipiCreateVideoPage.objGalleryVideos(1), "Gallery Videos/Gallery Images");
	click(HipiCreateVideoPage.objEditClipAddMedia,"Add media button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objFineshButtonEditScreen,20);
	click(HipiCreateVideoPage.objFineshButtonEditScreen,"Finish trim tick button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,35);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video uploaded from the gallery.");	
		extent.extentLoggerPass("", "Share' popup should be displayed on the top of the Feed screen for the video uploaded from the gallery.");	
	}
	
	else {
		logger.info("Share' popup should be displayed on the top of the Feed screen for the video uploaded from the gallery.");	
	}
	navigateToHomePage();
	}
	
	}

public void saveDraftSharePopup_T3076(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3076 - Verify the 'Share' popup on the feed screen for the video 'Draft' videos.");
	System.out.println("T3076");
	extent.extentLogger(" ", "T3076");
	
	navigateToCreatorScreen();
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objrecordbtn,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objsavedraft,"Save as draft button");
	
	waitTime(4000);
	
	if(verifyElementNotExist(HipiCreateVideoPage.objShareableApps)) {
		logger.info("Share' popup should not be displayed on the top of the Feed screen for the drafted videos.");	
		extent.extentLoggerPass("", "Share' popup should not be displayed on the top of the Feed screen for the drafted videos.");	
	}
	
	else {
		logger.info("Share' popup should not be displayed on the top of the Feed screen for the drafted videos.");	
		extent.extentLoggerFail("", "Share' popup should not be displayed on the top of the Feed screen for the drafted videos.");	
	}
	navigateToHomePage();
	}
	
	}

public void sharePopupProfileScreen_T3078(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3078 - Verify the share options displayed on the popup on My Profile screen.");
	System.out.println("T3078");
	extent.extentLogger(" ", "T3078");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,40);
	Back(1);
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objFirstPublishedVideo,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstPublishedVideo, "First published video");
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessageProfile,90);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Share' options: Copylink, Whatsapp, Instagram, Facebook,Twitter, Messenger, SMS should be displayed on the popup in Profile.");	
		extent.extentLoggerPass("", "Share' options: Copylink, Whatsapp, Instagram, Facebook,Twitter, Messenger, SMS should be displayed on the popup in Profile.");	
	}
	
	else {
		logger.info("Share' options: Copylink, Whatsapp, Instagram, Facebook,Twitter, Messenger, SMS should be displayed on the popup in Profile.");	
		extent.extentLoggerFail("", "Share' options: Copylink, Whatsapp, Instagram, Facebook,Twitter, Messenger, SMS should be displayed on the popup in Profile.");	
	}
	navigateToHomePage();
	}
	
	}

public void selectCoverUI_T3130(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3130 - Check UI of Select Cover Image for the next video");
	System.out.println("T3130");
	extent.extentLogger(" ", "T3130");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverTxt,"Select cover text") && verifyElementExist(HipiCreateVideoPage.objRectangularWindow,"Rectangular window")) {
		logger.info("The user should able to see the following details in Post screen\r\n"
				+ " 1. Rectangle shape the video thumbnail and Select Cover text");	
		extent.extentLoggerPass("", "The user should able to see the following details in Post screen\r\n"
				+ " 1. Rectangle shape the video thumbnail and Select Cover text");	
	}
	
	else {
		logger.info("The user should able to see the following details in Post screen\r\n"
				+ " 1. Rectangle shape the video thumbnail and Select Cover text");	
		extent.extentLoggerFail("", "The user should able to see the following details in Post screen\r\n"
				+ " 1. Rectangle shape the video thumbnail and Select Cover text");	
	}
	
	}
	discardPopup();
	}

public void selectCoverNavigation_T3132(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3132 - Verify the navigation upon tapping the \"Select Cover\" option.");
	System.out.println("T3132");
	extent.extentLogger(" ", "T3132");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	click(HipiCreateVideoPage.objSelectCoverTxt,"Select cover");
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverPage,20);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverPage,"Select cover page")) {
		logger.info("User should be navigated to select cover image screen.t");	
		extent.extentLoggerPass("", "User should be navigated to select cover image screen.");	
	}
	
	else {
		logger.info("User should be navigated to select cover image screen.");	
		extent.extentLoggerFail("", "User should be navigated to select cover image screen.");	
	}
	
	}
	discardPopup();
	}

public void selectCoverValidation_T3133(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3133 - Check UI of Cover Image");
	System.out.println("T3133");
	extent.extentLogger(" ", "T3133");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	click(HipiCreateVideoPage.objSelectCoverTxt,"Select cover");
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverPage,20);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverPage,"Select cover page") && verifyElementExist(HipiCreateVideoPage.objCrossIconSelectCover,"Select cover cross icon") && verifyElementExist(HipiCreateVideoPage.objDoneCtaBtn,"Select cover done cta") && verifyElementExist(HipiCreateVideoPage.objVideoThumbnails,"Select cover video thumbnails")) {
		logger.info("The user should able to see the following details\r\n"
				+ " 1. Cross icon\r\n"
				+ " 2. Done cta with Read color\r\n"
				+ " 3. Full video thumbnails and the Text \"Slide to choose cover image \"should be displayed under the thumbnail.");	
		extent.extentLoggerPass("", "The user should able to see the following details\r\n"
				+ " 1. Cross icon\r\n"
				+ " 2. Done cta with Read color\r\n"
				+ " 3. Full video thumbnails and the Text \"Slide to choose cover image \"should be displayed under the thumbnail.");	
	}
	
	else {
		logger.info("The user should able to see the following details\r\n"
				+ " 1. Cross icon\r\n"
				+ " 2. Done cta with Read color\r\n"
				+ " 3. Full video thumbnails and the Text \"Slide to choose cover image \"should be displayed under the thumbnail.");	
		extent.extentLoggerFail("", "The user should able to see the following details\r\n"
				+ " 1. Cross icon\r\n"
				+ " 2. Done cta with Read color\r\n"
				+ " 3. Full video thumbnails and the Text \"Slide to choose cover image \"should be displayed under the thumbnail.");	
	}
	
	}
	discardPopup();
	}

public void selectCoverSlider_T3134(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3134 -Check user would able to see a frame slider at the bottom to choose the frame for the cover image");
	System.out.println("T3134");
	extent.extentLogger(" ", "T3134");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	click(HipiCreateVideoPage.objSelectCoverTxt,"Select cover");
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverPage,20);
	swipeRail(HipiCreateVideoPage.objSelectCoverSlider,"RIGHT",4);
	swipeRail(HipiCreateVideoPage.objSelectCoverSlider,"Left",2);
	if(verifyElementExist(HipiCreateVideoPage.objRectangularWindow,"Select cover enlarged") ) {
		logger.info("Users should able to see the selected cover image is to be shown in an enlarged form");	
		extent.extentLoggerPass("", "Users should able to see the selected cover image is to be shown in an enlarged form");	
	}
	
	else {
		logger.info("Users should able to see the selected cover image is to be shown in an enlarged form");	
		extent.extentLoggerFail("", "Users should able to see the selected cover image is to be shown in an enlarged form");	
	}
	
	}
	discardPopup();
	}

public void coverImageUpdate_T3137(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3137 -Verify the navigation upon tapping the \"Done\" CTA from the select cover image screen.");
	System.out.println("T3137");
	extent.extentLogger(" ", "T3137");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	click(HipiCreateVideoPage.objSelectCoverTxt,"Select cover");
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverPage,20);
	swipeRail(HipiCreateVideoPage.objVideoThumbnails,"RIGHT",2);
	click(HipiCreateVideoPage.objDoneCtaBtn,"Done CTA button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	String coverImageTxt = getText(HipiCreateVideoPage.objToastMsg);
	System.out.println(coverImageTxt);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverTxt,"Post Screen") && coverImageTxt.contains("Cover uploaded") ) {
		logger.info("Upon tapping \"Done\" CTA user should be navigated to video post screen and selected cover image should be updated.");	
		extent.extentLoggerPass("", "Upon tapping \"Done\" CTA user should be navigated to video post screen and selected cover image should be updated.");	
	}
	
	else {
		logger.info("Upon tapping \"Done\" CTA user should be navigated to video post screen and selected cover image should be updated.");	
		extent.extentLoggerFail("", "Upon tapping \"Done\" CTA user should be navigated to video post screen and selected cover image should be updated.");	
	}
	
	}
	discardPopup();
	}

public void postScreenBackNavigation_T3138(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3138 -Check user should navigate back to the Post Video Screen. at any time by tapping on the back button on the Select Cover Screen");
	System.out.println("T3138");
	extent.extentLogger(" ", "T3138");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	click(HipiCreateVideoPage.objSelectCoverTxt,"Select cover");
	Back(1);
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverTxt,"Post Screen") ) {
		logger.info("User should navigates back to the Post Video Screen.");	
		extent.extentLoggerPass("", "User should navigates back to the Post Video Screen.");	
	}
	
	else {
		logger.info("User should navigates back to the Post Video Screen.");	
		extent.extentLoggerFail("", "User should navigates back to the Post Video Screen.");	
	}
	
	}
	discardPopup();
	}

public void shareSelectCover_T3139(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3139 -Verify the \"Select Cover\" image option displayed for \"Duet\" video.");
	System.out.println("T3139");
	extent.extentLogger(" ", "T3139");
	
	verifyElementPresentAndClick(HipiHomePage.objHomescreenShareIcon,"Home page share icon");
	verifyElementPresentAndClick(HipiHomePage.objDuet,"Duet button");
	waitTime(2000);
	allowPermissions();
	waitTime(8000);
	waitUntilElementDisplayed(HipiCreateVideoPage.objrecordbtn,25);
	
	click(HipiCreateVideoPage.objrecordbtn,"Record Button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objTickMark,10);
	click(HipiCreateVideoPage.objTickMark,"Tick Button");

	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,17);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverTxt,"Post Screen") ) {
		logger.info("\"Select cover\" option should be displayed for the duet video.");	
		extent.extentLoggerPass("", "\"Select cover\" option should be displayed for the duet video.");	
	}
	
	else {
		logger.info("\"Select cover\" option should be displayed for the duet video.");	
		extent.extentLoggerFail("", "\"Select cover\" option should be displayed for the duet video.");	
	}
	
	}
	discardPopup();
	}


public void draftVideoSelectCover_T3140(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3140 -Verify the \"Select Cover\" image option displayed for \"Drafted\" video.");
	System.out.println("T3140");
	extent.extentLogger(" ", "T3140");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objDraftSection,10);
	click(HipiProfilePage.objDraftSection,"Draft Videos/Images");
	waitUntilElementDisplayed(HipiProfilePage.objDraftFirstVideoProfile,10);
	click(HipiProfilePage.objDraftFirstVideoProfile,"First draft video");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objSelectCoverTxt,20);
	if(verifyElementExist(HipiCreateVideoPage.objSelectCoverTxt,"Select cover") ) {
		logger.info("\"Select cover\" option should be displayed for the draft video.");	
		extent.extentLoggerPass("", "\"Select cover\" option should be displayed for the draft video.");	
	}
	
	else {
		logger.info("\"Select cover\" option should be displayed for the draft video.");	
		extent.extentLoggerFail("", "\"Select cover\" option should be displayed for the draft video.");	
	}
	
	}
	navigateToHomePage();
	}

public void instaButtonProfile_T2549(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2549 -Check instagram button is visible in \"Edit Profile \" under social category.");
	System.out.println("T2549");
	extent.extentLogger(" ", "T2549");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	if(verifyElementExist(HipiProfilePage.objInstaLinkOption,"Instagram social link option") ) {
		logger.info("Post successful login of \"HiPi\" app by tapping profile tab user should option to link Instagram profile on Edit Profile screen under Social section.");	
		extent.extentLoggerPass("", "Post successful login of \"HiPi\" app by tapping profile tab user should option to link Instagram profile on Edit Profile screen under Social section.");	
	}
	
	else {
		logger.info("Post successful login of \"HiPi\" app by tapping profile tab user should option to link Instagram profile on Edit Profile screen under Social section.");	
		extent.extentLoggerFail("", "Post successful login of \"HiPi\" app by tapping profile tab user should option to link Instagram profile on Edit Profile screen under Social section.");	
	}
	
	}
	navigateToHomePage();
	}


public void instaValueLinkOptionProfile_T2550(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2550 -Verify the text and the left arrow mark displayed next to instagram option in \"Edit Profile\" screen.");
	System.out.println("T2550");
	extent.extentLogger(" ", "T2550");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	if(verifyElementExist(HipiProfilePage.objInstaVal,"Instagram social link value") ) {
		logger.info("The text: \"Add Instagram to your profile\" and the left arrow mark should be displayed next to 'Instagram' option in 'Edit Profile' screen.");	
		extent.extentLoggerPass("", "The text: \"Add Instagram to your profile\" and the left arrow mark should be displayed next to 'Instagram' option in 'Edit Profile' screen.");	
	}
	
	else {
		logger.info("The text: \"Add Instagram to your profile\" and the left arrow mark should be displayed next to 'Instagram' option in 'Edit Profile' screen.");	
		extent.extentLoggerFail("", "The text: \"Add Instagram to your profile\" and the left arrow mark should be displayed next to 'Instagram' option in 'Edit Profile' screen.");	
	}
	
	}
	navigateToHomePage();
	}

public void instaScreenProfile_T2551(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2551 -Verify the navigation upon tapping left arrow mark displayed for Instagram option.");
	System.out.println("T2551");
	extent.extentLogger(" ", "T2551");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	if(verifyElementExist(HipiProfilePage.objInstaScreen,"Instagram Profile screen") ) {
		logger.info("User should be navigated to \"Instagram Profile\" sceen.");	
		extent.extentLoggerPass("", "User should be navigated to \"Instagram Profile\" sceen.");	
	}
	
	else {
		logger.info("User should be navigated to \"Instagram Profile\" sceen.");	
		extent.extentLoggerFail("", "User should be navigated to \"Instagram Profile\" sceen.");	
	}
	
	}
	navigateToHomePage();
	}

public void instaHandleCreationProfile_T2552(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2552 -Check user can able to enter the Instagram user name in 'Instagram Profile' screen.");
	System.out.println("T2552");
	extent.extentLogger(" ", "T2552");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objInstaVal,10);
	}
	
	
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	click(HipiProfilePage.objUserTextFieldInName,"Insta user text field");
	type(HipiProfilePage.objUserTextFieldInName,generateRandomString(30),"Instagram user name text field");
	click(HipiProfilePage.objSaveButton,"Instagram profile save button");
	waitUntilElementDisplayed(HipiSettingsPage.objPasswordPromptMessage,10);
	String instaHandleLinkedTxt = getText(HipiSettingsPage.objPasswordPromptMessage);
	System.out.println(instaHandleLinkedTxt);
	if(instaHandleLinkedTxt.equals("Instagram profile linked successfully"))  {
		logger.info("User should navigate back to the profile screen with the toast message \"Instagram profile linked successfully\"");	
		extent.extentLoggerPass("", "User should navigate back to the profile screen with the toast message \"Instagram profile linked successfully\"");	
	}
	
	else {
		logger.info("User should navigate back to the profile screen with the toast message \"Instagram profile linked successfully\"");	
		extent.extentLoggerFail("", "User should navigate back to the profile screen with the toast message \"Instagram profile linked successfully\"");	
	}
	
	}
	navigateToHomePage();
	}

public void instaHandleCreationInternetOffProfile_T2553(String userType) throws Exception {
	String internetOffToast="";
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2553 -Check whether user getting a toast message post tapping on instgram button without internet connection");
	System.out.println("T2553");
	extent.extentLogger(" ", "T2553");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	setWifiConnectionToONOFF("OFF");
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiSettingsPage.objPasswordPromptMessage,10);
		internetOffToast = getText(HipiSettingsPage.objPasswordPromptMessage);
		System.out.println(internetOffToast);
	}
	else {
		click(HipiProfilePage.objUserTextFieldInName,"Insta user text field");
		type(HipiProfilePage.objUserTextFieldInName,generateRandomString(5),"Instagram user name text field");
		click(HipiProfilePage.objSaveButton,"Instagram profile save button");
		internetOffToast = getText(HipiCreateVideoPage.objToastMsg);
		System.out.println(internetOffToast);
	}
	
	if(internetOffToast.equals("Network Not Available") || internetOffToast.equals("Network Error"))  {
		logger.info("User should get an nertwork error toast message as there is no internet connection when user taps on instagram button");	
		extent.extentLoggerPass("", "User should get an nertwork error toast message as there is no internet connection when user taps on instagram button");	
	}
	
	else {
		logger.info("User should get an nertwork error toast message as there is no internet connection when user taps on instagram button");	
		extent.extentLoggerFail("", "User should get an nertwork error toast message as there is no internet connection when user taps on instagram button");	
	}
	
	}
	setWifiConnectionToONOFF("ON");
	navigateToHomePage();
	}

public void instaHandleMoreThan30CharsProfile_T2555(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2555 -Verify user cannot able to enter more than 30 characters in 'Instagram profile' screen.");
	System.out.println("T2555");
	extent.extentLogger(" ", "T2555");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objInstaVal,10);
		click(HipiProfilePage.objInstaVal,"Instagram value option");
	}
	
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	String greaterThan30Chars = generateRandomString(40);
	click(HipiProfilePage.objUserTextFieldInName,"Insta user text field");
	type(HipiProfilePage.objUserTextFieldInName,greaterThan30Chars,"Instagram user name text field");
	String instaUserHandleText = getText(HipiProfilePage.objUserTextFieldInName);
	System.out.println(instaUserHandleText);
	if(instaUserHandleText.length()<=30 || !(instaUserHandleText.equals(greaterThan30Chars)))  {
		logger.info("User should not be allowed to enter more than 30 characters.");	
		extent.extentLoggerPass("", "User should not be allowed to enter more than 30 characters.");	
	}
	
	else {
		logger.info("User should not be allowed to enter more than 30 characters.");	
		extent.extentLoggerFail("", "User should not be allowed to enter more than 30 characters.");	
	}
	
	}
	navigateToHomePage();
	}

public void instaHandleSpecialCharsProfile_T2556(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2556 -Verify user can able to enter only letters, numbers, underscores and periods.");
	System.out.println("T2556");
	extent.extentLogger(" ", "T2556");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objInstaVal,10);
	}
	
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	String specialCharsTxt = "&^#*(!@";
	click(HipiProfilePage.objUserTextFieldInName,"Insta user text field");
	type(HipiProfilePage.objUserTextFieldInName,specialCharsTxt,"Instagram user name text field");
	String instaUserHandleText = getText(HipiProfilePage.objUserTextFieldInName);
	System.out.println(instaUserHandleText);
	System.out.println(specialCharsTxt);
	if( !(instaUserHandleText.equals(specialCharsTxt)) && instaUserHandleText.equals("Enter your Instagram Username") )  {
		logger.info("User should be allowed to enter only letters, numbers, underscores and periods.");	
		extent.extentLoggerPass("", "User should be allowed to enter only letters, numbers, underscores and periods.");	
	}
	
	else {
		logger.info("User should be allowed to enter only letters, numbers, underscores and periods.");	
		extent.extentLoggerFail("", "User should be allowed to enter only letters, numbers, underscores and periods.");	
	}
	
	}
	navigateToHomePage();
	}

public void instaUserCancelProfile_T2559(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2559 -Verify the navigation upon tapping on 'Cancel' button in 'Instagram Profile' screen");
	System.out.println("T2559");
	extent.extentLogger(" ", "T2559");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	click(HipiProfilePage.objCancelBtn,"Cancel button");
	if(verifyElementExist(HipiProfilePage.objFindFriendsScreen,"Edit profile screen") ) {
		logger.info("User should navigate back to the profile screen.");	
		extent.extentLoggerPass("", "User should navigate back to the profile screen.");	
	}
	
	else {
		logger.info("User should navigate back to the profile screen.");	
		extent.extentLoggerFail("", "User should navigate back to the profile screen.");	
	}
	
	}
	navigateToHomePage();
	}

public void delinkInstaOptionProfile_T2560(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2560 -Check delink option is available or not in \"Edit\" profile");
	System.out.println("T2560");
	extent.extentLogger(" ", "T2560");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		flag = true;
	}
	
	else {
	waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
	click(HipiProfilePage.objUserTextFieldInName,"Insta user text field");
	
	type(HipiProfilePage.objUserTextFieldInName,generateRandomString(5),"Instagram user name text field");}
	click(HipiProfilePage.objSaveButton,"Save button");
	waitUntilElementDisplayed(HipiProfilePage.objInstaVal,10);
	click(HipiProfilePage.objInstaVal,"Instagram value option");
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		flag = true;}}
	if(flag)  {
		logger.info("User should see the delink option in \"Edit\" profile screen");	
		extent.extentLoggerPass("", "User should see the delink option in \"Edit\" profile screen");	
	}
	
	else {
		logger.info("User should see the delink option in \"Edit\" profile screen");	
		extent.extentLoggerFail("", "User should see the delink option in \"Edit\" profile screen");	
	}
	navigateToHomePage();
	}

public void instaButtonProfile_T2562(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2562 -Verify instagram option next to 'Messages' button on other users profile screen.");
	System.out.println("T2562");
	extent.extentLogger(" ", "T2562");
	
	
		for(int i =0;i<5;i++) {
			
			click(HipiHomePage.objDescription,"User handle");
			waitUntilElementDisplayed(HipiProfilePage.objProfileHeader,10);
			if(verifyElementExist(HipiProfilePage.objInstaBtn,"Instagram Button")) {
				flag = true;
				break;
			}
			Back(1);
			Swipe("UP",1);
		}
	
	if(flag) {
		logger.info("User should see insagram button next to \"Message\" button in 'Profile' screen.");	
		extent.extentLoggerPass("", "User should see insagram button next to \"Message\" button in 'Profile' screen.");	
	}
	
	else {
		logger.info("User should see insagram button next to \"Message\" button in 'Profile' screen.");	
		extent.extentLoggerFail("", "User should see insagram button next to \"Message\" button in 'Profile' screen.");	
	}
	

	navigateToHomePage();
	
	}
}

public void delinkValidationProfile_T2565(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2565 -Check instagram button is visible to other user or not when its been delinked");
	System.out.println("T2565");
	extent.extentLogger(" ", "T2565");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	if(verifyElementExist(HipiProfilePage.objInstaBtn,"Instagram Button")) {
		click(HipiProfilePage.objInstaVal,"Instagram value option");
		waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		waitUntilElementDisplayed(HipiProfilePage.objDelinkConfirmBtn,10);
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objInstaVal,10);
		if(verifyElementNotExist(HipiProfilePage.objInstaBtn) && getText(HipiProfilePage.objInstaVal).equals("Add Instagram to your profile")) {
			flag = true;
		}
	}
	
	else {
		if(verifyElementNotExist(HipiProfilePage.objInstaBtn) && getText(HipiProfilePage.objInstaVal).equals("Add Instagram to your profile")) {
			flag = true;
		}
		System.out.println("User has not linked their instagram account");
	}
	
	if(flag)  {
		logger.info("User should not see the instagram button in \"Profile\" page when itse been delinked");	
		extent.extentLoggerPass("", "User should not see the instagram button in \"Profile\" page when itse been delinked");	
	}
	
	else {
		logger.info("User should not see the instagram button in \"Profile\" page when itse been delinked");	
		extent.extentLoggerFail("", "User should not see the instagram button in \"Profile\" page when itse been delinked");	
	}
	navigateToHomePage();
	}
}

public void delinkValidationNoInternetProfile_T2566(String userType) throws Exception {
	Boolean flag = false;
	String internetErrorTxt="";
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2566 -Check whether confirmation popup gets displayed post tapping on delink option without internet connection");
	System.out.println("T2566");
	extent.extentLogger(" ", "T2566");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	if(verifyElementExist(HipiProfilePage.objInstaBtn,"Instagram Button")) {
		setWifiConnectionToONOFF("OFF");
		click(HipiProfilePage.objInstaVal,"Instagram value option");
		waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		waitUntilElementDisplayed(HipiProfilePage.objDelinkConfirmBtn,10);
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiSettingsPage.objPasswordPromptMessage,10);
		internetErrorTxt = getText(HipiSettingsPage.objPasswordPromptMessage);
		if(internetErrorTxt.equals("Network Not Available")) {
			flag = true;
		}
	}
	
	else {
		click(HipiProfilePage.objInstaVal,"Instagram value option");
		waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
		click(HipiProfilePage.objUserTextFieldInName,"Insta user text field");
		type(HipiProfilePage.objUserTextFieldInName,generateRandomString(6),"Instagram user name text field");
		click(HipiProfilePage.objSaveButton,"Save button");
		waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,10);
		setWifiConnectionToONOFF("OFF");
		click(HipiProfilePage.objInstaVal,"Instagram value option");
		waitUntilElementDisplayed(HipiProfilePage.objInstaScreen,10);
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		waitUntilElementDisplayed(HipiProfilePage.objDelinkConfirmBtn,10);
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiSettingsPage.objPasswordPromptMessage,10);
		internetErrorTxt = getText(HipiSettingsPage.objPasswordPromptMessage);
		if(internetErrorTxt.equals("Network Not Available")) {
			flag = true;
		}
	}
	
	if(flag)  {
		logger.info("User should get an no internet connection popup post tapping on delink option from \" Edit Profile \"screen");	
		extent.extentLoggerPass("", "User should get an no internet connection popup post tapping on delink option from \" Edit Profile \"screen");	
	}
	
	else {
		logger.info("User should get an no internet connection popup post tapping on delink option from \" Edit Profile \"screen");	
		extent.extentLoggerFail("", "User should get an no internet connection popup post tapping on delink option from \" Edit Profile \"screen");	
	}
	setWifiConnectionToONOFF("ON");
	navigateToHomePage();
	}
}

public void notificationsValidation_T2577(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2577 -User should redirected to notifications screen post tapping on notification bell icon");
	System.out.println("T2577");
	extent.extentLogger(" ", "T2577");
	
	click(HipiNotificationPage.objNotificationBtn,"Notification Btn");
	waitUntilElementDisplayed(HipiNotificationPage.objNotificationPage,10);
	
	if(verifyElementExist(HipiNotificationPage.objNotificationPage,"Notification page"))  {
		logger.info("User should redirected to notifications screen post tapping on notification bell icon");	
		extent.extentLoggerPass("", "User should redirected to notifications screen post tapping on notification bell icon");	
	}
	
	else {
		logger.info("User should redirected to notifications screen post tapping on notification bell icon");	
		extent.extentLoggerFail("", "User should redirected to notifications screen post tapping on notification bell icon");	
	}
	navigateToHomePage();
}
}

public void readMessages_T2578(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2578 -Check if user is able to read the messages in the notification screen");
	System.out.println("T2578");
	extent.extentLogger(" ", "T2578");
	
	click(HipiNotificationPage.objNotificationBtn,"Notification Btn");
	waitUntilElementDisplayed(HipiNotificationPage.objNotificationPage,10);
	click(HipiNotificationPage.objMessagesTab,"Messages Tab");
	waitUntilElementDisplayed(HipiNotificationPage.objMessages,10);
	if(verifyElementExist(HipiNotificationPage.objMessages,"User's messages"))  {
		logger.info("User should able to read the messages in the notification screen");	
		extent.extentLoggerPass("", "User should able to read the messages in the notification screen");	
	}
	
	else {
		logger.info("User should able to read the messages in the notification screen");	
		extent.extentLoggerFail("", "User should able to read the messages in the notification screen");	
	}
	navigateToHomePage();
}
}

public void readNotifications_T2580(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2580 -Check whether the count of notification is zero once read all the notifications");
	System.out.println("T2580");
	extent.extentLogger(" ", "T2580");
	
	click(HipiNotificationPage.objNotificationBtn,"Notification Btn");
	waitUntilElementDisplayed(HipiNotificationPage.objNotificationPage,10);
	Back(1);
	waitTime(2000);
	if(verifyElementNotExist(HipiNotificationPage.objUnreadNotification))  {
		logger.info("The count of notification should zero once read all the notifications");	
		extent.extentLoggerPass("", "The count of notification should zero once read all the notifications");	
	}
	
	else {
		logger.info("The count of notification should zero once read all the notifications");	
		extent.extentLoggerFail("", "The count of notification should zero once read all the notifications");	
	}
	navigateToHomePage();
}
}

public void playlistPopupBackNavigation_T2959(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2959 -Verify the playlist popup upon tapping device back button.");
	System.out.println("T2959");
	extent.extentLogger(" ", "T2959");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);
	Back(1);
	waitTime(2000);
	if(verifyElementNotExist(HipiDiscoverPage.objPlaylistPopup)) {
		logger.info("Playlist popup should be closed upon tapping device back button.");	
		extent.extentLoggerPass("", "Playlist popup should be closed upon tapping device back button.");	
	}
	else {
		logger.info("Playlist popup should be closed upon tapping device back button.");	
		extent.extentLoggerFail("", "Playlist popup should be closed upon tapping device back button.");	
	}
	navigateToHomePage();
	}
}

public void playlistTitle_T2973(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2973 -Verify the title of the playlist in the playlist screen.");
	System.out.println("T2973");
	extent.extentLogger(" ", "T2973");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylistTitle,"Playlist title")) {
		logger.info("Title should be displayed on the playlist screen.");	
		extent.extentLoggerPass("", "Title should be displayed on the playlist screen.");	
	}
	else {
		logger.info("Title should be displayed on the playlist screen.");	
		extent.extentLoggerFail("", "Title should be displayed on the playlist screen.");	
	}
	navigateToHomePage();
	}
}

public void firstVideoPlaylist_T2974(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2974 -Verify the first video playback on tapping the playlist option.");
	System.out.println("T2974");
	extent.extentLogger(" ", "T2974");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylistTitle,"Playlist title")) {
		logger.info("First video should be played from the playlist popup.");	
		extent.extentLoggerPass("", "First video should be played from the playlist popup.");	
	}
	else {
		logger.info("First video should be played from the playlist popup.");	
		extent.extentLoggerFail("", "First video should be played from the playlist popup.");	
	}
	navigateToHomePage();
	}
}

public void videoThumbnailPlaylist_T2975(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2975 -Verify the thumbnail of the video for the videos displayed in the playlist");
	System.out.println("T2975");
	extent.extentLogger(" ", "T2975");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylistThumbnail,"Playlist video thumbnail")) {
		logger.info("Video thumbnail should be displayed in the playlist screen.");	
		extent.extentLoggerPass("", "Video thumbnail should be displayed in the playlist screen.");	
	}
	else {
		logger.info("Video thumbnail should be displayed in the playlist screen.");	
		extent.extentLoggerFail("", "Video thumbnail should be displayed in the playlist screen.");	
	}
	navigateToHomePage();
	}
}

public void videoDescriptionPlaylist_T2976(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2976 -Verify the description is displayed next to the video thumbnail in playlist popup screen.");
	System.out.println("T2976");
	extent.extentLogger(" ", "T2976");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylistVideoDesc,"Playlist video description")) {
		logger.info("Video description should be displayed next to the video thumbnail in playlist popup screen.");	
		extent.extentLoggerPass("", "Video description should be displayed next to the video thumbnail in playlist popup screen.");	
	}
	else {
		logger.info("Video description should be displayed next to the video thumbnail in playlist popup screen.");	
		extent.extentLoggerFail("", "Video description should be displayed next to the video thumbnail in playlist popup screen.");	
	}
	navigateToHomePage();
	}
}

public void videoVideosPlaylist_T2977(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2977 -Verify the video view count is displayed below the descriptio in playlist popup screen.");
	System.out.println("T2977");
	extent.extentLogger(" ", "T2977");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylisVideoViewCount,"Playlist video view count")) {
		logger.info("Video view count shaould be displayed below the description in playlist popup screen.");	
		extent.extentLoggerPass("", "Video view count shaould be displayed below the description in playlist popup screen.");	
	}
	else {
		logger.info("Video view count shaould be displayed below the description in playlist popup screen.");	
		extent.extentLoggerFail("", "Video view count shaould be displayed below the description in playlist popup screen.");	
	}
	navigateToHomePage();
	}
}

public void playlistNamePlaylistTitle_T2979(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2979 -Verify the title of the playlist popup.");
	System.out.println("T2979");
	extent.extentLogger(" ", "T2979");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	String playlistTitleUserPage = getText(HipiDiscoverPage.objPlaylistOption);
	System.out.println(playlistTitleUserPage);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);
	String playlistTitlePlaylistPopup = getText(HipiDiscoverPage.objPlaylistTitle);
	System.out.println(playlistTitlePlaylistPopup);
	if(playlistTitleUserPage.equals(playlistTitlePlaylistPopup)) {
		logger.info("Playlist name should be the title of the playlist popup.");	
		extent.extentLoggerPass("", "Playlist name should be the title of the playlist popup.");	
	}
	else {
		logger.info("Playlist name should be the title of the playlist popup.");	
		extent.extentLoggerFail("", "Playlist name should be the title of the playlist popup.");	
	}
	navigateToHomePage();
	}
}

public void anyVideoClickPlaylist_T2980(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2980 -Verify user can able to click on any video displayed on the playlist popup.");
	System.out.println("T2980");
	extent.extentLogger(" ", "T2980");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	for(int i =0;i<3;i++) {
		click(HipiDiscoverPage.objPlaylistThumbnail,"Playlist video");
		if(verifyElementExist(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon")) {
			flag = true;
		}
		click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
		waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistThumbnail,10);
		Swipe("UP",1);
	}
	if(flag) {
		logger.info("User should be able to click on any video displayed in the playlist popup screen.");	
		extent.extentLoggerPass("", "User should be able to click on any video displayed in the playlist popup screen.");	
	}
	else {
		logger.info("User should be able to click on any video displayed in the playlist popup screen.");	
		extent.extentLoggerFail("", "User should be able to click on any video displayed in the playlist popup screen.");	
	}
	navigateToHomePage();
	}
}

public void shareButtonPlaylist_T2981(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2981 -Verify the availability of the 'Share' option displayed on the playlist popup screen.");
	System.out.println("T2981");
	extent.extentLogger(" ", "T2981");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylistShareBtn,"Playlist share option")) {
		logger.info("Share' option should be displayed on the playlist popup.");	
		extent.extentLoggerPass("", "Share' option should be displayed on the playlist popup.");	
	}
	else {
		logger.info("Share' option should be displayed on the playlist popup.");	
		extent.extentLoggerFail("", "Share' option should be displayed on the playlist popup.");	
	}
	navigateToHomePage();
	}
}

public void sharePopupPlaylist_T2982(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2982 -Verify the functionality of the share icon on the playlist popup.");
	System.out.println("T2982");
	extent.extentLogger(" ", "T2982");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);
	click(HipiDiscoverPage.objPlaylistShareBtn,"Playlist share button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareableApps,10);
	
	if(verifyElementExist(HipiCreateVideoPage.objShareableApps,"Share popup")) {
		logger.info("Upon clicking share icon available sharing options should be displayed.");	
		extent.extentLoggerPass("", "Upon clicking share icon available sharing options should be displayed.");	
	}
	else {
		logger.info("Upon clicking share icon available sharing options should be displayed.");	
		extent.extentLoggerFail("", "Upon clicking share icon available sharing options should be displayed.");	
	}
	navigateToHomePage();
	}
}

public void shareOptionPlaylist_T2983(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2983 -Verify user can able to share the playlist by selecting any of the sharing options.");
	System.out.println("T2983");
	extent.extentLogger(" ", "T2983");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);
	click(HipiDiscoverPage.objPlaylistShareBtn,"Playlist share button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareableApps,10);
	click(HipiDiscoverPage.objMoreBtn,"Share More button");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistShareUrl,10);
	if(verifyElementExist(HipiDiscoverPage.objPlaylistShareUrl,"Playlist url")) {
		logger.info("User should be able to share the playlist be selecting sharing options.");	
		extent.extentLoggerPass("", "User should be able to share the playlist be selecting sharing options.");	
	}
	else {
		logger.info("User should be able to share the playlist be selecting sharing options.");	
		extent.extentLoggerFail("", "User should be able to share the playlist be selecting sharing options.");	
	}
	navigateToHomePage();
	}
}

public void playlistCrossIcon_T2985(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2985 -Verify the availability of Cross 'X' icon displayed on the playlist popup.");
	System.out.println("T2985");
	extent.extentLogger(" ", "T2985");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	if(verifyElementExist(HipiDiscoverPage.objPlaylistCrossBtn,"Playlist cross icon")) {
		logger.info("Cross 'X' icon should be displayed on the playlist popup.");	
		extent.extentLoggerPass("", "Cross 'X' icon should be displayed on the playlist popup.");	
	}
	else {
		logger.info("Cross 'X' icon should be displayed on the playlist popup.");	
		extent.extentLoggerFail("", "Cross 'X' icon should be displayed on the playlist popup.");	
	}
	navigateToHomePage();
	}
}

public void playlistCrossIconValidation_T2986(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2986 -Verify the clickable of Cross 'X' icon displayed on the playlist popup.");
	System.out.println("T2986");
	extent.extentLogger(" ", "T2986");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	click(HipiDiscoverPage.objPlaylistCrossBtn,"Playlist cross icon");
	waitTime(2000);
	if(verifyElementNotExist(HipiDiscoverPage.objPlaylistPopup)) {
		logger.info("Upon clicking Cross 'X' icon playlist popup should be closed.");	
		extent.extentLoggerPass("", "Upon clicking Cross 'X' icon playlist popup should be closed.");	
	}
	else {
		logger.info("Upon clicking Cross 'X' icon playlist popup should be closed.");	
		extent.extentLoggerFail("", "Upon clicking Cross 'X' icon playlist popup should be closed.");	
	}
	navigateToHomePage();
	}
}

public void playlistBackButtonValidation_T2987(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2987 -Verify the playlist popup upon tapping device back button.");
	System.out.println("T2987");
	extent.extentLogger(" ", "T2987");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	Back(1);
	waitTime(2000);
	if(verifyElementNotExist(HipiDiscoverPage.objPlaylistPopup)) {
		logger.info("Playlist popup should be closed upon tapping device back button.");	
		extent.extentLoggerPass("", "Playlist popup should be closed upon tapping device back button.");	
	}
	else {
		logger.info("Playlist popup should be closed upon tapping device back button.");	
		extent.extentLoggerFail("", "Playlist popup should be closed upon tapping device back button.");	
	}
	navigateToHomePage();
	}
}

public void touchOutsidePlaylist_T2988(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2988 -Verify the playlist popup upon tapping anywhere on the screen outside the popup.");
	System.out.println("T2988");
	extent.extentLogger(" ", "T2988");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	click(HipiDiscoverPage.objTouchOutside,"Touching outside");
	
	waitTime(2000);
	if(verifyElementNotExist(HipiDiscoverPage.objPlaylistPopup)) {
		logger.info("Playlist popup should be closed upon tapping anywhere on the screen outside the playlist popup");	
		extent.extentLoggerPass("", "Playlist popup should be closed upon tapping anywhere on the screen outside the playlist popup");	
	}
	else {
		logger.info("Playlist popup should be closed upon tapping anywhere on the screen outside the playlist popup");	
		extent.extentLoggerFail("", "Playlist popup should be closed upon tapping anywhere on the screen outside the playlist popup");	
	}
	navigateToHomePage();
	}
}

public void scrollPlaylist_T2989(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T2989 -Verify user can able to scroll the videos displayed in the playlist popup.");
	System.out.println("T2989");
	extent.extentLogger(" ", "T2989");
	
	click(HipiHomePage.objDiscoverButton, "Discover Button");	
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objDiscoverSearchBar, "Search Box");
	waitTime(2000);
	type(HipiDiscoverPage.objDiscoverSearchInbox, "Permanent Roommates", "Type value");
	waitTime(2000);
	verifyElementPresentAndClick(HipiDiscoverPage.objSearchResult, "Search result");
    verifyElementPresentAndClick(HipiDiscoverPage.objFirstSearchedResultSoundTab, "First user search result");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistOption,10);
	click(HipiDiscoverPage.objPlaylistOption,"Playlist option");
	
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistBottomIcon,10);
	click(HipiDiscoverPage.objPlaylistBottomIcon,"Playlist bottom icon");
	waitUntilElementDisplayed(HipiDiscoverPage.objPlaylistPopup,10);

	Swipe("UP",3);
	if(verifyElementExist(HipiDiscoverPage.objProgressBarLastVideo,"Progress bar last video")) {
		logger.info("User should able to scroll the videos displayed in the playlist popup.");	
		extent.extentLoggerPass("", "User should able to scroll the videos displayed in the playlist popup.");	
	}
	else {
		logger.info("User should able to scroll the videos displayed in the playlist popup.");	
		extent.extentLoggerFail("", "User should able to scroll the videos displayed in the playlist popup.");	
	}
	navigateToHomePage();
	}
}

public void youTubeHandleProfile_T3098(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3098 -Check if user is able to see an option to link Youtube profile on Edit Profile screen");
	System.out.println("T3098");
	extent.extentLogger(" ", "T3098");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	if(verifyElementExist(HipiProfilePage.objYouTubeLink,"YouTube link option"))  {
		logger.info("User should able to see an option to link Youtube profile on Edit Profile screen.");	
		extent.extentLoggerPass("", "User should able to see an option to link Youtube profile on Edit Profile screen.");	
	}
	
	else {
		logger.info("User should able to see an option to link Youtube profile on Edit Profile screen.");	
		extent.extentLoggerFail("", "User should able to see an option to link Youtube profile on Edit Profile screen.");	
	}
	
	}
	navigateToHomePage();
	}

public void youTubeHandleChannelProfile_T3100(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3100 -Check if user is able to see an option to link Youtube profile on Edit Profile screen");
	System.out.println("T3100");
	extent.extentLogger(" ", "T3100");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objYouTubeLink,"YouTube link option");
	waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
	if(verifyElementExist(HipiProfilePage.objYouTubeChannel,"Youtube channel page"))  {
		logger.info("User should be navigated to \"YouTube Channel\" sceen.");	
		extent.extentLoggerPass("", "User should be navigated to \"YouTube Channel\" sceen.");	
	}
	
	else {
		logger.info("User should be navigated to \"YouTube Channel\" sceen.");	
		extent.extentLoggerFail("", "User should be navigated to \"YouTube Channel\" sceen.");	
	}
	
	}
	navigateToHomePage();
	}

public void youTubeChannelCreationProfile_T3101(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3101 -Check user can able to enter maximum of 30 characters in 'YouTube Channel' screen.");
	System.out.println("T3101");
	extent.extentLogger(" ", "T3101");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objYouTubeLink,"YouTube value option");
	waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
		click(HipiProfilePage.objYouTubeLink,"YouTube value option");
		waitUntilElementDisplayed(HipiProfilePage.objUserTextFieldInName,10);
	}
	
	
	click(HipiProfilePage.objUserTextFieldInName,"Youtube channel text field");
	type(HipiProfilePage.objUserTextFieldInName,generateRandomString(30),"Youtube channel text field");
	click(HipiProfilePage.objSaveButton,"YouTube channel save button");
	waitUntilElementDisplayed(HipiSettingsPage.objPasswordPromptMessage,10);
	String instaHandleLinkedTxt = getText(HipiSettingsPage.objPasswordPromptMessage);
	System.out.println(instaHandleLinkedTxt);
	if(instaHandleLinkedTxt.equals("YouTube channel linked successfully"))  {
		logger.info("User should navigate back to the Edit Profile screen with the toast message \"YouTube Channel linked successfully\"");	
		extent.extentLoggerPass("", "User should navigate back to the Edit Profile screen with the toast message \"YouTube Channel linked successfully\"");	
	}
	
	else {
		logger.info("User should navigate back to the Edit Profile screen with the toast message \"YouTube Channel linked successfully\"");	
		extent.extentLoggerFail("", "User should navigate back to the Edit Profile screen with the toast message \"YouTube Channel linked successfully\"");	
	}
	
	}
	navigateToHomePage();
	}

public void youTubeHandleMoreThan30CharsProfile_T3102(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3102 -Verify user not be allowed to enter more than 30 characters in the YouTube channel screen.");
	System.out.println("T3102");
	extent.extentLogger(" ", "T3102");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objYouTubeLink,"YouTube value option");
	waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
		click(HipiProfilePage.objYouTubeLink,"YouTube value option");
		
	}
	
	waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
	String greaterThan30Chars = generateRandomString(40);
	click(HipiProfilePage.objUserTextFieldInName,"youtube channel text field");
	type(HipiProfilePage.objUserTextFieldInName,greaterThan30Chars,"youtube channel text field");
	String instaUserHandleText = getText(HipiProfilePage.objUserTextFieldInName);
	System.out.println(instaUserHandleText);
	if(instaUserHandleText.length()<=30 || !(instaUserHandleText.equals(greaterThan30Chars)))  {
		logger.info("User should not be allowed to enter more than 30 characters in YouTube channel screen.");	
		extent.extentLoggerPass("", "User should not be allowed to enter more than 30 characters in YouTube channel screen.");	
	}
	
	else {
		logger.info("User should not be allowed to enter more than 30 characters in YouTube channel screen.");	
		extent.extentLoggerFail("", "User should not be allowed to enter more than 30 characters in YouTube channel screen.");	
	}
	
	}
	navigateToHomePage();
	}

public void youtubeHandleSpecialCharsProfile_T3103(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3103 -Verify user can able to enter only letters, numbers, underscores and periods.");
	System.out.println("T3103");
	extent.extentLogger(" ", "T3103");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	click(HipiProfilePage.objEditProfile,"Edit Profile button");
	
	waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
	click(HipiProfilePage.objYouTubeLink,"YouTube value option");
	waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
	if(verifyElementExist(HipiProfilePage.objDelinkInsta,"Delink button")) {
		click(HipiProfilePage.objDelinkInsta,"Delink button");
		click(HipiProfilePage.objDelinkConfirmBtn,"Delink confirm button");
		waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
		click(HipiProfilePage.objYouTubeLink,"YouTube value option");
	}
	

	waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
	String specialCharsTxt = "&^#*(!@";
	click(HipiProfilePage.objUserTextFieldInName,"Youtube handle text field");
	type(HipiProfilePage.objUserTextFieldInName,specialCharsTxt,"Youtube handle text field");
	String instaUserHandleText = getText(HipiProfilePage.objUserTextFieldInName);
	System.out.println(instaUserHandleText);
	System.out.println(specialCharsTxt);
	if( !(instaUserHandleText.equals(specialCharsTxt)) && instaUserHandleText.equals("Enter your Youtube handle") )  {
		logger.info("User should be allowed to enter only letters, numbers, underscores and periods.");	
		extent.extentLoggerPass("", "User should be allowed to enter only letters, numbers, underscores and periods.");	
	}
	
	else {
		logger.info("User should be allowed to enter only letters, numbers, underscores and periods.");	
		extent.extentLoggerFail("", "User should be allowed to enter only letters, numbers, underscores and periods.");	
	}
	
	}
	navigateToHomePage();
	}

public void youtubeHandleIconProfile_T3107(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3107 -Check if user is able to see a button for Youtube profile, next to the 'Message' button in Profile screen.");
	System.out.println("T3107");
	extent.extentLogger(" ", "T3107");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	
	if(verifyElementExist(HipiProfilePage.objYouTubeIcon,"YouTube icon")) {
		flag = true;
	}
	else {
		click(HipiProfilePage.objEditProfile,"Edit Profile button");
		waitUntilElementDisplayed(HipiProfilePage.objSocialCategory,20);
		click(HipiProfilePage.objYouTubeLink,"YouTube value option");
		waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
		
		click(HipiProfilePage.objUserTextFieldInName,"Youtube handle text field");
		type(HipiProfilePage.objUserTextFieldInName,generateRandomString(5),"Youtube handle text field");
		click(HipiProfilePage.objSaveButton,"YouTube channel save button");
		waitUntilElementDisplayed(HipiSettingsPage.objPasswordPromptMessage,10);
		Back(1);
		
		waitUntilElementDisplayed(HipiProfilePage.objYouTubeIcon,10);
		if(verifyElementExist(HipiProfilePage.objYouTubeIcon,"YouTube icon")) {
			flag = true;
		}
	}
	
	if(flag)  {
		logger.info("User should able to see a YouTube option next to message in Profile screen.");	
		extent.extentLoggerPass("", "User should able to see a YouTube option next to message in Profile screen.");	
	}
	
	else {
		logger.info("User should able to see a YouTube option next to message in Profile screen.");	
		extent.extentLoggerFail("", "User should able to see a YouTube option next to message in Profile screen.");	
	}
	
	}
	navigateToHomePage();
	}

public void youtubeIconValidationInternetOffProfile_T3112(String userType) throws Exception {
	
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3112 -Check whether user getting a toast message post tapping on Youtube button without internet connection");
	System.out.println("T3112");
	extent.extentLogger(" ", "T3112");
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	waitUntilElementDisplayed(HipiProfilePage.objEditProfile,10);
	
	
	if(verifyElementExist(HipiProfilePage.objYouTubeIcon,"YouTube icon")) {
		setWifiConnectionToONOFF("OFF");
		click(HipiProfilePage.objYouTubeIcon,"YouTube icon");
		waitUntilElementDisplayed(HipiProfilePage.objInternetOffTxt,10);
		
		if(verifyElementExist(HipiProfilePage.objInternetOffTxt,"Internet off toast")) {
			flag = true;
		}
	}
	
	else {
		click(HipiProfilePage.objEditProfile,"Edit Profile button");
		waitUntilElementDisplayed(HipiProfilePage.objYouTubeLink,10);
		click(HipiProfilePage.objYouTubeLink,"YouTube value option");
		waitUntilElementDisplayed(HipiProfilePage.objYouTubeChannel,10);
		click(HipiProfilePage.objUserTextFieldInName,"Youtube handle text field");
		type(HipiProfilePage.objUserTextFieldInName,generateRandomString(5),"Youtube handle text field");
		click(HipiProfilePage.objSaveButton,"YouTube channel save button");
		Back(1);
		setWifiConnectionToONOFF("OFF");
		click(HipiProfilePage.objYouTubeIcon,"YouTube icon");
		waitUntilElementDisplayed(HipiProfilePage.objInternetOffTxt,10);
		
		if(verifyElementExist(HipiProfilePage.objInternetOffTxt,"Internet off toast")) {
			flag = true;
		}
	}
	
	if(flag )  {
		logger.info("User should get an toast network error message when user taps on Youtube button without internet connection");	
		extent.extentLoggerPass("", "User should get an toast network error message when user taps on Youtube button without internet connection");	
	}
	
	else {
		logger.info("User should get an toast network error message when user taps on Youtube button without internet connection");	
		extent.extentLoggerFail("", "User should get an toast network error message when user taps on Youtube button without internet connection");	
	}
	
	}
	setWifiConnectionToONOFF("ON");
	navigateToHomePage();
	}

public void pinUIProfile_T3212(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3212 - Check the UI of pin videos.");
	System.out.println("T3212");
	extent.extentLogger(" ", "T3212");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,40);
	Back(1);
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objFirstPublishedVideo,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstPublishedVideo, "First published video");
	waitUntilElementDisplayed(HipiCreateVideoPage.objProfileVideoShareBtn,20);
	click(HipiCreateVideoPage.objProfileVideoShareBtn,"Profile video share button");
	
	
	if(verifyElementExist(HipiCreateVideoPage.objPinVideo,"Pin icon") && verifyElementExist(HipiCreateVideoPage.objPinText,"Pin text") )  {
		logger.info("User should able to see the following details in my profile tab\r\n"
				+ " 1. pin icon and \"Pin\" text");	
		extent.extentLoggerPass("", "User should able to see the following details in my profile tab\r\n"
				+ " 1. pin icon and \"Pin\" text");	
	}
	
	else {
		logger.info("User should able to see the following details in my profile tab\r\n"
				+ " 1. pin icon and \"Pin\" text");	
		extent.extentLoggerFail("", "User should able to see the following details in my profile tab\r\n"
				+ " 1. pin icon and \"Pin\" text");	
	}
	navigateToHomePage();
}
	
}

public void UnpinUIProfile_T3213(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3213 - Check the UI of the unpin videos.");
	System.out.println("T3213");
	extent.extentLogger(" ", "T3213");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,40);
	Back(1);
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objFirstPublishedVideo,10);
	
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstPublishedVideo, "First published video");
	waitUntilElementDisplayed(HipiCreateVideoPage.objProfileVideoShareBtn,20);
	click(HipiCreateVideoPage.objProfileVideoShareBtn,"Profile video share button");
	
	while(!(verifyElementExist(HipiCreateVideoPage.objUnpinText,"UnPin text"))){
		click(HipiCreateVideoPage.objPinVideo,"Pin icon");
	}
	if(verifyElementExist(HipiCreateVideoPage.objPinVideo,"UnPin icon") && verifyElementExist(HipiCreateVideoPage.objUnpinText,"UnPin text") )  {
		logger.info("User should able to see the following details in my profile tab\r\n"
				+ " Unpin icon and Unpin text\r\n"
				+ " Note: by tapping upon the pin icon it will turn to\r\n"
				+ " text as unpin and filled as color depends on user action");	
		extent.extentLoggerPass("", "User should able to see the following details in my profile tab\r\n"
				+ " Unpin icon and Unpin text\r\n"
				+ " Note: by tapping upon the pin icon it will turn to\r\n"
				+ " text as unpin and filled as color depends on user action");	
	}
	
	else {
		logger.info("User should able to see the following details in my profile tab\r\n"
				+ " Unpin icon and Unpin text\r\n"
				+ " Note: by tapping upon the pin icon it will turn to\r\n"
				+ " text as unpin and filled as color depends on user action");	
		extent.extentLoggerFail("", "User should able to see the following details in my profile tab\r\n"
				+ " Unpin icon and Unpin text\r\n"
				+ " Note: by tapping upon the pin icon it will turn to\r\n"
				+ " text as unpin and filled as color depends on user action");	
	}
	
	click(HipiCreateVideoPage.objPinVideo,"Pin icon");
	navigateToHomePage();
}
	
}

public void pinToastProfile_T3216(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3216 - Verify when the user taps upon the pin option user should able to see the toast message as \"Video pinned on top of your profile\".");
	System.out.println("T3216");
	extent.extentLogger(" ", "T3216");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,40);
	Back(1);
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objFirstPublishedVideo,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstPublishedVideo, "First published video");
	waitUntilElementDisplayed(HipiCreateVideoPage.objProfileVideoShareBtn,20);
	click(HipiCreateVideoPage.objProfileVideoShareBtn,"Profile video share button");
	
	while(!(verifyElementExist(HipiCreateVideoPage.objUnpinText,"UnPin text"))){
		click(HipiCreateVideoPage.objPinVideo,"Pin icon");
	}
	
	String pinSuccesffulToastTxt = getText(HipiCreateVideoPage.objToastMsg);
	if(pinSuccesffulToastTxt.equals("Video pinned on your profile. Please check after sometime."))  {
		logger.info("Users should able to see the toast message \"video pinned on top of your profile\".");	
		extent.extentLoggerPass("", "Users should able to see the toast message \"video pinned on top of your profile\".");	
	}
	
	else {
		logger.info("Users should able to see the toast message \"video pinned on top of your profile\".");	
		extent.extentLoggerFail("", "Users should able to see the toast message \"video pinned on top of your profile\".");	
	}
	
	navigateToHomePage();
}
	
}

public void pinnedVideoProfile_T3217(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3218 - Verify when the user taps upon the public video in My Profile user should able to see on the top of my profile with label as ‘Pinned'.");
	System.out.println("T3218");
	extent.extentLogger(" ", "T3218");
	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiProfilePage.objPinTxt,10);
	if(verifyElementExist(HipiProfilePage.objPinTxt,"Pinned text"))  {
		logger.info("User should able to see pinned video on the top of my profile with label as ‘Pinned");	
		extent.extentLoggerPass("", "User should able to see pinned video on the top of my profile with label as ‘Pinned");	
	}
	
	else {
		logger.info("User should able to see pinned video on the top of my profile with label as ‘Pinned");	
		extent.extentLoggerFail("", "User should able to see pinned video on the top of my profile with label as ‘Pinned");	
	}
	navigateToHomePage();
}
	
}

public void pinnedVideoOtherProfile_T3218(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3218 - Verify unknown user can able to pin or unpin the some pinned videos in a public video tab in my profile screen");
	System.out.println("T3218");
	extent.extentLogger(" ", "T3218");
	
	click(HipiHomePage.objDescription,"User handle");
	waitUntilElementDisplayed(HipiProfilePage.objProfileHeader,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstPublishedVideo, "First published video");
	waitUntilElementDisplayed(HipiCreateVideoPage.objProfileVideoShareBtn,10);
	click(HipiCreateVideoPage.objProfileVideoShareBtn,"Profile video share button");
	
	if(verifyElementNotExist(HipiCreateVideoPage.objPinVideo ))  {
		logger.info("An unknown user should not be able to pin or unpin the video in my profile tab");	
		extent.extentLoggerPass("", "An unknown user should not be able to pin or unpin the video in my profile tab");	
	}
	
	else {
		logger.info("An unknown user should not be able to pin or unpin the video in my profile tab");	
		extent.extentLoggerFail("", "An unknown user should not be able to pin or unpin the video in my profile tab");	
	}
	navigateToHomePage();
}
	
}

public void pinUnpinProfile_T3222(String userType) throws Exception {
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3222 - Verify when user tapping upon the Unpin option should see a toast message as 'Video pinned from profile\"");
	System.out.println("T3222");
	extent.extentLogger(" ", "T3222");
	
	navigateToCreatorScreen();
	verifyElementPresentAndClick(HipiCreateVideoPage.objrecordbtn, "Record button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objNextButton,20);
	
	click(HipiCreateVideoPage.objNextButton,"Next button");
	waitUntilElementDisplayed(HipiCreateVideoPage.objEnglishLanguage,15);

	click(HipiCreateVideoPage.objEnglishLanguage,"English language");
	click(HipiCreateVideoPage.objUploadPostBtn,"Post button");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objShareMessage,40);
	Back(1);
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	waitUntilElementDisplayed(HipiCreateVideoPage.objFirstPublishedVideo,10);
	verifyElementPresentAndClick(HipiCreateVideoPage.objFirstPublishedVideo, "First published video");
	waitUntilElementDisplayed(HipiCreateVideoPage.objProfileVideoShareBtn,20);
	click(HipiCreateVideoPage.objProfileVideoShareBtn,"Profile video share button");
	
	while(!(verifyElementExist(HipiCreateVideoPage.objUnpinText,"UnPin text"))){
		click(HipiCreateVideoPage.objPinVideo,"Pin icon");
	}
	
	while(!(verifyElementExist(HipiCreateVideoPage.objPinText,"Pin text"))){
		click(HipiCreateVideoPage.objPinVideo,"Pin icon");
	}
	
	while(!(verifyElementExist(HipiCreateVideoPage.objUnpinText,"UnPin text"))){
		click(HipiCreateVideoPage.objPinVideo,"Pin icon");
	}
	String pinSuccesffulToastTxt = getText(HipiCreateVideoPage.objToastMsg);
	if(pinSuccesffulToastTxt.equals("Video pinned on your profile. Please check after sometime."))  {
		logger.info("Users should able to see toast message as 'Video pinned from profile\" on tapping upon the Unpin option");	
		extent.extentLoggerPass("", "Users should able to see toast message as 'Video pinned from profile\" on tapping upon the Unpin option");	
	}
	
	else {
		logger.info("Users should able to see toast message as 'Video pinned from profile\" on tapping upon the Unpin option");	
		extent.extentLoggerFail("", "Users should able to see toast message as 'Video pinned from profile\" on tapping upon the Unpin option");	
	}
	
	navigateToHomePage();
}
	
}
public void pinnedVideoProfile_T3223(String userType) throws Exception {
	Boolean flag = false;
	if(userType.equalsIgnoreCase("NonSubscribedUser"))
	{
	extent.HeaderChildNode("T3223 - Verify user should not able to see no longer the video as pinned video on my profile");
	System.out.println("T3223");
	extent.extentLogger(" ", "T3223");
	
	
	verifyElementPresentAndClick(AMDHomePage.objProfileIcon, "Profile Icon");
	
	if(verifyElementExist(HipiProfilePage.objPinTxt,"Pinned text")) {
	while(verifyElementExist(HipiProfilePage.objPinTxt,"Pinned text")) {
		click(HipiProfilePage.objPinTxt,"Pinned text");
		click(HipiCreateVideoPage.objProfileVideoShareBtn,"Profile video share button");
		while(!(verifyElementExist(HipiCreateVideoPage.objPinText,"Pin text"))){
			click(HipiCreateVideoPage.objPinVideo,"Pin icon");
		}
		Back(2);
		flag = true;
		
	}
	}
	else {
		flag = true;
	}
	if(flag)  {
		logger.info("User should not able to see no longer the videos as Pinned video on my profile tab");	
		extent.extentLoggerPass("", "User should not able to see no longer the videos as Pinned video on my profile tab");	
	}
	
	else {
		logger.info("User should not able to see no longer the videos as Pinned video on my profile tab");	
		extent.extentLoggerFail("", "User should not able to see no longer the videos as Pinned video on my profile tab");	
	}
	navigateToHomePage();
}
	
}

public void rewardsV2_guest_T57(String userType) throws Exception{
	
	Boolean flag = false;
	if(userType.equalsIgnoreCase("Guest"))
	{
		extent.HeaderChildNode("Guest user - Verify that user should get the scratched card again on the feed rail when he/she not performed any action");
		System.out.println("T57");
		extent.extentLogger("Guest user - Verify that user should get the scratched card again on the feed rail when he/she not performed any action", "T57");
		//resetAdId();
		//relaunch(true);
	flag = verifyScratchCardGuest();
	//PartialSwipeDummy("UP",1);
	//PartialSwipe("DOWN",1);
	 if(verifyElementExist(HipiRewardsV2Page.objUnlockAward,"Unlock award"))
	 {
		 logger.info("Scratched card should be shown to user on the feed rail unless & until Feed refresh or Restart the session again to the guest user when user scroll to next video without redeeming");	
			extent.extentLoggerPass("Rewards V2","Scratched card should be shown to user on the feed rail unless & until Feed refresh or Restart the session again to the guest user when user scroll to next video without redeeming");
		
			}else {
				 logger.info("Scratched card should be shown to user on the feed rail unless & until Feed refresh or Restart the session again to the guest user when user scroll to next video without redeeming");	
				extent.extentLoggerFail("Rewards V2", "Scratched card should be shown to user on the feed rail unless & until Feed refresh or Restart the session again to the guest user when user scroll to next video without redeeming");
		
	 }
	 
	 
	}
	
	
}

public boolean verifyScratchCardGuest() throws Exception{
	Boolean flag = false;
	
	for(int i = 0;i<=20;i++) {
		Swipe("UP",1);
		
		if(verifyElementExist(HipiLoginPage.objGenderDropDown,"Gender dropdown")) {
			click(HipiLoginPage.objGenderDropDown,"Gender dropdown");
			waitUntilElementDisplayed(HipiLoginPage.objMale,2);
			click(HipiLoginPage.objMale,"Male option");
			//waitUntilElementDisplayed(HipiLoginPage.objDoneGenderHomePage,5);
			//click(HipiLoginPage.objDoneGenderHomePage,"Done Button");
			
		}
		
		if(verifyElementExist(HipiRewardsV2Page.objUnlockAward,"Unlock award")) {
			flag = true;
			break;
		}
		
	}
	
	return flag;
	
}

public void randomEmailOtp(String randomMail) throws Exception{
	  AndroidDriver driver = (AndroidDriver)getDriver();

	    Map<String, Object> params = new HashMap();

	    params.put("url", "https://yopmail.com/en/");

	        params.put("package", "com.android.chrome");
	    driver.executeScript("mobile:deepLink", new Object[]{params});
	
	waitTime(3000);
	if(waitUntilElementDisplayed(HipiLoginPage.objAcceptCookies,2)) {
		click(HipiLoginPage.objAcceptCookies,"Accept cookies");
	}
	click(HipiLoginPage.objEmailInput,"Yopmail email input");
	waitTime(3000);
	type(HipiLoginPage.objEmailInput,randomMail,"Yopmail email input");
	click(HipiLoginPage.objmailSubmit,"submit");
	waitTime(3000);
	click(HipiLoginPage.objInbox,"First mail");
	
	waitUntilElementDisplayed(HipiLoginPage.objFirstMail,10);
	String otp = getDriver().findElement(HipiLoginPage.objFirstMail).getText().substring(0,4);
	System.out.println(otp);
	String[] otpArray = otp.split("");
	System.out.println(otpArray[0]);
	getDriver().activateApp("com.zee5.hipi");
	waitTime(4000);
	click(HipiLoginPage.objFirstDigit,"Enter otp");
	type(HipiLoginPage.objFirstDigit,otpArray[0],"Enter otp");
	click(HipiLoginPage.objSecondDigit,"Enter otp");
	type(HipiLoginPage.objSecondDigit,otpArray[1],"Enter otp");
	click(HipiLoginPage.objThirdDigit,"Enter otp");
	type(HipiLoginPage.objThirdDigit,otpArray[2],"Enter otp");
	click(HipiLoginPage.objFourthDigit,"Enter otp");
	type(HipiLoginPage.objFourthDigit,otpArray[3],"Enter otp");
	
	waitTime(2000);
	click(HipiLoginPage.objVerifyOTPCTA,"Verify OTP CTA");
	waitTime(2000);
}

public String signUpWithRandomMail() throws Exception{
	
	
	waitUntilElementDisplayed(HipiLoginPage.objUsePhoneOrEmail,10);
	click(HipiLoginPage.objUsePhoneOrEmail,"Use Phone or Email option");
	waitUntilElementDisplayed(HipiLoginPage.objSignUpScreenTittle,10);
	String randomEmail = "vikashp@yopmail.com";
	type(HipiLoginPage.objEmailIDOrMobileNumberFileld,"vikashp@yopmail.com","Email id or phone number field");
	waitTime(3000);
	click(HipiLoginPage.objProceedButton,"Proceed button");
	//click(HipiLoginPage.objProceedButton,"Proceed button");
	waitTime(3000);
	/*waitUntilElementDisplayed(HipiLoginPage.objSignUpTitle,5);
	type(HipiLoginPage.objFullNameTextField,generateRandomString(5) + " asa","Full name field");
	type(HipiLoginPage.objAgeField,"35","Age text field");
	click(HipiLoginPage.objGenderDropDown,"Gender dropdown");
	waitUntilElementDisplayed(HipiLoginPage.objMale,5);
	click(HipiLoginPage.objMale,"Male");
	click(HipiLoginPage.objCompleteCTA,"Sign up button");*/
	waitUntilElementDisplayed(HipiLoginPage.objVerifyOTPHeader,10);
	
	return randomEmail;
}

///////////////////////////////MPWA BrowserStack//////////////////////////////////////////////////////

public void mpwaStart() throws Exception{
	extent.HeaderChildNode("Launching hipi and check Progress bar");

		getDriver().removeApp("com.zee5.hipi");
	    Map<String, Object> params = new HashMap();

	    params.put("url", "https://hipi.co.in");

	        params.put("package", "com.android.chrome");
	   getDriver().executeScript("mobile:deepLink", new Object[]{params});
	   
	   getDriver().rotate(ScreenOrientation.PORTRAIT);
		waitUntilElementDisplayed(MPWAHomePage.objForYou, 20);
		waitTime(15000);
			//JSClick(MPWAHomePage.objAcceptAllCookies,"Accept all cookies");
		TimeStamptapiOSAtCoOrdinates(350,1600,1);
		
}

public  void launchApptimeBrowserStack() throws Exception {

	Time_ExcelUpdate.TestCaseIDNode("MPWA TC001");
	//			Time_ExcelUpdate.SlNoNode("1");
	Time_ExcelUpdate.ModuleNode("FeedArrival");
	Time_ExcelUpdate.TestCaseSummaryNode1("Feed Screen launch time.");
	Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
	extent.HeaderChildNode("Launching hipi PWA");
	
	//new com.business.zee.Zee5ApplicasterHipiNeoBusinessLogic("zee");
	  //AndroidDriver driver = (AndroidDriver)getDriver();
   
	//getURl("https://hipi.co.in/");
	Instant start = Instant.now();
	//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);
	extent.extentLogger("", "clicked on hipi at Time----- "+ start);
	logger.info("clicked on hipi at Time----- "+ start);
	//			waitTime(10000);
	//			TimeStampSwipe("UP", 1);
	//			waitTime(4000);
	
	//clickElementWithWebLocator(MPWAHomePage.objForYou);
	waitUntilElementDisplayed(MPWAHomePage.objForYou, 20);		
	//			screencapture();
	Instant end = Instant.now();
	Duration timeElapsed = Duration.between(start, end);
	extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
	System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
	//			extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");

	String Processingtimesec=Long.toString(timeElapsed.getSeconds());
	String Processingtimemilli=Long.toString(timeElapsed.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "Feed screen seen  at Time----- " + end);

}

public  void launchApp_And_Check_ProgressBarBrowserStack() throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC002");
	//			Time_ExcelUpdate.SlNoNode("1");
	Time_ExcelUpdate.ModuleNode("FeedArrival");
	Time_ExcelUpdate.TestCaseSummaryNode1("Feed Screen Progress bar launch time.");
	//			Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
	extent.HeaderChildNode("Launching hipi and check Progress bar");

	//			extent.HeaderChildNode("Launch hipi app");

	Instant start = Instant.now();
	//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);
	//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);

	TimeStampwaitForElementDisplayediOS(MPWAHomePage.objProgressBar, 10, "Progress Bar");		
	//			screencapture();
	Instant end = Instant.now();
	Duration timeElapsed = Duration.between(start, end);
	extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
	System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
	extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");

	String Processingtimesec=Long.toString(timeElapsed.getSeconds());
	String Processingtimemilli=Long.toString(timeElapsed.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "Feed screen seen  at Time----- " + end);

}

public void verifyProgressBarBrowserStack() throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC003");
	//			Time_ExcelUpdate.SlNoNode("1");
	Time_ExcelUpdate.TestCaseSummaryNode1("Verify Progress bar is moving");
	Time_ExcelUpdate.ModuleNode("Verify Progress bar is moving");
	//			Time_ExcelUpdate.ExpectedProcessingTime("3.75 Sec");
	extent.HeaderChildNode("Launching hipi and check Progress bar");

	//			extent.HeaderChildNode("Launch hipi app");
	TimeStampwaitForElementDisplayediOS(MPWAHomePage.objProgressBar, 10, "Progress Bar");	

	String str1 = getAttributValue("style", MPWAHomePage.objProgressBar);
	System.out.println(str1);
	waitTime(5000);
	String str2 = getAttributValue("style", MPWAHomePage.objProgressBarID);
	System.out.println(str2);
	if (!str1.equals(str2)) {
		Time_ExcelUpdate.TestCaseSummaryNode1("progress bar is moving Properly");
		System.out.println("progress bar is moving Properly");
	}else {
		Time_ExcelUpdate.TestCaseSummaryNode1("progress bar is not moving Properly");
		System.out.println("progress bar is not moving Properly");
	}


	//			Instant start = Instant.now();
	//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);
	//			extent.extentLogger("", "clicked on hipi at Time----- "+ start);


	////			screencapture();
	//			Instant end = Instant.now();
	//			Duration timeElapsed = Duration.between(start, end);
	//			extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds");
	//			System.out.println("Time taken in Seconds : "+timeElapsed.getSeconds()+" Seconds" );
	//			extent.HeaderChildNode("the arrival time of feed screen from splash screen " +"Time taken in milliseconds : "+timeElapsed.toMillis()+" milliSeconds");
	//			
	//			String Processingtimesec=Long.toString(timeElapsed.getSeconds());
	//			String Processingtimemilli=Long.toString(timeElapsed.toMillis());	
	//			Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	//			extent.extentLogger("", "Feed screen seen  at Time----- " + end);

}

public void SwipeUpForNextVideoAnimation(String userType) throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC004");
//	Time_ExcelUpdate.SlNoNode("1");
	Time_ExcelUpdate.ModuleNode("MPWA - Feed");
//	Time_ExcelUpdate.TestCaseSummaryNode1("Verify Swipe up for next video Animation");
	extent.HeaderChildNode("MPWA - Verify Swipe up for next video Animation");
	
	waitUntilElementDisplayed(MPWAHomePage.objSwipeUpForNextVideo, 20);
	
	if(TimeStampverifyElementExist(MPWAHomePage.objSwipeUpForNextVideo, "Swipe Up For Next Video")){
		logger.info("MPWA - User is able to see Swipe Up For Next Video Animation");	
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - User is able to see Swipe Up For Next Video Animation");
		extent.extentLoggerPass("", "MPWA - User is able to see Swipe Up For Next Video Animation");
	}else {
		logger.info("MPWA - User is able to see Swipe Up For Next Video Animation");	
//		extent.extentLoggerFail("", "User is not able to Logout application");
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - User is not able to see Swipe Up For Next Video Animation");

	}
	}
	
public void MpwaDiscoverScreenLoadTime() throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC006");
//	Time_ExcelUpdate.SlNoNode("4");
	Time_ExcelUpdate.ModuleNode("MPWA - Discover");
	Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");
	TimeStampSwipe("UP", 1);
	Time_ExcelUpdate.TestCaseSummaryNode1("Discover screen load time");
	extent.HeaderChildNode("MPWA - Discover screen load time");
	waitUntilElementDisplayed(MPWAHomePage.objDiscoverButton, 5);
	TimeStampverifyElementPresentAndClick(MPWAHomePage.objDiscoverButton, "Discover Button");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
	if(waitUntilElementDisplayed(MPWADiscoverPage.objFirstProfileName, 10)) {
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);
	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");

	extent.HeaderChildNode("<b>Discover screen Processing time: " + processingTime+"<b>");
	}else {
		Time_ExcelUpdate.timeStampNode("MPWA - Discover screen is not displayed");
		extent.extentLoggerFail("", "MPWA - Discover screen is not displayed");	
	}
	TimeStampnavigateToHomePage();
//	TimeStampBack(1);
//	waitTime(5000);
	
}

public void	AutoSuggestionTimeMpwa(String userName) throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC007");
//	Time_ExcelUpdate.SlNoNode("4");
	Time_ExcelUpdate.ModuleNode("MPWA - Discover");
	Time_ExcelUpdate.ExpectedProcessingTime("2 Sec");

	Time_ExcelUpdate.TestCaseSummaryNode1("Auto suggestion time.");
	extent.HeaderChildNode("MPWA - Auto suggestion time.");
	TimeStampSwipe("UP", 1);
	waitUntilElementDisplayed(MPWAHomePage.objDiscoverButton, 5);
	TimeStampverifyElementPresentAndClick(MPWAHomePage.objDiscoverButton, "Discover Button");
	waitTime(4000);
	TimeStampverifyElementPresentAndClick(MPWADiscoverPage.objSearchTab, "Send text ");
	waitTime(4000);
	TimeStamptype(MPWADiscoverPage.objSearchTab, userName, "Type value");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	Date startTime = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
	if(waitUntilElementDisplayed(MPWADiscoverPage.objListOfSearchResult, 10)) {
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);
	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
//	extent.extentLogger("", "<b>Processing time: " + processingTime+"<b>");
	extent.extentLogger("", "<b> MPWA -  Auto suggestion Processing time: " + processingTime+"<b>");
//	extent.HeaderChildNode("<b> Auto suggestion Processing time: " + processingTime+"<b>");
	}else {
		Time_ExcelUpdate.timeStampNode("MPWA - Auto suggestion result is not displayed");
		extent.extentLoggerFail("", "MPWA - Auto suggestion result is not displayed");
	}
	TimeStampnavigateToHomePage();
//	TimeStampBack(1);
//	waitTime(5000);
}

public void OnClickingBannerScreenLoadTimeMpwa(String userType) throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC008");
	Time_ExcelUpdate.ModuleNode("MPWA - Discover");
	Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");

	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - On clicking Banner, screen load time.");
	extent.HeaderChildNode("MPWA - On clicking Banner, screen load time.");
	TimeStampSwipe("UP", 1);
	waitUntilElementDisplayed(MPWAHomePage.objDiscoverButton, 5);
	TimeStampverifyElementPresentAndClick(MPWAHomePage.objDiscoverButton, "Discover Button");
//	waitTime(5000);
	waitUntilElementDisplayed(MPWADiscoverPage.objBannersBelowTheSearchField, 5);
	waitTime(5000);
	TimeStampverifyElementPresentAndClick(MPWADiscoverPage.objBannersBelowTheSearchField, "Video Banner");
	
	TimeStampBack(1);
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	Date startTime = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
	if(waitUntilElementDisplayed(MPWADiscoverPage.objBannersBelowTheSearchField, 20)) {
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);
	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "<b> MPWA - Processing time: " + processingTime+"<b>");
//	extent.HeaderChildNode("<b>Banner screen Processing time: " + processingTime+"<b>");
//	TimeStampBack(1);
//	waitTime(5000);
//	TimeStampBack(1);
//	waitTime(5000);
	}else {
		Time_ExcelUpdate.timeStampNode("MPWA - On clicking Banner, screen load time is not displayed");
		extent.extentLoggerFail("", "MPWA - On clicking Banner, screen load time is not displayed");
	}
	TimeStampnavigateToHomePage();
}

public void hashtagDetailPageTimeMPWA() throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC009");
	Time_ExcelUpdate.ModuleNode("MPWA - Discover");
	Time_ExcelUpdate.ExpectedProcessingTime("2.5 Sec");

	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - hashtag detail page time.");
	extent.HeaderChildNode("MPWA - hashtag detail page time.");
	TimeStampSwipe("UP", 1);
	waitUntilElementDisplayed(MPWAHomePage.objDiscoverButton, 5);
	TimeStampverifyElementPresentAndClick(MPWAHomePage.objDiscoverButton, "Discover Button");
	waitUntilElementDisplayed(MPWADiscoverPage.objBannersBelowTheSearchField, 5);
	TimeStampclick(MPWADiscoverPage.objMoreButtonTrendingOnHipi, "More Button");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	Date startTime = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
	if(waitUntilElementDisplayed(MPWADiscoverPage.objBannerHeader, 10)) {
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);
	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "<b> MPWA - Hashtag detail page Processing time: " + processingTime+"<b>");
//	extent.HeaderChildNode("<b>Hashtag detail page Processing time: " + processingTime+"<b>");
//	TimeStampBack(1);
//	waitTime(5000);
//	TimeStampBack(1);
//	waitTime(5000);
}else {
	Time_ExcelUpdate.timeStampNode("MPWA - hashtag detail page time is not displayed");
	extent.extentLoggerFail("", "MPWA - hashtag detail page time is not displayed");
}
	TimeStampnavigateToHomePage();
} 

public void SearchScreenTimePostSearchingAKeywordMpwa(String name) throws Exception {
	Time_ExcelUpdate.TestCaseIDNode("MPWA TC011");
	Time_ExcelUpdate.ModuleNode("MPWA - Discover");
	Time_ExcelUpdate.ExpectedProcessingTime("4.5 Sec");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Search screen time post searching a keyword");
	extent.HeaderChildNode("MPWA - Search screen time post searching a keyword");
	TimeStampSwipe("UP", 1);
	waitUntilElementDisplayed(MPWAHomePage.objDiscoverButton, 5);
	TimeStampverifyElementPresentAndClick(MPWAHomePage.objDiscoverButton, "Discover Button");
	waitUntilElementDisplayed(MPWADiscoverPage.objBannersBelowTheSearchField, 5);
	TimeStampverifyElementPresentAndClick(MPWADiscoverPage.objSearchTab, "Search Box");
	waitTime(4000);
	TimeStamptype(MPWADiscoverPage.objSearchTab, name, "Type value");
//	TimeStamphideKeyboard();
	waitTime(3000);
	TimeStampclick(MPWADiscoverPage.objListOfSearchResult, "Search result");
	Instant start=Instant.now();
	logger.info("Start Time : " + start);
//	Date startTime = new Date();
//	logger.info("Start Time : " + getDateDetails(startTime));
//	extent.extentLogger("", "<b>Start Time : " + getDateDetails(startTime)+"<b>");
	if(waitUntilElementDisplayed(MPWADiscoverPage.objSearchTab, 10)) {
	Instant end=Instant.now();
	logger.info("End Time : " + end);
//	extent.extentLogger("", "<b>End Time : " + end+"<b>");
	Duration processingTime = Duration.between(start, end);
	logger.info("Processing time: " + processingTime);
	String Processingtimesec=Long.toString(processingTime.getSeconds());
	String Processingtimemilli=Long.toString(processingTime.toMillis());	
	Time_ExcelUpdate.timeStampNode(Processingtimesec+"."+Processingtimemilli + " Sec");
	extent.extentLogger("", "<b> MPWA - Search screen time post searching a keyword Processing time: " + processingTime+"<b>");
//	extent.HeaderChildNode("<b>Search screen time post searching a keyword Processing time: " + processingTime+"<b>");
//	TimeStampBack(1);
//	waitTime(5000);
//	TimeStampBack(1);
//	waitTime(5000);
}else {
	Time_ExcelUpdate.timeStampNode("MPWA - Search screen time post searching a keyword is not displayed");
	extent.extentLoggerFail("", "MPWA - Search screen time post searching a keyword is not displayed");
}
	TimeStampnavigateToHomePage();
}

public void searchResultsMpwa(String SearchItem,String TCID) throws Exception {
	
	extent.HeaderChildNode("MPWA - Search Result for "+SearchItem);
	String Suggestions1="";
	String Suggestions2="";
	String Profile1="";
	String Profile2="";
	String Video1="";
	String Video2="";
	String Video3="";
	String Video4="";
	String Hashtags1="";
	String Hashtags2="";
	String Sounds1="";
	String Sounds2="";
	
	logger.info("MPWA - Search Result for "+SearchItem);
	Time_ExcelUpdate.TestCaseIDNode(TCID);
	Time_ExcelUpdate.ModuleNode("MPWA - Search Suggetions: "+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Search Suggetions: "+SearchItem);
	TimeStampSwipe("UP", 1);
//	waitTime(2000);
	waitUntilElementDisplayed(MPWAHomePage.objDiscoverButton, 5);
	TimeStampverifyElementPresentAndClick(MPWAHomePage.objDiscoverButton, "Discover Button");
	waitUntilElementDisplayed(MPWADiscoverPage.objBannersBelowTheSearchField, 5);
	TimeStampverifyElementPresentAndClick(MPWADiscoverPage.objSearchTab, "Search Tab");
	waitTime(3000);
	TimeStamptype(MPWADiscoverPage.objSearchTab, SearchItem, "Type value");
	waitTime(5000);
	
	if(TimeStampverifyElementExist(MPWADiscoverPage.objsearchResults(1), "suggestions")) {
	Suggestions1=getText(MPWADiscoverPage.objsearchResults(1));
	System.out.println(Suggestions1);
	Suggestions2=getText(MPWADiscoverPage.objsearchResults(2));
	System.out.println(Suggestions2);
	waitTime(3000);
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1 "+Suggestions1);
	extent.extentLogger("","Search  1st Suggestion done");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2 "+Suggestions2);
	}else {
		
		//Time_ExcelUpdate.TestCaseSummaryNode1("Suggestion  not present");
		
		logger.info(TCID + "Suggestion  not present");
	}
	
	TimeStampverifyElementPresentAndClick(MPWADiscoverPage.objListOfSearchResult, "Search result");
////	waitTime(3000);
	waitUntilElementDisplayed(MPWADiscoverPage.objListFirstuserProfile(1), 10);
////	TimeStampwaitForElementDisplayedFastPolling(IOSHiPiNeoDiscoverPage.objiosProfileInDiscoverpage(1), 100, "results after search");
	extent.extentLogger("","Search done");
	
	Time_ExcelUpdate.ModuleNode("MPWA - Top Users Section :"+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Top Users Result: "+SearchItem);
	Profile1=getText(MPWADiscoverPage.objListFirstuserProfile(1));
	System.out.println(Profile1);
	Profile2=getText(MPWADiscoverPage.objListFirstuserProfile(2));
	System.out.println(Profile2);
	waitTime(3000);
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1 "+Profile1);
	extent.extentLogger("","MPWA - Top Users 1 st profile name fetched");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2 "+Profile2);
	extent.extentLogger("","MPWA - Top Users 2nd profile name fetched");
	
	
	Time_ExcelUpdate.ModuleNode("MPWA - Top Videos Section:"+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Top Videos Result:"+SearchItem);
	waitTime(5000);
////	PartialSwipe("UP", 1);
//	if(TimeStampverifyElementExist(HipiDiscoverPage.objListOfVideos(1), "Videos in under Top section ")) {
//	Video1=getText(HipiDiscoverPage.objListOfVideos(1));
//	System.out.println(Video1);
//	Video2=getText(HipiDiscoverPage.objListOfVideos(2));
//	System.out.println(Video2);
	if(TimeStampverifyElementExist(MPWADiscoverPage.objListOfVideos(1), "Videos in under Top section ")) {
	waitTime(3000);
	TimeStampclick(MPWADiscoverPage.objListOfVideos(1),"1 st video");
	waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
	String Video1Username=getText(MPWAHomePage.objUserNameInFeedScreen);
	TimeStampBack(1);
	waitTime(5000);
	
	TimeStampclick(MPWADiscoverPage.objListOfVideos(2),"2nd video");
	waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
	String Video2Username=getText(MPWAHomePage.objUserNameInFeedScreen);
	TimeStampBack(1);
	waitTime(5000);
	
	TimeStampclick(MPWADiscoverPage.objListOfVideos(3),"3 rd video");
	waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
	String Video3Username=getText(MPWAHomePage.objUserNameInFeedScreen);
	TimeStampBack(1);
	waitTime(5000);

	Time_ExcelUpdate.TestCaseSummaryNode1("1 st video is from  "+Video1Username);
	extent.extentLogger("","Top videos 1 st video name fetched");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2 nd video is from "+Video2Username);
extent.extentLogger("","MPWA - Top videos 2nd video name fetched");

	Time_ExcelUpdate.TestCaseSummaryNode1("3 rd video is from "+Video3Username);
	extent.extentLogger("","MPWA - Top videos 3rd video name fetched");
//	
	}else {
		Time_ExcelUpdate.TestCaseIDNode(TCID);
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Videos not present");
		extent.extentLoggerFail("","MPWA - Videos  not present");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Videos  not present");
//		extent.extentLoggerFail("","Videos  not present");
	}
//	waitTime(4000);
//	PartialSwipe("UP", 1);
	Time_ExcelUpdate.ModuleNode("MPWA - Top Hashtag Section: "+SearchItem);
////	TimeStampSwipeTillElement(IOSHiPiNeoDiscoverPage.objiosHashtagSectionUnderTopresults, "Hashtags");
	waitTime(3000);
	if(TimeStampverifyElementExist(MPWADiscoverPage.objListOfHashhtags(1), "Hashtags")) {
		
		Hashtags1=getText(MPWADiscoverPage.objListOfHashhtags(1));
		System.out.println(Hashtags1);
		Hashtags2=getText(MPWADiscoverPage.objListOfHashhtags(2));
		System.out.println(Hashtags2);
		waitTime(3000);
		
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1."+Hashtags1);
		extent.extentLogger("","1 st Hashtag fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2."+Hashtags2);
		extent.extentLogger("","2 nd Hashtag fetched");
		
		
	}else {
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Hashtag  not present");
		logger.info("MPWA - Hashtag  not present");
		
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Hashtag  not present");
//		extent.extentLoggerFail("","Hashtag  not present");
	}
//	
//	
	waitTime(5000);
	TimeStampclick(MPWADiscoverPage.objUsersButton, "User Tab");
	waitUntilElementDisplayed(MPWADiscoverPage.objListUserProfile(1), 5);
	Time_ExcelUpdate.ModuleNode("Users Section: "+SearchItem);
	if(TimeStampverifyElementExist(MPWADiscoverPage.objListUserProfile(1), "Results under Users Tab")) {
	waitTime(3000);
	String UsersProfile1=getText(MPWADiscoverPage.objListUserProfile(1));
	String UsersProfile2=getText(MPWADiscoverPage.objListUserProfile(2));
	String UsersProfile3=getText(MPWADiscoverPage.objListUserProfile(3));
	String UsersProfile4=getText(MPWADiscoverPage.objListUserProfile(4));
	String UsersProfile5=getText(MPWADiscoverPage.objListUserProfile(5));
	
	
	Time_ExcelUpdate.TestCaseSummaryNode1("1."+UsersProfile1);
	extent.extentLogger("","1 st Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("2."+UsersProfile2);
	extent.extentLogger("","2 nd Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("3."+UsersProfile3);
	extent.extentLogger("","3rd Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("4."+UsersProfile4);
	extent.extentLogger("","4th Result under Users Tab");
	
	Time_ExcelUpdate.TestCaseSummaryNode1("5."+UsersProfile5);
	extent.extentLogger("","5 th Result under Users Tab");
	
	
	}else {
	
		//Time_ExcelUpdate.TestCaseSummaryNode1("Users tap result  not present");
		extent.extentLoggerFail("","MPWA - Users tap result  not present");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Users tap result  not present");
		extent.extentLoggerFail("","MPWA - Users tap result  not present");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Users tap result  not present");
		extent.extentLoggerFail("","MPWA - Users tap result  not present");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Users tap result  not present");
		extent.extentLoggerFail("","MPWA - Users tap result  not present");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - Users tap result  not present");
		extent.extentLoggerFail("","MPWA - Users tap result  not present");
		
	}
	
/*	
	waitTime(5000);
	
	Time_ExcelUpdate.ModuleNode("Videos Section: "+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("Videos section in search Result: "+SearchItem);
	

		TimeStampclick(MPWADiscoverPage.objVideosButton, "Video Tab");
		waitTime(3000);	

		if(TimeStampverifyElementExist(MPWADiscoverPage.objListOfVideosInVideoStab(1),"Videos Result")){
		waitTime(3000);
		TimeStampclick(MPWADiscoverPage.objListOfVideosInVideoStab(1),"1 st video");
		waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
		Video1=getText(MPWAHomePage.objUserNameInFeedScreen);
		TimeStampBack(1);
		waitUntilElementDisplayed(MPWADiscoverPage.objListOfVideosInVideoStab(1), 10);
		
		TimeStampclick(MPWADiscoverPage.objListOfVideosInVideoStab(2),"2nd video");
		waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
		 Video2=getText(MPWAHomePage.objUserNameInFeedScreen);
		TimeStampBack(1);
		waitUntilElementDisplayed(MPWADiscoverPage.objListOfVideosInVideoStab(1), 10);
		
		TimeStampclick(MPWADiscoverPage.objListOfVideosInVideoStab(3),"3 rd video");
		waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
		 Video3=getText(MPWAHomePage.objUserNameInFeedScreen);
		TimeStampBack(1);
		waitUntilElementDisplayed(MPWADiscoverPage.objListOfVideosInVideoStab(1), 10);
		TimeStampclick(MPWADiscoverPage.objListOfVideosInVideoStab(4),"4 th video");
		waitUntilElementDisplayed(MPWAHomePage.objUserNameInFeedScreen, 5);
		Video4=getText(MPWAHomePage.objUserNameInFeedScreen);
		TimeStampBack(1);
		waitUntilElementDisplayed(MPWADiscoverPage.objListOfVideosInVideoStab(1), 10);

		
		Time_ExcelUpdate.TestCaseSummaryNode1("1 st video is from  "+Video1);
		extent.extentLogger(""," in videos section 1 st video name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2 nd video is from "+Video2);
		extent.extentLogger(""," in videos section 2 nd video name fetched");
		
		
		
		Time_ExcelUpdate.TestCaseSummaryNode1("3 rd video is from "+Video3);
		extent.extentLogger(""," in videos section 3 rd video name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("4 th video is from "+Video4);
		extent.extentLogger(""," in videos section 4 th video name fetched");
		}else {
			
			Time_ExcelUpdate.TestCaseSummaryNode1("Videos  not present");
			extent.extentLoggerFail("","Videos  not present");
			
			
		}
*/
		waitTime(5000);
	
	Time_ExcelUpdate.ModuleNode("MPWA - HashTag Section: "+SearchItem);
	Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - HashTag Section in Search results: "+SearchItem);
	
////	TimeStampverifyElementExist(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Hashtags"), "HashTags Tab in search result ");
////		TimeStampclick(IOSHiPiNeoDiscoverPage.objiosTabnameInDiscoverSearchResultsPage("Hashtags"), "Hashtags");
		TimeStampclick(MPWADiscoverPage.objHashhtagsButton, "Hashtags Tab");	
		waitUntilElementDisplayed(MPWADiscoverPage.objListofFirstHashtags(0), 5);
		if(TimeStampverifyElementExist(MPWADiscoverPage.objListofFirstHashtags(0), "Hashtag result")) {
		String HashTag1=getText(MPWADiscoverPage.objListofFirstHashtags(0));
		System.out.println(HashTag1);
		String HashTag2=getText(MPWADiscoverPage.objListofFirstHashtags(1));
		System.out.println(HashTag2);
		
		String HashTag3=getText(MPWADiscoverPage.objListofFirstHashtags(2));
		System.out.println(HashTag3);
		
		String HashTag4=getText(MPWADiscoverPage.objListofFirstHashtags(3));
		System.out.println(HashTag4);
		
		String HashTag5=getText(MPWADiscoverPage.objListofFirstHashtags(4));
		System.out.println(HashTag5);
		
		Time_ExcelUpdate.TestCaseSummaryNode1("1. "+HashTag1);
		extent.extentLogger("","MPWA -  in HashTag section 1 st HashTag name fetched");
		
		Time_ExcelUpdate.TestCaseSummaryNode1("2. "+HashTag2);
		extent.extentLogger("","MPWA -  in HashTag section 2 nd HashTag name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("3. "+HashTag3);
		extent.extentLogger("","MPWA -  in HashTag section 3 rd HashTag name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("4. "+HashTag4);
		extent.extentLogger("","MPWA -  in HashTag section 4 th HashTag name fetched");
		

		Time_ExcelUpdate.TestCaseSummaryNode1("5. "+HashTag5);
		extent.extentLogger("","MPWA -  in HashTag section 5 th HashTag name fetched");
		
		
		}else {
			
			Time_ExcelUpdate.TestCaseSummaryNode1("MPWA - HashTag  not present");
			extent.extentLoggerFail("","MPWA - HashTag  not present");
			
			
		}
//		TimeStampBack(1);
//		waitTime(5000);
//		TimeStampBack(1);
//		waitTime(5000);
		TimeStampnavigateToHomePage();
		
		
}
}//click(HipiHomePage.objDescription,"User handle");
//waitUntilElementDisplayed(HipiProfilePage.objProfileHeader,10);